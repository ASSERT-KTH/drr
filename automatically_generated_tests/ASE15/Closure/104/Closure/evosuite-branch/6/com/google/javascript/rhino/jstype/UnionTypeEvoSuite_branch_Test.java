/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:17:25 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class UnionTypeEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(unionType0);
      
      int int0 = unionType0.hashCode();
      assertEquals(0, int0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      HashSet<JSType> hashSet1 = null;
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet1);
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNumberValueType());
      assertNotNull(unionType1);
      
      unionType0.setResolvedTypeInternal(unionType1);
      assertFalse(unionType0.equals((Object)unionType1));
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotSame(unionType0, unionType1);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>(int0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertNotSame(unionType0, unionType1);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotSame(unionType0, unionType1);
      
      UnionType unionType2 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType0.equals((Object)unionType2));
      assertFalse(unionType2.equals((Object)unionType0));
      assertFalse(unionType2.equals((Object)unionType1));
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType2.isTemplateType());
      assertEquals(false, unionType2.isNoType());
      assertEquals(true, unionType2.isUnionType());
      assertEquals(false, unionType2.isEmptyType());
      assertEquals(false, unionType2.isNamedType());
      assertEquals(false, unionType2.isBooleanValueType());
      assertEquals(false, unionType2.isResolved());
      assertEquals(false, unionType2.isFunctionType());
      assertEquals(false, unionType2.isNoObjectType());
      assertEquals(false, unionType2.isNumberValueType());
      assertEquals(false, unionType2.isNullType());
      assertEquals(false, unionType2.isVoidType());
      assertEquals(false, unionType2.isRecordType());
      assertEquals(false, unionType2.isAllType());
      assertEquals(false, unionType2.isStringValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(unionType2);
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType0, unionType2);
      assertNotSame(unionType2, unionType0);
      assertNotSame(unionType2, unionType1);
      
      UnionType unionType3 = (UnionType)unionType2.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) emptyScope0);
      assertFalse(unionType0.equals((Object)unionType3));
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType0.equals((Object)unionType2));
      assertFalse(unionType2.equals((Object)unionType0));
      assertFalse(unionType2.equals((Object)unionType1));
      assertFalse(unionType3.equals((Object)unionType0));
      assertFalse(unionType3.equals((Object)unionType1));
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType2.isTemplateType());
      assertEquals(false, unionType2.isNoType());
      assertEquals(true, unionType2.isUnionType());
      assertEquals(false, unionType2.isEmptyType());
      assertEquals(false, unionType2.isNamedType());
      assertEquals(false, unionType2.isBooleanValueType());
      assertEquals(false, unionType2.isFunctionType());
      assertEquals(false, unionType2.isNoObjectType());
      assertEquals(false, unionType2.isNumberValueType());
      assertEquals(false, unionType2.isNullType());
      assertEquals(false, unionType2.isVoidType());
      assertEquals(false, unionType2.isRecordType());
      assertEquals(false, unionType2.isAllType());
      assertEquals(true, unionType2.isResolved());
      assertEquals(false, unionType2.isStringValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType3.isRecordType());
      assertEquals(false, unionType3.isNoType());
      assertEquals(false, unionType3.isNullType());
      assertEquals(true, unionType3.isUnionType());
      assertEquals(false, unionType3.isEmptyType());
      assertEquals(true, unionType3.isResolved());
      assertEquals(false, unionType3.isBooleanValueType());
      assertEquals(false, unionType3.isFunctionType());
      assertEquals(false, unionType3.isStringValueType());
      assertEquals(false, unionType3.isNumberValueType());
      assertEquals(false, unionType3.isVoidType());
      assertEquals(false, unionType3.isAllType());
      assertEquals(false, unionType3.isTemplateType());
      assertEquals(false, unionType3.isNoObjectType());
      assertEquals(false, unionType3.isNamedType());
      assertNotNull(unionType3);
      assertNotSame(unionType0, unionType3);
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType0, unionType2);
      assertSame(unionType2, unionType3);
      assertNotSame(unionType2, unionType0);
      assertNotSame(unionType2, unionType1);
      assertSame(unionType3, unionType2);
      assertNotSame(unionType3, unionType0);
      assertNotSame(unionType3, unionType1);
  }

  @Test
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertNotNull(unionType0);
      
      int int0 = unionType0.hashCode();
      assertEquals(0, int0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>(int0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertNotNull(unionType1);
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      
      UnionType unionType2 = (UnionType)unionType1.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) emptyScope0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType2));
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType2.equals((Object)unionType0));
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(true, unionType2.isResolved());
      assertEquals(false, unionType2.isNoObjectType());
      assertEquals(false, unionType2.isEmptyType());
      assertEquals(false, unionType2.isRecordType());
      assertEquals(false, unionType2.isVoidType());
      assertEquals(false, unionType2.isNullType());
      assertEquals(false, unionType2.isAllType());
      assertEquals(false, unionType2.isNamedType());
      assertEquals(false, unionType2.isBooleanValueType());
      assertEquals(false, unionType2.isFunctionType());
      assertEquals(true, unionType2.isUnionType());
      assertEquals(false, unionType2.isNoType());
      assertEquals(false, unionType2.isNumberValueType());
      assertEquals(false, unionType2.isStringValueType());
      assertEquals(false, unionType2.isTemplateType());
      assertNotNull(unionType2);
      assertSame(unionType1, unionType2);
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType2);
      assertNotSame(unionType0, unionType1);
      assertSame(unionType2, unionType1);
      assertNotSame(unionType2, unionType0);
  }

  @Test
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoObjectType());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, JSType>) hashMap0);
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(recordType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) recordType0);
      assertTrue(boolean0);
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[{  }]", linkedHashSet0.toString());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) voidType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[{  }]", linkedHashSet0.toString());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isStringValueType());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[undefined]", linkedHashSet0.toString());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) voidType0);
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test04()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNoObjectType());
      assertNotNull(nullType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNoObjectType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertNotNull(unionType0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) nullType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertNotNull(unionType0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, JSType>) hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isEmptyType());
      assertNotNull(recordType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) recordType0);
      assertTrue(boolean0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[{  }]", linkedHashSet0.toString());
      
      JSType.TypePair jSType_TypePair0 = recordType0.getTypesUnderEquality((JSType) unionType0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[{  }]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isObject());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEmptyType());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isObject());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, JSType>) hashMap0);
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(recordType0);
      
      JSType.TypePair jSType_TypePair0 = recordType0.getTypesUnderEquality((JSType) unionType0);
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isObject());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNumberValueType());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isObject());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNumberValueType());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, JSType>) hashMap0);
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(recordType0);
      
      boolean boolean1 = linkedHashSet0.add((JSType) recordType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(2, linkedHashSet0.size());
      assertEquals("[undefined, {  }]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(2, linkedHashSet0.size());
      assertEquals("[undefined, {  }]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("BOTH", booleanLiteralSet0.name());
      assertEquals(3, booleanLiteralSet0.ordinal());
      assertEquals("BOTH", booleanLiteralSet0.toString());
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isTemplateType());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.FALSE, booleanLiteralSet0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(2, booleanLiteralSet0.ordinal());
      assertEquals("FALSE", booleanLiteralSet0.toString());
      assertEquals("FALSE", booleanLiteralSet0.name());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
  }

  @Test
  public void test09()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertNotNull(nullType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertNotNull(unionType0);
      
      NoType noType0 = (NoType)unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isObject());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertNotNull(noType0);
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNullType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(true, voidType0.isVoidType());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNullType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(true, voidType0.isVoidType());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, JSType>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isUnionType());
      assertNotNull(recordType0);
      
      boolean boolean1 = linkedHashSet0.add((JSType) recordType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals("[undefined, {  }]", linkedHashSet0.toString());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      String string0 = unionType0.toString();
      assertEquals("(undefined|{  })", string0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals("[undefined, {  }]", linkedHashSet0.toString());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertNotNull(nullType0);
      
      NoType noType0 = (NoType)nullType0.dereference();
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isResolved());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertNotNull(noType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertNotNull(unionType0);
      
      NullType nullType1 = (NullType)unionType0.getRestrictedUnion((JSType) noType0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isResolved());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType1.isNoType());
      assertEquals(false, nullType1.isVoidType());
      assertEquals("null", nullType1.toString());
      assertEquals(true, nullType1.isNullable());
      assertEquals(false, nullType1.isResolved());
      assertEquals(false, nullType1.isNoObjectType());
      assertEquals(false, nullType1.isNumberValueType());
      assertEquals(false, nullType1.isObject());
      assertEquals(false, nullType1.isUnionType());
      assertEquals(false, nullType1.isRecordType());
      assertEquals(false, nullType1.isFunctionType());
      assertEquals(true, nullType1.matchesStringContext());
      assertEquals(false, nullType1.isTemplateType());
      assertEquals(false, nullType1.isNamedType());
      assertEquals(true, nullType1.isNullType());
      assertEquals(false, nullType1.isEmptyType());
      assertEquals(BooleanLiteralSet.FALSE, nullType1.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType1.isBooleanValueType());
      assertEquals(false, nullType1.isStringValueType());
      assertEquals(false, nullType1.matchesObjectContext());
      assertEquals(false, nullType1.isAllType());
      assertEquals(true, nullType1.matchesNumberContext());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertNotNull(nullType1);
      assertSame(nullType0, nullType1);
      assertSame(nullType1, nullType0);
  }

  @Test
  public void test12()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isRegexpType();
      assertFalse(boolean0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[?]", hashSet0.toString());
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getRestrictedUnion((JSType) unknownType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNamedType());
      assertNotNull(nullType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertNotNull(unionType0);
      
      NoType noType0 = (NoType)unionType0.getRestrictedUnion((JSType) unionType0);
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals("None", noType0.toString());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertNotNull(noType0);
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.matchesObjectContext());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.matchesObjectContext());
      
      boolean boolean1 = unionType0.contains((JSType) voidType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.matchesObjectContext());
  }

  @Test
  public void test15()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      boolean boolean0 = JSType.isSubtype(unionType0, unionType0);
      assertTrue(boolean0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertNotNull(unknownType0);
      
      boolean boolean1 = unionType0.contains((JSType) unknownType0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.hasCachedValues());
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(unionType1);
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotSame(unionType0, unionType1);
      
      NoObjectType noObjectType0 = (NoObjectType)unionType1.meet(unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isConstructor());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isInterface());
      assertNotNull(noObjectType0);
      assertNotSame(unionType1, unionType0);
  }

  @Test
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isFunctionType();
      assertFalse(boolean0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertNotNull(unknownType0);
      
      // Undeclared exception!
      try {
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowEquality((JSType) unknownType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isUnionType());
      assertNotNull(nullType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(unionType0);
      
      NoType noType0 = (NoType)unionType0.meet(nullType0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNullType());
      assertNotNull(noType0);
  }

  @Test
  public void test19()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertNotNull(nullType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertNotNull(unionType0);
      
      NullType nullType1 = (NullType)unionType0.meet(nullType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, nullType1.matchesObjectContext());
      assertEquals(false, nullType1.isUnionType());
      assertEquals(true, nullType1.matchesNumberContext());
      assertEquals(false, nullType1.isNamedType());
      assertEquals(true, nullType1.isNullType());
      assertEquals(false, nullType1.isBooleanValueType());
      assertEquals(false, nullType1.isFunctionType());
      assertEquals(false, nullType1.isVoidType());
      assertEquals(false, nullType1.isNumberValueType());
      assertEquals(true, nullType1.matchesStringContext());
      assertEquals("null", nullType1.toString());
      assertEquals(false, nullType1.isRecordType());
      assertEquals(true, nullType1.isNullable());
      assertEquals(false, nullType1.isTemplateType());
      assertEquals(false, nullType1.isObject());
      assertEquals(false, nullType1.isAllType());
      assertEquals(false, nullType1.isResolved());
      assertEquals(false, nullType1.isNoObjectType());
      assertEquals(false, nullType1.isEmptyType());
      assertEquals(BooleanLiteralSet.FALSE, nullType1.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType1.isStringValueType());
      assertEquals(false, nullType1.isNoType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertNotNull(nullType1);
      assertSame(nullType1, nullType0);
      assertSame(nullType0, nullType1);
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isObject());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isObject());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNamedType());
      assertNotNull(numberType0);
      
      NoType noType0 = (NoType)numberType0.getGreatestSubtype((JSType) unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("None", noType0.toString());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesStringContext());
      assertNotNull(noType0);
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[5];
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertNotNull(booleanType0);
      
      jSTypeArray0[0] = (JSType) booleanType0;
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, jSTypeArray0[0].isStringValueType());
      assertEquals(false, jSTypeArray0[0].isObject());
      assertEquals(false, jSTypeArray0[0].isNoObjectType());
      assertEquals(false, jSTypeArray0[0].isNamedType());
      assertEquals(false, jSTypeArray0[0].isVoidType());
      assertEquals(false, jSTypeArray0[0].isNumberValueType());
      assertEquals(true, jSTypeArray0[0].isBooleanValueType());
      assertEquals(false, jSTypeArray0[0].isRecordType());
      assertEquals(false, jSTypeArray0[0].isFunctionType());
      assertEquals(false, jSTypeArray0[0].isUnionType());
      assertEquals(false, jSTypeArray0[0].isAllType());
      assertEquals(false, jSTypeArray0[0].isTemplateType());
      assertEquals(false, jSTypeArray0[0].isNoType());
      assertEquals(false, jSTypeArray0[0].isNullType());
      assertEquals(false, jSTypeArray0[0].isEmptyType());
      assertEquals(false, jSTypeArray0[0].isResolved());
      assertNotNull(jSTypeArray0[0]);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertNotNull(nullType0);
      
      NoType noType0 = (NoType)nullType0.dereference();
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isEmptyType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertNotNull(noType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, jSTypeArray0[0]);
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isEmptyType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, indexedType0.isObject());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNamedType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNoObjectType());
      assertEquals(false, indexedType0.isEmptyType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isAllType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNoType());
      assertEquals(false, indexedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertNotNull(indexedType0);
      
      jSTypeArray0[1] = (JSType) indexedType0;
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isEmptyType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, indexedType0.isObject());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNamedType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNoObjectType());
      assertEquals(false, indexedType0.isEmptyType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isAllType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNoType());
      assertEquals(false, indexedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, jSTypeArray0[1].isNullType());
      assertEquals(false, jSTypeArray0[1].isNoType());
      assertEquals(true, jSTypeArray0[1].isObject());
      assertEquals(false, jSTypeArray0[1].isTemplateType());
      assertEquals(false, jSTypeArray0[1].isFunctionType());
      assertEquals(false, jSTypeArray0[1].isEmptyType());
      assertEquals(false, jSTypeArray0[1].isVoidType());
      assertEquals(false, jSTypeArray0[1].isStringValueType());
      assertEquals(false, jSTypeArray0[1].isResolved());
      assertEquals(false, jSTypeArray0[1].isNumberValueType());
      assertEquals(false, jSTypeArray0[1].isBooleanValueType());
      assertEquals(false, jSTypeArray0[1].isAllType());
      assertEquals(false, jSTypeArray0[1].isRecordType());
      assertEquals(false, jSTypeArray0[1].isNoObjectType());
      assertEquals(false, jSTypeArray0[1].isNamedType());
      assertEquals(false, jSTypeArray0[1].isUnionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertNotNull(jSTypeArray0[1]);
      
      NoType noType1 = new NoType(jSTypeRegistry0);
      assertFalse(noType1.equals((Object)noType0));
      assertEquals(false, noType1.isResolved());
      assertEquals(false, noType1.isNamedType());
      assertEquals(false, noType1.isUnionType());
      assertEquals(true, noType1.isObject());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(false, noType1.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals("None", noType1.toString());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals(true, noType1.matchesNumberContext());
      assertNull(noType1.getReferenceName());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.isNullType());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(true, noType1.isConstructor());
      assertEquals(true, noType1.isNullable());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.isVoidType());
      assertEquals(true, noType1.isEmptyType());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isTemplateType());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isInterface());
      assertEquals(true, noType1.matchesStringContext());
      assertNotNull(noType1);
      assertNotSame(noType1, noType0);
      
      jSTypeArray0[2] = (JSType) noType1;
      assertEquals(false, noType1.isResolved());
      assertEquals(false, noType1.isNamedType());
      assertEquals(false, noType1.isUnionType());
      assertEquals(true, noType1.isObject());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(false, noType1.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals("None", noType1.toString());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals(true, noType1.matchesNumberContext());
      assertNull(noType1.getReferenceName());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.isNullType());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(true, noType1.isConstructor());
      assertEquals(true, noType1.isNullable());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.isVoidType());
      assertEquals(true, noType1.isEmptyType());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isTemplateType());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isInterface());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, jSTypeArray0[2].isNoObjectType());
      assertEquals(false, jSTypeArray0[2].isNumberValueType());
      assertEquals(true, jSTypeArray0[2].isNoType());
      assertEquals(false, jSTypeArray0[2].isNamedType());
      assertEquals(false, jSTypeArray0[2].isStringValueType());
      assertEquals(true, jSTypeArray0[2].isEmptyType());
      assertEquals(true, jSTypeArray0[2].isObject());
      assertEquals(false, jSTypeArray0[2].isFunctionType());
      assertEquals(false, jSTypeArray0[2].isResolved());
      assertEquals(false, jSTypeArray0[2].isUnionType());
      assertEquals(false, jSTypeArray0[2].isVoidType());
      assertEquals(false, jSTypeArray0[2].isNullType());
      assertEquals(false, jSTypeArray0[2].isAllType());
      assertEquals(false, jSTypeArray0[2].isTemplateType());
      assertEquals(false, jSTypeArray0[2].isBooleanValueType());
      assertEquals(false, jSTypeArray0[2].isRecordType());
      assertNotNull(jSTypeArray0[2]);
      
      jSTypeArray0[3] = (JSType) booleanType0;
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, jSTypeArray0[3].isNoObjectType());
      assertEquals(false, jSTypeArray0[3].isAllType());
      assertEquals(false, jSTypeArray0[3].isNumberValueType());
      assertEquals(false, jSTypeArray0[3].isRecordType());
      assertEquals(false, jSTypeArray0[3].isTemplateType());
      assertEquals(false, jSTypeArray0[3].isEmptyType());
      assertEquals(false, jSTypeArray0[3].isNamedType());
      assertEquals(false, jSTypeArray0[3].isFunctionType());
      assertEquals(false, jSTypeArray0[3].isStringValueType());
      assertEquals(false, jSTypeArray0[3].isObject());
      assertEquals(true, jSTypeArray0[3].isBooleanValueType());
      assertEquals(false, jSTypeArray0[3].isResolved());
      assertEquals(false, jSTypeArray0[3].isNoType());
      assertEquals(false, jSTypeArray0[3].isNullType());
      assertEquals(false, jSTypeArray0[3].isVoidType());
      assertEquals(false, jSTypeArray0[3].isUnionType());
      assertNotNull(jSTypeArray0[3]);
      
      String string0 = "(";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNotNull(errorFunctionType0);
      
      Node node0 = errorFunctionType0.getParametersNode();
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNotNull(node0);
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, jSTypeArray0[0]);
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isNamedType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isObject());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNotNull(arrowType0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      ArrowType arrowType1 = (ArrowType)arrowType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) emptyScope0);
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isNamedType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isObject());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(true, arrowType0.isResolved());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, arrowType1.isRecordType());
      assertEquals(false, arrowType1.isFunctionType());
      assertEquals(false, arrowType1.isNamedType());
      assertEquals(false, arrowType1.isUnionType());
      assertEquals(false, arrowType1.isNullType());
      assertEquals(false, arrowType1.isEmptyType());
      assertEquals(false, arrowType1.isTemplateType());
      assertEquals(false, arrowType1.isVoidType());
      assertEquals(false, arrowType1.isObject());
      assertEquals(true, arrowType1.isResolved());
      assertEquals(false, arrowType1.isNumberValueType());
      assertEquals(false, arrowType1.isNoObjectType());
      assertEquals(false, arrowType1.isNoType());
      assertEquals(false, arrowType1.isStringValueType());
      assertEquals(false, arrowType1.isAllType());
      assertEquals(false, arrowType1.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNotNull(arrowType1);
      assertSame(arrowType0, arrowType1);
      assertSame(arrowType1, arrowType0);
      
      jSTypeArray0[4] = (JSType) arrowType1;
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isNamedType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isObject());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(true, arrowType0.isResolved());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, jSTypeArray0[4].isNoType());
      assertEquals(false, jSTypeArray0[4].isTemplateType());
      assertEquals(false, jSTypeArray0[4].isObject());
      assertEquals(false, jSTypeArray0[4].isNamedType());
      assertEquals(false, jSTypeArray0[4].isNumberValueType());
      assertEquals(false, jSTypeArray0[4].isEmptyType());
      assertEquals(false, jSTypeArray0[4].isFunctionType());
      assertEquals(false, jSTypeArray0[4].isStringValueType());
      assertEquals(true, jSTypeArray0[4].isResolved());
      assertEquals(false, jSTypeArray0[4].isNoObjectType());
      assertEquals(false, jSTypeArray0[4].isVoidType());
      assertEquals(false, jSTypeArray0[4].isBooleanValueType());
      assertEquals(false, jSTypeArray0[4].isUnionType());
      assertEquals(false, jSTypeArray0[4].isAllType());
      assertEquals(false, jSTypeArray0[4].isRecordType());
      assertEquals(false, jSTypeArray0[4].isNullType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, arrowType1.isRecordType());
      assertEquals(false, arrowType1.isFunctionType());
      assertEquals(false, arrowType1.isNamedType());
      assertEquals(false, arrowType1.isUnionType());
      assertEquals(false, arrowType1.isNullType());
      assertEquals(false, arrowType1.isEmptyType());
      assertEquals(false, arrowType1.isTemplateType());
      assertEquals(false, arrowType1.isVoidType());
      assertEquals(false, arrowType1.isObject());
      assertEquals(true, arrowType1.isResolved());
      assertEquals(false, arrowType1.isNumberValueType());
      assertEquals(false, arrowType1.isNoObjectType());
      assertEquals(false, arrowType1.isNoType());
      assertEquals(false, arrowType1.isStringValueType());
      assertEquals(false, arrowType1.isAllType());
      assertEquals(false, arrowType1.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNotNull(jSTypeArray0[4]);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeArray0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertNotNull(unionType0);
      
      BooleanType booleanType1 = (BooleanType)JSType.getGreatestSubtype(unionType0, unionType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, booleanType1.isRecordType());
      assertEquals(false, booleanType1.isTemplateType());
      assertEquals(true, booleanType1.isResolved());
      assertEquals(false, booleanType1.isNumberValueType());
      assertEquals(false, booleanType1.isNullType());
      assertEquals(false, booleanType1.isNullable());
      assertEquals(false, booleanType1.isFunctionType());
      assertEquals(true, booleanType1.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType1.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType1.isObject());
      assertEquals(false, booleanType1.isNamedType());
      assertEquals(false, booleanType1.isNoObjectType());
      assertEquals(true, booleanType1.isBooleanValueType());
      assertEquals(false, booleanType1.isEmptyType());
      assertEquals(false, booleanType1.isStringValueType());
      assertEquals(false, booleanType1.isUnionType());
      assertEquals(true, booleanType1.matchesStringContext());
      assertEquals(true, booleanType1.matchesNumberContext());
      assertEquals("boolean", booleanType1.toString());
      assertEquals(false, booleanType1.isNoType());
      assertEquals(false, booleanType1.isAllType());
      assertEquals(false, booleanType1.isVoidType());
      assertNotNull(booleanType1);
      assertSame(booleanType1, booleanType0);
  }

  @Test
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(unionType1);
      assertNotSame(unionType1, unionType0);
      
      UnionType unionType2 = (UnionType)unionType1.getLeastSupertype((JSType) unionType0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType2));
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType2.equals((Object)unionType0));
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType2.isNullType());
      assertEquals(false, unionType2.isStringValueType());
      assertEquals(false, unionType2.isNoType());
      assertEquals(false, unionType2.isTemplateType());
      assertEquals(false, unionType2.isEmptyType());
      assertEquals(true, unionType2.isUnionType());
      assertEquals(false, unionType2.isBooleanValueType());
      assertEquals(false, unionType2.isNamedType());
      assertEquals(false, unionType2.isResolved());
      assertEquals(false, unionType2.isRecordType());
      assertEquals(false, unionType2.isFunctionType());
      assertEquals(false, unionType2.isNoObjectType());
      assertEquals(false, unionType2.isAllType());
      assertEquals(false, unionType2.isVoidType());
      assertEquals(false, unionType2.isNumberValueType());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(unionType2);
      assertSame(unionType1, unionType2);
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType2);
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType2, unionType0);
      assertSame(unionType2, unionType1);
  }

  @Test
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.matchesNumberContext());
      assertNotNull(voidType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.matchesNumberContext());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals("??", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isObject());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.matchesNumberContext());
      assertNotNull(unknownType0);
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals("??", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isObject());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined, ??]", linkedHashSet0.toString());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.matchesNumberContext());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined, ??]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isNamedType());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isObject());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isTemplateType());
      assertNotNull(stringType0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = stringType0.getLeastSupertype((JSType) unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertNotNull(unionType0);
      
      boolean boolean0 = JSType.isSubtype(unionType0, unionType0);
      assertTrue(boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertNotNull(unknownType0);
      
      UnknownType unknownType1 = (UnknownType)unionType0.getLeastSupertype((JSType) unknownType0);
      assertFalse(unknownType0.equals((Object)unknownType1));
      assertFalse(unknownType1.equals((Object)unknownType0));
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals("??", unknownType1.getReferenceName());
      assertEquals("??", unknownType1.toString());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(true, unknownType1.isCheckedUnknownType());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(true, unknownType1.isObject());
      assertEquals(false, unknownType1.isNamedType());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(false, unknownType1.isEmptyType());
      assertNotNull(unknownType1);
      assertNotSame(unknownType0, unknownType1);
      assertNotSame(unknownType1, unknownType0);
  }

  @Test
  public void test25()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isFunctionType();
      assertFalse(boolean0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(1, hashSet0.size());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowEquality((JSType) unionType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(1, hashSet0.size());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test26()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isRegexpType();
      assertFalse(boolean0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals("?", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals("?", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      
      boolean boolean2 = unionType0.isNullable();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
  }

  @Test
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isResolved());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNamedType());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isResolved());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNamedType());
      
      boolean boolean1 = unionType0.isNullable();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
  }

  @Test
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.matchesObjectContext());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.matchesObjectContext());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, JSType>) hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isNoObjectType());
      assertNotNull(recordType0);
      
      boolean boolean1 = linkedHashSet0.add((JSType) recordType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals("[undefined, {  }]", linkedHashSet0.toString());
      
      boolean boolean2 = unionType0.canTestForEqualityWith((JSType) recordType0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals("[undefined, {  }]", linkedHashSet0.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(23, jSTypeNativeArray0[0].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(23, jSTypeNativeArray0[1].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[1].name());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[0];
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[2].name());
      assertEquals(23, jSTypeNativeArray0[2].ordinal());
      
      jSTypeNativeArray0[3] = jSTypeNative0;
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals(23, jSTypeNativeArray0[3].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[3].name());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[2];
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[4].name());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals(23, jSTypeNativeArray0[4].ordinal());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[3];
      assertEquals(23, jSTypeNativeArray0[5].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[5].name());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.TYPE_ERROR_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[6] = jSTypeNative1;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals(34, jSTypeNativeArray0[6].ordinal());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[0];
      assertEquals(23, jSTypeNativeArray0[7].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[7].name());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertNotNull(unionType0);
      
      String string0 = "";
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, unionType0, string0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals("", enumElementType0.getReferenceName());
      assertEquals(true, enumElementType0.isObject());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(false, enumElementType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertNotNull(enumElementType0);
      
      JSType.TypePair jSType_TypePair0 = enumElementType0.getTypesUnderInequality((JSType) unionType0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(true, enumElementType0.hasCachedValues());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals("", enumElementType0.getReferenceName());
      assertEquals(true, enumElementType0.isObject());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(false, enumElementType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(unionType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertNotNull(unionType1);
      assertNotSame(unionType1, unionType0);
      
      NoType noType0 = (NoType)unionType1.dereference();
      assertFalse(unionType1.equals((Object)unionType0));
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getTemplateTypeName());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertNotNull(noType0);
      assertNotSame(unionType1, unionType0);
  }

  @Test
  public void test31()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isFunctionType();
      assertFalse(boolean0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isObject());
      assertEquals("?", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isObject());
      assertEquals("?", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      
      boolean boolean2 = unionType0.canBeCalled();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
  }

  @Test
  public void test32()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.toString());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertNotNull(nullType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.toString());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.canBeCalled();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
  }

  @Test
  public void test33()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isFunctionType();
      assertFalse(boolean0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      
      boolean boolean2 = unionType0.canAssignTo((JSType) unknownType0);
      assertTrue(boolean2);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
  }

  @Test
  public void test34()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isUnionType());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertNotNull(nullType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, nullType0.isUnionType());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.canAssignTo((JSType) nullType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, nullType0.isUnionType());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
  }

  @Test
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isFunctionType();
      assertFalse(boolean0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("?", unknownType0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      
      String string0 = "Y";
      UnknownType unknownType1 = (UnknownType)unionType0.findPropertyType(string0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(true, unknownType1.isObject());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(false, unknownType1.isCheckedUnknownType());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals("?", unknownType1.toString());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals("?", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.isNamedType());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(false, unknownType1.isEmptyType());
      assertNotNull(unknownType1);
      assertSame(unknownType1, unknownType0);
  }

  @Test
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "already specified useForNull";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, JSType>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNoObjectType());
      assertNotNull(recordType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) recordType0);
      assertTrue(boolean0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{  }]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{  }]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertNull(jSType0);
  }

  @Test
  public void test37()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isFunctionType());
      assertNotNull(nullType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertNotNull(unionType0);
      
      String string0 = "com.google.javascript.rhino.jstype.TernaryValue";
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertNull(jSType0);
  }

  @Test
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "already specified useForNull";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.isVoidType());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.isVoidType());
      
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertNull(jSType0);
  }

  @Test
  public void test39()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isRegexpType();
      assertFalse(boolean0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNativeObjectType());
      
      boolean boolean2 = unionType0.matchesObjectContext();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
  }

  @Test
  public void test40()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isObject());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isResolved());
      assertNotNull(nullType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isObject());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isResolved());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.matchesObjectContext();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
  }

  @Test
  public void test41()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(unionType1);
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertNotSame(unionType0, unionType1);
      
      boolean boolean1 = unionType1.matchesStringContext();
      assertFalse(boolean1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertNotSame(unionType1, unionType0);
  }

  @Test
  public void test42()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isFunctionType();
      assertFalse(boolean0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      boolean boolean2 = unionType0.matchesStringContext();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
  }

  @Test
  public void test43()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isTemplateType());
      assertNotNull(nullType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isTemplateType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.matchesInt32Context();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
  }

  @Test
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isStringValueType());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      boolean boolean1 = unionType0.matchesNumberContext();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
  }

  @Test
  public void test45()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isRegexpType();
      assertFalse(boolean0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      
      unionType0.forgiveUnknownNames();
      assertEquals("[?]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
  }

  @Test
  public void test46()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertNotNull(unionType0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isObject());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isUnionType());
      assertNotNull(noObjectType0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowEquality((JSType) noObjectType0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isObject());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isUnionType());
      assertNotNull(jSType_TypePair0);
  }
}
