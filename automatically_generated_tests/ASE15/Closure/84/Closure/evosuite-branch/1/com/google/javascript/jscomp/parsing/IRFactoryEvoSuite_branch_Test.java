/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:25:25 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Node;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.WhileLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.XmlPropRef;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.FileSystemHandling;
import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "c";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      AstRoot astRoot0 = new AstRoot();
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(astRoot0);
      
      Config config0 = null;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      ReturnStatement returnStatement0 = new ReturnStatement();
      assertEquals("4", returnStatement0.toString());
      assertEquals(-1, returnStatement0.getAbsolutePosition());
      assertNull(returnStatement0.getJsDoc());
      assertEquals(0, returnStatement0.depth());
      assertEquals(-1, returnStatement0.getPosition());
      assertEquals(4, returnStatement0.getType());
      assertEquals(-1, returnStatement0.getLineno());
      assertEquals(false, returnStatement0.hasChildren());
      assertEquals(1, returnStatement0.getLength());
      assertNotNull(returnStatement0);
      
      astRoot0.addChildrenToFront((Node) returnStatement0);
      assertEquals("4", returnStatement0.toString());
      assertEquals(-1, returnStatement0.getAbsolutePosition());
      assertNull(returnStatement0.getJsDoc());
      assertEquals(0, returnStatement0.depth());
      assertEquals(-1, returnStatement0.getPosition());
      assertEquals(4, returnStatement0.getType());
      assertEquals(-1, returnStatement0.getLineno());
      assertEquals(false, returnStatement0.hasChildren());
      assertEquals(1, returnStatement0.getLength());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertNotNull(node0);
  }

  @Test
  public void test1()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "7";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNotNull(astRoot0);
      
      Config config0 = null;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      int int0 = (-146);
      XmlPropRef xmlPropRef0 = new XmlPropRef(int0, int0);
      assertEquals(0, xmlPropRef0.depth());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-146, xmlPropRef0.getLength());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-146, xmlPropRef0.getAbsolutePosition());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-146, xmlPropRef0.getPosition());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertNotNull(xmlPropRef0);
      
      FunctionNode functionNode0 = new FunctionNode(int0);
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(false, functionNode0.getIgnoreDynamicScope());
      assertEquals(false, functionNode0.isGetter());
      assertEquals(-1, functionNode0.getEndLineno());
      assertNull(functionNode0.getJsDoc());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals("", functionNode0.getName());
      assertEquals(-1, functionNode0.getLp());
      assertNull(functionNode0.getSourceName());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertEquals(-146, functionNode0.getPosition());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(-1, functionNode0.getRp());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(-146, functionNode0.getAbsolutePosition());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(109, functionNode0.getType());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(1, functionNode0.getLength());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals("109", functionNode0.toString());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.depth());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertNotNull(functionNode0);
      
      functionNode0.addParam((AstNode) xmlPropRef0);
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(false, functionNode0.getIgnoreDynamicScope());
      assertEquals(false, functionNode0.isGetter());
      assertEquals(-1, functionNode0.getEndLineno());
      assertNull(functionNode0.getJsDoc());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals("", functionNode0.getName());
      assertEquals(-1, functionNode0.getLp());
      assertNull(functionNode0.getSourceName());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertEquals(-146, functionNode0.getPosition());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(-1, functionNode0.getRp());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(-146, functionNode0.getAbsolutePosition());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(109, functionNode0.getType());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(1, functionNode0.getLength());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals("109", functionNode0.toString());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.depth());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(1, xmlPropRef0.depth());
      assertEquals(-146, xmlPropRef0.getLength());
      assertEquals(0, xmlPropRef0.getPosition());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-146, xmlPropRef0.getAbsolutePosition());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getColonPos());
      
      astRoot0.addChild((AstNode) functionNode0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-144, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(false, functionNode0.getIgnoreDynamicScope());
      assertEquals(false, functionNode0.isGetter());
      assertEquals(-1, functionNode0.getEndLineno());
      assertNull(functionNode0.getJsDoc());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals("", functionNode0.getName());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(1, functionNode0.depth());
      assertNull(functionNode0.getSourceName());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(-1, functionNode0.getRp());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(-146, functionNode0.getAbsolutePosition());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(109, functionNode0.getType());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(1, functionNode0.getLength());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals("109", functionNode0.toString());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(-145, functionNode0.getPosition());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(false, functionNode0.isExpressionClosure());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "{HLH.x %Bbf(P<{]&S";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertNotNull(astRoot0);
      
      Config config0 = null;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertNotNull(node0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-2190);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-2190, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-2190, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertNotNull(astRoot0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "_X";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      Config config0 = new Config(set0, set0, boolean0, boolean0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      NumberLiteral numberLiteral0 = (NumberLiteral)Node.newNumber((double) int0);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals((-2190.0), numberLiteral0.getDouble(), 0.01D);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals((-2190.0), numberLiteral0.getNumber(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertNull(numberLiteral0.getJsDoc());
      assertNull(numberLiteral0.getValue());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-1, numberLiteral0.getPosition());
      assertNotNull(numberLiteral0);
      
      astRoot0.addChildrenToFront((Node) numberLiteral0);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals((-2190.0), numberLiteral0.getDouble(), 0.01D);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals((-2190.0), numberLiteral0.getNumber(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertNull(numberLiteral0.getJsDoc());
      assertNull(numberLiteral0.getValue());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-2190, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-2190, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-2190, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-2190, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertNotNull(node0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-2190);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-2190, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-2190, astRoot0.getPosition());
      assertNotNull(astRoot0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      NewExpression newExpression0 = new NewExpression(int0);
      assertEquals(-2190, newExpression0.getPosition());
      assertEquals(30, newExpression0.getType());
      assertEquals(1, newExpression0.getLength());
      assertEquals(-1, newExpression0.getRp());
      assertEquals("30", newExpression0.toString());
      assertNull(newExpression0.getJsDoc());
      assertEquals(-2190, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(0, newExpression0.depth());
      assertEquals(false, newExpression0.hasChildren());
      assertNotNull(newExpression0);
      
      astRoot0.addChildToFront((Node) newExpression0);
      assertEquals(0, astRoot0.depth());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-2190, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-2190, astRoot0.getPosition());
      assertEquals(-2190, newExpression0.getPosition());
      assertEquals(30, newExpression0.getType());
      assertEquals(1, newExpression0.getLength());
      assertEquals(-1, newExpression0.getRp());
      assertEquals("30", newExpression0.toString());
      assertNull(newExpression0.getJsDoc());
      assertEquals(-2190, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(0, newExpression0.depth());
      assertEquals(false, newExpression0.hasChildren());
      
      String string0 = "_X";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      Config config0 = new Config(set0, set0, boolean0, boolean0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ":v";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      AstRoot astRoot0 = new AstRoot();
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertNotNull(astRoot0);
      
      int int0 = (-106);
      WhileLoop whileLoop0 = new WhileLoop(int0, int0);
      assertEquals(-1, whileLoop0.getLp());
      assertEquals(0, whileLoop0.depth());
      assertEquals(-106, whileLoop0.getPosition());
      assertEquals("117", whileLoop0.toString());
      assertEquals(false, whileLoop0.hasChildren());
      assertNull(whileLoop0.getJsDoc());
      assertEquals(-106, whileLoop0.getLength());
      assertEquals(-1, whileLoop0.getLineno());
      assertEquals(117, whileLoop0.getType());
      assertEquals(-1, whileLoop0.getRp());
      assertEquals(-106, whileLoop0.getAbsolutePosition());
      assertNotNull(whileLoop0);
      
      astRoot0.addChildToBack((Node) whileLoop0);
      assertEquals(-1, whileLoop0.getLp());
      assertEquals(0, whileLoop0.depth());
      assertEquals(-106, whileLoop0.getPosition());
      assertEquals("117", whileLoop0.toString());
      assertEquals(false, whileLoop0.hasChildren());
      assertNull(whileLoop0.getJsDoc());
      assertEquals(-106, whileLoop0.getLength());
      assertEquals(-1, whileLoop0.getLineno());
      assertEquals(117, whileLoop0.getType());
      assertEquals(-1, whileLoop0.getRp());
      assertEquals(-106, whileLoop0.getAbsolutePosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      
      Config config0 = null;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
