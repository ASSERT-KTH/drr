/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:54:42 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckEventfulObjectDisposal;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ConstCheck;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.FunctionToBlockMutator;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.rhino.Node;
import java.util.LinkedList;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.FileSystemHandling;

import org.junit.runner.RunWith;

 
public class FunctionInjectorEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.closurePass);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, compilerOptions0.exportTestFunctions, compilerOptions0.checkSuspiciousCode, compilerOptions0.checkTypes);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotNull(functionInjector0);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.closurePass);
      
      functionInjector0.setKnownConstants(compilerOptions0.stripNamePrefixes);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.closurePass);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-522);
      String string0 = "y;~2jQ~zEOt%u4a";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDelProp());
      assertEquals(-522, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetElem());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isThrow());
      assertNotNull(node0);
      
      JSModule jSModule0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      LinkedList<FunctionInjector.Reference> linkedList0 = new LinkedList<FunctionInjector.Reference>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDelProp());
      assertEquals(-522, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetElem());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isThrow());
      assertNotNull(functionInjector_Reference0);
      
      boolean boolean1 = linkedList0.add(functionInjector_Reference0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDelProp());
      assertEquals(-522, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetElem());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isThrow());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Set<String> set0 = null;
      // Undeclared exception!
      try {
        boolean boolean2 = functionInjector0.inliningLowersCost(jSModule0, node0, linkedList0, set0, boolean1, boolean1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1222;
      String string0 = "~\\M;/hfcLw}Q";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChangeTime());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(1222, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      assertEquals(5006534, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(1222, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasChildren());
      assertEquals(1222, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      JSModule jSModule0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionToBlockMutator_LabelNameSupplier0);
      
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, (Supplier<String>) functionToBlockMutator_LabelNameSupplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      LinkedList<FunctionInjector.Reference> linkedList0 = new LinkedList<FunctionInjector.Reference>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasKeywords);
      
      boolean boolean1 = functionInjector0.inliningLowersCost(jSModule0, node0, linkedList0, compilerOptions0.stripNamePrefixes, compilerOptions0.removeUnusedClassProperties, compilerOptions0.reserveRawExports);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChangeTime());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(1222, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      assertEquals(5006534, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(1222, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasChildren());
      assertEquals(1222, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasKeywords);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-507);
      String string0 = "7r[)B";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(-507, node0.getType());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertNotNull(node0);
      
      JSModule jSModule0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      LinkedList<FunctionInjector.Reference> linkedList0 = new LinkedList<FunctionInjector.Reference>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(-507, node0.getType());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertNotNull(functionInjector_Reference0);
      
      boolean boolean1 = linkedList0.add(functionInjector_Reference0);
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(-507, node0.getType());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.foldConstants);
      
      // Undeclared exception!
      try {
        boolean boolean2 = functionInjector0.inliningLowersCost(jSModule0, node0, linkedList0, compilerOptions0.stripNamePrefixes, compilerOptions0.removeUnusedClassProperties, compilerOptions0.closurePass);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4() {}
//   @Test
//   public void test4()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(supplier0);
//       
//       String string0 = "arguments";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isContinue());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isParamList());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isWith());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isAssign());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isAdd());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNotNull(node0);
//       
//       boolean boolean0 = true;
//       boolean boolean1 = false;
//       FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean1);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//       assertNotNull(functionInjector0);
//       
//       ConstCheck constCheck0 = new ConstCheck((AbstractCompiler) compiler0);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNotNull(constCheck0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) constCheck0);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNotNull(nodeTraversal0);
//       
//       InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNotNull(inlineSimpleMethods0);
//       
//       Set<String> set0 = inlineSimpleMethods0.externMethods;
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertNotNull(set0);
//       
//       FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
//       // Undeclared exception!
//       try {
//         FunctionInjector.CanInlineResult functionInjector_CanInlineResult0 = functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, set0, functionInjector_InliningMode0, boolean1, boolean0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test5() {}
//   @Test
//   public void test5()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(supplier0);
//       
//       String string0 = "VAR_DECL_SIMPLE_ASSIGNMENT";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isThis());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTrue());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(132, node0.getType());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVar());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isBreak());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isHook());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isAdd());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isName());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(node0);
//       
//       ConstCheck constCheck0 = new ConstCheck((AbstractCompiler) compiler0);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(constCheck0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) constCheck0);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(nodeTraversal0);
//       
//       boolean boolean0 = true;
//       boolean boolean1 = false;
//       FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean1);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//       assertNotNull(functionInjector0);
//       
//       Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertNotNull(set0);
//       
//       FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
//       FunctionInjector.CanInlineResult functionInjector_CanInlineResult0 = functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, set0, functionInjector_InliningMode0, boolean0, boolean0);
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isThis());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTrue());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(132, node0.getType());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVar());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isBreak());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isHook());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isAdd());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isName());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(2, functionInjector_CanInlineResult0.ordinal());
//       assertEquals("NO", functionInjector_CanInlineResult0.name());
//       assertEquals("NO", functionInjector_CanInlineResult0.toString());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//   }

  @Test
  public void test6() {}
//   @Test
//   public void test6()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(supplier0);
//       
//       String string0 = "VAR_DECL_SMPLE_ASSIGNMENT";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isBreak());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabel());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isIn());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isAdd());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isName());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isVoid());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(node0);
//       
//       boolean boolean0 = false;
//       FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(functionInjector0);
//       
//       ConstCheck constCheck0 = new ConstCheck((AbstractCompiler) compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(constCheck0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) constCheck0);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(nodeTraversal0);
//       
//       InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(inlineSimpleMethods0);
//       
//       Set<String> set0 = inlineSimpleMethods0.externMethods;
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(0, set0.size());
//       assertNotNull(set0);
//       
//       FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
//       // Undeclared exception!
//       try {
//         FunctionInjector.CanInlineResult functionInjector_CanInlineResult0 = functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, set0, functionInjector_InliningMode0, boolean0, boolean0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionToBlockMutator_LabelNameSupplier0);
      
      boolean boolean0 = true;
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, (Supplier<String>) functionToBlockMutator_LabelNameSupplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      Node node0 = null;
      // Undeclared exception!
      try {
        functionInjector0.maybePrepareCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
