/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:31:03 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.rhino.Node;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CheckAccessControlsEvoSuite_branch_Test   {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
//       assertNotNull(linkedList0);
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       
//       Vector<JSModule> vector0 = new Vector<JSModule>();
//       assertNotNull(vector0);
//       assertEquals(10, vector0.capacity());
//       assertEquals(true, vector0.isEmpty());
//       assertEquals(0, vector0.size());
//       assertEquals("[]", vector0.toString());
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertNotNull(compilerOptions0);
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       
//       compiler0.initModules((List<JSSourceFile>) linkedList0, (List<JSModule>) vector0, compilerOptions0);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertEquals(10, vector0.capacity());
//       assertEquals(true, vector0.isEmpty());
//       assertEquals(0, vector0.size());
//       assertEquals("[]", vector0.toString());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       
//       CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
//       assertNotNull(checkAccessControls0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       
//       Node node0 = Node.newString(compilerOptions0.aliasStringsBlacklist);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertNotNull(node0);
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(40, node0.getType());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       
//       checkAccessControls0.hotSwapScript(node0);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(40, node0.getType());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//   }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
//       assertNotNull(linkedList0);
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       
//       Vector<JSModule> vector0 = new Vector<JSModule>();
//       assertNotNull(vector0);
//       assertEquals(true, vector0.isEmpty());
//       assertEquals(0, vector0.size());
//       assertEquals(10, vector0.capacity());
//       assertEquals("[]", vector0.toString());
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertNotNull(compilerOptions0);
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       
//       compiler0.initModules((List<JSSourceFile>) linkedList0, (List<JSModule>) vector0, compilerOptions0);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(true, vector0.isEmpty());
//       assertEquals(0, vector0.size());
//       assertEquals(10, vector0.capacity());
//       assertEquals("[]", vector0.toString());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       
//       CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
//       assertNotNull(checkAccessControls0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       
//       Node node0 = Node.newString(compilerOptions0.aliasStringsBlacklist);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertNotNull(node0);
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(40, node0.getType());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getLineno());
//       
//       checkAccessControls0.process(node0, node0);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(40, node0.getType());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//   }
}
