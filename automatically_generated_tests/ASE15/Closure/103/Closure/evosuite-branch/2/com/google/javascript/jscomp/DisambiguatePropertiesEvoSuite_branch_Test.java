/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:55:04 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ConcreteType;
import com.google.javascript.jscomp.DisambiguateProperties;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.UnionType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class DisambiguatePropertiesEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 1703;
      Compiler compiler0 = new Compiler();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(compiler0);
      
      TightenTypes tightenTypes0 = null;
      DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(disambiguateProperties0);
      
      String string0 = "[^\\'$]";
      ConcreteType.ConcreteUniqueType concreteType_ConcreteUniqueType0 = new ConcreteType.ConcreteUniqueType(int0);
      assertNotNull(concreteType_ConcreteUniqueType0);
      
      ConcreteType concreteType0 = disambiguateProperties0.getTypeWithProperty(string0, concreteType_ConcreteUniqueType0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertNull(concreteType0);
  }

  @Test
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(compiler0);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(tightenTypes0);
      
      DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(disambiguateProperties0);
      
      String string0 = null;
      ConcreteType concreteType0 = ConcreteType.NONE;
      assertNotNull(concreteType0);
      
      ConcreteType.ConcreteUniqueType concreteType_ConcreteUniqueType0 = (ConcreteType.ConcreteUniqueType)disambiguateProperties0.getTypeWithProperty(string0, concreteType0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(concreteType_ConcreteUniqueType0);
  }

  @Test
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(compiler0);
      
      DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(disambiguateProperties0);
      
      String string0 = "L;OOuC";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
      StringType stringType0 = (StringType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isNamedType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertNotNull(stringType0);
      
      JSType jSType0 = disambiguateProperties0.getTypeWithProperty(string0, stringType0);
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isNamedType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertNull(jSType0);
  }

  @Test
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(compiler0);
      
      DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(disambiguateProperties0);
      
      String string0 = "JSC_INVALIDATION";
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(jSTypeRegistry0);
      
      int int0 = (-2387);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals("JSC_INVALIDATION", namedType0.getReferenceName());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoType());
      assertEquals("JSC_INVALIDATION", namedType0.toString());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertNotNull(namedType0);
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) namedType0);
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals("JSC_INVALIDATION", namedType0.getReferenceName());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoType());
      assertEquals("JSC_INVALIDATION", namedType0.toString());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertNotNull(enumType0);
      
      UnionType unionType0 = (UnionType)enumType0.getLeastSupertype((JSType) namedType0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals("JSC_INVALIDATION", namedType0.getReferenceName());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoType());
      assertEquals("JSC_INVALIDATION", namedType0.toString());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertNotNull(unionType0);
      
      JSType jSType0 = disambiguateProperties0.getTypeWithProperty(string0, unionType0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals("JSC_INVALIDATION", namedType0.getReferenceName());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoType());
      assertEquals("JSC_INVALIDATION", namedType0.toString());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertNull(jSType0);
  }

  @Test
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(compiler0);
      
      DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(disambiguateProperties0);
      
      String string0 = "JSC_INVALIDATION";
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(jSTypeRegistry0);
      
      int int0 = (-2387);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals("JSC_INVALIDATION", namedType0.getReferenceName());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals("JSC_INVALIDATION", namedType0.toString());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isResolved());
      assertNotNull(namedType0);
      
      NamedType namedType1 = (NamedType)disambiguateProperties0.getTypeWithProperty(string0, namedType0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(true, namedType1.isNominalType());
      assertEquals(true, namedType1.hasReferenceName());
      assertEquals("JSC_INVALIDATION", namedType1.toString());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals("JSC_INVALIDATION", namedType1.getReferenceName());
      assertEquals(false, namedType1.isNoType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isEmptyType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isAllType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(true, namedType1.isNamedType());
      assertEquals("JSC_INVALIDATION", namedType0.getReferenceName());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals("JSC_INVALIDATION", namedType0.toString());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isResolved());
      assertSame(namedType1, namedType0);
      assertSame(namedType0, namedType1);
      assertNotNull(namedType1);
  }

  @Test
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(compiler0);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(tightenTypes0);
      
      DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(disambiguateProperties0);
      
      int int0 = 64;
      Node node0 = new Node(int0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(64, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertNotNull(node0);
      
      disambiguateProperties0.process(node0, node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(64, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
  }
}
