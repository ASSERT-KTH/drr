/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:41:13 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ConcreteType;
import com.google.javascript.jscomp.DisambiguateProperties;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.StringType;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class DisambiguatePropertiesEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      byte byte0 = (byte)36;
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
      assertNotNull(disambiguateProperties0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      String string0 = "";
      ConcreteType.ConcreteUniqueType concreteType_ConcreteUniqueType0 = new ConcreteType.ConcreteUniqueType(byte0);
      assertNotNull(concreteType_ConcreteUniqueType0);
      
      ConcreteType concreteType0 = disambiguateProperties0.getTypeWithProperty(string0, concreteType_ConcreteUniqueType0);
      assertNull(concreteType0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
      assertNotNull(disambiguateProperties0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      String string0 = "<z^k{!LfLpO";
      TreeSet<ConcreteType> treeSet0 = new TreeSet<ConcreteType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      ConcreteType concreteType0 = ConcreteType.createForTypes(treeSet0);
      assertNotNull(concreteType0);
      assertEquals("[]", treeSet0.toString());
      
      ConcreteType.ConcreteUniqueType concreteType_ConcreteUniqueType0 = (ConcreteType.ConcreteUniqueType)disambiguateProperties0.getTypeWithProperty(string0, concreteType0);
      assertNotNull(concreteType_ConcreteUniqueType0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals("[]", treeSet0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
      assertNotNull(disambiguateProperties0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      String string0 = "JavaException";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals(7, jSTypeNativeArray0[0].ordinal());
      assertEquals("DATE_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("DATE_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(functionType0);
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(7, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      
      JSType jSType0 = disambiguateProperties0.getTypeWithProperty(string0, functionType0);
      assertNull(jSType0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(7, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
  }

  @Test
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
      assertNotNull(disambiguateProperties0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      String string0 = "ENTERWITH";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals(30, jSTypeNativeArray0[0].ordinal());
      assertEquals("STRING_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("STRING_TYPE", jSTypeNativeArray0[0].name());
      
      StringType stringType0 = (StringType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(stringType0);
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNamedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNoObjectType());
      
      JSType jSType0 = disambiguateProperties0.getTypeWithProperty(string0, stringType0);
      assertNull(jSType0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNamedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNoObjectType());
  }
}
