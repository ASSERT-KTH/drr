/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:13:34 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeMap;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

 
public class CompilerEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      LoggerErrorManager loggerErrorManager1 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, loggerErrorManager1.getErrorCount());
      assertEquals(0.0, loggerErrorManager1.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager1.getWarningCount());
      assertNotNull(loggerErrorManager1);
      assertSame(loggerErrorManager1, loggerErrorManager0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = " [testcode] ";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertNotNull(stack0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertNotNull(compilerOptions0);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertNotNull(result0);
      
      JSModule jSModule0 = null;
      Node node0 = compiler0.getNodeForCodeInsertion(jSModule0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLineno());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "^8j@{W ";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals(-1, jSModule0.getDepth());
      assertEquals("^8j@{W ", jSModule0.getName());
      assertEquals("^8j@{W ", jSModule0.toString());
      assertNotNull(jSModule0);
      
      // Undeclared exception!
      try {
        Node node0 = compiler0.getNodeForCodeInsertion(jSModule0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root module has no inputs
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "U[Y?].Q1N)z2P<2)@P";
      int int0 = (-734);
      Region region0 = compiler0.getSourceRegion(string0, int0);
      assertNull(region0);
  }

  @Test
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = compiler0.getAstDotGraph();
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 51;
      // Undeclared exception!
      try {
        Region region0 = compiler0.getSourceRegion(string0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "Parsing: ";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertNotNull(node0);
      
      int int0 = 404;
      String string1 = compiler0.getSourceLine(string0, int0);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNull(string1);
  }

  @Test
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(loggerErrorManager0);
      
      // Undeclared exception!
      try {
        compiler0.processDefines();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertNotNull(compilerOptions0);
      
      String string0 = "SEf<HZ}*yRfeD'Ep";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, compilerOptions0.locale);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(3, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertNotNull(node0);
      
      Node node1 = compiler0.parseSyntheticCode(string0, compilerOptions0.appNameStr);
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(3, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(125, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertNotNull(node1);
      assertNotSame(node1, node0);
  }

  @Test
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertNotNull(stack0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertNotNull(compilerOptions0);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertNotNull(result0);
      
      boolean boolean0 = compiler0.acceptEcmaScript5();
      assertFalse(boolean0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertNotNull(compilerOptions0);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertNotNull(result0);
      
      boolean boolean0 = compiler0.isInliningForbidden();
      assertFalse(boolean0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "Count";
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append(string0);
      assertNotNull(compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      
      String string1 = "q{w[";
      assertNotSame(string1, string0);
      
      boolean boolean0 = compiler_CodeBuilder1.endsWith(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = compiler0.getAstDotGraph();
      assertEquals("", string0);
      assertNotNull(string0);
      
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      boolean boolean0 = compiler_CodeBuilder0.endsWith(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      String string0 = "mismatch of the {0} property type and the type of the property it overrides from interface {1}\noriginal: {2}\noverride: {3}";
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append(string0);
      assertNotNull(compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
  }

  @Test
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      compiler0.disableThreads();
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertNotNull(compilerOptions0);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertNotNull(result0);
      
      String[] stringArray0 = compiler0.toSourceArray();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(stringArray0);
  }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertNotNull(linkedList0);
//       
//       LinkedList<JSModule> linkedList1 = new LinkedList<JSModule>();
//       assertEquals("[]", linkedList1.toString());
//       assertEquals(0, linkedList1.size());
//       assertNotNull(linkedList1);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compileModules((List<JSSourceFile>) linkedList0, (List<JSModule>) linkedList1, compilerOptions0);
//       assertEquals("[]", linkedList1.toString());
//       assertEquals(0, linkedList1.size());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertNotNull(result0);
//       
//       Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, compilerOptions0.aliasStringsBlacklist, compilerOptions0.aliasStringsBlacklist);
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(125, node0.getType());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertNotNull(node0);
//   }

  @Test
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertNotNull(stack0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertNotNull(compilerOptions0);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertNotNull(result0);
      
      String string0 = "(A<//bQ";
      compilerOptions0.nameReferenceReportPath = string0;
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertNotNull(compilerOptions0.nameReferenceReportPath);
      
      compiler0.parse();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
//       assertEquals(0, stack0.size());
//       assertEquals("[]", stack0.toString());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(true, stack0.empty());
//       assertEquals(10, stack0.capacity());
//       assertNotNull(stack0);
//       
//       String string0 = "%s (%s) must not be negative";
//       MockFile mockFile0 = new MockFile(string0, string0);
//       assertNotNull(mockFile0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
//       assertEquals("%s (%s) must not be negative/%s (%s) must not be negative", jSSourceFile0.toString());
//       assertEquals("%s (%s) must not be negative/%s (%s) must not be negative", jSSourceFile0.getOriginalPath());
//       assertEquals("%s (%s) must not be negative/%s (%s) must not be negative", jSSourceFile0.getName());
//       assertNotNull(jSSourceFile0);
//       
//       boolean boolean0 = stack0.add(jSSourceFile0);
//       assertTrue(boolean0);
//       assertEquals("%s (%s) must not be negative/%s (%s) must not be negative", jSSourceFile0.toString());
//       assertEquals("%s (%s) must not be negative/%s (%s) must not be negative", jSSourceFile0.getOriginalPath());
//       assertEquals("%s (%s) must not be negative/%s (%s) must not be negative", jSSourceFile0.getName());
//       assertEquals("[%s (%s) must not be negative/%s (%s) must not be negative]", stack0.toString());
//       assertEquals(false, stack0.isEmpty());
//       assertEquals(10, stack0.capacity());
//       assertEquals(false, stack0.empty());
//       assertEquals(1, stack0.size());
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals("[%s (%s) must not be negative/%s (%s) must not be negative]", stack0.toString());
//       assertEquals(false, stack0.isEmpty());
//       assertEquals(10, stack0.capacity());
//       assertEquals(false, stack0.empty());
//       assertEquals(1, stack0.size());
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertNotNull(result0);
//       
//       compiler0.parse();
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//   }

  @Test
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      assertNull(compilerOptions0);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertNotNull(defaultPassConfig0);
      
      String string0 = "Parsing: ";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(125, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19() {}
//   @Test
//   public void test19()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertNotNull(linkedList0);
//       
//       LinkedList<JSModule> linkedList1 = new LinkedList<JSModule>();
//       assertEquals(0, linkedList1.size());
//       assertEquals("[]", linkedList1.toString());
//       assertNotNull(linkedList1);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compileModules((List<JSSourceFile>) linkedList0, (List<JSModule>) linkedList1, compilerOptions0);
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(0, linkedList1.size());
//       assertEquals("[]", linkedList1.toString());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertNotNull(result0);
//       
//       compiler0.removeInput(compilerOptions0.inputDelimiter);
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.aliasAllStrings);
//   }

  @Test
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertNotNull(stack0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertNotNull(compilerOptions0);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertNotNull(result0);
      
      CompilerInput compilerInput0 = compiler0.newExternInput(compilerOptions0.unaliasableGlobals);
      assertEquals(true, compilerInput0.isExtern());
      assertNull(compilerInput0.getName());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertNotNull(compilerInput0);
      
      compiler0.removeInput(compilerOptions0.syntheticBlockStartMarker);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
  }

  @Test
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      compiler0.reportCodeChange();
      // Undeclared exception!
      try {
        ControlFlowGraph<Node> controlFlowGraph0 = compiler0.computeCFG();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        compiler0.endPass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tracer should not be null at the end of a pass.
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = (DefaultPassConfig)compiler0.createPassConfigInternal();
      assertNotNull(defaultPassConfig0);
      
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      assertNotNull(passConfig_PassConfigDelegate0);
      
      compiler0.setPassConfig((PassConfig) passConfig_PassConfigDelegate0);
  }

  @Test
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertNotNull(compilerOptions0);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertNotNull(result0);
      
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try {
        Result result1 = compiler0.compileModules((List<JSSourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0, sourceExcerptProvider_SourceExcerpt0);
      assertNotNull(lightweightMessageFormatter0);
      
      String string0 = "\"-doT]>d,=J";
      Logger logger0 = Logger.getGlobal();
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(logger0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) lightweightMessageFormatter0, logger0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler1 = new Compiler((ErrorManager) loggerErrorManager0);
      assertFalse(compiler0.equals((Object)compiler1));
      assertFalse(compiler1.equals((Object)compiler0));
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertEquals(0, compiler1.getErrorCount());
      assertEquals(0, compiler1.getWarningCount());
      assertNotNull(compiler1);
      assertNotSame(compiler0, compiler1);
      assertNotSame(compiler1, compiler0);
      
      Node node0 = compiler1.parseSyntheticCode(string0, string0);
      assertFalse(compiler0.equals((Object)compiler1));
      assertFalse(compiler1.equals((Object)compiler0));
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(1, loggerErrorManager0.getErrorCount());
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, compiler1.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler1.languageMode());
      assertEquals(true, compiler1.hasErrors());
      assertEquals(false, compiler1.isTypeCheckingEnabled());
      assertEquals(false, compiler1.acceptConstKeyword());
      assertEquals(false, compiler1.isIdeMode());
      assertEquals(1, compiler1.getErrorCount());
      assertNotNull(node0);
      assertNotSame(compiler0, compiler1);
      assertNotSame(compiler1, compiler0);
  }

  @Test
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.getRoot();
      assertNull(node0);
  }

  @Test
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        int int0 = compiler0.getWarningCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
      assertNull(referenceCollectingCallback_ReferenceMap0);
  }

  @Test
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      List<CompilerInput> list0 = compiler0.getExternsForTesting();
      assertNull(list0);
  }

  @Test
  public void test30()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      
      compiler0.resetUniqueNameId();
  }

  @Test
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      boolean boolean0 = false;
      compiler0.setHasRegExpGlobalReferences(boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertNotNull(supplier0);
  }

  @Test
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        compiler0.removeTryCatchFinally();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      List<CompilerInput> list0 = compiler0.getInputsForTesting();
      assertNull(list0);
  }

  @Test
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        compiler0.rebuildInputsFromModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        CssRenamingMap cssRenamingMap0 = compiler0.getCssRenamingMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = compiler0.isTypeCheckingEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
      assertNull(functionInformationMap0);
  }

  @Test
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      VariableMap variableMap0 = compiler0.getPropertyMap();
      assertNull(variableMap0);
  }

  @Test
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        JSError[] jSErrorArray0 = compiler0.getMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      CssRenamingMap cssRenamingMap0 = null;
      // Undeclared exception!
      try {
        compiler0.setCssRenamingMap(cssRenamingMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      assertNotNull(compiler_IntermediateState0);
      
      compiler0.setState(compiler_IntermediateState0);
  }

  @Test
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Scope scope0 = compiler0.getTopScope();
      assertNull(scope0);
  }

  @Test
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = compiler0.languageMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      assertEquals("{}", treeMap0.toString());
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      String string0 = "~,`-}TE37y<@]L";
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(3, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        compiler0.updateGlobalVarReferences(treeMap0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "\"-doT]>d,=J";
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(125, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(node0);
      
      String string1 = compiler0.toSource(node0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(125, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "p8nGP";
      // Undeclared exception!
      try {
        Node node0 = compiler0.parseSyntheticCode(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      JSModule[] jSModuleArray0 = new JSModule[2];
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      assertNull(compilerOptions0);
      
      // Undeclared exception!
      try {
        Result result0 = compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      CodeChangeHandler.ForbiddenChange codeChangeHandler_ForbiddenChange0 = new CodeChangeHandler.ForbiddenChange();
      assertNotNull(codeChangeHandler_ForbiddenChange0);
      
      compiler0.removeChangeHandler(codeChangeHandler_ForbiddenChange0);
  }

  @Test
  public void test50()  throws Throwable  {
      ConsoleHandler consoleHandler0 = new ConsoleHandler();
      assertNull(consoleHandler0.getEncoding());
      assertNotNull(consoleHandler0);
      
      Level level0 = consoleHandler0.getLevel();
      assertNull(consoleHandler0.getEncoding());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("INFO", level0.getName());
      assertEquals("INFO", level0.toString());
      assertEquals(800, level0.intValue());
      assertNotNull(level0);
      
      Compiler.setLoggingLevel(level0);
      assertNull(consoleHandler0.getEncoding());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("INFO", level0.getName());
      assertEquals("INFO", level0.toString());
      assertEquals(800, level0.intValue());
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = " [testcode] ";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      boolean boolean0 = compiler0.hasRegExpGlobalReferences();
      assertTrue(boolean0);
  }

  @Test
  public void test52()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      VariableMap variableMap0 = compiler0.getVariableMap();
      assertNull(variableMap0);
  }

  @Test
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      ScopeCreator scopeCreator0 = compiler0.getTypedScopeCreator();
      assertNull(scopeCreator0);
  }

  @Test
  public void test54()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "[+Qn+L2WNO@p1n<";
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(string0, string0);
      assertEquals("[+Qn+L2WNO@p1n<", jSSourceFile0.toString());
      assertEquals("[+Qn+L2WNO@p1n<", jSSourceFile0.getOriginalPath());
      assertEquals("[+Qn+L2WNO@p1n<", jSSourceFile0.getName());
      assertNotNull(jSSourceFile0);
      
      CompilerOptions compilerOptions0 = null;
      // Undeclared exception!
      try {
        Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      SourceMap sourceMap0 = compiler0.getSourceMap();
      assertNull(sourceMap0);
  }

  @Test
  public void test56()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      int int0 = compiler_CodeBuilder0.getLineIndex();
      assertEquals(0, int0);
  }

  @Test
  public void test57()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      compiler0.disableThreads();
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertNotNull(compilerOptions0);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertNotNull(result0);
      
      compiler0.recordFunctionInformation();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
  }

  @Test
  public void test58()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      int int0 = compiler_CodeBuilder0.getLength();
      assertEquals(0, int0);
  }

  @Test
  public void test59()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      int int0 = compiler_CodeBuilder0.getColumnIndex();
      assertEquals(0, int0);
  }
}
