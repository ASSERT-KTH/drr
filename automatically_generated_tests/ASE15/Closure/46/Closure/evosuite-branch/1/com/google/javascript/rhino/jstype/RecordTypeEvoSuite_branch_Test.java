/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:06:38 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class RecordTypeEvoSuite_branch_Test   {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
//       assertNotNull(hashMap0);
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(0, hashMap0.size());
//       assertEquals(true, hashMap0.isEmpty());
//       
//       String string0 = "AL)_YAkE";
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertNotNull(errorFunctionType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       
//       ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
//       assertNotNull(parameterizedType0);
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       
//       int int0 = (-1888);
//       Node node0 = new Node(int0, int0, int0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNull());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isParamList());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isTry());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isScript());
//       assertNull(node0.getSourceFileName());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(-1, node0.getSourcePosition());
//       
//       String string1 = "Z";
//       assertNotSame(string1, string0);
//       
//       RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(parameterizedType0, node0);
//       assertNotNull(recordTypeBuilder_RecordProperty0);
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNull());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isParamList());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isTry());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isScript());
//       assertNull(node0.getSourceFileName());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertNotSame(string0, string1);
//       
//       RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string1, recordTypeBuilder_RecordProperty0);
//       assertNull(recordTypeBuilder_RecordProperty1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNull());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isParamList());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isTry());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isScript());
//       assertNull(node0.getSourceFileName());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(1, hashMap0.size());
//       assertEquals(false, hashMap0.isEmpty());
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       
//       RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty2 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
//       assertNull(recordTypeBuilder_RecordProperty2);
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNull());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isParamList());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isTry());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isScript());
//       assertNull(node0.getSourceFileName());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(2, hashMap0.size());
//       assertEquals(false, hashMap0.isEmpty());
//       assertNotSame(string0, string1);
//       
//       RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
//       assertNotNull(recordType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, recordType0.isInterface());
//       assertEquals(false, recordType0.isNoObjectType());
//       assertEquals(false, recordType0.isVoidType());
//       assertEquals(false, recordType0.isConstructor());
//       assertEquals(false, recordType0.isNoType());
//       assertEquals(false, recordType0.isOrdinaryFunction());
//       assertEquals(false, recordType0.isUnionType());
//       assertEquals(false, recordType0.isFunctionType());
//       assertEquals(false, recordType0.isNoResolvedType());
//       assertEquals(false, recordType0.isEnumElementType());
//       assertEquals(false, recordType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType0.isFunctionPrototypeType());
//       assertEquals(false, recordType0.isNominalConstructor());
//       assertEquals(true, recordType0.isRecordType());
//       assertEquals(false, recordType0.isNominalType());
//       assertEquals(false, recordType0.isNumberValueType());
//       assertEquals(false, recordType0.isStringValueType());
//       assertEquals(false, recordType0.isNullType());
//       assertEquals(false, recordType0.isTemplateType());
//       assertEquals(false, recordType0.isBooleanValueType());
//       assertEquals(false, recordType0.isEnumType());
//       assertEquals(false, recordType0.isCheckedUnknownType());
//       assertEquals(false, recordType0.isResolved());
//       assertEquals(2, hashMap0.size());
//       assertEquals(false, hashMap0.isEmpty());
//       
//       boolean boolean0 = recordType0.removeProperty(string0);
//       assertTrue(boolean0);
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, recordType0.isInterface());
//       assertEquals(false, recordType0.isNoObjectType());
//       assertEquals(false, recordType0.isVoidType());
//       assertEquals(false, recordType0.isConstructor());
//       assertEquals(false, recordType0.isNoType());
//       assertEquals(false, recordType0.isOrdinaryFunction());
//       assertEquals(false, recordType0.isUnionType());
//       assertEquals(false, recordType0.isFunctionType());
//       assertEquals(false, recordType0.isNoResolvedType());
//       assertEquals(false, recordType0.isEnumElementType());
//       assertEquals(false, recordType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType0.isFunctionPrototypeType());
//       assertEquals(false, recordType0.isNominalConstructor());
//       assertEquals(true, recordType0.isRecordType());
//       assertEquals(false, recordType0.isNominalType());
//       assertEquals(false, recordType0.isNumberValueType());
//       assertEquals(false, recordType0.isStringValueType());
//       assertEquals(false, recordType0.isNullType());
//       assertEquals(false, recordType0.isTemplateType());
//       assertEquals(false, recordType0.isBooleanValueType());
//       assertEquals(false, recordType0.isEnumType());
//       assertEquals(false, recordType0.isCheckedUnknownType());
//       assertEquals(false, recordType0.isResolved());
//       assertEquals(2, hashMap0.size());
//       assertEquals(false, hashMap0.isEmpty());
//       assertNotSame(string0, string1);
//       
//       RecordType recordType1 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
//       assertNotNull(recordType1);
//       assertTrue(recordType1.equals((Object)recordType0));
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, recordType1.isNoType());
//       assertEquals(false, recordType1.isConstructor());
//       assertEquals(false, recordType1.isEnumType());
//       assertEquals(false, recordType1.isUnionType());
//       assertEquals(false, recordType1.isResolved());
//       assertEquals(false, recordType1.isFunctionPrototypeType());
//       assertEquals(false, recordType1.isStringValueType());
//       assertEquals(false, recordType1.isFunctionType());
//       assertEquals(false, recordType1.isTemplateType());
//       assertEquals(false, recordType1.isOrdinaryFunction());
//       assertEquals(false, recordType1.isCheckedUnknownType());
//       assertEquals(false, recordType1.isEnumElementType());
//       assertEquals(false, recordType1.isNominalConstructor());
//       assertEquals(false, recordType1.isBooleanValueType());
//       assertEquals(false, recordType1.isNumberValueType());
//       assertEquals(false, recordType1.isNoObjectType());
//       assertEquals(false, recordType1.isAllType());
//       assertEquals(false, recordType1.isNullType());
//       assertEquals(false, recordType1.isInterface());
//       assertEquals(false, recordType1.isVoidType());
//       assertEquals(false, recordType1.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
//       assertEquals(true, recordType1.isRecordType());
//       assertEquals(false, recordType1.isNominalType());
//       assertEquals(2, hashMap0.size());
//       assertEquals(false, hashMap0.isEmpty());
//       assertNotSame(recordType1, recordType0);
//   }

  @Test
  public void test1() {}
//   @Test
//   public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
//       assertNotNull(hashMap0);
//       assertEquals(0, hashMap0.size());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("{}", hashMap0.toString());
//       
//       String string0 = "AL)_YAkE";
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertNotNull(errorFunctionType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       
//       ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
//       assertNotNull(parameterizedType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       
//       RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
//       assertNotNull(recordType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, recordType0.isStringValueType());
//       assertEquals(false, recordType0.isNullType());
//       assertEquals(false, recordType0.isTemplateType());
//       assertEquals(false, recordType0.isNumberValueType());
//       assertEquals(false, recordType0.isVoidType());
//       assertEquals(false, recordType0.isConstructor());
//       assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType0.isBooleanValueType());
//       assertEquals(false, recordType0.isNominalType());
//       assertEquals(false, recordType0.isNoResolvedType());
//       assertEquals(false, recordType0.isNoObjectType());
//       assertEquals(true, recordType0.isRecordType());
//       assertEquals(false, recordType0.isNoType());
//       assertEquals(false, recordType0.isCheckedUnknownType());
//       assertEquals(false, recordType0.isEnumType());
//       assertEquals(false, recordType0.isFunctionPrototypeType());
//       assertEquals(false, recordType0.isUnionType());
//       assertEquals(false, recordType0.isAllType());
//       assertEquals(false, recordType0.isNominalConstructor());
//       assertEquals(false, recordType0.isInterface());
//       assertEquals(false, recordType0.isEnumElementType());
//       assertEquals(false, recordType0.isOrdinaryFunction());
//       assertEquals(false, recordType0.isResolved());
//       assertEquals(false, recordType0.isFunctionType());
//       assertEquals(0, hashMap0.size());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("{}", hashMap0.toString());
//       
//       boolean boolean0 = recordType0.canTestForEqualityWith((JSType) parameterizedType0);
//       assertTrue(boolean0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, recordType0.isStringValueType());
//       assertEquals(false, recordType0.isNullType());
//       assertEquals(false, recordType0.isTemplateType());
//       assertEquals(false, recordType0.isNumberValueType());
//       assertEquals(false, recordType0.isVoidType());
//       assertEquals(false, recordType0.isConstructor());
//       assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType0.isBooleanValueType());
//       assertEquals(false, recordType0.isNominalType());
//       assertEquals(false, recordType0.isNoResolvedType());
//       assertEquals(false, recordType0.isNoObjectType());
//       assertEquals(true, recordType0.isRecordType());
//       assertEquals(false, recordType0.isNoType());
//       assertEquals(false, recordType0.isCheckedUnknownType());
//       assertEquals(false, recordType0.isEnumType());
//       assertEquals(false, recordType0.isFunctionPrototypeType());
//       assertEquals(false, recordType0.isUnionType());
//       assertEquals(false, recordType0.isAllType());
//       assertEquals(false, recordType0.isNominalConstructor());
//       assertEquals(false, recordType0.isInterface());
//       assertEquals(false, recordType0.isEnumElementType());
//       assertEquals(false, recordType0.isOrdinaryFunction());
//       assertEquals(false, recordType0.isResolved());
//       assertEquals(false, recordType0.isFunctionType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(0, hashMap0.size());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("{}", hashMap0.toString());
//   }

  @Test
  public void test2()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      String string0 = "AL)_YAkE";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      
      int int0 = (-1888);
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVoid());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(-1888, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isComma());
      
      boolean boolean0 = errorFunctionType0.defineDeclaredProperty(string0, (JSType) parameterizedType0, node0);
      assertTrue(boolean0);
      assertEquals(false, node0.isVoid());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(-1888, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isComma());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isVoidType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(parameterizedType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertEquals(false, node0.isVoid());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(-1888, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isComma());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertEquals(false, node0.isVoid());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(-1888, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isComma());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      RecordType recordType1 = (RecordType)recordType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertNotNull(recordType1);
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(true, recordType0.isResolved());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(true, recordType1.isResolved());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isAllType());
      assertSame(recordType0, recordType1);
      assertSame(recordType1, recordType0);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)recordType0.getGreatestSubtype((JSType) errorFunctionType0);
      assertNotNull(errorFunctionType1);
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(true, recordType0.isResolved());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(true, errorFunctionType1.isNominalConstructor());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(true, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(true, errorFunctionType1.hasCachedValues());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertSame(recordType0, recordType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertSame(errorFunctionType0, errorFunctionType1);
  }

  @Test
  public void test3() {}
//   @Test
//   public void test3()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
//       assertNotNull(hashMap0);
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals(0, hashMap0.size());
//       assertEquals("{}", hashMap0.toString());
//       
//       String string0 = "AL)_YAkE";
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertNotNull(errorFunctionType0);
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
//       assertNotNull(parameterizedType0);
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       int int0 = (-1888);
//       Node node0 = new Node(int0, int0, int0);
//       assertNotNull(node0);
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isHook());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isTry());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isThrow());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isTrue());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isExprResult());
//       
//       RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(parameterizedType0, node0);
//       assertNotNull(recordTypeBuilder_RecordProperty0);
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isHook());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isTry());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isThrow());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isTrue());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
//       assertNull(recordTypeBuilder_RecordProperty1);
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(1, hashMap0.size());
//       assertEquals(false, hashMap0.isEmpty());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isHook());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isTry());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isThrow());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isTrue());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
//       assertNotNull(recordType0);
//       assertEquals(1, hashMap0.size());
//       assertEquals(false, hashMap0.isEmpty());
//       assertEquals(false, recordType0.isNoType());
//       assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType0.isTemplateType());
//       assertEquals(false, recordType0.isEnumElementType());
//       assertEquals(false, recordType0.isVoidType());
//       assertEquals(false, recordType0.isConstructor());
//       assertEquals(false, recordType0.isOrdinaryFunction());
//       assertEquals(false, recordType0.isNominalConstructor());
//       assertEquals(false, recordType0.isNoResolvedType());
//       assertEquals(false, recordType0.isNominalType());
//       assertEquals(false, recordType0.isInterface());
//       assertEquals(false, recordType0.isCheckedUnknownType());
//       assertEquals(false, recordType0.isFunctionType());
//       assertEquals(false, recordType0.isAllType());
//       assertEquals(false, recordType0.isNoObjectType());
//       assertEquals(false, recordType0.isEnumType());
//       assertEquals(false, recordType0.isUnionType());
//       assertEquals(true, recordType0.isRecordType());
//       assertEquals(false, recordType0.isStringValueType());
//       assertEquals(false, recordType0.isNullType());
//       assertEquals(false, recordType0.isResolved());
//       assertEquals(false, recordType0.isFunctionPrototypeType());
//       assertEquals(false, recordType0.isBooleanValueType());
//       assertEquals(false, recordType0.isNumberValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       recordType0.setOwnerFunction(errorFunctionType0);
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(1, hashMap0.size());
//       assertEquals(false, hashMap0.isEmpty());
//       assertEquals(false, recordType0.isNoType());
//       assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType0.isTemplateType());
//       assertEquals(false, recordType0.isEnumElementType());
//       assertEquals(false, recordType0.isVoidType());
//       assertEquals(false, recordType0.isConstructor());
//       assertEquals(false, recordType0.isOrdinaryFunction());
//       assertEquals(false, recordType0.isNominalConstructor());
//       assertEquals(false, recordType0.isNoResolvedType());
//       assertEquals(false, recordType0.isNominalType());
//       assertEquals(false, recordType0.isInterface());
//       assertEquals(true, recordType0.isFunctionPrototypeType());
//       assertEquals(false, recordType0.isCheckedUnknownType());
//       assertEquals(false, recordType0.isFunctionType());
//       assertEquals(false, recordType0.isAllType());
//       assertEquals(false, recordType0.isNoObjectType());
//       assertEquals(false, recordType0.isEnumType());
//       assertEquals(false, recordType0.isUnionType());
//       assertEquals(true, recordType0.isRecordType());
//       assertEquals(false, recordType0.isStringValueType());
//       assertEquals(false, recordType0.isNullType());
//       assertEquals(false, recordType0.isResolved());
//       assertEquals(false, recordType0.isBooleanValueType());
//       assertEquals(false, recordType0.isNumberValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       boolean boolean0 = recordType0.defineDeclaredProperty(string0, (JSType) parameterizedType0, node0);
//       assertFalse(boolean0);
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(1, hashMap0.size());
//       assertEquals(false, hashMap0.isEmpty());
//       assertEquals(false, recordType0.isNoType());
//       assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType0.isTemplateType());
//       assertEquals(false, recordType0.isEnumElementType());
//       assertEquals(false, recordType0.isVoidType());
//       assertEquals(false, recordType0.isConstructor());
//       assertEquals(false, recordType0.isOrdinaryFunction());
//       assertEquals(false, recordType0.isNominalConstructor());
//       assertEquals(false, recordType0.isNoResolvedType());
//       assertEquals(false, recordType0.isNominalType());
//       assertEquals(false, recordType0.isInterface());
//       assertEquals(true, recordType0.isFunctionPrototypeType());
//       assertEquals(false, recordType0.isCheckedUnknownType());
//       assertEquals(false, recordType0.isFunctionType());
//       assertEquals(false, recordType0.isAllType());
//       assertEquals(false, recordType0.isNoObjectType());
//       assertEquals(false, recordType0.isEnumType());
//       assertEquals(false, recordType0.isUnionType());
//       assertEquals(true, recordType0.isRecordType());
//       assertEquals(false, recordType0.isStringValueType());
//       assertEquals(false, recordType0.isNullType());
//       assertEquals(false, recordType0.isResolved());
//       assertEquals(false, recordType0.isBooleanValueType());
//       assertEquals(false, recordType0.isNumberValueType());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isHook());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isTry());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isThrow());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isTrue());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       NoObjectType noObjectType0 = (NoObjectType)recordType0.getGreatestSubtype((JSType) errorFunctionType0);
//       assertNotNull(noObjectType0);
//       assertEquals(false, noObjectType0.isNoType());
//       assertEquals(true, noObjectType0.matchesObjectContext());
//       assertEquals(true, noObjectType0.canBeCalled());
//       assertEquals(false, noObjectType0.isTemplateType());
//       assertEquals(false, noObjectType0.isCheckedUnknownType());
//       assertEquals(2147483647, noObjectType0.getPropertiesCount());
//       assertEquals(true, noObjectType0.isNoObjectType());
//       assertEquals(false, noObjectType0.isStringValueType());
//       assertEquals(false, noObjectType0.isNominalType());
//       assertEquals(2147483647, noObjectType0.getMaxArguments());
//       assertEquals(false, noObjectType0.isEnumType());
//       assertEquals(false, noObjectType0.isUnionType());
//       assertEquals(false, noObjectType0.isNoResolvedType());
//       assertEquals(false, noObjectType0.isRecordType());
//       assertEquals(false, noObjectType0.isOrdinaryFunction());
//       assertEquals(false, noObjectType0.isNumberValueType());
//       assertEquals(true, noObjectType0.isConstructor());
//       assertEquals(false, noObjectType0.hasCachedValues());
//       assertEquals(false, noObjectType0.isReturnTypeInferred());
//       assertEquals(false, noObjectType0.isNullType());
//       assertEquals(false, noObjectType0.isNominalConstructor());
//       assertEquals(false, noObjectType0.isEnumElementType());
//       assertEquals(false, noObjectType0.isInterface());
//       assertEquals(false, noObjectType0.isBooleanValueType());
//       assertEquals(false, noObjectType0.isVoidType());
//       assertEquals(true, noObjectType0.hasInstanceType());
//       assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, noObjectType0.matchesStringContext());
//       assertEquals(false, noObjectType0.isResolved());
//       assertEquals(false, noObjectType0.isFunctionPrototypeType());
//       assertEquals(true, noObjectType0.matchesNumberContext());
//       assertEquals(false, noObjectType0.isFunctionType());
//       assertNull(noObjectType0.getTemplateTypeName());
//       assertEquals(0, noObjectType0.getExtendedInterfacesCount());
//       assertEquals(false, noObjectType0.isAllType());
//       assertEquals("NoObject", noObjectType0.toString());
//       assertNull(noObjectType0.getReferenceName());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(1, hashMap0.size());
//       assertEquals(false, hashMap0.isEmpty());
//       assertEquals(false, recordType0.isNoType());
//       assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType0.isTemplateType());
//       assertEquals(false, recordType0.isEnumElementType());
//       assertEquals(false, recordType0.isVoidType());
//       assertEquals(false, recordType0.isConstructor());
//       assertEquals(false, recordType0.isOrdinaryFunction());
//       assertEquals(false, recordType0.isNominalConstructor());
//       assertEquals(false, recordType0.isNoResolvedType());
//       assertEquals(false, recordType0.isNominalType());
//       assertEquals(false, recordType0.isInterface());
//       assertEquals(true, recordType0.isFunctionPrototypeType());
//       assertEquals(false, recordType0.isCheckedUnknownType());
//       assertEquals(false, recordType0.isFunctionType());
//       assertEquals(false, recordType0.isAllType());
//       assertEquals(false, recordType0.isNoObjectType());
//       assertEquals(false, recordType0.isEnumType());
//       assertEquals(false, recordType0.isUnionType());
//       assertEquals(true, recordType0.isRecordType());
//       assertEquals(false, recordType0.isStringValueType());
//       assertEquals(false, recordType0.isNullType());
//       assertEquals(false, recordType0.isResolved());
//       assertEquals(false, recordType0.isBooleanValueType());
//       assertEquals(false, recordType0.isNumberValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//   }

  @Test
  public void test4()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "AL)_YAkE";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      
      int int0 = (-1888);
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1888, node0.getType());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetProp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      
      boolean boolean0 = errorFunctionType0.defineDeclaredProperty(string0, (JSType) parameterizedType0, node0);
      assertTrue(boolean0);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1888, node0.getType());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetProp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(parameterizedType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1888, node0.getType());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetProp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1888, node0.getType());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetProp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)parameterizedType0.getGreatestSubtype((JSType) recordType0);
      assertNotNull(errorFunctionType1);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(true, errorFunctionType1.hasCachedValues());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(true, errorFunctionType1.isNominalConstructor());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isResolved());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertSame(errorFunctionType1, errorFunctionType0);
      assertSame(errorFunctionType0, errorFunctionType1);
  }

  @Test
  public void test5()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals("null", nullType0.toString());
      
      NoObjectType noObjectType0 = (NoObjectType)JSType.getGreatestSubtype(nullType0, recordType0);
      assertNotNull(noObjectType0);
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals("null", nullType0.toString());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
  }

  @Test
  public void test6() {}
//   @Test
//   public void test6()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
//       assertNotNull(hashMap0);
//       assertEquals(0, hashMap0.size());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("{}", hashMap0.toString());
//       
//       String string0 = "AL)_YAkE";
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertNotNull(errorFunctionType0);
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
//       assertNotNull(parameterizedType0);
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       int int0 = (-1888);
//       Node node0 = new Node(int0, int0, int0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFor());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isName());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isDo());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isLabel());
//       
//       RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(parameterizedType0, node0);
//       assertNotNull(recordTypeBuilder_RecordProperty0);
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFor());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isName());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isDo());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
//       assertNull(recordTypeBuilder_RecordProperty1);
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFor());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isName());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isDo());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, hashMap0.isEmpty());
//       assertEquals(1, hashMap0.size());
//       
//       RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
//       assertNotNull(recordType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, hashMap0.isEmpty());
//       assertEquals(1, hashMap0.size());
//       assertEquals(false, recordType0.isNoObjectType());
//       assertEquals(false, recordType0.isEnumType());
//       assertEquals(false, recordType0.isStringValueType());
//       assertEquals(false, recordType0.isNoResolvedType());
//       assertEquals(false, recordType0.isVoidType());
//       assertEquals(false, recordType0.isFunctionPrototypeType());
//       assertEquals(false, recordType0.isAllType());
//       assertEquals(false, recordType0.isInterface());
//       assertEquals(false, recordType0.isUnionType());
//       assertEquals(false, recordType0.isBooleanValueType());
//       assertEquals(false, recordType0.isNumberValueType());
//       assertEquals(false, recordType0.isFunctionType());
//       assertEquals(false, recordType0.isCheckedUnknownType());
//       assertEquals(true, recordType0.isRecordType());
//       assertEquals(false, recordType0.isNullType());
//       assertEquals(false, recordType0.isNominalType());
//       assertEquals(false, recordType0.isEnumElementType());
//       assertEquals(false, recordType0.isNominalConstructor());
//       assertEquals(false, recordType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType0.isNoType());
//       assertEquals(false, recordType0.isConstructor());
//       assertEquals(false, recordType0.isResolved());
//       assertEquals(false, recordType0.isTemplateType());
//       
//       boolean boolean0 = recordType0.removeProperty(string0);
//       assertTrue(boolean0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, hashMap0.isEmpty());
//       assertEquals(1, hashMap0.size());
//       assertEquals(false, recordType0.isNoObjectType());
//       assertEquals(false, recordType0.isEnumType());
//       assertEquals(false, recordType0.isStringValueType());
//       assertEquals(false, recordType0.isNoResolvedType());
//       assertEquals(false, recordType0.isVoidType());
//       assertEquals(false, recordType0.isFunctionPrototypeType());
//       assertEquals(false, recordType0.isAllType());
//       assertEquals(false, recordType0.isInterface());
//       assertEquals(false, recordType0.isUnionType());
//       assertEquals(false, recordType0.isBooleanValueType());
//       assertEquals(false, recordType0.isNumberValueType());
//       assertEquals(false, recordType0.isFunctionType());
//       assertEquals(false, recordType0.isCheckedUnknownType());
//       assertEquals(true, recordType0.isRecordType());
//       assertEquals(false, recordType0.isNullType());
//       assertEquals(false, recordType0.isNominalType());
//       assertEquals(false, recordType0.isEnumElementType());
//       assertEquals(false, recordType0.isNominalConstructor());
//       assertEquals(false, recordType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType0.isNoType());
//       assertEquals(false, recordType0.isConstructor());
//       assertEquals(false, recordType0.isResolved());
//       assertEquals(false, recordType0.isTemplateType());
//       
//       RecordType recordType1 = (RecordType)recordType0.getGreatestSubtypeHelper(recordType0);
//       assertNotNull(recordType1);
//       assertFalse(recordType0.equals((Object)recordType1));
//       assertFalse(recordType1.equals((Object)recordType0));
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, hashMap0.isEmpty());
//       assertEquals(1, hashMap0.size());
//       assertEquals(false, recordType0.isNoObjectType());
//       assertEquals(false, recordType0.isEnumType());
//       assertEquals(false, recordType0.isStringValueType());
//       assertEquals(false, recordType0.isNoResolvedType());
//       assertEquals(false, recordType0.isVoidType());
//       assertEquals(false, recordType0.isFunctionPrototypeType());
//       assertEquals(false, recordType0.isAllType());
//       assertEquals(false, recordType0.isInterface());
//       assertEquals(false, recordType0.isUnionType());
//       assertEquals(false, recordType0.isBooleanValueType());
//       assertEquals(false, recordType0.isNumberValueType());
//       assertEquals(false, recordType0.isFunctionType());
//       assertEquals(false, recordType0.isCheckedUnknownType());
//       assertEquals(true, recordType0.isRecordType());
//       assertEquals(false, recordType0.isNullType());
//       assertEquals(false, recordType0.isNominalType());
//       assertEquals(false, recordType0.isEnumElementType());
//       assertEquals(false, recordType0.isNominalConstructor());
//       assertEquals(false, recordType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType0.isNoType());
//       assertEquals(false, recordType0.isConstructor());
//       assertEquals(false, recordType0.isResolved());
//       assertEquals(false, recordType0.isTemplateType());
//       assertEquals(false, recordType1.isCheckedUnknownType());
//       assertEquals(false, recordType1.isBooleanValueType());
//       assertEquals(false, recordType1.isOrdinaryFunction());
//       assertEquals(false, recordType1.isConstructor());
//       assertEquals(false, recordType1.isNumberValueType());
//       assertEquals(false, recordType1.isNoObjectType());
//       assertEquals(true, recordType1.isRecordType());
//       assertEquals(false, recordType1.isNullType());
//       assertEquals(false, recordType1.isResolved());
//       assertEquals(false, recordType1.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType1.isVoidType());
//       assertEquals(false, recordType1.isEnumElementType());
//       assertEquals(false, recordType1.isFunctionType());
//       assertEquals(false, recordType1.isFunctionPrototypeType());
//       assertEquals(false, recordType1.isEnumType());
//       assertEquals(false, recordType1.isUnionType());
//       assertEquals(false, recordType1.isInterface());
//       assertEquals(false, recordType1.isNoResolvedType());
//       assertEquals(false, recordType1.isTemplateType());
//       assertEquals(false, recordType1.isNominalType());
//       assertEquals(false, recordType1.isStringValueType());
//       assertEquals(false, recordType1.isNoType());
//       assertEquals(false, recordType1.isNominalConstructor());
//       assertNotSame(recordType0, recordType1);
//       assertNotSame(recordType1, recordType0);
//   }

  @Test
  public void test7() {}
//   @Test
//   public void test7()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
//       assertNotNull(hashMap0);
//       assertEquals(0, hashMap0.size());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("{}", hashMap0.toString());
//       
//       String string0 = "AL)_YAkE";
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertNotNull(errorFunctionType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       
//       ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
//       assertNotNull(parameterizedType0);
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       
//       int int0 = (-1888);
//       Node node0 = new Node(int0, int0, int0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isWhile());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isContinue());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isNew());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isAssign());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isOr());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isDebugger());
//       
//       String string1 = "";
//       assertNotSame(string1, string0);
//       
//       RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(parameterizedType0, node0);
//       assertNotNull(recordTypeBuilder_RecordProperty0);
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isWhile());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isContinue());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isNew());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isAssign());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isOr());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertNotSame(string0, string1);
//       
//       RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string1, recordTypeBuilder_RecordProperty0);
//       assertNull(recordTypeBuilder_RecordProperty1);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isWhile());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isContinue());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isNew());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isAssign());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isOr());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(1, hashMap0.size());
//       assertEquals(false, hashMap0.isEmpty());
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       
//       RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty2 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
//       assertNull(recordTypeBuilder_RecordProperty2);
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isWhile());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isContinue());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isNew());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isAssign());
//       assertEquals(-1888, node0.getType());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isOr());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(true, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, hashMap0.isEmpty());
//       assertEquals(2, hashMap0.size());
//       assertNotSame(string0, string1);
//       
//       RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
//       assertNotNull(recordType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, hashMap0.isEmpty());
//       assertEquals(2, hashMap0.size());
//       assertEquals(false, recordType0.isNoResolvedType());
//       assertEquals(false, recordType0.isEnumType());
//       assertEquals(false, recordType0.isAllType());
//       assertEquals(true, recordType0.isRecordType());
//       assertEquals(false, recordType0.isCheckedUnknownType());
//       assertEquals(false, recordType0.isFunctionPrototypeType());
//       assertEquals(false, recordType0.isNoType());
//       assertEquals(false, recordType0.isNominalType());
//       assertEquals(false, recordType0.isVoidType());
//       assertEquals(false, recordType0.isFunctionType());
//       assertEquals(false, recordType0.isNominalConstructor());
//       assertEquals(false, recordType0.isTemplateType());
//       assertEquals(false, recordType0.isOrdinaryFunction());
//       assertEquals(false, recordType0.isBooleanValueType());
//       assertEquals(false, recordType0.isNullType());
//       assertEquals(false, recordType0.isNoObjectType());
//       assertEquals(false, recordType0.isNumberValueType());
//       assertEquals(false, recordType0.isResolved());
//       assertEquals(false, recordType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType0.isConstructor());
//       assertEquals(false, recordType0.isInterface());
//       assertEquals(false, recordType0.isEnumElementType());
//       assertEquals(false, recordType0.isUnionType());
//       
//       RecordType recordType1 = (RecordType)recordType0.getGreatestSubtypeHelper(recordType0);
//       assertNotNull(recordType1);
//       assertTrue(recordType1.equals((Object)recordType0));
//       assertTrue(recordType0.equals((Object)recordType1));
//       assertEquals(false, recordType1.isNullType());
//       assertEquals(false, recordType1.isEnumElementType());
//       assertEquals(false, recordType1.isNoResolvedType());
//       assertEquals(false, recordType1.isTemplateType());
//       assertEquals(false, recordType1.isOrdinaryFunction());
//       assertEquals(false, recordType1.isFunctionPrototypeType());
//       assertEquals(false, recordType1.isNominalType());
//       assertEquals(false, recordType1.isUnionType());
//       assertEquals(false, recordType1.isVoidType());
//       assertEquals(false, recordType1.isNominalConstructor());
//       assertEquals(false, recordType1.isNoObjectType());
//       assertEquals(false, recordType1.isCheckedUnknownType());
//       assertEquals(false, recordType1.isStringValueType());
//       assertEquals(false, recordType1.isInterface());
//       assertEquals(false, recordType1.isFunctionType());
//       assertEquals(true, recordType1.isRecordType());
//       assertEquals(false, recordType1.isBooleanValueType());
//       assertEquals(false, recordType1.isConstructor());
//       assertEquals(false, recordType1.isAllType());
//       assertEquals(false, recordType1.isNoType());
//       assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType1.isNumberValueType());
//       assertEquals(false, recordType1.isEnumType());
//       assertEquals(false, recordType1.isResolved());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, hashMap0.isEmpty());
//       assertEquals(2, hashMap0.size());
//       assertEquals(false, recordType0.isNoResolvedType());
//       assertEquals(false, recordType0.isEnumType());
//       assertEquals(false, recordType0.isAllType());
//       assertEquals(true, recordType0.isRecordType());
//       assertEquals(false, recordType0.isCheckedUnknownType());
//       assertEquals(false, recordType0.isFunctionPrototypeType());
//       assertEquals(false, recordType0.isNoType());
//       assertEquals(false, recordType0.isNominalType());
//       assertEquals(false, recordType0.isVoidType());
//       assertEquals(false, recordType0.isFunctionType());
//       assertEquals(false, recordType0.isNominalConstructor());
//       assertEquals(false, recordType0.isTemplateType());
//       assertEquals(false, recordType0.isOrdinaryFunction());
//       assertEquals(false, recordType0.isBooleanValueType());
//       assertEquals(false, recordType0.isNullType());
//       assertEquals(false, recordType0.isNoObjectType());
//       assertEquals(false, recordType0.isNumberValueType());
//       assertEquals(false, recordType0.isResolved());
//       assertEquals(false, recordType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, recordType0.isConstructor());
//       assertEquals(false, recordType0.isInterface());
//       assertEquals(false, recordType0.isEnumElementType());
//       assertEquals(false, recordType0.isUnionType());
//       assertNotSame(recordType1, recordType0);
//       assertNotSame(recordType0, recordType1);
//   }

  @Test
  public void test8()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      String string0 = "H";
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = null;
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertEquals(1, hashMap0.size());
      assertEquals("{H=null}", hashMap0.toString());
      assertEquals(false, hashMap0.isEmpty());
      
      // Undeclared exception!
      try {
        RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // RecordProperty associated with a property should not be null!
         //
      }
  }
}
