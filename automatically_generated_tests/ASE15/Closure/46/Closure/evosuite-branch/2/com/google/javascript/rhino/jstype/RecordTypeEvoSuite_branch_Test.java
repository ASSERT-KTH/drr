/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:17:19 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnionType;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class RecordTypeEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      String string0 = "'rA#Kf,";
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 1749;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(allType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, recordType0);
      assertNotNull(indexedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(true, indexedType0.isRecordType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
      
      EnumElementType enumElementType0 = indexedType0.toMaybeEnumElementType();
      assertNull(enumElementType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(true, indexedType0.isRecordType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
      
      RecordType recordType1 = (RecordType)JSType.safeResolve(recordType0, errorReporter0, enumElementType0);
      assertSame(recordType1, recordType0);
      assertSame(recordType0, recordType1);
      assertNotNull(recordType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(true, indexedType0.isRecordType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(true, recordType1.isResolved());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(true, recordType0.isResolved());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
  }

  @Test
  public void test1()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      String string0 = "'rA#Kf,";
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isInterface());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 1749;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createNativeAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = prototypeObjectType0.defineInferredProperty(string0, (JSType) allType0, node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isInterface());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      
      RecordType recordType1 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotSame(recordType1, recordType0);
      assertNotNull(recordType1);
      assertFalse(boolean0 == boolean1);
      assertFalse(recordType1.equals((Object)recordType0));
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isNoObjectType());
  }

  @Test
  public void test2()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      String string0 = "'rA#Kf,";
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 1749;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(allType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createNativeAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      
      boolean boolean1 = prototypeObjectType0.defineInferredProperty(string0, (JSType) allType0, node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertTrue(boolean1);
  }

  @Test
  public void test3()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      String string0 = "'rA#Kf,";
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals("*", allType0.toString());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      
      int int0 = 1749;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      
      String string1 = "|u|OV";
      assertNotSame(string1, string0);
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(allType0, node0);
      assertNotSame(string0, string1);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals("*", allType0.toString());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string1, recordTypeBuilder_RecordProperty0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals("*", allType0.toString());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty2 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNotSame(string0, string1);
      assertNull(recordTypeBuilder_RecordProperty2);
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals("*", allType0.toString());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNominalType());
      
      RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotSame(recordType1, recordType0);
      assertNotNull(recordType1);
      assertTrue(recordType1.equals((Object)recordType0));
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      
      boolean boolean1 = recordType1.removeProperty(string1);
      assertNotSame(string1, string0);
      assertNotSame(recordType1, recordType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(recordType1.equals((Object)recordType0));
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertTrue(boolean1);
      
      RecordType recordType2 = (RecordType)recordType1.getGreatestSubtypeHelper(recordType1);
      assertNotSame(recordType2, recordType0);
      assertNotSame(recordType2, recordType1);
      assertNotSame(recordType1, recordType2);
      assertNotSame(recordType1, recordType0);
      assertNotNull(recordType2);
      assertFalse(recordType2.equals((Object)recordType0));
      assertFalse(recordType2.equals((Object)recordType1));
      assertFalse(boolean0 == boolean1);
      assertFalse(recordType1.equals((Object)recordType2));
      assertTrue(recordType1.equals((Object)recordType0));
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType2.isNoType());
      assertEquals(false, recordType2.isEnumType());
      assertEquals(false, recordType2.isNumberValueType());
      assertEquals(false, recordType2.isUnionType());
      assertEquals(false, recordType2.isConstructor());
      assertEquals(false, recordType2.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType2.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType2.isAllType());
      assertEquals(false, recordType2.isVoidType());
      assertEquals(false, recordType2.isResolved());
      assertEquals(false, recordType2.isFunctionType());
      assertEquals(false, recordType2.isStringValueType());
      assertEquals(false, recordType2.isCheckedUnknownType());
      assertEquals(false, recordType2.isNullType());
      assertEquals(false, recordType2.isNominalConstructor());
      assertEquals(false, recordType2.isInterface());
      assertEquals(true, recordType2.isRecordType());
      assertEquals(false, recordType2.isOrdinaryFunction());
      assertEquals(false, recordType2.isNominalType());
      assertEquals(false, recordType2.isNoObjectType());
      assertEquals(false, recordType2.isEnumElementType());
      assertEquals(false, recordType2.isNoResolvedType());
      assertEquals(false, recordType2.isBooleanValueType());
      assertEquals(false, recordType2.isFunctionPrototypeType());
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isFunctionPrototypeType());
  }

  @Test
  public void test4()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, recordType0);
      assertNotNull(indexedType0);
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(true, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNumberValueType());
      
      TernaryValue ternaryValue0 = recordType0.testForEquality((JSType) indexedType0);
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(2, ternaryValue0.ordinal());
      assertEquals("unknown", ternaryValue0.toString());
      assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
      assertEquals("UNKNOWN", ternaryValue0.name());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(true, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNumberValueType());
  }

  @Test
  public void test5()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      String string0 = "'rA#Kf,";
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 1749;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = namedType0.defineInferredProperty(string0, (JSType) allType0, node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(allType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertFalse(boolean0 == boolean1);
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      UnionType unionType0 = (UnionType)recordType0.getGreatestSubtypeHelper(namedType0);
      assertNotNull(unionType0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      String string0 = "'rA#Kf,";
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      
      int int0 = 1749;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(allType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty2 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
      assertNotSame(recordTypeBuilder_RecordProperty2, recordTypeBuilder_RecordProperty0);
      assertNotNull(recordTypeBuilder_RecordProperty2);
      assertFalse(recordTypeBuilder_RecordProperty2.equals((Object)recordTypeBuilder_RecordProperty0));
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty3 = hashMap0.put(string0, recordTypeBuilder_RecordProperty2);
      assertSame(recordTypeBuilder_RecordProperty3, recordTypeBuilder_RecordProperty0);
      assertNotSame(recordTypeBuilder_RecordProperty3, recordTypeBuilder_RecordProperty2);
      assertNotSame(recordTypeBuilder_RecordProperty2, recordTypeBuilder_RecordProperty3);
      assertNotSame(recordTypeBuilder_RecordProperty2, recordTypeBuilder_RecordProperty0);
      assertNotNull(recordTypeBuilder_RecordProperty3);
      assertFalse(recordTypeBuilder_RecordProperty3.equals((Object)recordTypeBuilder_RecordProperty2));
      assertFalse(recordTypeBuilder_RecordProperty2.equals((Object)recordTypeBuilder_RecordProperty3));
      assertFalse(recordTypeBuilder_RecordProperty2.equals((Object)recordTypeBuilder_RecordProperty0));
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      
      RecordType recordType1 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotSame(recordType1, recordType0);
      assertNotNull(recordType1);
      assertFalse(recordType1.equals((Object)recordType0));
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isAllType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isNumberValueType());
      
      NoType noType0 = (NoType)recordType0.getGreatestSubtype((JSType) recordType1);
      assertNotSame(recordType0, recordType1);
      assertNotSame(recordType1, recordType0);
      assertNotNull(noType0);
      assertFalse(recordType0.equals((Object)recordType1));
      assertFalse(recordType1.equals((Object)recordType0));
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isUnionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isAllType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isNumberValueType());
  }

  @Test
  public void test7()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      String string0 = "'rA#Kf,";
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals("*", allType0.toString());
      
      int int0 = 1749;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(allType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals("*", allType0.toString());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals("*", allType0.toString());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createNativeAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoResolvedType());
      
      JSType.TypePair jSType_TypePair0 = recordType0.getTypesUnderShallowEquality((JSType) prototypeObjectType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoResolvedType());
  }

  @Test
  public void test8()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      String string0 = "'rA#Kf,";
      int int0 = 1749;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = recordType0.defineDeclaredProperty(string0, (JSType) recordType0, node0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
  }
}
