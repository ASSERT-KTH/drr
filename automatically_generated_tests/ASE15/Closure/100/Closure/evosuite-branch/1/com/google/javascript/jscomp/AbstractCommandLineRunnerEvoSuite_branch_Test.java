/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:19:04 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCommandLineRunner;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.PhaseOptimizer;
import com.google.javascript.jscomp.Result;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.protobuf.ByteString;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

 
public class AbstractCommandLineRunnerEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "H{p>e:J=U)nD){T(";
      int int0 = 20;
      simpleErrorReporter0.warning(string0, string0, int0, string0, int0);
      List<String> list0 = simpleErrorReporter0.warnings();
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      assertNull(compilerOptions0);
      
      // Undeclared exception!
      try {
        AbstractCommandLineRunner.createDefineReplacements(list0, compilerOptions0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // --define flag syntax invalid: H{p>e:J=U)nD){T( (H{p>e:J=U)nD){T(#20)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      
      AbstractCommandLineRunner.createDefineReplacements(list0, compilerOptions0);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = ">}< ";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[0];
      assertNotNull(stringArray0[2]);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(stringArray0[1]);
      assertNotNull(mockPrintStream0);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      JSModule jSModule0 = new JSModule(stringArray0[0]);
      assertNotNull(jSModule0);
      assertEquals(">}< ", jSModule0.toString());
      assertEquals(">}< ", jSModule0.getName());
      
      String string1 = commandLineRunner0.expandManifest(jSModule0);
      assertNull(string1);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(">}< ", jSModule0.toString());
      assertEquals(">}< ", jSModule0.getName());
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "com.google.javascript.jscomp.AbstractCommandLineRunner$FlagUsageException";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      ByteString.Output byteString_Output0 = ByteString.newOutput();
      assertNotNull(byteString_Output0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) byteString_Output0);
      assertNotNull(mockPrintStream0);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertNotNull(compilerOptions0);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.closurePass);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      JSModule jSModule0 = null;
      String string1 = commandLineRunner0.expandSourceMapPath(compilerOptions0, jSModule0);
      assertNull(string1);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.closurePass);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
  }

  @Test
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "r";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[2];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[3];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[3];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = stringArray0[3];
      assertNotNull(stringArray0[6]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setOutputManifest(stringArray0[1]);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      
      JSModule jSModule0 = new JSModule(stringArray0[4]);
      assertNotNull(jSModule0);
      assertEquals("r", jSModule0.toString());
      assertEquals("r", jSModule0.getName());
      
      String string1 = commandLineRunner0.expandManifest(jSModule0);
      assertEquals("r", string1);
      assertNotNull(string1);
      assertEquals("r", jSModule0.toString());
      assertEquals("r", jSModule0.getName());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertSame(string1, string0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "com.google.javascript.jscomp.AbstractCommandLineRunner$FlagUsageException";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      ByteString.Output byteString_Output0 = ByteString.newOutput();
      assertNotNull(byteString_Output0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) byteString_Output0);
      assertNotNull(mockPrintStream0);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.optimizeParameters);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      
      Compiler compiler0 = commandLineRunner0.createCompiler();
      assertNotNull(compiler0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(compilerOptions0.reportPath, compilerOptions0.aliasStringsBlacklist);
      assertNotNull(jSSourceFile0);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.optimizeParameters);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(jSSourceFile0.getOriginalPath());
      assertNull(jSSourceFile0.getName());
      
      Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
      assertNotNull(result0);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.optimizeParameters);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertNull(jSSourceFile0.getOriginalPath());
      assertNull(jSSourceFile0.getName());
      
      JSModule[] jSModuleArray0 = new JSModule[5];
      int int0 = commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);
      assertEquals(1, int0);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.optimizeParameters);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertNull(jSSourceFile0.getOriginalPath());
      assertNull(jSSourceFile0.getName());
  }

  @Test
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = ":";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = commandLineRunner0.createCompiler();
      assertNotNull(compiler0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, string0, string0, string0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "-pCSd{1$qu9~0\";$8=w";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = null;
      String string1 = "[&MH4/,";
      assertNotSame(string1, string0);
      
      String string2 = "4";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, string0, string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
  }

  @Test
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "' depends on unknown module '";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) pipedOutputStream0, boolean0);
      assertNotNull(mockPrintStream0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(0, pipedInputStream0.available());
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      Compiler compiler0 = commandLineRunner0.getCompiler();
      assertNull(compiler0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      String string1 = "*J3{C2VQIiShg";
      assertNotSame(string1, string0);
      
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, string1, string1, string0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(14, pipedInputStream0.available());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      JSModule jSModule0 = new JSModule(compilerOptions0.renamePrefix);
      assertNotNull(jSModule0);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      
      JSModule[] jSModuleArray0 = new JSModule[5];
      jSModuleArray0[0] = jSModule0;
      assertNotNull(jSModuleArray0[0]);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(jSModuleArray0[0].getName());
      assertNull(jSModuleArray0[0].toString());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      jSModuleArray0[1] = jSModule0;
      assertNotNull(jSModuleArray0[1]);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(jSModuleArray0[1].getName());
      assertNull(jSModuleArray0[1].toString());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      jSModuleArray0[2] = jSModuleArray0[1];
      assertNotNull(jSModuleArray0[2]);
      assertNull(jSModuleArray0[2].toString());
      assertNull(jSModuleArray0[2].getName());
      
      jSModuleArray0[3] = jSModule0;
      assertNotNull(jSModuleArray0[3]);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(jSModuleArray0[3].toString());
      assertNull(jSModuleArray0[3].getName());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      jSModuleArray0[4] = jSModule0;
      assertNotNull(jSModuleArray0[4]);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertNull(jSModuleArray0[4].toString());
      assertNull(jSModuleArray0[4].getName());
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      try {
        Map<String, String> map0 = AbstractCommandLineRunner.parseModuleWrappers(list0, jSModuleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected module wrapper to have <name>:<wrapper> format: java.properties
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "H{p>e:J=U)nD){T(";
      int int0 = 0;
      simpleErrorReporter0.warning(string0, string0, int0, string0, int0);
      List<String> list0 = simpleErrorReporter0.warnings();
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      
      try {
        JSModule[] jSModuleArray0 = AbstractCommandLineRunner.createJsModules(list0, list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid module name: 'H{p>e'
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "Hpe:J=U)nD){(";
      int int0 = 15;
      simpleErrorReporter0.warning(string0, string0, int0, string0, int0);
      List<String> list0 = simpleErrorReporter0.warnings();
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      
      try {
        JSModule[] jSModuleArray0 = AbstractCommandLineRunner.createJsModules(list0, list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid js file count 'J=U)nD){( (Hpe' for module: Hpe
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      // Undeclared exception!
      try {
        JSModule[] jSModuleArray0 = AbstractCommandLineRunner.createJsModules(linkedList0, linkedList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      List<String> list0 = null;
      // Undeclared exception!
      try {
        JSModule[] jSModuleArray0 = AbstractCommandLineRunner.createJsModules(list0, list0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.reserveRawExports);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineGetters);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      commandLineRunner0.setRunOptions(compilerOptions0);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.reserveRawExports);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineGetters);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
  }

  @Test
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "' depends on unknown module '";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      // Undeclared exception!
      try {
        commandLineRunner0.run();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(8, list0.size());
      
      try {
        JSModule[] jSModuleArray0 = AbstractCommandLineRunner.createJsModules(list0, list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected 2-4 colon-delimited parts in module spec: removeUnreachableCode
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      assertNotNull(list0);
      assertEquals(8, list0.size());
      assertEquals(false, list0.isEmpty());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setModule(list0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(8, list0.size());
      assertEquals(false, list0.isEmpty());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setDefine(list0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertEquals(8, list0.size());
      assertEquals(false, list0.isEmpty());
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test18()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPrintPassGraph(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setPrintTree(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "r";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[2];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[3];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[0];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = stringArray0[5];
      assertNotNull(stringArray0[6]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertNotNull(compilerOptions0);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.gatherCssNames);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setVariableMapOutputFile(compilerOptions0.checkMissingGetCssNameBlacklist);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.gatherCssNames);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
  }

  @Test
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "r";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[2];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[3];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[3];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = stringArray0[1];
      assertNotNull(stringArray0[6]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineGetters);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.reserveRawExports);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setJsOutputFile(compilerOptions0.jsOutputFile);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineGetters);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.reserveRawExports);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test21()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setJs(stack0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setJscompWarning(stack0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test22()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      assertNotNull(list0);
      assertEquals(8, list0.size());
      assertEquals(false, list0.isEmpty());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setModule(list0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(8, list0.size());
      assertEquals(false, list0.isEmpty());
      
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      assertNotNull(defaultCodingConvention0);
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setCodingConvention(defaultCodingConvention0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertEquals(8, list0.size());
      assertEquals(false, list0.isEmpty());
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "r";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[2];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[3];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[2];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = stringArray0[1];
      assertNotNull(stringArray0[6]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setLoggingLevel(stringArray0[6]);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
  }

  @Test
  public void test24()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setModuleWrapper(list0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setOutputWrapperMarker(compilerOptions0.aliasableGlobals);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test25()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPrintPassGraph(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      String string0 = "x-&";
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setVariableMapInputFile(string0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "B.\\'%KvWE<9=<sJ_eb.";
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setJs(stack0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setCreateSourceMap(string0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test27()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPrintPassGraph(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setCreateNameMapFiles(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test28()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setModuleWrapper(list0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setPrintAst(compilerOptions0.removeDeadCode);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "r";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[2];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[3];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[3];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = stringArray0[1];
      assertNotNull(stringArray0[6]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      CompilerOptions.DevMode compilerOptions_DevMode0 = CompilerOptions.DevMode.EVERY_PASS;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setJscompDevMode(compilerOptions_DevMode0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
  }

  @Test
  public void test30()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      String string0 = "com.google.javascript.jscomp.AbstractCommandLineRunner$FlagUsageException";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      ByteString.Output byteString_Output0 = ByteString.newOutput();
      assertNotNull(byteString_Output0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) byteString_Output0);
      assertNotNull(mockPrintStream0);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setManageClosureDependencies(compilerOptions0.exportTestFunctions);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
  }

  @Test
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "r";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[2];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[3];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[2];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = stringArray0[0];
      assertNotNull(stringArray0[6]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPropertyMapOutputFile(stringArray0[0]);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
  }

  @Test
  public void test32()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(8, list0.size());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setExterns(list0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, list0.isEmpty());
      assertEquals(8, list0.size());
  }

  @Test
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[3];
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPrintPassGraph(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setPropertyMapInputFile(stringArray0[0]);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test34()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertNotNull(compilerOptions0);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ideMode);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.inlineGetters);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasExternals);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setCharset(compilerOptions0.checkMissingGetCssNameBlacklist);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ideMode);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.inlineGetters);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasExternals);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
  }

  @Test
  public void test35()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPrintPassGraph(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setJscompError(vector0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test36()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPrintPassGraph(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setJscompOff(vector0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "r";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[2];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[3];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[2];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = stringArray0[1];
      assertNotNull(stringArray0[6]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertNotNull(commandLineRunner0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      
      int int0 = (-2499);
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setSummaryDetailLevel(int0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
  }

  @Test
  public void test38()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPrintPassGraph(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setComputePhaseOrdering(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test39()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      String string0 = "' depends on unknown module '";
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setModuleOutputPathPrefix(string0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setOutputWrapper(string0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
  }
}
