/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:02:43 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckPropertyOrder;
import com.google.javascript.jscomp.CheckSideEffects;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.TypeCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class LightweightMessageFormatterEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-31);
      String string0 = "^\n";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals(-31, simpleRegion0.getEndingLineNumber());
      assertEquals(-31, simpleRegion0.getBeginningLineNumber());
      assertEquals("^\n", simpleRegion0.getSourceExcerpt());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("  -31| ^", string1);
      assertEquals(-31, simpleRegion0.getEndingLineNumber());
      assertEquals(-31, simpleRegion0.getBeginningLineNumber());
      assertEquals("^\n", simpleRegion0.getSourceExcerpt());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      SimpleRegion simpleRegion1 = new SimpleRegion(int0, int0, string1);
      assertNotNull(simpleRegion1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(simpleRegion0, simpleRegion1);
      assertNotSame(simpleRegion1, simpleRegion0);
      assertEquals(-31, simpleRegion0.getEndingLineNumber());
      assertEquals(-31, simpleRegion0.getBeginningLineNumber());
      assertEquals("^\n", simpleRegion0.getSourceExcerpt());
      assertEquals("  -31| ^", simpleRegion1.getSourceExcerpt());
      assertEquals(-31, simpleRegion1.getBeginningLineNumber());
      assertEquals(-31, simpleRegion1.getEndingLineNumber());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(simpleRegion0.equals((Object)simpleRegion1));
      assertFalse(simpleRegion1.equals((Object)simpleRegion0));
      
      String string2 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion1);
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(simpleRegion0, simpleRegion1);
      assertNotSame(simpleRegion1, simpleRegion0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("  -31|   -31| ^", string2);
      assertEquals(-31, simpleRegion0.getEndingLineNumber());
      assertEquals(-31, simpleRegion0.getBeginningLineNumber());
      assertEquals("^\n", simpleRegion0.getSourceExcerpt());
      assertEquals("  -31| ^", simpleRegion1.getSourceExcerpt());
      assertEquals(-31, simpleRegion1.getBeginningLineNumber());
      assertEquals(-31, simpleRegion1.getEndingLineNumber());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(simpleRegion0.equals((Object)simpleRegion1));
      assertFalse(simpleRegion1.equals((Object)simpleRegion0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test
  public void test1()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-47);
      String string0 = "";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals(-47, simpleRegion0.getBeginningLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(-47, simpleRegion0.getEndingLineNumber());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNull(string1);
      assertEquals(-47, simpleRegion0.getBeginningLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(-47, simpleRegion0.getEndingLineNumber());
  }

  @Test
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      assertEquals(1, sourceExcerptProvider_SourceExcerpt0.ordinal());
      assertEquals("REGION", sourceExcerptProvider_SourceExcerpt0.name());
      assertEquals("REGION", sourceExcerptProvider_SourceExcerpt0.toString());
      
      String string0 = "";
      int int0 = (-1163);
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      String string1 = sourceExcerptProvider_SourceExcerpt0.get((SourceExcerptProvider) compiler0, string0, int0, (SourceExcerptProvider.ExcerptFormatter) lightweightMessageFormatter_LineNumberingFormatter0);
      assertNull(string1);
      assertEquals(1, sourceExcerptProvider_SourceExcerpt0.ordinal());
      assertEquals("REGION", sourceExcerptProvider_SourceExcerpt0.name());
      assertEquals("REGION", sourceExcerptProvider_SourceExcerpt0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      String string0 = "X";
      int int0 = 9;
      DiagnosticType diagnosticType0 = CheckPropertyOrder.UNASSIGNED_PROPERTY;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[13];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(9, jSError0.getCharno());
      
      String string1 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("X:9: WARNING - not all control paths assign property null in function null\n", string1);
      assertEquals(9, jSError0.getCharno());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test4()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      DiagnosticType diagnosticType0 = TypeCheck.CONFLICTING_IMPLEMENTED_TYPE;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[23];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(-1, jSError0.getCharno());
      
      String string0 = lightweightMessageFormatter0.formatError(jSError0);
      assertNotNull(string0);
      assertEquals("ERROR - null cannot implement this type; an interface can only extend, but not implement interfaces\n", string0);
      assertEquals(-1, jSError0.getCharno());
  }

  @Test
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "";
      int int0 = (-1163);
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0);
      assertNotNull(lightweightMessageFormatter0);
      
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = CheckSideEffects.USELESS_CODE_ERROR;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[3];
      JSError jSError0 = JSError.make(string0, int0, int0, checkLevel0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(-1163, jSError0.getCharno());
      
      String string1 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(": WARNING - Suspicious code. null\n", string1);
      assertEquals(-1163, jSError0.getCharno());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }
}
