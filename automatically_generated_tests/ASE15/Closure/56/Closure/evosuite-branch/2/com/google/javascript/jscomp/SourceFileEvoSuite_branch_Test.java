/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:26:39 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceFile;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringBufferInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;

import org.junit.runner.RunWith;

 
public class SourceFileEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "t9dCU3I^ff!1D";
      byte byte0 = (byte)105;
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.toString());
      
      String string1 = sourceFile_OnDisk0.getLine((int) byte0);
      assertNull(string1);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.toString());
      
      // Undeclared exception!
      try {
        int int0 = sourceFile_OnDisk0.getLineOffset((int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 105
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "\n";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("\n", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("\n", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\n", sourceFile_Preloaded0.toString());
      
      int int0 = 0;
      SimpleRegion simpleRegion0 = (SimpleRegion)sourceFile_Preloaded0.getRegion(int0);
      assertNotNull(simpleRegion0);
      assertEquals(2, simpleRegion0.getEndingLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals("\n", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("\n", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\n", sourceFile_Preloaded0.toString());
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "%s (%s) must be less than size (%s)";
      String string1 = "\n";
      assertNotSame(string1, string0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.toString());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getName());
      
      int int0 = 2227;
      Region region0 = sourceFile_Preloaded0.getRegion(int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(region0);
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.toString());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getName());
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = ",R>PaXWR@B]";
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(",R>PaXWR@B]", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(",R>PaXWR@B]", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals(",R>PaXWR@B]", sourceFile_Preloaded0.getName());
      
      int int0 = 0;
      SimpleRegion simpleRegion0 = (SimpleRegion)sourceFile_Preloaded0.getRegion(int0);
      assertNotNull(simpleRegion0);
      assertEquals(",R>PaXWR@B]", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(",R>PaXWR@B]", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals(",R>PaXWR@B]", sourceFile_Preloaded0.getName());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals(1, simpleRegion0.getEndingLineNumber());
      assertEquals(",R>PaXWR@B]", simpleRegion0.getSourceExcerpt());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "t9dCU3I^ff!1D";
      int int0 = (-1);
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.getOriginalPath());
      
      String string1 = sourceFile_OnDisk0.getLine(int0);
      assertNull(string1);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.getOriginalPath());
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "\n";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("\n", sourceFile_Preloaded0.getName());
      assertEquals("\n", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\n", sourceFile_Preloaded0.getOriginalPath());
      
      int int0 = 0;
      String string1 = sourceFile_Preloaded0.getLine(int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", sourceFile_Preloaded0.getName());
      assertEquals("\n", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\n", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("", string1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "%s (%s) must be less than size (%s)";
      String string1 = "\n";
      assertNotSame(string1, string0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getName());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.toString());
      
      int int0 = 2227;
      String string2 = sourceFile_Preloaded0.getLine(int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(string2);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getName());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.toString());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "UQ1]c&=";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.toString());
      
      int int0 = (-459);
      String string1 = sourceFile_Preloaded0.getLine(int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.toString());
      assertEquals("UQ1]c&=", string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "UQ1]c&=";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.toString());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getName());
      
      boolean boolean0 = sourceFile_Preloaded0.hasSourceInMemory();
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.toString());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getName());
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "fV8-E";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk0.toString());
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk0.getName());
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      
      try {
        Reader reader0 = sourceFile_OnDisk0.getCodeReader();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "UF";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("UF", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UF", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UF", sourceFile_Preloaded0.toString());
      
      String string1 = sourceFile_Preloaded0.getOriginalPath();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("UF", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UF", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UF", sourceFile_Preloaded0.toString());
      assertEquals("UF", string1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "KVT}nRiW*SGj%]oP&2[";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.toString());
      
      String string1 = sourceFile_OnDisk0.getOriginalPath();
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.toString());
      assertEquals("KVT}nRiW*SGj%]oP&2[", string1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "-[Y7K-H*v[}Vy%Q{(";
      String string1 = "\nActual: ";
      assertNotSame(string1, string0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("-[Y7K-H*v[}Vy%Q{(", sourceFile_Preloaded0.getName());
      assertEquals("-[Y7K-H*v[}Vy%Q{(", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("-[Y7K-H*v[}Vy%Q{(", sourceFile_Preloaded0.toString());
      
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("-[Y7K-H*v[}Vy%Q{(", sourceFile_Preloaded0.getName());
      assertEquals("-[Y7K-H*v[}Vy%Q{(", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("-[Y7K-H*v[}Vy%Q{(", sourceFile_Preloaded0.toString());
      assertEquals(2, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "`$k641T;M\\Ww69(0";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile((File) mockFile0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("`$k641T;M\\Ww69(0", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("`$k641T;M\\Ww69(0", sourceFile_OnDisk0.toString());
      assertEquals("`$k641T;M\\Ww69(0", sourceFile_OnDisk0.getOriginalPath());
      
      int int0 = 1;
      int int1 = sourceFile_OnDisk0.getLineOffset(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("`$k641T;M\\Ww69(0", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("`$k641T;M\\Ww69(0", sourceFile_OnDisk0.toString());
      assertEquals("`$k641T;M\\Ww69(0", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(0, int1);
      
      int int2 = sourceFile_OnDisk0.getNumLines();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals("`$k641T;M\\Ww69(0", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("`$k641T;M\\Ww69(0", sourceFile_OnDisk0.toString());
      assertEquals("`$k641T;M\\Ww69(0", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(1, int2);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "t9dCU3I^ff!1D";
      int int0 = (-1);
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/t9dCU3I^ff!1D0t9dCU3I^ff!1D", sourceFile_OnDisk0.getName());
      
      // Undeclared exception!
      try {
        int int1 = sourceFile_OnDisk0.getLineOffset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: -1
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "UTF-8";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("UTF-8", sourceFile_Preloaded0.getName());
      assertEquals("UTF-8", sourceFile_Preloaded0.toString());
      assertEquals("UTF-8", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals("UTF-8", sourceFile_Preloaded0.getName());
      assertEquals("UTF-8", sourceFile_Preloaded0.toString());
      assertEquals("UTF-8", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals(1, int0);
      
      int int1 = sourceFile_Preloaded0.getLineOffset(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("UTF-8", sourceFile_Preloaded0.getName());
      assertEquals("UTF-8", sourceFile_Preloaded0.toString());
      assertEquals("UTF-8", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals(0, int1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "";
      SourceFile.Preloaded sourceFile_Preloaded0 = null;
      try {
        sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = null;
      SourceFile.Preloaded sourceFile_Preloaded0 = null;
      try {
        sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "t9dCU3I^ff!1D";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(false, stringBufferInputStream0.markSupported());
      assertEquals(14, stringBufferInputStream0.available());
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromInputStream(string0, (InputStream) stringBufferInputStream0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("t9dCU3I^ff!1D", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("t9dCU3I^ff!1D", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("t9dCU3I^ff!1D", sourceFile_Preloaded0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(false, stringBufferInputStream0.markSupported());
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "UQ1]c&=";
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.toString());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getOriginalPath());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "UQ1]c&=";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.toString());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      
      StringReader stringReader0 = (StringReader)sourceFile_Preloaded0.getCodeReader();
      assertNotNull(stringReader0);
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.toString());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
      
      SourceFile.Preloaded sourceFile_Preloaded1 = (SourceFile.Preloaded)SourceFile.fromReader(string0, (Reader) stringReader0);
      assertNotSame(sourceFile_Preloaded0, sourceFile_Preloaded1);
      assertNotSame(sourceFile_Preloaded1, sourceFile_Preloaded0);
      assertFalse(sourceFile_Preloaded0.equals((Object)sourceFile_Preloaded1));
      assertFalse(sourceFile_Preloaded1.equals((Object)sourceFile_Preloaded0));
      assertNotNull(sourceFile_Preloaded1);
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.toString());
      assertEquals("UQ1]c&=", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
      assertEquals("UQ1]c&=", sourceFile_Preloaded1.getOriginalPath());
      assertEquals("UQ1]c&=", sourceFile_Preloaded1.getName());
      assertEquals(false, sourceFile_Preloaded1.isExtern());
      assertEquals("UQ1]c&=", sourceFile_Preloaded1.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "%s (%s) must be less than size (%s)";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.toString());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      
      String string1 = sourceFile_Preloaded0.getCode();
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.toString());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("%s (%s) must be less than size (%s)", string1);
      
      InputStream inputStream0 = null;
      // Undeclared exception!
      try {
        SourceFile sourceFile0 = SourceFile.fromInputStream(string1, string1, inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "UTF-8";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UTF-8", sourceFile_Preloaded0.getName());
      assertEquals("UTF-8", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UTF-8", sourceFile_Preloaded0.toString());
      
      String string1 = sourceFile_Preloaded0.toString();
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UTF-8", sourceFile_Preloaded0.getName());
      assertEquals("UTF-8", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UTF-8", sourceFile_Preloaded0.toString());
      assertEquals("UTF-8", string1);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "UF";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("UF", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UF", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UF", sourceFile_Preloaded0.getName());
      
      sourceFile_Preloaded0.clearCachedSource();
      assertEquals("UF", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UF", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UF", sourceFile_Preloaded0.getName());
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "KVT}nRiW*SGj%]oP&2[";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getName());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.toString());
      
      String string1 = sourceFile_OnDisk0.getName();
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getName());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.toString());
      assertEquals("KVT}nRiW*SGj%]oP&2[", string1);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string1, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_Preloaded0.toString());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getName());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.toString());
      
      String string2 = sourceFile_Preloaded0.getCodeNoCache();
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_Preloaded0.toString());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getName());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.toString());
      assertEquals("KVT}nRiW*SGj%]oP&2[", string2);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "KVT}nRiW*SGj%]oP&2[";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getName());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.toString());
      
      boolean boolean0 = sourceFile_OnDisk0.isExtern();
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getName());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "KVT}nRiW*SGj%]oP&2[";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getName());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.toString());
      
      boolean boolean0 = true;
      sourceFile_OnDisk0.setIsExtern(boolean0);
      assertEquals(true, sourceFile_OnDisk0.isExtern());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.getName());
      assertEquals("KVT}nRiW*SGj%]oP&2[", sourceFile_OnDisk0.toString());
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "%s (%s) must be less than size (%s)";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getName());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.toString());
      
      String string1 = sourceFile_Preloaded0.getCode();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getName());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.toString());
      assertEquals("%s (%s) must be less than size (%s)", string1);
      
      Charset charset0 = null;
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string1, charset0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_OnDisk0.getName());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getName());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.toString());
      
      sourceFile_OnDisk0.clearCachedSource();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_OnDisk0.getName());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.getName());
      assertEquals("%s (%s) must be less than size (%s)", sourceFile_Preloaded0.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "fV8-E";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk0.toString());
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      
      Charset charset0 = sourceFile_OnDisk0.getCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk0.toString());
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      
      SourceFile.OnDisk sourceFile_OnDisk1 = new SourceFile.OnDisk(mockFile0, charset0);
      assertNotSame(sourceFile_OnDisk0, sourceFile_OnDisk1);
      assertNotSame(sourceFile_OnDisk1, sourceFile_OnDisk0);
      assertFalse(sourceFile_OnDisk0.equals((Object)sourceFile_OnDisk1));
      assertFalse(sourceFile_OnDisk1.equals((Object)sourceFile_OnDisk0));
      assertNotNull(sourceFile_OnDisk1);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk0.toString());
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk1.getName());
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk1.toString());
      assertEquals(false, sourceFile_OnDisk1.isExtern());
      assertEquals("fV8-E/fV8-E", sourceFile_OnDisk1.getOriginalPath());
  }
}
