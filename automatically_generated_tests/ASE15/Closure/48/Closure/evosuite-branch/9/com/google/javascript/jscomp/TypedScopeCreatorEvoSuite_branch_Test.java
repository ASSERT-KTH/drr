/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:35:15 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class TypedScopeCreatorEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "com.gooDle.javascript.jscomp.TypedScopeCreator";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(node0);
      
      CodingConvention codingConvention0 = null;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(codingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNotNull(closureCodingConvention0);
      
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertEquals(false, node1.isGetElem());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isAnd());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isVoid());
      assertEquals(0, node1.getLength());
      assertEquals(" [testcode] ", node1.getSourceFileName());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isNot());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isBlock());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isDec());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isFunction());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isCase());
      assertEquals(true, node1.isScript());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      node0.addChildToFront(node1);
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node1.isGetElem());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isAnd());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isVoid());
      assertEquals(0, node1.getLength());
      assertEquals(" [testcode] ", node1.getSourceFileName());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isNot());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isBlock());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isDec());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isFunction());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isCase());
      assertEquals(true, node1.isScript());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(32, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertNotNull(scope0);
      
      double double0 = 28.83699693429778;
      int int0 = (-84);
      Node node2 = Node.newNumber(double0, int0, int0);
      assertEquals(false, node2.isAssign());
      assertEquals(false, node2.isGetterDef());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isTrue());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isDo());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isCase());
      assertEquals(false, node2.isThis());
      assertEquals(true, node2.isNumber());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isGetProp());
      assertEquals(false, node2.isNot());
      assertEquals(false, node2.isEmpty());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isOr());
      assertEquals(false, node2.isVar());
      assertEquals(false, node2.isTry());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSwitch());
      assertEquals(false, node2.isFromExterns());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isSetterDef());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isParamList());
      assertEquals(false, node2.isBlock());
      assertEquals(false, node2.isLabelName());
      assertEquals(false, node2.isFunction());
      assertEquals(false, node2.isScript());
      assertEquals(false, node2.isExprResult());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isThrow());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(false, node2.isReturn());
      assertEquals(false, node2.isInc());
      assertEquals(false, node2.isFor());
      assertEquals(0, node2.getLength());
      assertEquals(false, node2.isVoid());
      assertEquals(false, node2.isAdd());
      assertEquals(false, node2.isCall());
      assertEquals(false, node2.isDefaultCase());
      assertEquals(false, node2.isArrayLit());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isHook());
      assertEquals(false, node2.isLabel());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isRegExp());
      assertNull(node2.getSourceFileName());
      assertEquals(false, node2.isString());
      assertEquals(false, node2.isName());
      assertEquals(false, node2.isIf());
      assertEquals(false, node2.isFalse());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isComma());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isNew());
      assertEquals(false, node2.isNull());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isDec());
      assertEquals(false, node2.isObjectLit());
      assertEquals(false, node2.isCatch());
      assertEquals(false, node2.isGetElem());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isAnd());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      
      node2.addChildToFront(node0);
      assertEquals(false, node2.isAssign());
      assertEquals(false, node2.isGetterDef());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isTrue());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isDo());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isCase());
      assertEquals(false, node2.isThis());
      assertEquals(true, node2.isNumber());
      assertEquals(false, node2.isGetProp());
      assertEquals(false, node2.isNot());
      assertEquals(false, node2.isEmpty());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isOr());
      assertEquals(false, node2.isVar());
      assertEquals(false, node2.isTry());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSwitch());
      assertEquals(false, node2.isFromExterns());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isSetterDef());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isParamList());
      assertEquals(false, node2.isBlock());
      assertEquals(false, node2.isLabelName());
      assertEquals(false, node2.isFunction());
      assertEquals(false, node2.isScript());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.isExprResult());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isThrow());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(false, node2.isReturn());
      assertEquals(false, node2.isInc());
      assertEquals(false, node2.isFor());
      assertEquals(0, node2.getLength());
      assertEquals(false, node2.isVoid());
      assertEquals(false, node2.isAdd());
      assertEquals(false, node2.isCall());
      assertEquals(false, node2.isDefaultCase());
      assertEquals(false, node2.isArrayLit());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isHook());
      assertEquals(false, node2.isLabel());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isRegExp());
      assertNull(node2.getSourceFileName());
      assertEquals(false, node2.isString());
      assertEquals(false, node2.isName());
      assertEquals(false, node2.isIf());
      assertEquals(false, node2.isFalse());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isComma());
      assertEquals(false, node2.isNew());
      assertEquals(false, node2.isNull());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isDec());
      assertEquals(false, node2.isObjectLit());
      assertEquals(false, node2.isCatch());
      assertEquals(false, node2.isGetElem());
      assertEquals(false, node2.isAnd());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      
      Scope scope1 = typedScopeCreator0.createScope(node2, scope0);
      assertEquals(false, node2.isAssign());
      assertEquals(false, node2.isGetterDef());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isTrue());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isDo());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isCase());
      assertEquals(false, node2.isThis());
      assertEquals(true, node2.isNumber());
      assertEquals(false, node2.isGetProp());
      assertEquals(false, node2.isNot());
      assertEquals(false, node2.isEmpty());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isOr());
      assertEquals(false, node2.isVar());
      assertEquals(false, node2.isTry());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSwitch());
      assertEquals(false, node2.isFromExterns());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isSetterDef());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isParamList());
      assertEquals(false, node2.isBlock());
      assertEquals(false, node2.isLabelName());
      assertEquals(false, node2.isFunction());
      assertEquals(false, node2.isScript());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.isExprResult());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isThrow());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(false, node2.isReturn());
      assertEquals(false, node2.isInc());
      assertEquals(false, node2.isFor());
      assertEquals(0, node2.getLength());
      assertEquals(false, node2.isVoid());
      assertEquals(false, node2.isAdd());
      assertEquals(false, node2.isCall());
      assertEquals(false, node2.isDefaultCase());
      assertEquals(false, node2.isArrayLit());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isHook());
      assertEquals(false, node2.isLabel());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isRegExp());
      assertNull(node2.getSourceFileName());
      assertEquals(false, node2.isString());
      assertEquals(false, node2.isName());
      assertEquals(false, node2.isIf());
      assertEquals(false, node2.isFalse());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isComma());
      assertEquals(false, node2.isNew());
      assertEquals(false, node2.isNull());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isDec());
      assertEquals(false, node2.isObjectLit());
      assertEquals(false, node2.isCatch());
      assertEquals(false, node2.isGetElem());
      assertEquals(false, node2.isAnd());
      assertEquals(true, scope0.isGlobal());
      assertEquals(32, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, scope1.isGlobal());
      assertEquals(1, scope1.getVarCount());
      assertEquals(true, scope1.isLocal());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(scope1.equals((Object)scope0));
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(scope0, scope1);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(scope1, scope0);
      assertNotNull(scope1);
  }

  @Test
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "oVjaVjI.ola;d";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isHook());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThrow());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFalse());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      CodingConvention codingConvention0 = null;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(codingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNotNull(closureCodingConvention0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNotNull(typedScopeCreator0);
      
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(defaultPassConfig0);
      
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(compilerOptions0);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(result0);
      
      Scope scope0 = null;
      // Undeclared exception!
      try {
        Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "Aca_=tiveXObject";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFor());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(node0);
      
      CodingConvention codingConvention0 = null;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(codingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNotNull(closureCodingConvention0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFor());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(32, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertNotNull(scope0);
      
      double double0 = 0.0;
      int int0 = 22;
      Node node1 = Node.newNumber(double0, int0, int0);
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isThrow());
      assertEquals(22, node1.getLineno());
      assertEquals(false, node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isThis());
      assertEquals(22, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isAssign());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isQuotedString());
      assertEquals(39, node1.getType());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isCase());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isVoid());
      assertEquals(90134, node1.getSourcePosition());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.isNumber());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isVar());
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      node1.addChildToFront(node0);
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isNull());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isThrow());
      assertEquals(22, node1.getLineno());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isThis());
      assertEquals(22, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isReturn());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isAssign());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isQuotedString());
      assertEquals(39, node1.getType());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isCase());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isVoid());
      assertEquals(90134, node1.getSourcePosition());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.isNumber());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isVar());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFor());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      Scope scope1 = typedScopeCreator0.createScope(node1, scope0);
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isNull());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isThrow());
      assertEquals(22, node1.getLineno());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isThis());
      assertEquals(22, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isReturn());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isAssign());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isQuotedString());
      assertEquals(39, node1.getType());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isCase());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isVoid());
      assertEquals(90134, node1.getSourcePosition());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.isNumber());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isVar());
      assertEquals(true, scope1.isLocal());
      assertEquals(false, scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFor());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(32, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(scope0.equals((Object)scope1));
      assertNotSame(node1, node0);
      assertNotSame(scope1, scope0);
      assertNotSame(node0, node1);
      assertNotSame(scope0, scope1);
      assertNotNull(scope1);
  }

  @Test
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "o5wgljatjX.ocleat=d";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOr());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertNotNull(node0);
      
      CodingConvention codingConvention0 = null;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(codingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNotNull(closureCodingConvention0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = null;
      // Undeclared exception!
      try {
        Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "o5wgljatjX.ocleat=d";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertNotNull(node0);
      
      CodingConvention codingConvention0 = null;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(codingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNotNull(closureCodingConvention0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(32, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNotNull(scope0);
      
      typedScopeCreator0.patchGlobalScope(scope0, node0);
      assertEquals(32, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
  }

  @Test
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "c:m.blo|P.jvascript.jscoip.SourceFile$Ge_lrated";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.hasOneChild());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertNotNull(node0);
      
      CodingConvention codingConvention0 = null;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(codingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNotNull(closureCodingConvention0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(32, scope0.getVarCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.hasOneChild());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertNotNull(scope0);
      
      typedScopeCreator0.patchGlobalScope(scope0, node0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(32, scope0.getVarCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.hasOneChild());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
  }

  @Test
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "99";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLabel());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isComma());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      CodingConvention codingConvention0 = null;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(codingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNotNull(closureCodingConvention0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(32, scope0.getVarCount());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLabel());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isComma());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(scope0);
      
      double double0 = 0.0;
      int int0 = 4;
      Node node1 = Node.newNumber(double0, int0, int0);
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(39, node1.getType());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isThrow());
      assertEquals(4, node1.getLineno());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isDec());
      assertEquals(16388, node1.getSourcePosition());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isLabelName());
      assertEquals(4, node1.getCharno());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.isNumber());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isSwitch());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.hasChildren());
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      node1.addChildToFront(node0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isAssign());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(39, node1.getType());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isThrow());
      assertEquals(4, node1.getLineno());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isDec());
      assertEquals(16388, node1.getSourcePosition());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isLabelName());
      assertEquals(4, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.isNumber());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isScript());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLabel());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isComma());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      Scope scope1 = typedScopeCreator0.createScope(node1, scope0);
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(32, scope0.getVarCount());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, scope1.getVarCount());
      assertEquals(true, scope1.isLocal());
      assertEquals(false, scope1.isGlobal());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isAssign());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(39, node1.getType());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isThrow());
      assertEquals(4, node1.getLineno());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isDec());
      assertEquals(16388, node1.getSourcePosition());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isLabelName());
      assertEquals(4, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.isNumber());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isScript());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLabel());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isComma());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(scope1);
  }
}
