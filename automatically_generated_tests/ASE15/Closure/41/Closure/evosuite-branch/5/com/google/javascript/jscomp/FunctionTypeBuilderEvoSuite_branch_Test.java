/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:50:02 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.FunctionTypeBuilder;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FunctionTypeBuilderEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Node node0 = null;
      Node node1 = AbstractPeepholeOptimization.validateResult(node0);
      assertNull(node1);
      
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node1);
      assertNotNull(functionTypeBuilder_AstFunctionContents0);
      
      String string0 = "attempted re-definition of type {0}\nfound   : {1} expected: {2}";
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName(string0);
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName(string0);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 71;
      Node node0 = new Node(int0);
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(71, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDo());
      assertNotNull(node0);
      
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(71, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDo());
      assertNotNull(functionTypeBuilder_AstFunctionContents0);
      
      Iterable<String> iterable0 = functionTypeBuilder_AstFunctionContents0.getEscapedVarNames();
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(71, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDo());
      assertNotNull(iterable0);
  }

  @Test
  public void test02()  throws Throwable  {
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      assertNotNull(functionTypeBuilder_UnknownFunctionContents0);
      
      Node node0 = functionTypeBuilder_UnknownFunctionContents0.getSourceNode();
      assertNull(node0);
      
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      assertNotNull(functionTypeBuilder_AstFunctionContents0);
      
      String string0 = "zWSgK";
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName(string0);
      Iterable<String> iterable0 = functionTypeBuilder_AstFunctionContents0.getEscapedVarNames();
      assertNotNull(iterable0);
  }

  @Test
  public void test03()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNotNull(jSDocInfo0);
      
      boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "t(*V\"T";
      AbstractCompiler abstractCompiler0 = null;
      Node node0 = Node.newString(string0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetterDef());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertNotNull(node0);
      
      Scope scope0 = null;
      String string1 = null;
      FunctionTypeBuilder functionTypeBuilder0 = null;
      try {
        functionTypeBuilder0 = new FunctionTypeBuilder(string1, abstractCompiler0, node0, string0, scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Node node0 = null;
      Node node1 = AbstractPeepholeOptimization.validateResult(node0);
      assertNull(node1);
      
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node1);
      assertNotNull(functionTypeBuilder_AstFunctionContents0);
      
      functionTypeBuilder_AstFunctionContents0.recordNonEmptyReturn();
  }

  @Test
  public void test06()  throws Throwable  {
      Node node0 = null;
      Node node1 = AbstractPeepholeOptimization.validateResult(node0);
      assertNull(node1);
      
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node1);
      assertNotNull(functionTypeBuilder_AstFunctionContents0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = functionTypeBuilder_AstFunctionContents0.mayBeFromExterns();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 71;
      Node node0 = new Node(int0);
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(71, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertNotNull(node0);
      
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(71, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertNotNull(functionTypeBuilder_AstFunctionContents0);
      
      Node node1 = functionTypeBuilder_AstFunctionContents0.getSourceNode();
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(71, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isNot());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isTrue());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isObjectLit());
      assertEquals(71, node1.getType());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isWhile());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isFalse());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isCatch());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isArrayLit());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isExprResult());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test
  public void test08()  throws Throwable  {
      Node node0 = null;
      Node node1 = AbstractPeepholeOptimization.validateResult(node0);
      assertNull(node1);
      
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node1);
      assertNotNull(functionTypeBuilder_AstFunctionContents0);
      
      boolean boolean0 = functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns();
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      assertNotNull(functionTypeBuilder_UnknownFunctionContents0);
      
      boolean boolean0 = functionTypeBuilder_UnknownFunctionContents0.mayHaveNonEmptyReturns();
      assertTrue(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "";
      AbstractCompiler abstractCompiler0 = null;
      Node node0 = Node.newString(string0);
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertNotNull(node0);
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = null;
      try {
        functionTypeBuilder0 = new FunctionTypeBuilder(string0, abstractCompiler0, node0, string0, scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      assertNotNull(functionTypeBuilder_UnknownFunctionContents0);
      
      boolean boolean0 = functionTypeBuilder_UnknownFunctionContents0.mayBeFromExterns();
      assertTrue(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      assertNotNull(functionTypeBuilder_UnknownFunctionContents0);
      
      Iterable<String> iterable0 = functionTypeBuilder_UnknownFunctionContents0.getEscapedVarNames();
      assertNotNull(iterable0);
  }
}
