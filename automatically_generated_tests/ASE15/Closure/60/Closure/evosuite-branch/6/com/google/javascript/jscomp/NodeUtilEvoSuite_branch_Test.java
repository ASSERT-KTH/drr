/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:41:32 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NameReferenceGraph;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.TernaryValue;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockError;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class NodeUtilEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      int int0 = 102;
      String string0 = "iYO0]sE]#nde=Wx=:";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(102, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      
      Predicate<Node> predicate0 = null;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(102, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertTrue(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      int int0 = 71;
      String string0 = "iYO/0]sE]#nde=Wx=:";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(71, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      
      Predicate<Node> predicate0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeESCXMLATTR iYO/0]sE]#nde=Wx=:
         //  parent:null
         //
      }
  }

  @Test
  public void test002()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      
      String string0 = "is_dispatcher";
      int int0 = (-140);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      
      String string1 = NodeUtil.getSourceName(node0);
      assertNull(string1);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
  }

  @Test
  public void test003()  throws Throwable  {
      int int0 = (-2317);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2317, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      
      // Undeclared exception!
      try {
        JSDocInfo jSDocInfo0 = NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test004()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
  }

  @Test
  public void test005()  throws Throwable  {
      Node node0 = null;
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test
  public void test006()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "JRI@v0YT<Z+l$%.D;Gf";
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(125, node0.getType());
      assertEquals("JRI@v0YT<Z+l$%.D;Gf", node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getFunctionParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test007()  throws Throwable  {
      int int0 = 145;
      String string0 = "WF G[H^'s!";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(145, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "";
      int int0 = 49;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = 65501;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(268296191, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(65501, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(65501, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      
      String string0 = "|dVpBy%";
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      assertNotNull(nodeUtil_MatchShallowStatement0);
      
      Node node1 = NodeUtil.newVarNode(string0, node0);
      assertNotNull(node1);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(268296191, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(65501, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(65501, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(118, node1.getType());
      assertEquals(true, node1.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(65501, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(4095, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isFromExterns());
      assertEquals(268296191, node1.getSourcePosition());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      int int1 = NodeUtil.getCount(node1, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(268296191, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(65501, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(65501, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(118, node1.getType());
      assertEquals(true, node1.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(65501, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(4095, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isFromExterns());
      assertEquals(268296191, node1.getSourcePosition());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, int1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test
  public void test010()  throws Throwable  {
      int int0 = 102;
      String string0 = "iYO0]sE]#nde=Wx=:";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(102, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      Node node1 = NodeUtil.newExpr(node0);
      assertNotNull(node1);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(102, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isFromExterns());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(130, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNull(node1.getSourceFileName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasOneChild());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      boolean boolean0 = NodeUtil.containsType(node1, int0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(102, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isFromExterns());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(130, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNull(node1.getSourceFileName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasOneChild());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test
  public void test011()  throws Throwable  {
      int int0 = 102;
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "lt";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      assertNotNull(nodeUtil_BooleanResultPredicate0);
      
      boolean boolean0 = NodeUtil.containsType(node0, int0, nodeUtil_BooleanResultPredicate0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      int int0 = 65500;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(65500, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(268292095, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(65500, node0.getLineno());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      assertNotNull(nodeUtil_MatchShallowStatement0);
      
      String string0 = "2`5pwL2MM#?E?[@Mw";
      Node node1 = NodeUtil.newVarNode(string0, node0);
      assertNotNull(node1);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isFromExterns());
      assertEquals(4095, node1.getCharno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(65500, node1.getLineno());
      assertNull(node1.getSourceFileName());
      assertEquals(268292095, node1.getSourcePosition());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(true, node1.hasOneChild());
      assertEquals(118, node1.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(65500, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(268292095, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(65500, node0.getLineno());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_MatchShallowStatement0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(65500, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(268292095, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(65500, node0.getLineno());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
  }

  @Test
  public void test013()  throws Throwable  {
      int int0 = 103;
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      assertNotNull(defaultCodingConvention0);
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      
      String string0 = "Date";
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(103, node0.getLineno());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(103, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(421991, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      assertNotNull(nodeUtil_MatchShallowStatement0);
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(103, node0.getLineno());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(103, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(421991, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertTrue(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      assertNotNull(nodeUtil_MatchShallowStatement0);
      
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      
      String string0 = "NaN";
      String string1 = "={O1 +";
      assertNotSame(string1, string0);
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(string0, string1);
      assertNotNull(jSSourceFile0);
      assertEquals("NaN", jSSourceFile0.getOriginalPath());
      assertEquals("NaN", jSSourceFile0.getName());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("NaN", jSSourceFile0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      Node node0 = compiler0.parse(jSSourceFile0);
      assertNotNull(node0);
      assertEquals("NaN", jSSourceFile0.getOriginalPath());
      assertEquals("NaN", jSSourceFile0.getName());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("NaN", jSSourceFile0.toString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals("NaN", node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(1, printStreamErrorManager0.getErrorCount());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertEquals("NaN", jSSourceFile0.getOriginalPath());
      assertEquals("NaN", jSSourceFile0.getName());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("NaN", jSSourceFile0.toString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals("NaN", node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(1, printStreamErrorManager0.getErrorCount());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test015()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      String string0 = "is_dispatcher";
      int int0 = (-140);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      assertNotNull(nodeUtil_MatchDeclaration0);
      
      Node node1 = NodeUtil.newVarNode(string0, node0);
      assertNotNull(node1);
      assertNull(node1.getSourceFileName());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
      assertNull(node1.getSourceFileName());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean0);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
  }

  @Test
  public void test016()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      String string0 = "is_dispatcher";
      int int0 = (-140);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      assertNotNull(nodeUtil_MatchDeclaration0);
      
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      String string0 = "computAFunctionNames";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      
      Node node1 = NodeUtil.newName(googleCodingConvention0, string0, node0);
      assertNotNull(node1);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(true, node1.isQualifiedName());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isFromExterns());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      boolean boolean0 = NodeUtil.isNameReferenced(node1, string0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(true, node1.isQualifiedName());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isFromExterns());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = null;
      Node node1 = NodeUtil.newVarNode(string0, node0);
      assertNotNull(node1);
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(118, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getCharno());
      assertNull(node1.getSourceFileName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isFromExterns());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node1.getLineno());
  }

  @Test
  public void test019()  throws Throwable  {
      Node node0 = null;
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertNotNull(node1);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQualifiedName());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(122, node1.getType());
  }

  @Test
  public void test020()  throws Throwable  {
      int int0 = 71;
      String string0 = "iYO/0]sE]#nde=Wx=:";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(71, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(71, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      int int0 = 102;
      String string0 = "iYO0]sE]#nde=Wx=:";
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      assertNotNull(defaultCodingConvention0);
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(417894, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(38, node0.getType());
      assertEquals(102, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(102, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isUnscopedQualifiedName());
      
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(417894, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(38, node0.getType());
      assertEquals(102, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(102, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isUnscopedQualifiedName());
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = "Vv";
      boolean boolean0 = NodeUtil.isValidPropertyName(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test023()  throws Throwable  {
      int int0 = 93;
      String string0 = NodeUtil.opToStr(int0);
      assertNotNull(string0);
      assertEquals("+=", string0);
      
      boolean boolean0 = NodeUtil.isValidPropertyName(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = 119;
      String string0 = "iYO0]sE]#nde=Wx=:";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(119, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test025()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      assertNotNull(defaultCodingConvention0);
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      
      String string0 = "msg.undef.to.object";
      int int0 = (-881);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(33, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 2424;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(2424, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      
      String string0 = "]\\";
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      assertNotNull(arrayList0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      
      Node node1 = NodeUtil.newFunctionNode(string0, (List<Node>) arrayList0, node0, int0, int0);
      assertNotNull(node1);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(2424, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(3, node1.getChildCount());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(105, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(9931128, node1.getSourcePosition());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(2424, node1.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(2424, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = 1694;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1694, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1694, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(6940318, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1694, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1694, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1694, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(6940318, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1694, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
  }

  @Test
  public void test028()  throws Throwable  {
      int int0 = 65500;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(268292095, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(65500, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(65500, node0.getLineno());
      
      String string0 = "2`5pwL2MM#?E?[@Mw";
      Node node1 = NodeUtil.newVarNode(string0, node0);
      assertNotNull(node1);
      assertEquals(268292095, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(65500, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(65500, node0.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(65500, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isFromExterns());
      assertEquals(4095, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertEquals(268292095, node1.getSourcePosition());
      assertEquals(false, node1.isVarArgs());
      assertNull(node1.getSourceFileName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      // Undeclared exception!
      try {
        NodeUtil.redeclareVarsInsideBranch(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = 0;
      String string0 = NodeUtil.opToStr(int0);
      assertNull(string0);
  }

  @Test
  public void test030()  throws Throwable  {
      int int0 = 119;
      String string0 = NodeUtil.opToStr(int0);
      assertNull(string0);
  }

  @Test
  public void test031()  throws Throwable  {
      int int0 = 107;
      String string0 = NodeUtil.opToStr(int0);
      assertNull(string0);
  }

  @Test
  public void test032()  throws Throwable  {
      int int0 = 102;
      String string0 = NodeUtil.opToStr(int0);
      assertNull(string0);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = 74;
      // Undeclared exception!
      try {
        String string0 = NodeUtil.opToStrNoFail(int0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 74: REF_NS_MEMBER
         //
      }
  }

  @Test
  public void test034()  throws Throwable  {
      int int0 = 61;
      String string0 = NodeUtil.opToStr(int0);
      assertNull(string0);
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = 45;
      String string0 = NodeUtil.opToStrNoFail(int0);
      assertNotNull(string0);
      assertEquals("===", string0);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = 39;
      // Undeclared exception!
      try {
        String string0 = NodeUtil.opToStrNoFail(int0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 39: NUMBER
         //
      }
  }

  @Test
  public void test037()  throws Throwable  {
      int int0 = 27;
      String string0 = NodeUtil.opToStr(int0);
      assertNotNull(string0);
      assertEquals("~", string0);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = 19;
      String string0 = NodeUtil.opToStr(int0);
      assertNotNull(string0);
      assertEquals(">>", string0);
  }

  @Test
  public void test039()  throws Throwable  {
      int int0 = 16;
      String string0 = NodeUtil.opToStrNoFail(int0);
      assertNotNull(string0);
      assertEquals(">", string0);
  }

  @Test
  public void test040()  throws Throwable  {
      double double0 = (-821.59672374);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(boolean0);
  }

  @Test
  public void test041() {}
//   @Test
//   public void test041()  throws Throwable  {
//       String string0 = "RegExp";
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertNotNull(jSSourceFile0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("RegExp", jSSourceFile0.getOriginalPath());
//       assertEquals("RegExp", jSSourceFile0.toString());
//       assertEquals("RegExp", jSSourceFile0.getName());
//       
//       Node node0 = compiler0.parse(jSSourceFile0);
//       assertNotNull(node0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("RegExp", jSSourceFile0.getOriginalPath());
//       assertEquals("RegExp", jSSourceFile0.toString());
//       assertEquals("RegExp", jSSourceFile0.getName());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(125, node0.getType());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals("RegExp", node0.getSourceFileName());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       
//       // Undeclared exception!
//       try {
//         String string1 = NodeUtil.getObjectLitKeyName(node0);
//         fail("Expecting exception: IllegalStateException");
//       
//       } catch(IllegalStateException e) {
//          //
//          // Unexpected node type: BLOCK [source_file: RegExp]
//          //
//       }
//   }

  @Test
  public void test042()  throws Throwable  {
      String string0 = "";
      int int0 = 49;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(49, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(49, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertFalse(boolean0);
  }

  @Test
  public void test043()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      String string0 = "Vv";
      int int0 = 0;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertFalse(boolean0);
  }

  @Test
  public void test045()  throws Throwable  {
      int int0 = 2424;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(2424, node0.getType());
      
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(2424, node0.getType());
      assertFalse(boolean0);
  }

  @Test
  public void test046()  throws Throwable  {
      int int0 = 102;
      String string0 = "iYO0]sE]#nde=Wx=:";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(102, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(102, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(boolean0);
  }

  @Test
  public void test047()  throws Throwable  {
      int int0 = 2424;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(2424, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(2424, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertFalse(boolean0);
  }

  @Test
  public void test048()  throws Throwable  {
      String string0 = "";
      int int0 = 49;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      
      boolean boolean0 = NodeUtil.isArrayLiteral(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertFalse(boolean0);
  }

  @Test
  public void test049()  throws Throwable  {
      int int0 = (-3083);
      String string0 = "U#yL*)+";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-3083, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      
      boolean boolean0 = NodeUtil.isThis(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-3083, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(boolean0);
  }

  @Test
  public void test050()  throws Throwable  {
      int int0 = 65023;
      String string0 = "O~UIk&@?z ..Ez";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(65023, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = (-765);
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-765, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      
      // Undeclared exception!
      try {
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      int int0 = 119;
      String string0 = "iYO0]sE]#nde=Wx=:";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(119, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(119, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertFalse(boolean0);
  }

  @Test
  public void test053()  throws Throwable  {
      String string0 = "Vv";
      int int0 = 0;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      
      Node node1 = NodeUtil.newExpr(node0);
      assertNotNull(node1);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isFromExterns());
      assertEquals(130, node1.getType());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasOneChild());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      // Undeclared exception!
      try {
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: STRING Vv 0 of STRING Vv 0
         //
      }
  }

  @Test
  public void test054()  throws Throwable  {
      String string0 = "computAFunctionNames";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertFalse(boolean0);
  }

  @Test
  public void test055()  throws Throwable  {
      int int0 = 45;
      int int1 = NodeUtil.precedence(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(8, int1);
      
      String string0 = "VOTv";
      Node node0 = Node.newString(string0, int1, int0);
      assertNotNull(node0);
      assertEquals(32813, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(45, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(8, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // STRING VOTv 8 does not have a condition.
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = 119;
      String string0 = "iYO0]sE]#nde=Wx=:";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(119, node0.getType());
      
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(119, node0.getType());
      assertTrue(boolean0);
  }

  @Test
  public void test057()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      assertNotNull(defaultCodingConvention0);
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      
      String string0 = "Error";
      int int0 = 105;
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(105, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(430185, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(105, node0.getCharno());
      assertEquals(38, node0.getType());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      String string0 = "is_dispatcher";
      int int0 = (-140);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      Node node1 = NodeUtil.newVarNode(string0, node0);
      assertNotNull(node1);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(118, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNull(node1.getSourceFileName());
      assertEquals(-1, node1.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
  }

  @Test
  public void test059()  throws Throwable  {
      int int0 = 1694;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(6940318, node0.getSourcePosition());
      assertEquals(1694, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1694, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(1694, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(6940318, node0.getSourcePosition());
      assertEquals(1694, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1694, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(1694, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
  }

  @Test
  public void test060()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      
      String string0 = "is_dispatcher";
      int int0 = (-140);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      
      Node node1 = NodeUtil.newExpr(node0);
      assertNotNull(node1);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNull(node1.getSourceFileName());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(130, node1.getType());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference(node0, node1);
      assertNotNull(nameReferenceGraph_Reference0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNull(node1.getSourceFileName());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(130, node1.getType());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      Node node2 = nameReferenceGraph_Reference0.getSite();
      assertNotNull(node2);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(true, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(0, node2.getChildCount());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isFromExterns());
      assertEquals(true, node2.isQualifiedName());
      assertNull(node2.getSourceFileName());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(38, node2.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNull(node1.getSourceFileName());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(130, node1.getType());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNotSame(node0, node1);
      assertSame(node0, node2);
      assertNotSame(node2, node1);
      assertSame(node2, node0);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      
      boolean boolean0 = NodeUtil.isLValue(node2);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(true, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(0, node2.getChildCount());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isFromExterns());
      assertEquals(true, node2.isQualifiedName());
      assertNull(node2.getSourceFileName());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(38, node2.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNull(node1.getSourceFileName());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(130, node1.getType());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertSame(node0, node2);
      assertNotSame(node2, node1);
      assertSame(node2, node0);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
  }

  @Test
  public void test061()  throws Throwable  {
      int int0 = 2424;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(2424, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertEquals(2424, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      int int0 = 65500;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertNull(node0.getSourceFileName());
      assertEquals(4095, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(268292095, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(65500, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(65500, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertNull(node0.getSourceFileName());
      assertEquals(4095, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(268292095, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(65500, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(65500, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertFalse(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      int int0 = 1694;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1694, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(6940318, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1694, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(1694, node0.getCharno());
      
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1694, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(6940318, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1694, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(1694, node0.getCharno());
      assertFalse(boolean0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "Vv";
      int int0 = 0;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isVarArgs());
      
      boolean boolean0 = NodeUtil.isString(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertTrue(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      
      String string0 = "computeFunctionNames";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      
      Node node1 = NodeUtil.newName(googleCodingConvention0, string0, node0);
      assertNotNull(node1);
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.isQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isFromExterns());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      // Undeclared exception!
      try {
        Node node2 = NodeUtil.getAssignedValue(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-3476);
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
  }

  @Test
  public void test067()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "~H@";
      int int0 = (-75);
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertFalse(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      int int0 = (-366);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(-366, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertEquals(-366, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertFalse(boolean0);
  }

  @Test
  public void test070()  throws Throwable  {
      int int0 = (-366);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-366, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getSourcePosition());
      
      // Undeclared exception!
      try {
        int int1 = NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      int int0 = 102;
      boolean boolean0 = NodeUtil.isCommutative(int0);
      assertFalse(boolean0);
  }

  @Test
  public void test072()  throws Throwable  {
      int int0 = 2424;
      boolean boolean0 = NodeUtil.isAssociative(int0);
      assertFalse(boolean0);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "";
      int int0 = 49;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(49, node0.getLineno());
      
      boolean boolean0 = NodeUtil.isConstantName(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(49, node0.getLineno());
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.mayBeString(node0, boolean0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(49, node0.getLineno());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test074()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertNotNull(node1);
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      assertNotNull(nodeUtil_MayBeStringResultPredicate0);
      
      boolean boolean1 = nodeUtil_MayBeStringResultPredicate0.apply(node1);
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertFalse(boolean1 == boolean0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0 == boolean1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean1);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      
      boolean boolean0 = NodeUtil.isBooleanResult(node0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertFalse(boolean0);
  }

  @Test
  public void test076()  throws Throwable  {
      int int0 = 26;
      String string0 = "&JyQ/5WQp";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(106522, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(26, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(26, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(26, node0.getType());
      assertEquals(false, node0.isFromExterns());
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      assertNotNull(nodeUtil_MayBeStringResultPredicate0);
      
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(106522, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(26, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(26, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(26, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertFalse(boolean0);
  }

  @Test
  public void test077()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      String string0 = "is_dispatcher";
      int int0 = (-140);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals(0, node0.getChildCount());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals(0, node0.getChildCount());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertTrue(boolean0);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "4";
      int int0 = 28;
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(28, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(28, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(28, node0.getType());
      assertEquals(114716, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(28, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(28, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(28, node0.getType());
      assertEquals(114716, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertFalse(boolean0);
  }

  @Test
  public void test079()  throws Throwable  {
      int int0 = 18;
      String string0 = "&Jy>WFV";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(18, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(18, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(73746, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(18, node0.getType());
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      assertNotNull(nodeUtil_MayBeStringResultPredicate0);
      
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(18, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(18, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(73746, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(18, node0.getType());
      assertFalse(boolean0);
  }

  @Test
  public void test080()  throws Throwable  {
      int int0 = 767;
      // Undeclared exception!
      try {
        int int1 = NodeUtil.precedence(int0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=767> (type 767)
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      int int0 = 97;
      int int1 = NodeUtil.precedence(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
  }

  @Test
  public void test082()  throws Throwable  {
      int int0 = 85;
      int int1 = NodeUtil.precedence(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test083()  throws Throwable  {
      int int0 = 66;
      // Undeclared exception!
      try {
        int int1 = NodeUtil.precedence(int0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=66> (type 66)
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      int int0 = 23;
      int int1 = NodeUtil.precedence(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(12, int1);
  }

  @Test
  public void test085()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-3476);
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "SYNTAX_ERROR_TYPE";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = 85;
      String string0 = "hk!m:6LS^@K9SO*[,";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(85, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got COMMA
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "Vv";
      int int0 = 0;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      
      Node node1 = NodeUtil.newExpr(node0);
      assertNotNull(node1);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(130, node1.getType());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isFromExterns());
      assertEquals(0, node1.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(130, node1.getType());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isFromExterns());
      assertEquals(0, node1.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
  }

  @Test
  public void test089()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      String string0 = "is_dispatcher";
      int int0 = (-140);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      Node node1 = NodeUtil.newVarNode(string0, node0);
      assertNotNull(node1);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(118, node1.getType());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.hasOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(118, node1.getType());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.hasOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean0);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
  }

  @Test
  public void test090()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      String string0 = "is_dispatcher";
      int int0 = (-140);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(38, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isQualifiedName());
      
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(38, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isQualifiedName());
      assertFalse(boolean0);
  }

  @Test
  public void test091()  throws Throwable  {
      int int0 = 1694;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(1694, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1694, node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(6940318, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1694, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      Logger logger0 = null;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1694, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1694, node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(6940318, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1694, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertTrue(boolean0);
  }

  @Test
  public void test092()  throws Throwable  {
      int int0 = 119;
      String string0 = "iYO0]sE]#nde=Wx=:";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(119, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      
      Predicate<Node> predicate0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeWITH iYO0]sE]#nde=Wx=:
         //  parent:null
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      int int0 = 102;
      String string0 = "iYO0]sE]#nde=Wx=:";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(102, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      
      AbstractCompiler abstractCompiler0 = null;
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(102, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertTrue(boolean0);
  }

  @Test
  public void test094()  throws Throwable  {
      int int0 = 23;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>(int0);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      assertNotNull(node0);
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLP
         //  parent:null
         //
      }
  }

  @Test
  public void test095()  throws Throwable  {
      int int0 = 80;
      String string0 = "iYO/0]sE]#nde=Wx=:";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(80, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      
      Predicate<Node> predicate0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRB iYO/0]sE]#nde=Wx=:
         //  parent:null
         //
      }
  }

  @Test
  public void test096()  throws Throwable  {
      int int0 = 71;
      String string0 = "iYO/0]sE]#nde=Wx=:";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(71, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(71, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertTrue(boolean0);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "iYO/0]sE]#nde=Wx=:";
      int int0 = 62;
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(62, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      
      Predicate<Node> predicate0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRETURN_RESULT iYO/0]sE]#nde=Wx=:
         //  parent:null
         //
      }
  }

  @Test
  public void test098()  throws Throwable  {
      int int0 = 18;
      String string0 = "&Jy>WFV";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(18, node0.getType());
      assertEquals(73746, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(18, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(18, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(18, node0.getType());
      assertEquals(73746, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(18, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(18, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertTrue(boolean0);
  }

  @Test
  public void test099()  throws Throwable  {
      int int0 = 10;
      boolean boolean0 = NodeUtil.isSimpleOperatorType(int0);
      assertTrue(boolean0);
  }

  @Test
  public void test100()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      
      String string0 = "is_dispatcher";
      int int0 = (-140);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertFalse(boolean0);
  }

  @Test
  public void test101()  throws Throwable  {
      int int0 = 1694;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(1694, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1694, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(1694, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(6940318, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      
      Set<String> set0 = null;
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(1694, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1694, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(1694, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(6940318, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertFalse(boolean0);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "";
      int int0 = 49;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      assertNotNull(nodeUtil_BooleanResultPredicate0);
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertTrue(boolean0);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = (-2026.92);
      int int0 = 2424;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(2424, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(2424, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertFalse(boolean0);
      
      Node node1 = Node.newNumber(double0, int0, int0);
      assertNotNull(node1);
      assertEquals(39, node1.getType());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(2424, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(2424, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertEquals(9931128, node1.getSourcePosition());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isFromExterns());
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node1, boolean0);
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(2424, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node1.getType());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(2424, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(2424, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertEquals(9931128, node1.getSourcePosition());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isFromExterns());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test
  public void test104()  throws Throwable  {
      int int0 = 103;
      int int1 = NodeUtil.precedence(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(13, int1);
      
      TernaryValue ternaryValue0 = NodeUtil.isStrWhiteSpaceChar(int1);
      assertEquals("true", ternaryValue0.toString());
      assertEquals("TRUE", ternaryValue0.name());
      assertEquals(1, ternaryValue0.ordinal());
      assertEquals(TernaryValue.FALSE, ternaryValue0.not());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test105()  throws Throwable  {
      int int0 = 10;
      TernaryValue ternaryValue0 = NodeUtil.isStrWhiteSpaceChar(int0);
      assertEquals(1, ternaryValue0.ordinal());
      assertEquals("true", ternaryValue0.toString());
      assertEquals(TernaryValue.FALSE, ternaryValue0.not());
      assertEquals("TRUE", ternaryValue0.name());
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "";
      String string1 = NodeUtil.trimJsWhiteSpace(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "R{&i\\QE";
      Double double0 = NodeUtil.getStringNumberValue(string0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = "-infinity";
      Double double0 = NodeUtil.getStringNumberValue(string0);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "~H@";
      Double double0 = NodeUtil.getStringNumberValue(string0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      int int0 = 65500;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(65500, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(65500, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(268292095, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(65500, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(65500, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(268292095, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
  }

  @Test
  public void test111()  throws Throwable  {
      int int0 = 103;
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      assertNotNull(defaultCodingConvention0);
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      
      String string0 = "Date";
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(103, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(421991, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(103, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(103, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(421991, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(103, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = "Vv";
      int int0 = 0;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(Double.NaN, (double)double0, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(83, node0.getType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = NodeUtil.arrayToString(node0);
      assertNotNull(string0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(83, node0.getType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
  }

  @Test
  public void test114()  throws Throwable  {
      double double0 = 0.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertNotNull(string0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals("0", string0);
  }

  @Test
  public void test115()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      
      String string0 = "is_dispatcher";
      int int0 = (-140);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(38, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      
      Node node1 = NodeUtil.newExpr(node0);
      assertNotNull(node1);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(38, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(130, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getLineno());
      assertNull(node1.getSourceFileName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isFromExterns());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getSourcePosition());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      String string1 = NodeUtil.getStringValue(node1);
      assertNull(string1);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(38, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(130, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getLineno());
      assertNull(node1.getSourceFileName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isFromExterns());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getSourcePosition());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test
  public void test116()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      
      String string0 = "is_dispatcher";
      int int0 = (-140);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(38, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      
      String string1 = NodeUtil.getStringValue(node0);
      assertNull(string1);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(38, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = "iYO0]sE]#nde=Wx=:";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      
      TernaryValue ternaryValue0 = NodeUtil.getImpureBooleanValue(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(1, ternaryValue0.ordinal());
      assertEquals("true", ternaryValue0.toString());
      assertEquals("TRUE", ternaryValue0.name());
      assertEquals(TernaryValue.FALSE, ternaryValue0.not());
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = 1736.79840107272;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      
      TernaryValue ternaryValue0 = NodeUtil.getPureBooleanValue(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, ternaryValue0.ordinal());
      assertEquals("TRUE", ternaryValue0.name());
      assertEquals("true", ternaryValue0.toString());
      assertEquals(TernaryValue.FALSE, ternaryValue0.not());
  }

  @Test
  public void test119()  throws Throwable  {
      int int0 = 23;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>(int0);
      assertNotNull(arrayList0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      assertNotNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      
      TernaryValue ternaryValue0 = NodeUtil.getImpureBooleanValue(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
      assertEquals(2, ternaryValue0.ordinal());
      assertEquals("unknown", ternaryValue0.toString());
      assertEquals("UNKNOWN", ternaryValue0.name());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
  }

  @Test
  public void test120()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      assertNotNull(nodeUtil_NumbericResultPredicate0);
  }

  @Test
  public void test121()  throws Throwable  {
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      assertNotNull(nodeUtil_MatchNotFunction0);
  }

  @Test
  public void test122()  throws Throwable  {
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      assertNotNull(nodeUtil_BooleanResultPredicate0);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = 1736.79840107272;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(39, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(39, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test
  public void test124()  throws Throwable  {
      int int0 = 65500;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(268292095, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(65500, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(65500, node0.getLineno());
      
      String string0 = "2`5pwL2MM#?E?[@Mw";
      int int1 = NodeUtil.getNameReferenceCount(node0, string0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(268292095, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(65500, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(65500, node0.getLineno());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test125()  throws Throwable  {
      int int0 = 5543;
      String string0 = "Unexpected expression node";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(5543, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test126()  throws Throwable  {
      String string0 = "";
      int int0 = 49;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      assertNotNull(nodeUtil_BooleanResultPredicate0);
      
      int int1 = NodeUtil.getNodeTypeReferenceCount(node0, int0, nodeUtil_BooleanResultPredicate0);
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = "~H@";
      int int0 = (-75);
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isVarArgs());
      
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertFalse(boolean0);
  }

  @Test
  public void test128()  throws Throwable  {
      int int0 = 46;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(188462, node0.getSourcePosition());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(46, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test129()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      String string0 = "is_dispatcher";
      int int0 = (-140);
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(38, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got NAME
         //
      }
  }

  @Test
  public void test130()  throws Throwable  {
      double double0 = 1736.79840107272;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(boolean0);
  }

  @Test
  public void test131()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getSourcePosition());
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getArgumentForCallOrNew(node0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test132()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      String string0 = "NaN";
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(string0, string0);
      assertNotNull(jSSourceFile0);
      assertEquals("NaN", jSSourceFile0.toString());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("NaN", jSSourceFile0.getOriginalPath());
      assertEquals("NaN", jSSourceFile0.getName());
      
      Node node0 = compiler0.parse(jSSourceFile0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals("NaN", node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("NaN", jSSourceFile0.toString());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("NaN", jSSourceFile0.getOriginalPath());
      assertEquals("NaN", jSSourceFile0.getName());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      // Undeclared exception!
      try {
        String string1 = NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test133()  throws Throwable  {
      double double0 = (-821.59672374);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.isStatement(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test134()  throws Throwable  {
      int int0 = 102;
      String string0 = "iYO0]sE]#nde=Wx=:";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(102, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(102, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(boolean0);
  }

  @Test
  public void test135()  throws Throwable  {
      int int0 = 124;
      int int1 = NodeUtil.precedence(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(15, int1);
      
      String string0 = "P*/JOm\":I5~-B>.Rvv";
      Node node0 = Node.newString(string0, int0, int1);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(15, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(124, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(507919, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        Node node1 = NodeUtil.getArgumentForFunction(node0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test136()  throws Throwable  {
      double double0 = 1736.79840107272;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertFalse(boolean0);
  }

  @Test
  public void test137()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test138()  throws Throwable  {
      int int0 = (-3083);
      String string0 = "U#yL*)+";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-3083, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-3083, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertFalse(boolean0);
  }

  @Test
  public void test139()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertNotNull(node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      boolean boolean1 = NodeUtil.containsCall(node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test140()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      assertNotNull(defaultCodingConvention0);
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      
      String string0 = "Error";
      int int0 = 105;
      Node node0 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(105, node0.getLineno());
      assertEquals(105, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(430185, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      
      Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, string0, node0, string0);
      assertNotNull(node1);
      assertEquals("window", defaultCodingConvention0.getGlobalObject());
      assertNull(defaultCodingConvention0.getExportSymbolFunction());
      assertNull(defaultCodingConvention0.getExportPropertyFunction());
      assertNull(defaultCodingConvention0.getDelegateSuperclassName());
      assertNull(defaultCodingConvention0.getAbstractMethodName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(430185, node1.getSourcePosition());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(105, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(38, node1.getType());
      assertEquals(true, node1.isUnscopedQualifiedName());
      assertEquals(105, node1.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(105, node0.getLineno());
      assertEquals(105, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(430185, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
  }

  @Test
  public void test141()  throws Throwable  {
      int int0 = 26;
      String string0 = "&JyQ/5WQp";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(26, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(106522, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(26, node0.getCharno());
      assertEquals(26, node0.getLineno());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(26, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(106522, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(26, node0.getCharno());
      assertEquals(26, node0.getLineno());
      assertTrue(boolean0);
  }
}
