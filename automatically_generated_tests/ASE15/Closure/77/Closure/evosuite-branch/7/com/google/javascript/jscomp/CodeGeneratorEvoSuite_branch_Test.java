/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:49:26 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.jscomp.SourceFile;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

 
public class CodeGeneratorEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      String string0 = "gA/@[cqMG{L2<P\"";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertNotNull(string1);
      assertEquals("gA/@[cqMG{L2<P\"", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = "\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"_\n\rMethodOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"\u0085\u0002\n\u0013UninterpretedOption\u0012;\n\u0004name\u0018\u0002 \u0003(\u000B2-.google.protobuf.UninterprtedOption.NamePart\u0012\u0018\n\u0010identifier_value\u0018\u0003 \u0001(\t\u0012\u001A\n\u0012positive_int_vale\u0018\u0004 \u0001(\u0004\u0012\u001A\n\u0012negative_int_value\u0018\u0005 \u0001(\u0003\u0012\u0014\n\fdouble_value\u0018\u0006 \u0001(\u0001\u0012\u0014\n\fstring_value\u0018\u0007 \u0001(\f\u001A3\n\bNamePart\u0012\u0011\n";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterpretedOption*\\u0009\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\"_\\u000a\\u000dMethodOptions\\u0012C\\u000a\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterpretedOption*\\u0009\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\"\\u0085\\u0002\\u000a\\u0013UninterpretedOption\\u0012;\\u000a\\u0004name\\u0018\\u0002 \\u0003(\\u000b2-.google.protobuf.UninterprtedOption.NamePart\\u0012\\u0018\\u000a\\u0010identifier_value\\u0018\\u0003 \\u0001(\\u0009\\u0012\\u001a\\u000a\\u0012positive_int_vale\\u0018\\u0004 \\u0001(\\u0004\\u0012\\u001a\\u000a\\u0012negative_int_value\\u0018\\u0005 \\u0001(\\u0003\\u0012\\u0014\\u000a\\u000cdouble_value\\u0018\\u0006 \\u0001(\\u0001\\u0012\\u0014\\u000a\\u000cstring_value\\u0018\\u0007 \\u0001(\\u000c\\u001a3\\u000a\\u0008NamePart\\u0012\\u0011\\u000a", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = "w c1</script]w";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      String string1 = CodeGenerator.regexpEscape(string0, charsetEncoder0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("/w c1<\\/script]w/", string1);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = "n$<!-->F6/";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"n$<\\!--\\>F6/\"", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = "q2^]>L3r-%Y$";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"q2^]>L3r-%Y$\"", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = "c>\uFEFF";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"c>\\ufeff\"", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = "gA/@[cqMG{L2<P\"";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("'gA/@[cqMG{L2<P\"'", string1);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test7()  throws Throwable  {
      String string0 = "JwRS'5x(T5";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("JwRS'5x(T5/JwRS'5x(T5", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("JwRS'5x(T5/JwRS'5x(T5", sourceFile_OnDisk0.getName());
      assertEquals("JwRS'5x(T5/JwRS'5x(T5", sourceFile_OnDisk0.toString());
      
      Charset charset0 = sourceFile_OnDisk0.getCharset();
      assertNotNull(charset0);
      assertEquals("JwRS'5x(T5/JwRS'5x(T5", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("JwRS'5x(T5/JwRS'5x(T5", sourceFile_OnDisk0.getName());
      assertEquals("JwRS'5x(T5/JwRS'5x(T5", sourceFile_OnDisk0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("JwRS'5x(T5/JwRS'5x(T5", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("JwRS'5x(T5/JwRS'5x(T5", sourceFile_OnDisk0.getName());
      assertEquals("JwRS'5x(T5/JwRS'5x(T5", sourceFile_OnDisk0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"JwRS'5x(T5\"", string1);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("JwRS'5x(T5/JwRS'5x(T5", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("JwRS'5x(T5/JwRS'5x(T5", sourceFile_OnDisk0.getName());
      assertEquals("JwRS'5x(T5/JwRS'5x(T5", sourceFile_OnDisk0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test8()  throws Throwable  {
      String string0 = ".7)->UqI\\,/3nUal";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("/.7)->UqI\\,/3nUal/", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test9()  throws Throwable  {
      String string0 = "\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"_\n\rMethodOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"\u0085\u0002\n\u0013UninterpretedOption\u0012;\n\u0004name\u0018\u0002 \u0003(\u000B2-.google.protobuf.UninterprtedOption.NamePart\u0012\u0018\n\u0010identifier_value\u0018\u0003 \u0001(\t\u0012\u001A\n\u0012positive_int_vale\u0018\u0004 \u0001(\u0004\u0012\u001A\n\u0012negative_int_value\u0018\u0005 \u0001(\u0003\u0012\u0014\n\fdouble_value\u0018\u0006 \u0001(\u0001\u0012\u0014\n\fstring_value\u0018\u0007 \u0001(\f\u001A3\n\bNamePart\u0012\u0011\n";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\"\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterpretedOption*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"_\\n\\rMethodOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterpretedOption*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"\\u0085\\u0002\\n\\u0013UninterpretedOption\\u0012;\\n\\u0004name\\u0018\\u0002 \\u0003(\\u000b2-.google.protobuf.UninterprtedOption.NamePart\\u0012\\u0018\\n\\u0010identifier_value\\u0018\\u0003 \\u0001(\\t\\u0012\\u001a\\n\\u0012positive_int_vale\\u0018\\u0004 \\u0001(\\u0004\\u0012\\u001a\\n\\u0012negative_int_value\\u0018\\u0005 \\u0001(\\u0003\\u0012\\u0014\\n\\u000cdouble_value\\u0018\\u0006 \\u0001(\\u0001\\u0012\\u0014\\n\\u000cstring_value\\u0018\\u0007 \\u0001(\\u000c\\u001a3\\n\\u0008NamePart\\u0012\\u0011\\n\"", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }
}
