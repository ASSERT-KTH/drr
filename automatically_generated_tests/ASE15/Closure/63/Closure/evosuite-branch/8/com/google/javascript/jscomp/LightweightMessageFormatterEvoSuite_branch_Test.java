/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:36:34 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CheckMissingGetCssName;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.TypeCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class LightweightMessageFormatterEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = 3702;
      String string0 = "d{;AZ!49}";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertEquals(3702, simpleRegion0.getEndingLineNumber());
      assertEquals("d{;AZ!49}", simpleRegion0.getSourceExcerpt());
      assertEquals(3702, simpleRegion0.getBeginningLineNumber());
      assertNotNull(simpleRegion0);
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(3702, simpleRegion0.getEndingLineNumber());
      assertEquals("d{;AZ!49}", simpleRegion0.getSourceExcerpt());
      assertEquals(3702, simpleRegion0.getBeginningLineNumber());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("  3702| d{;AZ!49}", string1);
  }

  @Test
  public void test1()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-5);
      String string0 = "o\n";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertEquals("o\n", simpleRegion0.getSourceExcerpt());
      assertEquals(-5, simpleRegion0.getEndingLineNumber());
      assertEquals(-5, simpleRegion0.getBeginningLineNumber());
      assertNotNull(simpleRegion0);
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("o\n", simpleRegion0.getSourceExcerpt());
      assertEquals(-5, simpleRegion0.getEndingLineNumber());
      assertEquals(-5, simpleRegion0.getBeginningLineNumber());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("  -5| o", string1);
  }

  @Test
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "w";
      int int0 = (-2333);
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0, sourceExcerptProvider_SourceExcerpt0);
      assertNotNull(lightweightMessageFormatter0);
      
      DiagnosticType diagnosticType0 = CheckMissingGetCssName.MISSING_GETCSSNAME;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0, stringArray0);
      assertEquals(-2333, jSError0.getCharno());
      assertNotNull(jSError0);
      
      String string1 = lightweightMessageFormatter0.formatError(jSError0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(-2333, jSError0.getCharno());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("w: ERROR - missing goog.getCssName around literal 'null'\n", string1);
  }

  @Test
  public void test3()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-49);
      String string0 = "";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(-49, simpleRegion0.getBeginningLineNumber());
      assertEquals(-49, simpleRegion0.getEndingLineNumber());
      assertNotNull(simpleRegion0);
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(-49, simpleRegion0.getBeginningLineNumber());
      assertEquals(-49, simpleRegion0.getEndingLineNumber());
      assertNull(string1);
  }

  @Test
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0);
      assertNotNull(lightweightMessageFormatter0);
      
      DiagnosticType diagnosticType0 = CheckMissingGetCssName.MISSING_GETCSSNAME;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      assertEquals(-1, jSError0.getCharno());
      assertNotNull(jSError0);
      
      String string0 = lightweightMessageFormatter0.formatError(jSError0);
      assertEquals(-1, jSError0.getCharno());
      assertNotNull(string0);
      assertEquals("ERROR - missing goog.getCssName around literal 'null'\n", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      String string0 = "com.google.javascript.jscomp.JsAst";
      int int0 = 18;
      DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0, stringArray0);
      assertEquals(18, jSError0.getCharno());
      assertNotNull(jSError0);
      
      String string1 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(18, jSError0.getCharno());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("com.google.javascript.jscomp.JsAst:18: WARNING - operator null cannot be applied to {1}\n", string1);
  }
}
