/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:57:19 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.ForInLoop;
import com.google.javascript.rhino.head.ast.FunctionCall;
import com.google.javascript.rhino.head.ast.NewExpression;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.ParenthesizedExpression;
import com.google.javascript.rhino.head.ast.ReturnStatement;
import com.google.javascript.rhino.head.ast.StringLiteral;
import com.google.javascript.rhino.head.ast.SwitchCase;
import com.google.javascript.rhino.head.ast.XmlMemberGet;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      
      int int0 = 103;
      NewExpression newExpression0 = new NewExpression(int0, int0);
      assertNotNull(newExpression0);
      assertEquals(103, newExpression0.getLength());
      assertNull(newExpression0.getJsDoc());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(0, newExpression0.depth());
      assertEquals(103, newExpression0.getPosition());
      assertEquals(30, newExpression0.getType());
      assertEquals(103, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals("30", newExpression0.toString());
      assertEquals(-1, newExpression0.getRp());
      
      astRoot0.addChildrenToBack((Node) newExpression0);
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(103, newExpression0.getLength());
      assertNull(newExpression0.getJsDoc());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(0, newExpression0.depth());
      assertEquals(103, newExpression0.getPosition());
      assertEquals(30, newExpression0.getType());
      assertEquals(103, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals("30", newExpression0.toString());
      assertEquals(-1, newExpression0.getRp());
      
      String string0 = "msg.jsdoc.modifies.duplicate";
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("msg.jsdoc.modifies.duplicate", simpleSourceFile0.toString());
      assertEquals("msg.jsdoc.modifies.duplicate", simpleSourceFile0.getName());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      
      FunctionCall functionCall0 = new FunctionCall(int0, int0);
      assertNotNull(functionCall0);
      assertEquals(false, functionCall0.hasChildren());
      assertEquals(-1, functionCall0.getLp());
      assertEquals(38, functionCall0.getType());
      assertEquals(103, functionCall0.getPosition());
      assertEquals(0, functionCall0.depth());
      assertEquals(-1, functionCall0.getRp());
      assertNull(functionCall0.getJsDoc());
      assertEquals(-1, functionCall0.getLineno());
      assertEquals(103, functionCall0.getLength());
      assertEquals(103, functionCall0.getAbsolutePosition());
      assertEquals("38", functionCall0.toString());
      
      newExpression0.setTarget((AstNode) functionCall0);
      assertEquals(false, functionCall0.hasChildren());
      assertEquals(-1, functionCall0.getLp());
      assertEquals(38, functionCall0.getType());
      assertEquals(0, functionCall0.getPosition());
      assertEquals(1, functionCall0.depth());
      assertEquals(-1, functionCall0.getRp());
      assertNull(functionCall0.getJsDoc());
      assertEquals(-1, functionCall0.getLineno());
      assertEquals(103, functionCall0.getLength());
      assertEquals(103, functionCall0.getAbsolutePosition());
      assertEquals("38", functionCall0.toString());
      assertEquals(103, newExpression0.getLength());
      assertNull(newExpression0.getJsDoc());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(0, newExpression0.depth());
      assertEquals(103, newExpression0.getPosition());
      assertEquals(30, newExpression0.getType());
      assertEquals(103, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals("30", newExpression0.toString());
      assertEquals(-1, newExpression0.getRp());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      
      int int0 = 103;
      SwitchCase switchCase0 = new SwitchCase(int0);
      assertNotNull(switchCase0);
      assertEquals(103, switchCase0.getPosition());
      assertEquals(115, switchCase0.getType());
      assertEquals("115", switchCase0.toString());
      assertEquals(103, switchCase0.getAbsolutePosition());
      assertEquals(1, switchCase0.getLength());
      assertNull(switchCase0.getJsDoc());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(0, switchCase0.depth());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(-1, switchCase0.getLineno());
      
      astRoot0.addChildrenToBack((Node) switchCase0);
      assertEquals(103, switchCase0.getPosition());
      assertEquals(115, switchCase0.getType());
      assertEquals("115", switchCase0.toString());
      assertEquals(103, switchCase0.getAbsolutePosition());
      assertEquals(1, switchCase0.getLength());
      assertNull(switchCase0.getJsDoc());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(0, switchCase0.depth());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      
      String string0 = "";
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("", simpleSourceFile0.toString());
      assertEquals("", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.makesDicts());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.makesDicts());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.makesDicts());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
      assertNotNull(node0);
      assertFalse(context0.generateObserverCount);
      assertEquals(-1, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isStringKey());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals("", node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", simpleSourceFile0.toString());
      assertEquals("", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
  }

  @Test
  public void test2()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      
      String string0 = "8ec&6#{0rn";
      int int0 = (-334);
      ReturnStatement returnStatement0 = new ReturnStatement(int0);
      assertNotNull(returnStatement0);
      assertEquals("4", returnStatement0.toString());
      assertEquals(-334, returnStatement0.getAbsolutePosition());
      assertNull(returnStatement0.getJsDoc());
      assertEquals(false, returnStatement0.hasChildren());
      assertEquals(4, returnStatement0.getType());
      assertEquals(-1, returnStatement0.getLineno());
      assertEquals(1, returnStatement0.getLength());
      assertEquals(0, returnStatement0.depth());
      assertEquals(-334, returnStatement0.getPosition());
      
      astRoot0.addChildToFront((Node) returnStatement0);
      assertEquals("4", returnStatement0.toString());
      assertEquals(-334, returnStatement0.getAbsolutePosition());
      assertNull(returnStatement0.getJsDoc());
      assertEquals(false, returnStatement0.hasChildren());
      assertEquals(4, returnStatement0.getType());
      assertEquals(-1, returnStatement0.getLineno());
      assertEquals(1, returnStatement0.getLength());
      assertEquals(0, returnStatement0.depth());
      assertEquals(-334, returnStatement0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("8ec&6#{0rn", simpleSourceFile0.toString());
      assertEquals("8ec&6#{0rn", simpleSourceFile0.getName());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
      assertNotNull(node0);
      assertFalse(context0.generateObserverCount);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNE());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThrow());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isWhile());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals("8ec&6#{0rn", node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("8ec&6#{0rn", simpleSourceFile0.toString());
      assertEquals("8ec&6#{0rn", simpleSourceFile0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      
      String string0 = "%YUqaF.^}lN(|JOa;b9";
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("%YUqaF.^}lN(|JOa;b9", simpleSourceFile0.getName());
      assertEquals("%YUqaF.^}lN(|JOa;b9", simpleSourceFile0.toString());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isExpose());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isExpose());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isExpose());
      
      int int0 = 13;
      ForInLoop forInLoop0 = new ForInLoop(int0);
      assertNotNull(forInLoop0);
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(1, forInLoop0.getLength());
      assertEquals("119", forInLoop0.toString());
      assertEquals(119, forInLoop0.getType());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(13, forInLoop0.getPosition());
      assertEquals(13, forInLoop0.getAbsolutePosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(0, forInLoop0.depth());
      
      astRoot0.addChild((AstNode) forInLoop0);
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(15, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(1, forInLoop0.getLength());
      assertEquals("119", forInLoop0.toString());
      assertEquals(119, forInLoop0.getType());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(14, forInLoop0.getPosition());
      assertEquals(13, forInLoop0.getAbsolutePosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(1, forInLoop0.depth());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      
      String string0 = "";
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("", simpleSourceFile0.getName());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getReturnDescription());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getReturnDescription());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getReturnDescription());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
      assertNotNull(node0);
      assertFalse(context0.generateObserverCount);
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals("", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("", simpleSourceFile0.getName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isGetElem());
      assertEquals("", node0.getSourceFileName());
      assertEquals(false, node0.isSwitch());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1477;
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(int0);
      assertNotNull(xmlMemberGet0);
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(1477, xmlMemberGet0.getAbsolutePosition());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(1477, xmlMemberGet0.getPosition());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(0, xmlMemberGet0.depth());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(1, xmlMemberGet0.getLength());
      
      AstRoot astRoot0 = xmlMemberGet0.getAstRoot();
      assertNull(astRoot0);
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(1477, xmlMemberGet0.getAbsolutePosition());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(1477, xmlMemberGet0.getPosition());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(0, xmlMemberGet0.depth());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(1, xmlMemberGet0.getLength());
      
      StaticSourceFile staticSourceFile0 = null;
      String string0 = "R<>Rl";
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      
      String string0 = "8ec&6#{0rn";
      int int0 = (-887);
      StringLiteral stringLiteral0 = new StringLiteral(int0, int0);
      assertNotNull(stringLiteral0);
      assertEquals(0, stringLiteral0.depth());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(-887, stringLiteral0.getLength());
      assertEquals(-887, stringLiteral0.getAbsolutePosition());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(-887, stringLiteral0.getPosition());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(41, stringLiteral0.getType());
      assertNull(stringLiteral0.getJsDoc());
      assertNull(stringLiteral0.getValue());
      
      astRoot0.addChildToBack((Node) stringLiteral0);
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(-887, stringLiteral0.getLength());
      assertEquals(-887, stringLiteral0.getAbsolutePosition());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(-887, stringLiteral0.getPosition());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(41, stringLiteral0.getType());
      assertNull(stringLiteral0.getJsDoc());
      assertNull(stringLiteral0.getValue());
      
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("8ec&6#{0rn", simpleSourceFile0.getName());
      assertEquals("8ec&6#{0rn", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isConstant());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      
      int int0 = 308;
      AstRoot astRoot1 = (AstRoot)astRoot0.setType(int0);
      assertSame(astRoot0, astRoot1);
      assertSame(astRoot1, astRoot0);
      assertNotNull(astRoot1);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("308", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(308, astRoot0.getType());
      assertEquals(-1, astRoot1.getEncodedSourceEnd());
      assertEquals(0, astRoot1.getRegexpCount());
      assertEquals(1, astRoot1.getLength());
      assertEquals(0, astRoot1.getFunctionCount());
      assertEquals(0, astRoot1.getParamCount());
      assertEquals(-1, astRoot1.getLineno());
      assertEquals(-1, astRoot1.getBaseLineno());
      assertEquals("308", astRoot1.toString());
      assertEquals(false, astRoot1.isInStrictMode());
      assertEquals(false, astRoot1.hasChildren());
      assertNull(astRoot1.getJsDoc());
      assertEquals(308, astRoot1.getType());
      assertEquals(-1, astRoot1.getEndLineno());
      assertNull(astRoot1.getEncodedSource());
      assertEquals(0, astRoot1.depth());
      assertEquals(-1, astRoot1.getEncodedSourceStart());
      assertEquals(-1, astRoot1.getPosition());
      assertNull(astRoot1.getSourceName());
      assertEquals(-1, astRoot1.getAbsolutePosition());
      
      String string0 = "%Y,qaF.^}lN(|JOa;b9";
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("%Y,qaF.^}lN(|JOa;b9", simpleSourceFile0.toString());
      assertEquals("%Y,qaF.^}lN(|JOa;b9", simpleSourceFile0.getName());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 308
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      
      double double0 = 1.3;
      NumberLiteral numberLiteral0 = (NumberLiteral)Node.newNumber(double0);
      assertNotNull(numberLiteral0);
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(false, numberLiteral0.hasChildren());
      assertNull(numberLiteral0.getValue());
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(1.3, numberLiteral0.getNumber(), 0.01D);
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(1.3, numberLiteral0.getDouble(), 0.01D);
      
      astRoot0.addChildToBack((Node) numberLiteral0);
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(false, numberLiteral0.hasChildren());
      assertNull(numberLiteral0.getValue());
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(1.3, numberLiteral0.getNumber(), 0.01D);
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(1.3, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      
      String string0 = "%Y,qaF.8}lN(|Jya-b9";
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("%Y,qaF.8}lN(|Jya-b9", simpleSourceFile0.getName());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("%Y,qaF.8}lN(|Jya-b9", simpleSourceFile0.toString());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getFileOverview());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getFileOverview());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getFileOverview());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
      assertNotNull(node0);
      assertFalse(context0.generateObserverCount);
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThis());
      assertEquals("%Y,qaF.8}lN(|Jya-b9", node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTry());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isStringKey());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals("%Y,qaF.8}lN(|Jya-b9", simpleSourceFile0.getName());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("%Y,qaF.8}lN(|Jya-b9", simpleSourceFile0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getFileOverview());
  }

  @Test
  public void test9()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      
      String string0 = "8ec&6#{0rn";
      int int0 = (-334);
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(int0, int0);
      assertNotNull(parenthesizedExpression0);
      assertEquals(-334, parenthesizedExpression0.getLength());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(-334, parenthesizedExpression0.getPosition());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(-334, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      
      astRoot0.addChild((AstNode) parenthesizedExpression0);
      assertEquals(-334, parenthesizedExpression0.getLength());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(1, parenthesizedExpression0.depth());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(-334, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(-333, parenthesizedExpression0.getPosition());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-667, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("8ec&6#{0rn", simpleSourceFile0.getName());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("8ec&6#{0rn", simpleSourceFile0.toString());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getReturnDescription());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
