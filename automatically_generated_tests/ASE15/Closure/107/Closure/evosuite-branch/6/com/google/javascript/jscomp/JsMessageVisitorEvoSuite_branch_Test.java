/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:47:03 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.EmptyMessageBundle;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.GoogleJsMessageIdGenerator;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.JsMessage;
import com.google.javascript.jscomp.JsMessageVisitor;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.PeepholeOptimizationsPass;
import com.google.javascript.jscomp.ReplaceMessages;
import com.google.javascript.jscomp.ReplaceMessagesForChrome;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

 
public class JsMessageVisitorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "MSG_Message valu of {0} is just an empt string. Empty messages are forbidden.";
      MessageFormatter messageFormatter0 = null;
      Logger logger0 = Logger.global;
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(false, logger0.getUseParentHandlers());
      assertNotNull(logger0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(messageFormatter0, logger0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(false, logger0.getUseParentHandlers());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(false, logger0.getUseParentHandlers());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(compiler0);
      
      EmptyMessageBundle emptyMessageBundle0 = new EmptyMessageBundle();
      assertNotNull(emptyMessageBundle0);
      
      JsMessage.IdGenerator jsMessage_IdGenerator0 = emptyMessageBundle0.idGenerator();
      assertNull(jsMessage_IdGenerator0);
      
      JsMessage.Style jsMessage_Style0 = JsMessage.Style.CLOSURE;
      ReplaceMessagesForChrome replaceMessagesForChrome0 = new ReplaceMessagesForChrome(compiler0, jsMessage_IdGenerator0, boolean0, jsMessage_Style0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(false, logger0.getUseParentHandlers());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(replaceMessagesForChrome0);
      
      int int0 = 1031;
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSwitch());
      assertEquals(4224007, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCast());
      assertEquals(1031, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(1031, node0.getLineno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(1031, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertNotNull(node0);
      
      replaceMessagesForChrome0.checkNode(node0, int0);
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSwitch());
      assertEquals(4224007, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCast());
      assertEquals(1031, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(1031, node0.getLineno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(1031, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(false, logger0.getUseParentHandlers());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      EmptyMessageBundle emptyMessageBundle0 = new EmptyMessageBundle();
      assertNotNull(emptyMessageBundle0);
      
      JsMessage.IdGenerator jsMessage_IdGenerator0 = emptyMessageBundle0.idGenerator();
      assertNull(jsMessage_IdGenerator0);
      
      boolean boolean0 = false;
      JsMessage.Style jsMessage_Style0 = JsMessage.Style.LEGACY;
      ReplaceMessagesForChrome replaceMessagesForChrome0 = new ReplaceMessagesForChrome(compiler0, jsMessage_IdGenerator0, boolean0, jsMessage_Style0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(replaceMessagesForChrome0);
      
      Node node0 = null;
      int int0 = (-2459);
      try {
        replaceMessagesForChrome0.checkNode(node0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected node type -2459; found: null
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "MSG_Message valu of {0} is just an empt string. Empty messages are forbidden.";
      String string1 = JsMessageVisitor.toLowerCamelCaseWithNumericSuffixes(string0);
      assertEquals("msgMessage valu of {0} is just an empt string. empty messages are forbidden.", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "2";
      String string1 = JsMessageVisitor.toLowerCamelCaseWithNumericSuffixes(string0);
      assertEquals("2", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      String string0 = compiler0.getAstDotGraph();
      assertEquals("", string0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(string0);
      
      String string1 = JsMessageVisitor.toLowerCamelCaseWithNumericSuffixes(string0);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "MSG__MSGc_9My8_HELP";
      Logger logger0 = Logger.getLogger(string0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("MSG__MSGc_9My8_HELP", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(logger0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNull(logger0.getResourceBundleName());
      assertEquals("MSG__MSGc_9My8_HELP", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNull(logger0.getResourceBundleName());
      assertEquals("MSG__MSGc_9My8_HELP", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(compiler0);
      
      JsMessage.IdGenerator jsMessage_IdGenerator0 = null;
      boolean boolean0 = true;
      JsMessage.Style jsMessage_Style0 = JsMessage.Style.LEGACY;
      ReplaceMessagesForChrome replaceMessagesForChrome0 = new ReplaceMessagesForChrome(compiler0, jsMessage_IdGenerator0, boolean0, jsMessage_Style0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNull(logger0.getResourceBundleName());
      assertEquals("MSG__MSGc_9My8_HELP", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(replaceMessagesForChrome0);
      
      boolean boolean1 = false;
      boolean boolean2 = replaceMessagesForChrome0.isMessageName(string0, boolean1);
      assertFalse(boolean2);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNull(logger0.getResourceBundleName());
      assertEquals("MSG__MSGc_9My8_HELP", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      EmptyMessageBundle emptyMessageBundle0 = new EmptyMessageBundle();
      assertNotNull(emptyMessageBundle0);
      
      JsMessage.IdGenerator jsMessage_IdGenerator0 = emptyMessageBundle0.idGenerator();
      assertNull(jsMessage_IdGenerator0);
      
      boolean boolean0 = false;
      JsMessage.Style jsMessage_Style0 = JsMessage.Style.LEGACY;
      ReplaceMessagesForChrome replaceMessagesForChrome0 = new ReplaceMessagesForChrome(compiler0, jsMessage_IdGenerator0, boolean0, jsMessage_Style0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(replaceMessagesForChrome0);
      
      String string0 = "MSG_9My8";
      boolean boolean1 = replaceMessagesForChrome0.isMessageName(string0, boolean0);
      assertTrue(boolean1);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      EmptyMessageBundle emptyMessageBundle0 = new EmptyMessageBundle();
      assertNotNull(emptyMessageBundle0);
      
      boolean boolean0 = true;
      JsMessage.Style jsMessage_Style0 = JsMessage.Style.RELAX;
      ReplaceMessages replaceMessages0 = new ReplaceMessages(compiler0, emptyMessageBundle0, boolean0, jsMessage_Style0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(replaceMessages0);
      
      String string0 = "MSG_multilin<e";
      boolean boolean1 = replaceMessages0.isMessageName(string0, boolean0);
      assertTrue(boolean1);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      EmptyMessageBundle emptyMessageBundle0 = new EmptyMessageBundle();
      assertNotNull(emptyMessageBundle0);
      
      boolean boolean0 = true;
      JsMessage.Style jsMessage_Style0 = JsMessage.Style.CLOSURE;
      ReplaceMessages replaceMessages0 = new ReplaceMessages(compiler0, emptyMessageBundle0, boolean0, jsMessage_Style0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(replaceMessages0);
      
      String string0 = "MSG_multilin<e";
      boolean boolean1 = replaceMessages0.isMessageName(string0, boolean0);
      assertTrue(boolean1);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "mu&iline";
      AbstractCompiler abstractCompiler0 = null;
      AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[10];
      boolean boolean0 = true;
      PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(abstractCompiler0, abstractPeepholeOptimizationArray0);
      assertNotNull(peepholeOptimizationsPass0);
      
      AbstractCompiler abstractCompiler1 = peepholeOptimizationsPass0.getCompiler();
      assertNull(abstractCompiler1);
      
      EmptyMessageBundle emptyMessageBundle0 = new EmptyMessageBundle();
      assertNotNull(emptyMessageBundle0);
      
      JsMessage.IdGenerator jsMessage_IdGenerator0 = emptyMessageBundle0.idGenerator();
      assertNull(jsMessage_IdGenerator0);
      
      JsMessage.Style jsMessage_Style0 = JsMessage.Style.CLOSURE;
      ReplaceMessagesForChrome replaceMessagesForChrome0 = new ReplaceMessagesForChrome(abstractCompiler1, jsMessage_IdGenerator0, boolean0, jsMessage_Style0);
      assertNotNull(replaceMessagesForChrome0);
      
      boolean boolean1 = replaceMessagesForChrome0.isMessageName(string0, boolean0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "g.}v{+fcIPF0NE9coa";
      int int0 = 38;
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(155686, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(38, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(38, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertFalse(boolean0);
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(155686, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(38, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(38, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      EmptyMessageBundle emptyMessageBundle0 = new EmptyMessageBundle();
      assertNotNull(emptyMessageBundle0);
      
      JsMessage.IdGenerator jsMessage_IdGenerator0 = emptyMessageBundle0.idGenerator();
      assertNull(jsMessage_IdGenerator0);
      
      JsMessage.Style jsMessage_Style0 = JsMessage.Style.LEGACY;
      ReplaceMessagesForChrome replaceMessagesForChrome0 = new ReplaceMessagesForChrome(compiler0, jsMessage_IdGenerator0, boolean0, jsMessage_Style0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(155686, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(38, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(38, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertNotNull(replaceMessagesForChrome0);
      
      replaceMessagesForChrome0.process(node0, node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(155686, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(38, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(38, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "Ex\\ected node +ype ";
      int int0 = 37;
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(151589, node0.getSourcePosition());
      assertEquals(true, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTrue());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertFalse(boolean0);
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(151589, node0.getSourcePosition());
      assertEquals(true, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTrue());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      EmptyMessageBundle emptyMessageBundle0 = new EmptyMessageBundle();
      assertNotNull(emptyMessageBundle0);
      
      JsMessage.IdGenerator jsMessage_IdGenerator0 = emptyMessageBundle0.idGenerator();
      assertNull(jsMessage_IdGenerator0);
      
      JsMessage.Style jsMessage_Style0 = JsMessage.Style.LEGACY;
      ReplaceMessagesForChrome replaceMessagesForChrome0 = new ReplaceMessagesForChrome(compiler0, jsMessage_IdGenerator0, boolean0, jsMessage_Style0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(151589, node0.getSourcePosition());
      assertEquals(true, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTrue());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertNotNull(replaceMessagesForChrome0);
      
      // Undeclared exception!
      try {
        replaceMessagesForChrome0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      boolean boolean0 = true;
      JsMessage.Style jsMessage_Style0 = JsMessage.Style.RELAX;
      String string0 = "com.google.javascript.jscomp.CopilerOptins";
      GoogleJsMessageIdGenerator googleJsMessageIdGenerator0 = new GoogleJsMessageIdGenerator(string0);
      assertNotNull(googleJsMessageIdGenerator0);
      
      ReplaceMessagesForChrome replaceMessagesForChrome0 = new ReplaceMessagesForChrome(compiler0, googleJsMessageIdGenerator0, boolean0, jsMessage_Style0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(replaceMessagesForChrome0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0, string0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getName());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.toString());
      assertNotNull(sourceFile_Preloaded0);
      
      JsAst jsAst0 = new JsAst((SourceFile) sourceFile_Preloaded0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getName());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.toString());
      assertNotNull(jsAst0);
      
      Node node0 = jsAst0.getAstRoot((AbstractCompiler) compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isContinue());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", node0.getSourceFileName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isScript());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getName());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.toString());
      assertNotNull(node0);
      
      replaceMessagesForChrome0.process(node0, node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isContinue());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", node0.getSourceFileName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isScript());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getName());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "Ex\\ected node +ype ";
      int int0 = 37;
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCatch());
      assertEquals(37, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(151589, node0.getSourcePosition());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAdd());
      assertNotNull(node0);
      
      JsMessageVisitor.MalformedException jsMessageVisitor_MalformedException0 = new JsMessageVisitor.MalformedException(string0, node0);
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCatch());
      assertEquals(37, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(151589, node0.getSourcePosition());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAdd());
      assertNotNull(jsMessageVisitor_MalformedException0);
      
      Node node1 = jsMessageVisitor_MalformedException0.getNode();
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCatch());
      assertEquals(37, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(151589, node0.getSourcePosition());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isVar());
      assertEquals(37, node1.getLineno());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isOnlyModifiesArgumentsCall());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(true, node1.mayMutateArguments());
      assertEquals(false, node1.isWhile());
      assertEquals(37, node1.getType());
      assertEquals(0, node1.getChangeTime());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isFunction());
      assertEquals(true, node1.isCall());
      assertEquals(false, node1.isCast());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isObjectLit());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isStringKey());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.mayMutateGlobalStateOrThrow());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isFromExterns());
      assertEquals(151589, node1.getSourcePosition());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isAssign());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQuotedString());
      assertEquals(37, node1.getCharno());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isFor());
      assertEquals(0, node1.getSideEffectFlags());
      assertNotNull(node1);
  }

  @Test
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      EmptyMessageBundle emptyMessageBundle0 = new EmptyMessageBundle();
      assertNotNull(emptyMessageBundle0);
      
      boolean boolean0 = true;
      JsMessage.Style jsMessage_Style0 = JsMessage.Style.RELAX;
      String string0 = "com.google.javascript.jscomp.CopilerOptins";
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0, string0);
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.toString());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getName());
      assertNotNull(sourceFile_Preloaded0);
      
      JsAst jsAst0 = new JsAst((SourceFile) sourceFile_Preloaded0);
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.toString());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getName());
      assertNotNull(jsAst0);
      
      Node node0 = jsAst0.getAstRoot((AbstractCompiler) compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.toString());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", sourceFile_Preloaded0.getName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNew());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInc());
      assertEquals("com.google.javascript.jscomp.CopilerOptins", node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertNotNull(node0);
      
      ReplaceMessages replaceMessages0 = new ReplaceMessages(compiler0, emptyMessageBundle0, boolean0, jsMessage_Style0, boolean0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(replaceMessages0);
      
      int int0 = 17;
      try {
        replaceMessages0.checkNode(node0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected node type 17; found: 132
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "#1NQf[qa8";
      String string1 = JsMessageVisitor.toLowerCamelCaseWithNumericSuffixes(string0);
      assertEquals("#1nqf[qa8", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = JsMessageVisitor.isLowerCamelCaseWithNumericSuffixes(string1);
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      EmptyMessageBundle emptyMessageBundle0 = new EmptyMessageBundle();
      assertNotNull(emptyMessageBundle0);
      
      JsMessage.IdGenerator jsMessage_IdGenerator0 = emptyMessageBundle0.idGenerator();
      assertNull(jsMessage_IdGenerator0);
      
      boolean boolean0 = false;
      JsMessage.Style jsMessage_Style0 = JsMessage.Style.LEGACY;
      ReplaceMessagesForChrome replaceMessagesForChrome0 = new ReplaceMessagesForChrome(compiler0, jsMessage_IdGenerator0, boolean0, jsMessage_Style0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(replaceMessagesForChrome0);
      
      Node node0 = null;
      JsMessage jsMessage0 = null;
      replaceMessagesForChrome0.processMessageFallback(node0, jsMessage0, jsMessage0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }
}
