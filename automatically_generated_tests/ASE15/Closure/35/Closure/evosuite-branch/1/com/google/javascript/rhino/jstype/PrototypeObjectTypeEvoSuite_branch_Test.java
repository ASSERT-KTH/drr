/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:54:45 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class PrototypeObjectTypeEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      errorFunctionType0.matchConstraint((ObjectType) errorFunctionType0);
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "l";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(numberType0);
      
      int int0 = 4;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(4, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.defineDeclaredProperty(string0, (JSType) numberType0, node0);
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(4, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      assertTrue(boolean0 == boolean1);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.resolveInternal(simpleErrorReporter0, noType0);
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType1.isNominalConstructor());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(true, errorFunctionType1.hasCachedValues());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(true, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertSame(errorFunctionType1, errorFunctionType0);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertNotNull(errorFunctionType1);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      errorFunctionType0.setOwnerFunction(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Iterable<ObjectType> iterable0 = errorFunctionType0.getCtorImplementedInterfaces();
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "}";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertNotNull(errorFunctionType0);
      
      Iterable<ObjectType> iterable0 = errorFunctionType0.getCtorImplementedInterfaces();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertNotNull(iterable0);
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      errorFunctionType0.setOwnerFunction(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = null;
      errorFunctionType0.setOwnerFunction(functionType0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(errorFunctionType0);
      
      errorFunctionType0.setOwnerFunction(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      
      // Undeclared exception!
      try {
        errorFunctionType0.setOwnerFunction(errorFunctionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "l";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNotNull(errorFunctionType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertNotNull(numberType0);
      
      int int0 = 4;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(4, node0.getCharno());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isReturn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(4, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.defineDeclaredProperty(string0, (JSType) numberType0, node0);
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(4, node0.getCharno());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isReturn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(4, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertNotNull(noType0);
      assertTrue(boolean0 == boolean1);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0, boolean1);
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(4, node0.getCharno());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isReturn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(4, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertNotNull(instanceObjectType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      JSType.TypePair jSType_TypePair0 = instanceObjectType0.getTypesUnderInequality((JSType) instanceObjectType0);
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(4, node0.getCharno());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isReturn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(4, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertNotNull(jSType_TypePair0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNotNull(functionType0);
      
      String string0 = functionType0.getNormalizedReferenceName();
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(string0);
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      // Undeclared exception!
      try {
        noResolvedType0.setImplicitPrototype(functionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "J";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      String string1 = errorFunctionType0.getDisplayName();
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("J", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      boolean boolean1 = errorFunctionType0.isPropertyTypeInferred(string1);
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      assertTrue(boolean0 == boolean1);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0, boolean1);
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(instanceObjectType0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = instanceObjectType0.toAnnotationString();
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals("?", string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "J";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNotNull(errorFunctionType0);
      
      String string1 = errorFunctionType0.getDisplayName();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals("J", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      boolean boolean1 = errorFunctionType0.isPropertyTypeInferred(string1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertFalse(boolean1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertNotNull(noType0);
      assertTrue(boolean0 == boolean1);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0, boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(instanceObjectType0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = instanceObjectType0.toStringHelper(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals("{...}", string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      JSType jSType0 = noResolvedType0.unboxesTo();
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSType0);
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "J";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNotNull(errorFunctionType0);
      
      String string1 = errorFunctionType0.getDisplayName();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals("J", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      boolean boolean1 = errorFunctionType0.isPropertyTypeInferred(string1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertFalse(boolean1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      assertTrue(boolean0 == boolean1);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0, boolean1);
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(instanceObjectType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      boolean boolean2 = instanceObjectType0.matchesNumberContext();
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertFalse(boolean2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNotNull(noType0);
      
      FunctionType functionType0 = noType0.getSuperClassConstructor();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.matchesStringContext();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "}";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNotNull(jSDocInfo0);
      
      int int0 = (-2789);
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isCatch());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(-2789, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.defineProperty(string0, errorFunctionType0, boolean0, node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isCatch());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(-2789, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      errorFunctionType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "=q,lX";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNotNull(jSDocInfo0);
      
      errorFunctionType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "L/";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertNotNull(errorFunctionType0);
      
      JSDocInfo jSDocInfo0 = errorFunctionType0.getJSDocInfo();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertNull(jSDocInfo0);
      
      errorFunctionType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "l";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNotNull(errorFunctionType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isAllType());
      assertNotNull(numberType0);
      
      int int0 = 4;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(4, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isReturn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWhile());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isObjectLit());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.defineDeclaredProperty(string0, (JSType) numberType0, node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(4, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isReturn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWhile());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isObjectLit());
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSDocInfo jSDocInfo0 = errorFunctionType0.getOwnPropertyJSDocInfo(string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNull(jSDocInfo0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      JSDocInfo jSDocInfo0 = errorFunctionType0.getOwnPropertyJSDocInfo(string0);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "A^)#4;>%Y3";
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertNotNull(noType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertNotNull(functionType0);
      
      Node node0 = functionType0.getPropertyNode(string0);
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertNull(node0);
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "l";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(errorFunctionType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isAllType());
      assertNotNull(numberType0);
      
      int int0 = 4;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(4, node0.getType());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(true, node0.isReturn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSwitch());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.defineDeclaredProperty(string0, (JSType) numberType0, node0);
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(4, node0.getType());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(true, node0.isReturn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isAllType());
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      Node node1 = errorFunctionType0.getPropertyNode(string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, node1.isFalse());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.isReturn());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isThis());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isAdd());
      assertEquals(4, node1.getLineno());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(16388, node1.getSourcePosition());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(4, node1.getType());
      assertEquals(false, node1.isArrayLit());
      assertEquals(4, node1.getCharno());
      assertEquals(false, node1.isVar());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isLocalResultCall());
      assertSame(node1, node0);
      assertNotNull(node1);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "J";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(numberType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isArrayLit());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.defineInferredProperty(string0, (JSType) numberType0, node0);
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isArrayLit());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = errorFunctionType0.removeProperty(string0);
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      FunctionType functionType0 = noType0.getSuperClassConstructor();
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      String string0 = "";
      boolean boolean0 = functionType0.removeProperty(string0);
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(numberType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.defineInferredProperty(string0, (JSType) numberType0, node0);
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = errorFunctionType0.isPropertyInExterns(string0);
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean2);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "J";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      String string1 = errorFunctionType0.getDisplayName();
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("J", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      boolean boolean1 = errorFunctionType0.isPropertyInExterns(string1);
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "l";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(numberType0);
      
      int int0 = 4;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(4, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNull());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetterDef());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.defineDeclaredProperty(string0, (JSType) numberType0, node0);
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(4, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNull());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetterDef());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = errorFunctionType0.isPropertyTypeInferred(string0);
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
  }

  @Test
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "J";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(numberType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.defineInferredProperty(string0, (JSType) numberType0, node0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      Set<String> set0 = errorFunctionType0.getPropertyNames();
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(set0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "com.google.javascript.rhino.jstype.PrototypeObjectType";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      boolean boolean1 = errorFunctionType0.isPropertyTypeDeclared(string0);
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "l";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNotNull(errorFunctionType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isFunctionType());
      assertNotNull(numberType0);
      
      int int0 = 4;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.isReturn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(4, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTrue());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.defineDeclaredProperty(string0, (JSType) numberType0, node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.isReturn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(4, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTrue());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      boolean boolean2 = errorFunctionType0.defineInferredProperty(string0, (JSType) numberType0, node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.isReturn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(16388, node0.getSourcePosition());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(4, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(4, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTrue());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertFalse(boolean2);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "J";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(numberType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.defineInferredProperty(string0, (JSType) numberType0, node0);
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      int int0 = errorFunctionType0.getPropertiesCount();
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, int0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNotNull(errorFunctionType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.matchesStringContext());
      assertNotNull(numberType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isContinue());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.defineInferredProperty(string0, (JSType) numberType0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isContinue());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = errorFunctionType0.defineDeclaredProperty(string0, (JSType) numberType0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isContinue());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
  }

  @Test
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNotNull(noType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasInstanceType());
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.matchesInt32Context();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasInstanceType());
      assertFalse(boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertNotNull(noType0);
      
      boolean boolean0 = noType0.isPrettyPrint();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertTrue(boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "com.google.javascript.rhino.jstype.PrototypeObjectType";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNotNull(errorFunctionType0);
      
      boolean boolean1 = errorFunctionType0.isNumber();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      boolean boolean1 = errorFunctionType0.matchesObjectContext();
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertNotNull(noType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertNotNull(indexedType0);
      
      Set<String> set0 = indexedType0.getOwnPropertyNames();
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertNotNull(set0);
  }
}
