/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:23:07 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class ProxyObjectTypeEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertNotNull(noObjectType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noObjectType0, (JSType) noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertNotNull(parameterizedType0);
      
      ParameterizedType parameterizedType1 = (ParameterizedType)parameterizedType0.collapseUnion();
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.isFunctionType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isEnumElementType());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.isUnionType());
      assertEquals(false, parameterizedType1.isRecordType());
      assertEquals(false, parameterizedType1.isNominalConstructor());
      assertEquals(false, parameterizedType1.isEnumType());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertNotNull(parameterizedType1);
  }

  @Test
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "3|t'd+OU6pAwG^a";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("3|t'd+OU6pAwG^a", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      ObjectType objectType0 = templateType0.getTypeOfThis();
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("3|t'd+OU6pAwG^a", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(objectType0);
  }

  @Test
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(indexedType0);
      
      ObjectType objectType1 = indexedType0.getTypeOfThis();
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(objectType1);
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) noType0);
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, functionType0);
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      JSType jSType0 = parameterizedType0.getIndexType();
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSType0);
  }

  @Test
  public void test04()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noObjectType0, (JSType) noObjectType0);
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      JSType jSType0 = parameterizedType0.getIndexType();
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSType0);
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertNotNull(noType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertNotNull(indexedType0);
      
      RecordType recordType0 = noType0.toMaybeRecordType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertNull(recordType0);
      
      indexedType0.setReferencedType(recordType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      
      JSType jSType0 = indexedType0.getParameterType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertNull(jSType0);
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertNotNull(noType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertNotNull(indexedType0);
      
      JSType jSType0 = indexedType0.getParameterType();
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertNull(jSType0);
  }

  @Test
  public void test07()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(booleanType0);
      
      String string0 = "";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(proxyObjectType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, proxyObjectType0, templateType0);
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      FunctionType functionType0 = parameterizedType0.getConstructor();
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0);
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(indexedType0);
      
      Set<String> set0 = indexedType0.getOwnPropertyNames();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(set0);
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNotNull(noResolvedType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNotNull(indexedType0);
      
      Set<String> set0 = indexedType0.getOwnPropertyNames();
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
  }

  @Test
  public void test10()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(booleanType0);
      
      String string0 = "";
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertNotNull(proxyObjectType0);
      
      boolean boolean0 = proxyObjectType0.hasOwnDeclaredProperty(string0);
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertNotNull(noResolvedType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertNotNull(indexedType0);
      
      String string0 = "[_<75~%";
      boolean boolean0 = indexedType0.hasProperty(string0);
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = 243;
      String string0 = "/Gm]yuN!vB q|`?f+9";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      JSDocInfo jSDocInfo0 = null;
      namedType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test13()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      JSType jSType0 = null;
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType0);
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertNotNull(proxyObjectType0);
      
      String string0 = "K";
      JSDocInfo jSDocInfo0 = null;
      proxyObjectType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "3|t'd+OU6pAwG^a";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(indexedType0);
      
      int int0 = 5;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertNotNull(namedType0);
      
      JSDocInfo jSDocInfo0 = namedType0.getOwnPropertyJSDocInfo(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertNull(jSDocInfo0);
      
      indexedType0.setJSDocInfo(jSDocInfo0);
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, objectType0);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      String string0 = "}";
      JSDocInfo jSDocInfo0 = parameterizedType0.getOwnPropertyJSDocInfo(string0);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSDocInfo0);
      
      parameterizedType0.setJSDocInfo(jSDocInfo0);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test16()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isRecordType());
      assertNotNull(stringType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, stringType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertNotNull(proxyObjectType0);
      
      String string0 = "EvalErrr";
      UnknownType unknownType0 = (UnknownType)proxyObjectType0.getPropertyType(string0);
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertNotNull(unknownType0);
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      int int0 = 724;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      UnknownType unknownType0 = (UnknownType)namedType0.getPropertyType(string0);
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNoType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isUnknownType());
      assertNotNull(unknownType0);
  }

  @Test
  public void test18()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertNotNull(allType0);
      
      EnumType enumType0 = allType0.toMaybeEnumType();
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertNull(enumType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, allType0);
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertNotNull(parameterizedType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, parameterizedType0, parameterizedType0);
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertNotNull(indexedType0);
      
      Set<String> set0 = indexedType0.getPropertyNames();
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertNotNull(set0);
  }

  @Test
  public void test19()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(booleanType0);
      
      String string0 = "";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumElementType());
      assertNotNull(templateType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertNotNull(proxyObjectType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, proxyObjectType0, templateType0);
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumElementType());
      assertNotNull(parameterizedType0);
      
      int int0 = parameterizedType0.getPropertiesCount();
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(0, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType jSType0 = null;
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createAnonymousObjectType();
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(prototypeObjectType0);
      
      JSType jSType1 = JSType.safeResolve(jSType0, simpleErrorReporter0, prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSType1);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType1);
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(proxyObjectType0);
      
      String string0 = "3|t'd+OU6pAwG^a";
      boolean boolean0 = proxyObjectType0.isPropertyInExterns(string0);
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      int int0 = 724;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      boolean boolean0 = namedType0.isPropertyInExterns(string0);
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, objectType0);
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      String string0 = "}";
      boolean boolean1 = parameterizedType0.isPropertyTypeInferred(string0);
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = 243;
      String string0 = "/Gm]yuN!vB q|`?f+9";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertNotNull(namedType0);
      
      boolean boolean0 = namedType0.isPropertyTypeInferred(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = 243;
      String string0 = "/Gm]yuN!vB q|`?f+9";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertNotNull(namedType0);
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertNull(node0);
  }

  @Test
  public void test25()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      FunctionType functionType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isTemplateType());
      assertNotNull(indexedType0);
      
      String string0 = "{proxy:";
      boolean boolean0 = indexedType0.isPropertyTypeDeclared(string0);
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isTemplateType());
      assertFalse(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "3|t'd+OU6pAwG^a";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("3|t'd+OU6pAwG^a", templateType0.getReferenceName());
      assertNotNull(templateType0);
      
      boolean boolean0 = templateType0.hasOwnDeclaredProperty(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("3|t'd+OU6pAwG^a", templateType0.getReferenceName());
      assertFalse(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isTemplateType());
      assertNotNull(voidType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, voidType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertNotNull(proxyObjectType0);
      
      String string0 = "{yv3";
      boolean boolean0 = proxyObjectType0.removeProperty(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertFalse(boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = 243;
      String string0 = "/Gm]yuN!vB q|`?f+9";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      boolean boolean0 = namedType0.removeProperty(string0);
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(booleanType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertNotNull(proxyObjectType0);
      
      ObjectType objectType0 = proxyObjectType0.getImplicitPrototype();
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertNull(objectType0);
  }

  @Test
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      FunctionType functionType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertNotNull(indexedType0);
      
      Iterable<ObjectType> iterable0 = indexedType0.getCtorImplementedInterfaces();
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertNotNull(iterable0);
  }

  @Test
  public void test31()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "{yv3";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{yv3", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertNotNull(templateType0);
      
      Iterable<ObjectType> iterable0 = templateType0.getCtorImplementedInterfaces();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{yv3", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertNotNull(iterable0);
  }

  @Test
  public void test32()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      JSType jSType0 = null;
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType0);
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertNotNull(proxyObjectType0);
      
      boolean boolean0 = proxyObjectType0.isNativeObjectType();
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertFalse(boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noType0, (JSType) noType0);
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = parameterizedType0.isNativeObjectType();
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertTrue(boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(stringType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, stringType0);
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(proxyObjectType0);
      
      String string0 = "EvalErrr";
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) proxyObjectType0, (JSType) stringType0);
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertNotNull(parameterizedType0);
      
      FunctionType functionType0 = parameterizedType0.getOwnerFunction();
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertNull(functionType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, parameterizedType0);
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertNotNull(indexedType0);
      
      Node node0 = indexedType0.getPropertyNode(string0);
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertNull(node0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = proxyObjectType0.defineInferredProperty(string0, (JSType) stringType0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, objectType0);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      boolean boolean1 = parameterizedType0.hasDisplayName();
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNotNull(noResolvedType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNotNull(indexedType0);
      
      String string0 = indexedType0.getDisplayName();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(string0);
  }

  @Test
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertNotNull(noType0);
      
      String string0 = "L;u$6";
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(functionType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertNotNull(parameterizedType0);
      
      ObjectType.Property objectType_Property0 = parameterizedType0.getSlot(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(objectType_Property0);
  }

  @Test
  public void test38()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noObjectType0, (JSType) noObjectType0);
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = parameterizedType0.isNoObjectType();
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(stringType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, stringType0);
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(proxyObjectType0);
      
      boolean boolean0 = proxyObjectType0.isOrdinaryFunction();
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isVoidType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertNotNull(noObjectType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noObjectType0, (JSType) noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isVoidType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertNotNull(parameterizedType0);
      
      JSDocInfo jSDocInfo0 = parameterizedType0.getJSDocInfo();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isVoidType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNotNull(noResolvedType0);
      
      String string0 = "[_<75~%";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("[_<75~%", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderInequality((JSType) noResolvedType0);
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("[_<75~%", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test42()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "f}Ua-T?4ked^ds-L";
      int int0 = (-31);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      EnumType enumType0 = namedType0.toMaybeEnumType();
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(enumType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) enumType0, (JSType) namedType0);
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      // Undeclared exception!
      try {
        String string1 = parameterizedType0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       String string0 = "H&qRmpobeN;q";
//       TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, templateType0.isEnumElementType());
//       assertEquals(false, templateType0.isUnionType());
//       assertEquals(false, templateType0.isEnumType());
//       assertEquals(false, templateType0.isFunctionPrototypeType());
//       assertEquals(false, templateType0.hasCachedValues());
//       assertEquals(false, templateType0.isVoidType());
//       assertEquals(true, templateType0.isTemplateType());
//       assertEquals("H&qRmpobeN;q", templateType0.getReferenceName());
//       assertEquals(false, templateType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, templateType0.isResolved());
//       assertEquals(false, templateType0.isNominalConstructor());
//       assertEquals(false, templateType0.isNullType());
//       assertEquals(false, templateType0.isNumberValueType());
//       assertEquals(false, templateType0.isBooleanValueType());
//       assertEquals(false, templateType0.isStringValueType());
//       assertEquals(false, templateType0.isFunctionType());
//       assertNotNull(templateType0);
//       
//       int int0 = templateType0.hashCode();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, templateType0.isEnumElementType());
//       assertEquals(false, templateType0.isUnionType());
//       assertEquals(false, templateType0.isEnumType());
//       assertEquals(false, templateType0.isFunctionPrototypeType());
//       assertEquals(false, templateType0.hasCachedValues());
//       assertEquals(false, templateType0.isVoidType());
//       assertEquals(true, templateType0.isTemplateType());
//       assertEquals("H&qRmpobeN;q", templateType0.getReferenceName());
//       assertEquals(false, templateType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, templateType0.isResolved());
//       assertEquals(false, templateType0.isNominalConstructor());
//       assertEquals(false, templateType0.isNullType());
//       assertEquals(false, templateType0.isNumberValueType());
//       assertEquals(false, templateType0.isBooleanValueType());
//       assertEquals(false, templateType0.isStringValueType());
//       assertEquals(false, templateType0.isFunctionType());
//       assertEquals(9, int0);
//   }

  @Test
  public void test44()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isFunctionType());
      assertNotNull(stringType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, stringType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertNotNull(proxyObjectType0);
      
      boolean boolean0 = proxyObjectType0.canAssignTo((JSType) proxyObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertTrue(boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNotNull(noResolvedType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNotNull(indexedType0);
      
      boolean boolean0 = indexedType0.matchesInt32Context();
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertTrue(boolean0);
  }

  @Test
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNotNull(noType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noType0, (JSType) noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = parameterizedType0.matchesStringContext();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertTrue(boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "{yv3";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals("{yv3", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      boolean boolean0 = templateType0.isEnumElementType();
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals("{yv3", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      int int0 = 724;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      boolean boolean0 = namedType0.canBeCalled();
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noType0, (JSType) noType0);
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = parameterizedType0.isInstanceType();
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = 243;
      String string0 = "/Gm]yuN!vB q|`?f+9";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      boolean boolean0 = namedType0.isNullable();
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(indexedType0);
      
      boolean boolean0 = indexedType0.isNumber();
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test
  public void test52() {}
//   @Test
//   public void test52()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       int int0 = 243;
//       String string0 = "/Gm]yuN!vB q|`?f+9";
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
//       assertEquals(false, namedType0.isEnumType());
//       assertEquals(false, namedType0.isEnumElementType());
//       assertEquals(false, namedType0.hasCachedValues());
//       assertEquals(false, namedType0.isTemplateType());
//       assertEquals(false, namedType0.isResolved());
//       assertEquals(false, namedType0.isStringValueType());
//       assertEquals(false, namedType0.isNominalConstructor());
//       assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, namedType0.isNullType());
//       assertEquals(false, namedType0.isFunctionPrototypeType());
//       assertEquals(false, namedType0.isBooleanValueType());
//       assertEquals(false, namedType0.isVoidType());
//       assertEquals(false, namedType0.isNumberValueType());
//       assertEquals(false, namedType0.isFunctionType());
//       assertEquals(false, namedType0.isRecordType());
//       assertEquals(false, namedType0.isUnionType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(namedType0);
//       
//       String string1 = namedType0.toDebugHashCodeString();
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertEquals(false, namedType0.isEnumType());
//       assertEquals(false, namedType0.isEnumElementType());
//       assertEquals(false, namedType0.hasCachedValues());
//       assertEquals(false, namedType0.isTemplateType());
//       assertEquals(false, namedType0.isResolved());
//       assertEquals(false, namedType0.isStringValueType());
//       assertEquals(false, namedType0.isNominalConstructor());
//       assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, namedType0.isNullType());
//       assertEquals(false, namedType0.isFunctionPrototypeType());
//       assertEquals(false, namedType0.isBooleanValueType());
//       assertEquals(false, namedType0.isVoidType());
//       assertEquals(false, namedType0.isNumberValueType());
//       assertEquals(false, namedType0.isFunctionType());
//       assertEquals(false, namedType0.isRecordType());
//       assertEquals(false, namedType0.isUnionType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals("{proxy:{9}}", string1);
//       assertNotNull(string1);
//   }

  @Test
  public void test53()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertNotNull(templateType0);
      
      boolean boolean0 = templateType0.isCheckedUnknownType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertFalse(boolean0);
  }

  @Test
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "[_<75~%";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("[_<75~%", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      boolean boolean0 = templateType0.matchesObjectContext();
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("[_<75~%", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test
  public void test55()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      UnknownType unknownType0 = (UnknownType)templateType0.findPropertyType(string0);
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
  }

  @Test
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      int int0 = 724;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      boolean boolean0 = namedType0.isRecordType();
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isUnionType());
      assertNotNull(stringType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, stringType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertNotNull(proxyObjectType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) proxyObjectType0, (JSType) stringType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertNotNull(parameterizedType0);
      
      parameterizedType0.matchConstraint((ObjectType) proxyObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
  }

  @Test
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = 243;
      String string0 = "/Gm]yuN!vB q|`?f+9";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      boolean boolean0 = namedType0.isNominalConstructor();
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(m";
      int int0 = 0;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertNotNull(namedType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) namedType0, (JSType) namedType0);
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertNotNull(parameterizedType0);
      
      ParameterizedType parameterizedType1 = (ParameterizedType)parameterizedType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) namedType0);
      assertSame(parameterizedType1, parameterizedType0);
      assertSame(parameterizedType0, parameterizedType1);
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(true, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.isFunctionType());
      assertEquals(false, parameterizedType1.isRecordType());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isNominalConstructor());
      assertEquals(false, parameterizedType1.isEnumElementType());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType1.isEnumType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(false, parameterizedType1.isUnionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(true, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertNotNull(parameterizedType1);
      
      UnionType unionType0 = (UnionType)namedType0.getLeastSupertype((JSType) parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertSame(parameterizedType0, parameterizedType1);
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(true, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.isFunctionType());
      assertEquals(false, parameterizedType1.isRecordType());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isNominalConstructor());
      assertEquals(false, parameterizedType1.isEnumElementType());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType1.isEnumType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(false, parameterizedType1.isUnionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(true, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertNotNull(unionType0);
  }

  @Test
  public void test60()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noObjectType0, (JSType) noObjectType0);
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      String string0 = "";
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(stringType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      Node node0 = errorFunctionType0.getParametersNode();
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isGetterDef());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetProp());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTrue());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(node0);
      
      boolean boolean0 = parameterizedType0.defineDeclaredProperty(string0, (JSType) stringType0, node0);
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isGetterDef());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetProp());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTrue());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }
}
