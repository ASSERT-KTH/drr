/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 00:24:08 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class UnionTypeEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.matchesStringContext());
      assertNotNull(voidType0);
      
      boolean boolean0 = hashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertNotNull(unionType0);
      
      ObjectType objectType0 = ObjectType.cast((JSType) voidType0);
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.matchesStringContext());
      assertNull(objectType0);
      
      unionType0.matchConstraint(objectType0);
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
  }

  @Test
  public void test01()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertNotNull(voidType0);
      
      boolean boolean0 = hashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertNotNull(unionType0);
      
      JSType jSType0 = unionType0.collapseUnion();
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertNull(jSType0);
  }

  @Test
  public void test02()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = hashSet0.add((JSType) noResolvedType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertNotNull(unionType0);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)unionType0.collapseUnion();
      assertSame(noResolvedType1, noResolvedType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, noResolvedType1.isNominalConstructor());
      assertEquals(false, noResolvedType1.isOrdinaryFunction());
      assertEquals(true, noResolvedType1.isConstructor());
      assertEquals(true, noResolvedType1.matchesNumberContext());
      assertEquals(true, noResolvedType1.hasCachedValues());
      assertEquals(false, noResolvedType1.isVoidType());
      assertEquals(false, noResolvedType1.isFunctionType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType1.isAllType());
      assertEquals(true, noResolvedType1.isNullable());
      assertEquals(false, noResolvedType1.isEnumElementType());
      assertEquals(false, noResolvedType1.isTemplateType());
      assertEquals(false, noResolvedType1.isBooleanValueType());
      assertEquals(false, noResolvedType1.isResolved());
      assertEquals(false, noResolvedType1.isStringValueType());
      assertEquals(2147483647, noResolvedType1.getMaxArguments());
      assertEquals(false, noResolvedType1.isFunctionPrototypeType());
      assertEquals(true, noResolvedType1.canBeCalled());
      assertEquals(false, noResolvedType1.isInterface());
      assertEquals(false, noResolvedType1.isNoObjectType());
      assertEquals(true, noResolvedType1.matchesStringContext());
      assertEquals(false, noResolvedType1.isReturnTypeInferred());
      assertNull(noResolvedType1.getReferenceName());
      assertEquals(false, noResolvedType1.isNumberValueType());
      assertEquals(true, noResolvedType1.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType1.isNominalType());
      assertEquals(true, noResolvedType1.matchesObjectContext());
      assertEquals(false, noResolvedType1.isUnionType());
      assertNull(noResolvedType1.getTemplateTypeName());
      assertEquals(false, noResolvedType1.isEnumType());
      assertEquals(false, noResolvedType1.isRecordType());
      assertEquals(false, noResolvedType1.isNullType());
      assertEquals(false, noResolvedType1.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType1.getPropertiesCount());
      assertNotNull(noResolvedType1);
  }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       JSTypeRegistry jSTypeRegistry0 = null;
//       HashSet<JSType> hashSet0 = new HashSet<JSType>();
//       assertEquals(true, hashSet0.isEmpty());
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(0, hashSet0.size());
//       assertNotNull(hashSet0);
//       
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = true;
//       JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry1);
//       
//       NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, noResolvedType0.isNominalConstructor());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
//       assertNotNull(noResolvedType0);
//       
//       boolean boolean1 = hashSet0.add((JSType) noResolvedType0);
//       assertTrue(boolean1);
//       assertTrue(boolean0 == boolean1);
//       assertTrue(boolean1 == boolean0);
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, noResolvedType0.isNominalConstructor());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(1, hashSet0.size());
//       assertEquals("[NoResolvedType]", hashSet0.toString());
//       
//       UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
//       assertEquals(false, unionType0.isNoResolvedType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isInterface());
//       assertEquals(false, unionType0.isFunctionPrototypeType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isEnumType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isEnumElementType());
//       assertEquals(false, unionType0.isNominalConstructor());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isOrdinaryFunction());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isNominalType());
//       assertEquals(false, unionType0.isCheckedUnknownType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isConstructor());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(1, hashSet0.size());
//       assertEquals("[NoResolvedType]", hashSet0.toString());
//       assertNotNull(unionType0);
//       
//       String string0 = unionType0.toDebugHashCodeString();
//       assertEquals("{(function (this:me, {9}): me)}", string0);
//       assertEquals(false, unionType0.isNoResolvedType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isInterface());
//       assertEquals(false, unionType0.isFunctionPrototypeType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isEnumType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isEnumElementType());
//       assertEquals(false, unionType0.isNominalConstructor());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isOrdinaryFunction());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isNominalType());
//       assertEquals(false, unionType0.isCheckedUnknownType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isConstructor());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(1, hashSet0.size());
//       assertEquals("[NoResolvedType]", hashSet0.toString());
//       assertNotNull(string0);
//   }

  @Test
  public void test04()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNominalType());
      assertNotNull(voidType0);
      
      boolean boolean0 = hashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNominalType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertNotNull(unionType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      ObjectType objectType0 = ObjectType.cast((JSType) voidType0);
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNominalType());
      assertNull(objectType0);
      
      UnionType unionType1 = (UnionType)unionType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) objectType0);
      assertSame(unionType0, unionType1);
      assertSame(unionType1, unionType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(true, voidType0.isResolved());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNominalType());
      assertNotNull(unionType1);
  }

  @Test
  public void test05()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertNotNull(unionType0);
      
      boolean boolean0 = arrayDeque0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) unionType0);
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertNull(functionType0);
      
      UnionType unionType1 = (UnionType)unionType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) functionType0);
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertNotNull(unionType1);
  }

  @Test
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = hashSet0.add((JSType) noResolvedType0);
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertNotNull(unionType0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) voidType0);
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test07()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertNotNull(allType0);
      
      boolean boolean0 = stack0.add((JSType) allType0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[*]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[*]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertNotNull(unionType0);
      
      // Undeclared exception!
      try {
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) allType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = hashSet0.add((JSType) noResolvedType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertNotNull(unionType0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality((JSType) noResolvedType0);
      assertTrue(boolean0 == boolean1);
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test09()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isRecordType());
      assertNotNull(numberType0);
      
      boolean boolean0 = stack0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[number]", stack0.toString());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isRecordType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[number]", stack0.toString());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertNotNull(unionType0);
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[number]", stack0.toString());
      assertEquals("BOTH", booleanLiteralSet0.name());
      assertEquals(3, booleanLiteralSet0.ordinal());
      assertEquals("BOTH", booleanLiteralSet0.toString());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
  }

  @Test
  public void test10()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = hashSet0.add((JSType) noResolvedType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertNotNull(unionType0);
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.EMPTY, booleanLiteralSet0);
      assertEquals(0, booleanLiteralSet0.ordinal());
      assertEquals("EMPTY", booleanLiteralSet0.name());
      assertEquals("EMPTY", booleanLiteralSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
  }

  @Test
  public void test11()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertNotNull(voidType0);
      
      boolean boolean0 = hashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(1, hashSet0.size());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(1, hashSet0.size());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isEnumType();
      assertFalse(boolean0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isResolved());
      assertNotNull(nullType0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isResolved());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNumberValueType());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertNotNull(unionType0);
      
      // Undeclared exception!
      try {
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowEquality((JSType) voidType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertNotNull(unionType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isInterface());
      assertNotNull(nullType0);
      
      int int0 = 0;
      stack0.add(int0, (JSType) nullType0);
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isInterface());
      
      boolean boolean0 = unionType0.isSubtype((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
  }

  @Test
  public void test15()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = hashSet0.add((JSType) noResolvedType0);
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertNotNull(unionType0);
      
      String string0 = "D~UTf+%nXbm!a?yMN`.";
      UnknownType unknownType0 = (UnknownType)unionType0.findPropertyType(string0);
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertNotNull(unknownType0);
      
      boolean boolean2 = unionType0.canTestForShallowEqualityWith((JSType) unknownType0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
  }

  @Test
  public void test16()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isUnionType());
      assertNotNull(allType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isSubtype((JSType) allType0);
      assertTrue(boolean0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isUnionType());
  }

  @Test
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertNotNull(nullType0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoType());
      assertNotNull(voidType0);
      
      boolean boolean1 = hashSet0.add((JSType) voidType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoType());
      assertEquals("[null, undefined]", hashSet0.toString());
      assertEquals(2, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals("[null, undefined]", hashSet0.toString());
      assertEquals(2, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      String string0 = unionType0.toAnnotationString();
      assertEquals("(null|undefined)", string0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals("[null, undefined]", hashSet0.toString());
      assertEquals(2, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertNotNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertNotNull(stack0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertNotNull(unionType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isAllType());
      assertNotNull(nullType0);
      
      int int0 = 0;
      stack0.add(int0, (JSType) nullType0);
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isAllType());
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getRestrictedUnion((JSType) nullType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertNotNull(stack0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isUnionType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isConstructor());
      assertNotNull(numberType0);
      
      boolean boolean0 = stack0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isUnionType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals("[number]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals("[number]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertNotNull(unionType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isInterface());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertNotNull(nullType0);
      
      NumberType numberType1 = (NumberType)unionType0.getRestrictedUnion((JSType) nullType0);
      assertSame(numberType1, numberType0);
      assertEquals(false, numberType1.isInterface());
      assertEquals(false, numberType1.isRecordType());
      assertEquals(false, numberType1.isVoidType());
      assertEquals(false, numberType1.isTemplateType());
      assertEquals(true, numberType1.matchesNumberContext());
      assertEquals(false, numberType1.isNullType());
      assertEquals(false, numberType1.isNominalConstructor());
      assertEquals(false, numberType1.isEnumType());
      assertEquals(false, numberType1.isResolved());
      assertEquals("number", numberType1.getDisplayName());
      assertEquals(true, numberType1.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType1.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType1.isNoType());
      assertEquals(false, numberType1.isFunctionType());
      assertEquals(false, numberType1.isCheckedUnknownType());
      assertEquals(true, numberType1.matchesStringContext());
      assertEquals(false, numberType1.isEnumElementType());
      assertEquals(false, numberType1.isConstructor());
      assertEquals(false, numberType1.isFunctionPrototypeType());
      assertEquals(false, numberType1.isNoResolvedType());
      assertEquals(false, numberType1.isAllType());
      assertEquals(false, numberType1.isNoObjectType());
      assertEquals(false, numberType1.isOrdinaryFunction());
      assertEquals(false, numberType1.isStringValueType());
      assertEquals(false, numberType1.isNominalType());
      assertEquals(false, numberType1.isNullable());
      assertEquals(false, numberType1.isBooleanValueType());
      assertEquals(true, numberType1.isNumberValueType());
      assertEquals(false, numberType1.isUnionType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isInterface());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals("[number]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertNotNull(numberType1);
  }

  @Test
  public void test20()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertNotNull(voidType0);
      
      boolean boolean0 = hashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.contains((JSType) voidType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
  }

  @Test
  public void test21()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = hashSet0.add((JSType) noResolvedType0);
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean2 = unionType0.contains((JSType) voidType0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
  }

  @Test
  public void test22()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isEnumElementType());
      assertNotNull(voidType0);
      
      boolean boolean0 = hashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isEnumElementType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.isObject();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
  }

  @Test
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = hashSet0.add((JSType) noResolvedType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isRecordType());
      assertNotNull(unionType0);
      
      boolean boolean2 = unionType0.isObject();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isRecordType());
  }

  @Test
  public void test24() {}
//   @Test
//   public void test24()  throws Throwable  {
//       JSTypeRegistry jSTypeRegistry0 = null;
//       HashSet<JSType> hashSet0 = new HashSet<JSType>();
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(0, hashSet0.size());
//       assertEquals(true, hashSet0.isEmpty());
//       assertNotNull(hashSet0);
//       
//       NullType nullType0 = new NullType(jSTypeRegistry0);
//       assertEquals(false, nullType0.isFunctionType());
//       assertEquals(false, nullType0.matchesObjectContext());
//       assertEquals(false, nullType0.isNominalConstructor());
//       assertEquals(false, nullType0.isInterface());
//       assertEquals(true, nullType0.isNullType());
//       assertEquals(false, nullType0.isFunctionPrototypeType());
//       assertEquals(false, nullType0.isNumberValueType());
//       assertEquals("null", nullType0.getDisplayName());
//       assertEquals(false, nullType0.isBooleanValueType());
//       assertEquals(false, nullType0.isUnionType());
//       assertEquals(false, nullType0.isAllType());
//       assertEquals(false, nullType0.isStringValueType());
//       assertEquals(false, nullType0.isConstructor());
//       assertEquals(false, nullType0.isRecordType());
//       assertEquals(false, nullType0.isEnumElementType());
//       assertEquals(false, nullType0.isResolved());
//       assertEquals(true, nullType0.matchesNumberContext());
//       assertEquals(false, nullType0.isVoidType());
//       assertEquals(false, nullType0.isNominalType());
//       assertEquals(false, nullType0.isTemplateType());
//       assertEquals(false, nullType0.isNoObjectType());
//       assertEquals(false, nullType0.isEnumType());
//       assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, nullType0.isNoResolvedType());
//       assertEquals(true, nullType0.matchesStringContext());
//       assertEquals(false, nullType0.isCheckedUnknownType());
//       assertEquals(true, nullType0.isNullable());
//       assertEquals(false, nullType0.isOrdinaryFunction());
//       assertEquals(false, nullType0.isNoType());
//       assertNotNull(nullType0);
//       
//       boolean boolean0 = hashSet0.add((JSType) nullType0);
//       assertTrue(boolean0);
//       assertEquals("[null]", hashSet0.toString());
//       assertEquals(1, hashSet0.size());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(false, nullType0.isFunctionType());
//       assertEquals(false, nullType0.matchesObjectContext());
//       assertEquals(false, nullType0.isNominalConstructor());
//       assertEquals(false, nullType0.isInterface());
//       assertEquals(true, nullType0.isNullType());
//       assertEquals(false, nullType0.isFunctionPrototypeType());
//       assertEquals(false, nullType0.isNumberValueType());
//       assertEquals("null", nullType0.getDisplayName());
//       assertEquals(false, nullType0.isBooleanValueType());
//       assertEquals(false, nullType0.isUnionType());
//       assertEquals(false, nullType0.isAllType());
//       assertEquals(false, nullType0.isStringValueType());
//       assertEquals(false, nullType0.isConstructor());
//       assertEquals(false, nullType0.isRecordType());
//       assertEquals(false, nullType0.isEnumElementType());
//       assertEquals(false, nullType0.isResolved());
//       assertEquals(true, nullType0.matchesNumberContext());
//       assertEquals(false, nullType0.isVoidType());
//       assertEquals(false, nullType0.isNominalType());
//       assertEquals(false, nullType0.isTemplateType());
//       assertEquals(false, nullType0.isNoObjectType());
//       assertEquals(false, nullType0.isEnumType());
//       assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, nullType0.isNoResolvedType());
//       assertEquals(true, nullType0.matchesStringContext());
//       assertEquals(false, nullType0.isCheckedUnknownType());
//       assertEquals(true, nullType0.isNullable());
//       assertEquals(false, nullType0.isOrdinaryFunction());
//       assertEquals(false, nullType0.isNoType());
//       
//       VoidType voidType0 = new VoidType(jSTypeRegistry0);
//       assertEquals(false, voidType0.isRecordType());
//       assertEquals(false, voidType0.isNoObjectType());
//       assertEquals(false, voidType0.matchesNumberContext());
//       assertEquals(false, voidType0.isFunctionPrototypeType());
//       assertEquals(false, voidType0.isNullType());
//       assertEquals(false, voidType0.isBooleanValueType());
//       assertEquals(false, voidType0.isEnumElementType());
//       assertEquals(false, voidType0.isNoType());
//       assertEquals(false, voidType0.isUnionType());
//       assertEquals(false, voidType0.isNumberValueType());
//       assertEquals(false, voidType0.isInterface());
//       assertEquals(false, voidType0.isAllType());
//       assertEquals(false, voidType0.isEnumType());
//       assertEquals(false, voidType0.isTemplateType());
//       assertEquals(false, voidType0.isFunctionType());
//       assertEquals(false, voidType0.isCheckedUnknownType());
//       assertEquals(false, voidType0.isResolved());
//       assertEquals(true, voidType0.matchesStringContext());
//       assertEquals(false, voidType0.matchesObjectContext());
//       assertEquals(false, voidType0.isNoResolvedType());
//       assertEquals("undefined", voidType0.getDisplayName());
//       assertEquals(false, voidType0.isConstructor());
//       assertEquals(false, voidType0.isNominalConstructor());
//       assertEquals(false, voidType0.isOrdinaryFunction());
//       assertEquals(true, voidType0.isVoidType());
//       assertEquals(false, voidType0.isStringValueType());
//       assertEquals(false, voidType0.isNominalType());
//       assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
//       assertNotNull(voidType0);
//       
//       boolean boolean1 = hashSet0.add((JSType) voidType0);
//       assertTrue(boolean1);
//       assertTrue(boolean1 == boolean0);
//       assertEquals(2, hashSet0.size());
//       assertEquals("[null, undefined]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(false, voidType0.isRecordType());
//       assertEquals(false, voidType0.isNoObjectType());
//       assertEquals(false, voidType0.matchesNumberContext());
//       assertEquals(false, voidType0.isFunctionPrototypeType());
//       assertEquals(false, voidType0.isNullType());
//       assertEquals(false, voidType0.isBooleanValueType());
//       assertEquals(false, voidType0.isEnumElementType());
//       assertEquals(false, voidType0.isNoType());
//       assertEquals(false, voidType0.isUnionType());
//       assertEquals(false, voidType0.isNumberValueType());
//       assertEquals(false, voidType0.isInterface());
//       assertEquals(false, voidType0.isAllType());
//       assertEquals(false, voidType0.isEnumType());
//       assertEquals(false, voidType0.isTemplateType());
//       assertEquals(false, voidType0.isFunctionType());
//       assertEquals(false, voidType0.isCheckedUnknownType());
//       assertEquals(false, voidType0.isResolved());
//       assertEquals(true, voidType0.matchesStringContext());
//       assertEquals(false, voidType0.matchesObjectContext());
//       assertEquals(false, voidType0.isNoResolvedType());
//       assertEquals("undefined", voidType0.getDisplayName());
//       assertEquals(false, voidType0.isConstructor());
//       assertEquals(false, voidType0.isNominalConstructor());
//       assertEquals(false, voidType0.isOrdinaryFunction());
//       assertEquals(true, voidType0.isVoidType());
//       assertEquals(false, voidType0.isStringValueType());
//       assertEquals(false, voidType0.isNominalType());
//       assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
//       
//       UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isNominalType());
//       assertEquals(false, unionType0.isEnumElementType());
//       assertEquals(false, unionType0.isNominalConstructor());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isNoResolvedType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isOrdinaryFunction());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isConstructor());
//       assertEquals(false, unionType0.isEnumType());
//       assertEquals(false, unionType0.isCheckedUnknownType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isInterface());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isFunctionPrototypeType());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[null, undefined]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertNotNull(unionType0);
//       
//       boolean boolean2 = unionType0.equals((Object) unionType0);
//       assertTrue(boolean2);
//       assertTrue(boolean2 == boolean1);
//       assertTrue(boolean2 == boolean0);
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isNominalType());
//       assertEquals(false, unionType0.isEnumElementType());
//       assertEquals(false, unionType0.isNominalConstructor());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isNoResolvedType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isOrdinaryFunction());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isConstructor());
//       assertEquals(false, unionType0.isEnumType());
//       assertEquals(false, unionType0.isCheckedUnknownType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isInterface());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isFunctionPrototypeType());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[null, undefined]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//   }

  @Test
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "|";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      ArrayDeque<AllType> arrayDeque0 = new ArrayDeque<AllType>();
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Vector<JSType> vector0 = new Vector<JSType>((Collection<? extends JSType>) arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertNotNull(unionType0);
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(errorFunctionType0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertNotNull(noObjectType0);
  }

  @Test
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "|";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNotNull(errorFunctionType0);
      
      Node node0 = errorFunctionType0.getRootNode();
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(node0);
      
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, errorFunctionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNotNull(arrowType0);
      
      ArrayDeque<AllType> arrayDeque0 = new ArrayDeque<AllType>();
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Vector<JSType> vector0 = new Vector<JSType>((Collection<? extends JSType>) arrayDeque0);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(unionType0);
      
      NoType noType0 = (NoType)unionType0.meet(arrowType0);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(noType0);
  }

  @Test
  public void test27()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumType());
      assertNotNull(numberType0);
      
      boolean boolean0 = stack0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[number]", stack0.toString());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[number]", stack0.toString());
      assertNotNull(unionType0);
      
      NumberType numberType1 = (NumberType)unionType0.meet(unionType0);
      assertSame(numberType1, numberType0);
      assertEquals(false, numberType1.isCheckedUnknownType());
      assertEquals(false, numberType1.isEnumElementType());
      assertEquals(false, numberType1.isInterface());
      assertEquals(false, numberType1.isNullable());
      assertEquals(false, numberType1.isAllType());
      assertEquals(false, numberType1.isConstructor());
      assertEquals(false, numberType1.isRecordType());
      assertEquals("number", numberType1.getDisplayName());
      assertEquals(false, numberType1.isResolved());
      assertEquals(false, numberType1.isNominalType());
      assertEquals(true, numberType1.matchesNumberContext());
      assertEquals(false, numberType1.isUnionType());
      assertEquals(false, numberType1.isOrdinaryFunction());
      assertEquals(false, numberType1.isTemplateType());
      assertEquals(false, numberType1.isNoObjectType());
      assertEquals(false, numberType1.isBooleanValueType());
      assertEquals(false, numberType1.isNoResolvedType());
      assertEquals(false, numberType1.isEnumType());
      assertEquals(false, numberType1.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType1.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType1.isNominalConstructor());
      assertEquals(false, numberType1.isFunctionType());
      assertEquals(false, numberType1.isNoType());
      assertEquals(true, numberType1.matchesStringContext());
      assertEquals(true, numberType1.isNumberValueType());
      assertEquals(false, numberType1.isFunctionPrototypeType());
      assertEquals(true, numberType1.matchesObjectContext());
      assertEquals(false, numberType1.isStringValueType());
      assertEquals(false, numberType1.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[number]", stack0.toString());
      assertNotNull(numberType1);
  }

  @Test
  public void test28()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertNotNull(stack0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertNotNull(unionType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isConstructor());
      assertNotNull(nullType0);
      
      int int0 = 0;
      stack0.add(int0, (JSType) nullType0);
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      
      NullType nullType1 = (NullType)unionType0.meet(nullType0);
      assertSame(nullType0, nullType1);
      assertSame(nullType1, nullType0);
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType1.matchesObjectContext());
      assertEquals(false, nullType1.isNominalType());
      assertEquals(false, nullType1.isOrdinaryFunction());
      assertEquals(true, nullType1.matchesStringContext());
      assertEquals(true, nullType1.isNullable());
      assertEquals(false, nullType1.isCheckedUnknownType());
      assertEquals(false, nullType1.isRecordType());
      assertEquals(false, nullType1.isFunctionType());
      assertEquals(false, nullType1.isAllType());
      assertEquals(false, nullType1.isVoidType());
      assertEquals(false, nullType1.isStringValueType());
      assertEquals(false, nullType1.isTemplateType());
      assertEquals(false, nullType1.isUnionType());
      assertEquals(false, nullType1.isConstructor());
      assertEquals(false, nullType1.isNoObjectType());
      assertEquals(false, nullType1.isFunctionPrototypeType());
      assertEquals(false, nullType1.isNoType());
      assertEquals(false, nullType1.isEnumElementType());
      assertEquals(false, nullType1.isNoResolvedType());
      assertEquals(true, nullType1.isNullType());
      assertEquals(false, nullType1.isNumberValueType());
      assertEquals(false, nullType1.isNominalConstructor());
      assertEquals(false, nullType1.isInterface());
      assertEquals(true, nullType1.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType1.getPossibleToBooleanOutcomes());
      assertEquals("null", nullType1.getDisplayName());
      assertEquals(false, nullType1.isEnumType());
      assertEquals(false, nullType1.isResolved());
      assertEquals(false, nullType1.isBooleanValueType());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertNotNull(nullType1);
  }

  @Test
  public void test29()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullType());
      assertNotNull(numberType0);
      
      boolean boolean0 = stack0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[number]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[number]", stack0.toString());
      assertEquals(1, stack0.size());
      assertNotNull(unionType0);
      
      UnionType unionType1 = (UnionType)unionType0.getLeastSupertype((JSType) numberType0);
      assertSame(unionType0, unionType1);
      assertSame(unionType1, unionType0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[number]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullType());
      assertNotNull(unionType1);
  }

  @Test
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertNotNull(stack0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertNotNull(numberType0);
      
      boolean boolean0 = stack0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[number]", stack0.toString());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesStringContext());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[number]", stack0.toString());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertNotNull(unionType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertNotNull(nullType0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getLeastSupertype((JSType) nullType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertNotNull(unionType0);
      
      boolean boolean0 = arrayDeque0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) unionType0);
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertNull(functionType0);
      
      // Undeclared exception!
      try {
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowEquality((JSType) functionType0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isInterface());
      assertNotNull(unionType0);
      
      UnionType unionType1 = (UnionType)unionType0.getLeastSupertype((JSType) unionType0);
      assertSame(unionType1, unionType0);
      assertSame(unionType0, unionType1);
      assertEquals(false, unionType1.isInterface());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isInterface());
      assertNotNull(unionType1);
  }

  @Test
  public void test33()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertNotNull(stack0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertNotNull(unionType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNominalType());
      assertNotNull(nullType0);
      
      int int0 = 0;
      stack0.add(int0, (JSType) nullType0);
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      
      boolean boolean0 = unionType0.isNullable();
      assertTrue(boolean0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
  }

  @Test
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesStringContext());
      assertNotNull(numberType0);
      
      boolean boolean0 = stack0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(1, stack0.size());
      assertEquals("[number]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(1, stack0.size());
      assertEquals("[number]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.isNullable();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(1, stack0.size());
      assertEquals("[number]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
  }

  @Test
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertNotNull(stack0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isInterface());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertNotNull(allType0);
      
      boolean boolean0 = stack0.add((JSType) allType0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[*]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isInterface());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      
      boolean boolean1 = stack0.add((JSType) allType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals("[*, *]", stack0.toString());
      assertEquals(false, stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isInterface());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals("[*, *]", stack0.toString());
      assertEquals(false, stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertNotNull(unionType0);
      
      TernaryValue ternaryValue0 = unionType0.testForEquality((JSType) unionType0);
      assertEquals("unknown", ternaryValue0.toString());
      assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
      assertEquals(2, ternaryValue0.ordinal());
      assertEquals("UNKNOWN", ternaryValue0.name());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals("[*, *]", stack0.toString());
      assertEquals(false, stack0.isEmpty());
      assertEquals(2, stack0.size());
  }

  @Test
  public void test36()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.isAllType());
      assertNotNull(allType0);
      
      boolean boolean0 = stack0.add((JSType) allType0);
      assertTrue(boolean0);
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[*]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[*]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(unionType0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.restrictByNotNullOrUndefined();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertNotNull(stack0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertNotNull(unionType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isInterface());
      assertNotNull(nullType0);
      
      int int0 = 0;
      stack0.add(int0, (JSType) nullType0);
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isInterface());
      
      // Undeclared exception!
      try {
        ObjectType objectType0 = unionType0.dereference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertNotNull(unionType0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.autobox();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertNotNull(unionType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isConstructor());
      assertNotNull(nullType0);
      
      int int0 = 0;
      stack0.add(int0, (JSType) nullType0);
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      
      boolean boolean0 = unionType0.canBeCalled();
      assertFalse(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
  }

  @Test
  public void test40()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = hashSet0.add((JSType) noResolvedType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertNotNull(unionType0);
      
      boolean boolean2 = unionType0.canBeCalled();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[NoResolvedType]", hashSet0.toString());
  }

  @Test
  public void test41()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertNotNull(voidType0);
      
      boolean boolean0 = hashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.canAssignTo((JSType) voidType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
  }

  @Test
  public void test42()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isStringValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertNotNull(allType0);
      
      boolean boolean0 = stack0.add((JSType) allType0);
      assertTrue(boolean0);
      assertEquals("[*]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isStringValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals("[*]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(unionType0);
      
      String string0 = "thisType";
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals("[*]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNull(jSType0);
  }

  @Test
  public void test43()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      String string0 = "^hl.";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.matchesStringContext());
      assertNotNull(voidType0);
      
      boolean boolean0 = hashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.matchesStringContext());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(1, hashSet0.size());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(1, hashSet0.size());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertNull(jSType0);
  }

  @Test
  public void test44()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      String string0 = "^hl.";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.isNullable());
      assertNotNull(nullType0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.isNullable());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertNotNull(unionType0);
      
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertNull(jSType0);
  }

  @Test
  public void test45()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertNotNull(stack0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertNotNull(unionType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNoType());
      assertNotNull(nullType0);
      
      int int0 = 0;
      stack0.add(int0, (JSType) nullType0);
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNoType());
      
      boolean boolean0 = unionType0.matchesObjectContext();
      assertFalse(boolean0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
  }

  @Test
  public void test46()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertNotNull(stack0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertNotNull(numberType0);
      
      boolean boolean0 = stack0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals("[number]", stack0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals("[number]", stack0.toString());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.matchesObjectContext();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals("[number]", stack0.toString());
  }

  @Test
  public void test47()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNullable());
      assertNotNull(numberType0);
      
      boolean boolean0 = stack0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals("[number]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNullable());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals("[number]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.matchesStringContext();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals("[number]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
  }

  @Test
  public void test48()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.matchesStringContext();
      assertFalse(boolean0);
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals("[]", treeSet0.toString());
  }

  @Test
  public void test49()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isUnionType());
      assertNotNull(voidType0);
      
      boolean boolean0 = hashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.matchesUint32Context();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
  }

  @Test
  public void test50()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = hashSet0.add((JSType) noResolvedType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(true, jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean2 = unionType0.matchesUint32Context();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals("[NoResolvedType]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
  }

  @Test
  public void test51()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
  }

  @Test
  public void test52()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertNotNull(voidType0);
      
      boolean boolean0 = hashSet0.add((JSType) voidType0);
      assertTrue(boolean0);
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[undefined]", hashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[undefined]", hashSet0.toString());
      assertNotNull(unionType0);
      
      // Undeclared exception!
      try {
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
