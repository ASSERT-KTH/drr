/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:00:31 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.NameReferenceGraph;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.ReplaceCssNames;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.jscomp.VariableReferenceCheck;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

 
public class CompilerEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      double double0 = (-720.12873287);
      compiler0.setProgress(double0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertNotNull(printStreamErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(compiler0);
      
      double double0 = 10.0;
      compiler0.setProgress(double0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      double double0 = 0.0;
      compiler0.setProgress(double0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNotNull(loggerErrorManager0);
  }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = compiler0.getAstDotGraph();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(string0);
//       assertEquals("", string0);
//       
//       String string1 = "pattern";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string1, string0);
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals(false, sourceFile_Preloaded0.isExtern());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(sourceFile_Preloaded0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       
//       Result result0 = compiler0.compile((SourceFile) sourceFile_Preloaded0, (SourceFile) sourceFile_Preloaded0, compilerOptions0);
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       
//       LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(1, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(loggerErrorManager0);
//   }

  @Test
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      String string0 = "ORd}i-2_40";
      int int0 = 0;
      Region region0 = compiler0.getSourceRegion(string0, int0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(region0);
  }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = compiler0.getAstDotGraph();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(string0);
//       assertEquals("", string0);
//       
//       String string1 = "pattern";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string1, string0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, sourceFile_Preloaded0.isExtern());
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(sourceFile_Preloaded0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ideMode);
//       
//       Result result0 = compiler0.compile((SourceFile) sourceFile_Preloaded0, (SourceFile) sourceFile_Preloaded0, compilerOptions0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ideMode);
//       
//       int int0 = 1254;
//       String string2 = compiler0.getSourceLine(string0, int0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string0, string1);
//       assertNull(string2);
//   }

  @Test
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      String string0 = null;
      int int0 = 1784;
      Region region0 = compiler0.getSourceRegion(string0, int0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(region0);
  }

  @Test
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      String string0 = null;
      int int0 = 150;
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = VariableReferenceCheck.UNDECLARED_REFERENCE;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[9];
      JSError jSError0 = JSError.make(string0, int0, int0, checkLevel0, diagnosticType0, stringArray0);
      assertEquals(0, jSError0.getNodeLength());
      assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      assertEquals(150, jSError0.getCharno());
      assertNotNull(jSError0);
      
      compiler0.report(jSError0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, jSError0.getNodeLength());
      assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      assertEquals(150, jSError0.getCharno());
  }

  @Test
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(arrayList0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      
      compiler0.init((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      
      Node node0 = compiler0.parseInputs();
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.isBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, compilerOptions0.renamePrefixNamespace, compilerOptions0.renamePrefixNamespace);
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable.printStackTrace(Ljava/lang/Throwable;Ljava/io/PrintStream;)V
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      String string0 = "the error manager cannot be null";
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTrue());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals("the error manager cannot be null", node0.getSourceFileName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVoid());
      assertNotNull(node0);
      
      boolean boolean0 = compiler0.isInliningForbidden();
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      String string0 = "3A0za@y[~=$`<";
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append(string0);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      assertNotNull(compiler_CodeBuilder1);
      
      Compiler.CodeBuilder compiler_CodeBuilder2 = compiler_CodeBuilder0.append(string0);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder2);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder2, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder2, compiler_CodeBuilder0);
      assertNotNull(compiler_CodeBuilder2);
      
      boolean boolean0 = compiler_CodeBuilder0.endsWith(string0);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder2);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertTrue(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeCalls);
      
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      String string0 = " q[B'yZY?ihLN}9F'|";
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append(string0);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertNotNull(compiler_CodeBuilder1);
      
      boolean boolean0 = compiler_CodeBuilder1.endsWith(compilerOptions0.inputDelimiter);
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      String string0 = "3A0za@y[~=$`<";
      boolean boolean0 = compiler_CodeBuilder0.endsWith(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      int int0 = compiler_CodeBuilder0.getLength();
      assertEquals(0, int0);
      
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertNotNull(node0);
      
      String string0 = "7'47.acp{P$Bw0M@vS";
      node0.addSuppression(string0);
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getCharno());
      
      compiler0.disableThreads();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Node node1 = compiler0.parseTestCode(string0);
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isInstanceOf());
      assertEquals("[testcode]", node1.getSourceFileName());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isBreak());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isEmpty());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isGetProp());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isSwitch());
      assertEquals(true, node1.isScript());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isWhile());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isDelProp());
      assertEquals(-1, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isVoid());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      // Undeclared exception!
      try {
        compiler0.toSource(compiler_CodeBuilder0, int0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: 0
         //
      }
  }

  @Test
  public void test15() {}
//   @Test
//   public void test15()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = compiler0.getAstDotGraph();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(string0);
//       assertEquals("", string0);
//       
//       String string1 = "pattern";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string1, string0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals(false, sourceFile_Preloaded0.isExtern());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(sourceFile_Preloaded0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineGetters);
//       
//       Result result0 = compiler0.compile((SourceFile) sourceFile_Preloaded0, (SourceFile) sourceFile_Preloaded0, compilerOptions0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineGetters);
//       
//       compiler0.processAMDAndCommonJSModules();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//   }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = compiler0.getAstDotGraph();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(string0);
//       assertEquals("", string0);
//       
//       String string1 = "pattern";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string1, string0);
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals(false, sourceFile_Preloaded0.isExtern());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(sourceFile_Preloaded0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       
//       Result result0 = compiler0.compile((SourceFile) sourceFile_Preloaded0, (SourceFile) sourceFile_Preloaded0, compilerOptions0);
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       
//       compiler0.parse();
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//   }

  @Test
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = compiler0.getAstDotGraph();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(string0);
//       assertEquals("", string0);
//       
//       String string1 = "pattern";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string1, string0);
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals(false, sourceFile_Preloaded0.isExtern());
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(sourceFile_Preloaded0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.reserveRawExports);
//       
//       Result result0 = compiler0.compile((SourceFile) sourceFile_Preloaded0, (SourceFile) sourceFile_Preloaded0, compilerOptions0);
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.reserveRawExports);
//       
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = (SemanticReverseAbstractInterpreter)compiler0.getReverseAbstractInterpreter();
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertNotNull(semanticReverseAbstractInterpreter0);
//   }

  @Test
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        JSModuleGraph jSModuleGraph0 = compiler0.getDegenerateModuleGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20() {}
//   @Test
//   public void test20()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = compiler0.getAstDotGraph();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(string0);
//       assertEquals("", string0);
//       
//       String string1 = "pattern";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string1, string0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, sourceFile_Preloaded0.isExtern());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(sourceFile_Preloaded0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.markAsCompiled);
//       
//       Result result0 = compiler0.compile((SourceFile) sourceFile_Preloaded0, (SourceFile) sourceFile_Preloaded0, compilerOptions0);
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.markAsCompiled);
//       
//       // Undeclared exception!
//       try {
//         CompilerInput compilerInput0 = compiler0.getSynthesizedExternsInput();
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test21() {}
//   @Test
//   public void test21()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = compiler0.getAstDotGraph();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(string0);
//       assertEquals("", string0);
//       
//       String string1 = "pattern";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string1, string0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals(false, sourceFile_Preloaded0.isExtern());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(sourceFile_Preloaded0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeCalls);
//       
//       Result result0 = compiler0.compile((SourceFile) sourceFile_Preloaded0, (SourceFile) sourceFile_Preloaded0, compilerOptions0);
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeCalls);
//       
//       Node node0 = null;
//       // Undeclared exception!
//       try {
//         boolean boolean0 = compiler0.areNodesEqualForInlining(node0, node0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      compiler0.reportCodeChange();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        ControlFlowGraph<Node> controlFlowGraph0 = compiler0.computeCFG();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        compiler0.endPass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tracer should not be null at the end of a pass.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      compiler0.init((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      Node node0 = compiler0.parseInputs();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDec());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      compiler0.removeTryCatchFinally();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = null;
      VariableMap variableMap0 = compiler0.getVariableMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(variableMap0);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertNotNull(cleanupPasses0);
      
      // Undeclared exception!
      try {
        compiler0.setPassConfig((PassConfig) cleanupPasses0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // this.passes has already been assigned
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      
      compiler0.setPassConfig((PassConfig) defaultPassConfig0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
  }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = compiler0.getAstDotGraph();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(string0);
//       assertEquals("", string0);
//       
//       compiler0.disableThreads();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string1 = "pattern";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string1, string0);
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals(false, sourceFile_Preloaded0.isExtern());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(sourceFile_Preloaded0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.aliasExternals);
//       
//       Result result0 = compiler0.compile((SourceFile) sourceFile_Preloaded0, (SourceFile) sourceFile_Preloaded0, compilerOptions0);
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.aliasExternals);
//       
//       JSModule jSModule0 = null;
//       // Undeclared exception!
//       try {
//         String[] stringArray0 = compiler0.toSourceArray(jSModule0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // java.lang.NullPointerException
//          //
//       }
//   }

  @Test
  public void test28() {}
//   @Test
//   public void test28()  throws Throwable  {
//       Logger logger0 = Logger.getAnonymousLogger();
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(true, logger0.getUseParentHandlers());
//       assertNull(logger0.getName());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(true, logger0.getUseParentHandlers());
//       assertNull(logger0.getName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(true, logger0.getUseParentHandlers());
//       assertNull(logger0.getName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(compiler0);
//       
//       Stack<SourceFile> stack0 = new Stack<SourceFile>();
//       assertEquals("[]", stack0.toString());
//       assertEquals(10, stack0.capacity());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(true, stack0.empty());
//       assertEquals(0, stack0.size());
//       assertNotNull(stack0);
//       
//       Stack<JSModule> stack1 = new Stack<JSModule>();
//       assertEquals(10, stack1.capacity());
//       assertEquals(true, stack1.isEmpty());
//       assertEquals(true, stack1.empty());
//       assertEquals(0, stack1.size());
//       assertEquals("[]", stack1.toString());
//       assertNotNull(stack1);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       
//       Result result0 = compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) stack1, compilerOptions0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(true, logger0.getUseParentHandlers());
//       assertNull(logger0.getName());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(1, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals("[]", stack0.toString());
//       assertEquals(10, stack0.capacity());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(true, stack0.empty());
//       assertEquals(0, stack0.size());
//       assertEquals(10, stack1.capacity());
//       assertEquals(true, stack1.isEmpty());
//       assertEquals(true, stack1.empty());
//       assertEquals(0, stack1.size());
//       assertEquals("[]", stack1.toString());
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedVars);
//   }

  @Test
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.foldConstants);
      
      Result result0 = compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
      assertEquals(1.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(result0);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.foldConstants);
  }

  @Test
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(arrayList0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkTypes);
      
      compiler0.init((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkTypes);
      
      // Undeclared exception!
      try {
        compiler0.removeTryCatchFinally();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        int int0 = compiler0.getWarningCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        compiler0.processDefines();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      List<CompilerInput> list0 = compiler0.getExternsForTesting();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(list0);
  }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "pattern";
//       SourceFile sourceFile0 = new SourceFile(string0);
//       assertEquals("pattern", sourceFile0.getName());
//       assertEquals(false, sourceFile0.isExtern());
//       assertEquals("pattern", sourceFile0.getOriginalPath());
//       assertEquals("pattern", sourceFile0.toString());
//       assertNotNull(sourceFile0);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generateExports);
//       
//       Result result0 = compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals("pattern", sourceFile0.getName());
//       assertEquals("pattern", sourceFile0.getOriginalPath());
//       assertEquals(true, sourceFile0.isExtern());
//       assertEquals("pattern", sourceFile0.toString());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generateExports);
//       
//       // Undeclared exception!
//       try {
//         compiler0.check();
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // INTERNAL COMPILER ERROR.
//          // Please report this problem.
//          // null
//          //
//       }
//   }

  @Test
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      JSModuleGraph jSModuleGraph0 = compiler0.getModuleGraph();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(jSModuleGraph0);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = " d<>zg(TD}y9#";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      compiler0.resetUniqueNameId();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        compiler0.recordFunctionInformation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      String string0 = "W}LBY{|Q8o,N";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((MessageFormatter) lightweightMessageFormatter0, (PrintStream) mockPrintStream0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertNotNull(printStreamErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertNotNull(compiler0);
      
      boolean boolean0 = true;
      compiler0.setHasRegExpGlobalReferences(boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
  }

  @Test
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      boolean boolean0 = compiler0.precheck();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test40() {}
//   @Test
//   public void test40()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = compiler0.getAstDotGraph();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(string0);
//       assertEquals("", string0);
//       
//       String string1 = "pattern";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string1, string0);
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals(false, sourceFile_Preloaded0.isExtern());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(sourceFile_Preloaded0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.foldConstants);
//       
//       Result result0 = compiler0.compile((SourceFile) sourceFile_Preloaded0, (SourceFile) sourceFile_Preloaded0, compilerOptions0);
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.foldConstants);
//       
//       // Undeclared exception!
//       try {
//         Node node0 = compiler0.ensureLibraryInjected(compilerOptions0.renamePrefixNamespace);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      List<CompilerInput> list0 = compiler0.getInputsForTesting();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(list0);
  }

  @Test
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        compiler0.rebuildInputsFromModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = compiler0.getAstDotGraph();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(string0);
//       assertEquals("", string0);
//       
//       String string1 = "pattern";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string1, string0);
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals(false, sourceFile_Preloaded0.isExtern());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(sourceFile_Preloaded0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.checkTypes);
//       
//       Result result0 = compiler0.compile((SourceFile) sourceFile_Preloaded0, (SourceFile) sourceFile_Preloaded0, compilerOptions0);
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.checkTypes);
//       
//       TreeMap<String, Integer> treeMap0 = new TreeMap<String, Integer>();
//       assertEquals(0, treeMap0.size());
//       assertEquals("{}", treeMap0.toString());
//       assertNotNull(treeMap0);
//       
//       ReplaceCssNames replaceCssNames0 = new ReplaceCssNames(compiler0, treeMap0);
//       assertEquals(0, treeMap0.size());
//       assertEquals("{}", treeMap0.toString());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertNotNull(replaceCssNames0);
//       
//       CssRenamingMap cssRenamingMap0 = replaceCssNames0.getCssRenamingMap();
//       assertEquals(0, treeMap0.size());
//       assertEquals("{}", treeMap0.toString());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertNull(cssRenamingMap0);
//   }

  @Test
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(functionInformationMap0);
  }

  @Test
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      VariableMap variableMap0 = compiler0.getPropertyMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(variableMap0);
  }

  @Test
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        JSError[] jSErrorArray0 = compiler0.getMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeReturns);
      
      // Undeclared exception!
      try {
        compiler0.setCssRenamingMap(compilerOptions0.cssRenamingMap);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler_IntermediateState0);
      
      compiler0.setState(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test49()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Scope scope0 = compiler0.getTopScope();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(scope0);
  }

  @Test
  public void test50()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = compiler0.languageMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      
      compiler0.init((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      
      Node node0 = compiler0.parseInputs();
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.isBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNot());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(node0);
      
      SymbolTable symbolTable0 = compiler0.buildKnownSymbolTable();
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(symbolTable0);
  }

  @Test
  public void test52()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertNotNull(printStreamErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertNotNull(compiler0);
      
      Node node0 = null;
      // Undeclared exception!
      try {
        String string0 = compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build without root node being specified
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
      assertNotNull(codeChangeHandler_RecentChange0);
      
      compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test54()  throws Throwable  {
      Level level0 = Level.WARNING;
      assertEquals(900, level0.intValue());
      assertEquals("WARNING", level0.toString());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("WARNING", level0.getName());
      assertNotNull(level0);
      
      Compiler.setLoggingLevel(level0);
      assertEquals(900, level0.intValue());
      assertEquals("WARNING", level0.toString());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("WARNING", level0.getName());
  }

  @Test
  public void test55()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        compiler0.normalize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      boolean boolean0 = compiler0.hasRegExpGlobalReferences();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        Map<InputId, CompilerInput> map0 = compiler0.getInputsById();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      SourceMap sourceMap0 = compiler0.getSourceMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(sourceMap0);
  }

  @Test
  public void test59() {}
//   @Test
//   public void test59()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
//       assertEquals(true, arrayList0.isEmpty());
//       assertEquals("[]", arrayList0.toString());
//       assertEquals(0, arrayList0.size());
//       assertNotNull(arrayList0);
//       
//       String string0 = "jscompiler";
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       
//       compiler0.init((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(true, arrayList0.isEmpty());
//       assertEquals("[]", arrayList0.toString());
//       assertEquals(0, arrayList0.size());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       
//       Node node0 = compiler0.parseInputs();
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isNE());
//       assertEquals(125, node0.getType());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isIf());
//       assertEquals(true, node0.isBlock());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isFunction());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isCase());
//       assertEquals(2, node0.getChildCount());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isTry());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(node0);
//       
//       SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
//       assertEquals(false, sourceFile_OnDisk0.isExtern());
//       assertEquals("jscompiler", sourceFile_OnDisk0.getName());
//       assertEquals("jscompiler", sourceFile_OnDisk0.getOriginalPath());
//       assertEquals("jscompiler", sourceFile_OnDisk0.toString());
//       assertNotNull(sourceFile_OnDisk0);
//       
//       JsAst jsAst0 = new JsAst((SourceFile) sourceFile_OnDisk0);
//       assertEquals(false, sourceFile_OnDisk0.isExtern());
//       assertEquals("jscompiler", sourceFile_OnDisk0.getName());
//       assertEquals("jscompiler", sourceFile_OnDisk0.getOriginalPath());
//       assertEquals("jscompiler", sourceFile_OnDisk0.toString());
//       assertNotNull(jsAst0);
//       
//       compiler0.addNewScript(jsAst0);
//       assertEquals(false, sourceFile_OnDisk0.isExtern());
//       assertEquals("jscompiler", sourceFile_OnDisk0.getName());
//       assertEquals("jscompiler", sourceFile_OnDisk0.getOriginalPath());
//       assertEquals("jscompiler", sourceFile_OnDisk0.toString());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//   }

  @Test
  public void test60()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        String string0 = compiler0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test61()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, compilerOptions0.inputDelimiter, compilerOptions0.inputDelimiter);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssign());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(node0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference(node0, node0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssign());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(nameReferenceGraph_Reference0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      
      JSModule jSModule0 = nameReferenceGraph_Reference0.getModule();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssign());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNull(jSModule0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      
      // Undeclared exception!
      try {
        String string0 = compiler0.toSource(jSModule0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
      }
  }

  @Test
  public void test62() {}
//   @Test
//   public void test62()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = compiler0.getAstDotGraph();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(string0);
//       assertEquals("", string0);
//       
//       compiler0.disableThreads();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string1 = "pattern";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string1, string0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals(false, sourceFile_Preloaded0.isExtern());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(sourceFile_Preloaded0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       
//       compilerOptions0.sourceMapOutputPath = string1;
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNotNull(compilerOptions0.sourceMapOutputPath);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       
//       Result result0 = compiler0.compile((SourceFile) sourceFile_Preloaded0, (SourceFile) sourceFile_Preloaded0, compilerOptions0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("pattern", sourceFile_Preloaded0.getName());
//       assertEquals("pattern", sourceFile_Preloaded0.toString());
//       assertEquals("pattern", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       
//       String[] stringArray0 = compiler0.toSourceArray();
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(stringArray0);
//   }
}
