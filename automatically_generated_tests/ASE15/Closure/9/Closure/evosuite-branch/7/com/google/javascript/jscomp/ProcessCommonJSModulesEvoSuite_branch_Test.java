/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:57:48 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

 
public class ProcessCommonJSModulesEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      String string0 = "module.exports";
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(processCommonJSModules0);
      
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.isScript());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLength());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(node0);
      
      processCommonJSModules0.process(node0, node0);
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(4, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.isScript());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0, string0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("module.exports", sourceFile_Preloaded0.getName());
      assertEquals("module.exports", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("module.exports", sourceFile_Preloaded0.toString());
      assertNotNull(sourceFile_Preloaded0);
      
      node0.setStaticSourceFile((StaticSourceFile) sourceFile_Preloaded0);
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(4, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNumber());
      assertEquals("module.exports", node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("module.exports", sourceFile_Preloaded0.getName());
      assertEquals("module.exports", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("module.exports", sourceFile_Preloaded0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      
      processCommonJSModules0.process(node0, node0);
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNumber());
      assertEquals("module.exports", node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(6, node0.getChildCount());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
  }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "exports";
//       ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(processCommonJSModules0);
//       
//       Node node0 = compiler0.parseTestCode(string0);
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isFor());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isCall());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isThrow());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isNumber());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isDo());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertNotNull(node0);
//       
//       processCommonJSModules0.process(node0, node0);
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isTrue());
//       assertEquals(3, node0.getChildCount());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isFor());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isCall());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(1, node0.getLineno());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isNumber());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isDo());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       processCommonJSModules0.process(node0, node0);
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isFor());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isCall());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(1, node0.getLineno());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isNumber());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isCase());
//       assertEquals(5, node0.getChildCount());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isDo());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//   }

  @Test
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      String string0 = "m\"^#8/";
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(processCommonJSModules0);
      
      String string1 = processCommonJSModules0.guessCJSModuleName(string0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("module$", string1);
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = "s";
      String string1 = "../";
      assertNotSame(string1, string0);
      
      String string2 = ProcessCommonJSModules.toModuleName(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("module$..$", string2);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = "s";
      String string1 = ProcessCommonJSModules.toModuleName(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("module$s", string1);
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = "./w./";
      String string1 = ProcessCommonJSModules.toModuleName(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("module$w.$w.$", string1);
  }

  @Test
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      String string0 = "!ORNQ~4m8gG";
      boolean boolean0 = false;
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(processCommonJSModules0);
      
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals("!ORNQ~4m8gG", node0.getSourceFileName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        processCommonJSModules0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //   Node(NAME goog): !ORNQ~4m8gG:-1:-1
         // [source unknown]
         //   Parent(GETPROP): !ORNQ~4m8gG:-1:-1
         // [source unknown]
         // 
         //   Node(SCRIPT): !ORNQ~4m8gG:-1:-1
         // [source unknown]
         //   Parent: NULL
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      String string0 = "!ORNQ~4m8gG";
      boolean boolean0 = false;
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(processCommonJSModules0);
      
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(jSModule0);
  }
}
