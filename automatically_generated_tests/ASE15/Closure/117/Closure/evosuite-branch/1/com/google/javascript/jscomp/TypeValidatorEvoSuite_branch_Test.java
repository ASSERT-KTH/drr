/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:28:29 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckEventfulObjectDisposal;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckProvides;
import com.google.javascript.jscomp.CheckSideEffects;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ObjectPropertyStringPreprocess;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class TypeValidatorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      JSType jSType0 = null;
      DiagnosticType diagnosticType0 = CheckProvides.MISSING_PROVIDE_WARNING;
      //  // Unstable assertion: assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(CheckLevel.WARNING, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertNotNull(jSError0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      //  // Unstable assertion: assertNull(functionType0);
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, functionType0, jSError0);
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(CheckLevel.WARNING, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertNotNull(typeValidator_TypeMismatch0);
      
      boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) diagnosticType0);
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(CheckLevel.WARNING, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "new:";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[0].getName());
//       assertEquals("new:", jSSourceFileArray0[0].toString());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[1].getName());
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("new:", jSSourceFileArray0[1].toString());
//       assertEquals("new:", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[2].getName());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertEquals("new:", jSSourceFileArray0[2].toString());
//       assertEquals("new:", jSSourceFileArray0[2].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFileArray0[0];
//       assertEquals("new:", jSSourceFileArray0[3].getName());
//       assertEquals("new:", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[3].toString());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[4].toString());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertEquals("new:", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[4].getName());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals("new:", jSSourceFileArray0[5].toString());
//       assertEquals("new:", jSSourceFileArray0[5].getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[6].getName());
//       assertEquals("new:", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[6].toString());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNotNull(nodeTraversal0);
//       
//       typeValidator0.setShouldReport(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertNull(jSDocInfo0.getVisibility());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertNull(jSDocInfo0.getVisibility());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(objectType0);
//       
//       typeValidator0.expectString(nodeTraversal0, node0, objectType0, compilerOptions0.renamePrefix);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(true, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertNull(jSDocInfo0.getVisibility());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//   }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "+!/S2nhN*O5MZYPb{";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getName());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFileArray0[0];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getName());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getName());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].toString());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getName());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].toString());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getName());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertNotNull(nodeTraversal0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getMeaning());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertNull(jSDocInfo0.getDescription());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getMeaning());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertNull(jSDocInfo0.getDescription());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(objectType0);
//       
//       typeValidator0.expectCanCast(nodeTraversal0, node0, objectType0, objectType0);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(true, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getMeaning());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertNull(jSDocInfo0.getDescription());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//   }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "new:";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFileArray0[0].getName());
//       assertEquals("new:", jSSourceFileArray0[0].toString());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("new:", jSSourceFileArray0[0].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("new:", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[1].getName());
//       assertEquals("new:", jSSourceFileArray0[1].toString());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertEquals("new:", jSSourceFileArray0[2].toString());
//       assertEquals("new:", jSSourceFileArray0[2].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[2].getName());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[3].getName());
//       assertEquals("new:", jSSourceFileArray0[3].toString());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFileArray0[4].getName());
//       assertEquals("new:", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertEquals("new:", jSSourceFileArray0[4].toString());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFileArray0[5].getName());
//       assertEquals("new:", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals("new:", jSSourceFileArray0[5].toString());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[6].toString());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals("new:", jSSourceFileArray0[6].getName());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertNotNull(nodeTraversal0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertNotNull(objectType0);
//       
//       // Undeclared exception!
//       try {
//         typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "+!/S2nhN*O5MZYPb{";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFileArray0[0];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].toString());
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].toString());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getName());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].toString());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getName());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(nodeTraversal0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getLendsName());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertNull(jSDocInfo0.getLicense());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getLendsName());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertNull(jSDocInfo0.getLicense());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(objectType0);
//       
//       typeValidator0.expectCanOverride(nodeTraversal0, node0, objectType0, objectType0, compilerOptions0.renamePrefixNamespace, objectType0);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getLendsName());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertNull(jSDocInfo0.getLicense());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(true, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//   }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "+!/S2nhN*O5MZYPb{";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFileArray0[0];
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].toString());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getName());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getName());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getName());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getName());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].toString());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].toString());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertNotNull(nodeTraversal0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertNull(jSDocInfo0.getSourceName());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertNull(jSDocInfo0.getSourceName());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertNotNull(objectType0);
//       
//       int int0 = 956;
//       typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, objectType0, objectType0, node0, int0);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertNull(jSDocInfo0.getSourceName());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(true, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//   }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "new:";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("new:", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[0].getName());
//       assertEquals("new:", jSSourceFileArray0[0].toString());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[1].getName());
//       assertEquals("new:", jSSourceFileArray0[1].toString());
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("new:", jSSourceFileArray0[1].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[2].getName());
//       assertEquals("new:", jSSourceFileArray0[2].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[2].toString());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFileArray0[0];
//       assertEquals("new:", jSSourceFileArray0[3].getName());
//       assertEquals("new:", jSSourceFileArray0[3].toString());
//       assertEquals("new:", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[4].getName());
//       assertEquals("new:", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertEquals("new:", jSSourceFileArray0[4].toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[5].toString());
//       assertEquals("new:", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[5].getName());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFileArray0[2];
//       assertEquals("new:", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[6].getName());
//       assertEquals("new:", jSSourceFileArray0[6].toString());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNotNull(nodeTraversal0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(objectType0);
//       
//       boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, objectType0, objectType0, compilerOptions0.syntheticBlockStartMarker);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(true, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertTrue(boolean0);
//   }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "new:";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[0].toString());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("new:", jSSourceFileArray0[0].getName());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("new:", jSSourceFileArray0[1].getName());
//       assertEquals("new:", jSSourceFileArray0[1].toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[2].toString());
//       assertEquals("new:", jSSourceFileArray0[2].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[2].getName());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFileArray0[0];
//       assertEquals("new:", jSSourceFileArray0[3].toString());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertEquals("new:", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[3].getName());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[4].getName());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertEquals("new:", jSSourceFileArray0[4].toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFile0;
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals("new:", jSSourceFileArray0[5].getName());
//       assertEquals("new:", jSSourceFileArray0[5].toString());
//       assertEquals("new:", jSSourceFileArray0[5].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals("new:", jSSourceFileArray0[6].toString());
//       assertEquals("new:", jSSourceFileArray0[6].getName());
//       assertEquals("new:", jSSourceFileArray0[6].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertNotNull(nodeTraversal0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertNull(jSDocInfo0.getVisibility());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertNull(jSDocInfo0.getVisibility());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertNotNull(objectType0);
//       
//       boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, objectType0, objectType0, node0, compilerOptions0.syntheticBlockEndMarker);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertNull(jSDocInfo0.getVisibility());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(true, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertTrue(boolean0);
//   }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "+!/S2nhN*O5MZYPb{";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getName());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFileArray0[0];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getName());
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].toString());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getName());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].toString());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getName());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].toString());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getName());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertNotNull(nodeTraversal0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertNull(jSDocInfo0.getSourceName());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getDescription());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getMeaning());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertNull(jSDocInfo0.getSourceName());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getDescription());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isVoidType());
//       assertNotNull(objectType0);
//       
//       typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, objectType0, objectType0);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(jSDocInfo0.getSourceName());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getDescription());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//   }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "new:";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[0].toString());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("new:", jSSourceFileArray0[0].getName());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFile0;
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("new:", jSSourceFileArray0[1].getName());
//       assertEquals("new:", jSSourceFileArray0[1].toString());
//       assertEquals("new:", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFile0;
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFileArray0[2].toString());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertEquals("new:", jSSourceFileArray0[2].getName());
//       assertEquals("new:", jSSourceFileArray0[2].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[3].getName());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertEquals("new:", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[3].toString());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertEquals("new:", jSSourceFileArray0[4].getName());
//       assertEquals("new:", jSSourceFileArray0[4].toString());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFile0;
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals("new:", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals("new:", jSSourceFileArray0[5].toString());
//       assertEquals("new:", jSSourceFileArray0[5].getName());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[6].toString());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals("new:", jSSourceFileArray0[6].getName());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNotNull(nodeTraversal0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getMeaning());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getMeaning());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(objectType0);
//       
//       boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, objectType0, compilerOptions0.aliasStringsBlacklist, objectType0);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(true, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getMeaning());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertTrue(boolean0);
//   }

  @Test
  public void test10() {}
//   @Test
//   public void test10()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "new:";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[0].getName());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("new:", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[0].toString());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("new:", jSSourceFileArray0[1].toString());
//       assertEquals("new:", jSSourceFileArray0[1].getName());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFile0;
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertEquals("new:", jSSourceFileArray0[2].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[2].toString());
//       assertEquals("new:", jSSourceFileArray0[2].getName());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFileArray0[0];
//       assertEquals("new:", jSSourceFileArray0[3].toString());
//       assertEquals("new:", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertEquals("new:", jSSourceFileArray0[3].getName());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertEquals("new:", jSSourceFileArray0[4].toString());
//       assertEquals("new:", jSSourceFileArray0[4].getName());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFile0;
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[5].getName());
//       assertEquals("new:", jSSourceFileArray0[5].toString());
//       assertEquals("new:", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals("new:", jSSourceFileArray0[6].toString());
//       assertEquals("new:", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[6].getName());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertNotNull(nodeTraversal0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getLendsName());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getLendsName());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertNotNull(objectType0);
//       
//       typeValidator0.expectStringOrNumber(nodeTraversal0, node0, objectType0, compilerOptions0.syntheticBlockStartMarker);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(true, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getLendsName());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertNull(jSDocInfo0.getReturnDescription());
//   }

  @Test
  public void test11() {}
//   @Test
//   public void test11()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "+!/S2nhN*O5MZYPb{";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].toString());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFileArray0[0];
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].toString());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].toString());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].toString());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getName());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].toString());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].toString());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].toString());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getName());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(nodeTraversal0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getDescription());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getLicense());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getDescription());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getLicense());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertNotNull(objectType0);
//       
//       typeValidator0.expectBitwiseable(nodeTraversal0, node0, objectType0, compilerOptions0.syntheticBlockEndMarker);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(true, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getDescription());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertNull(jSDocInfo0.getLicense());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//   }

  @Test
  public void test12() {}
//   @Test
//   public void test12()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "+!/S2nhN*O5MZYPb{";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].toString());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFileArray0[0];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getName());
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].toString());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].toString());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getName());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getName());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].toString());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getName());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].toString());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertNotNull(nodeTraversal0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertNull(jSDocInfo0.getVersion());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertNull(jSDocInfo0.getVersion());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertNotNull(objectType0);
//       
//       typeValidator0.expectAnyObject(nodeTraversal0, node0, objectType0, compilerOptions0.syntheticBlockStartMarker);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertNull(jSDocInfo0.getVersion());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(true, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//   }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "+!/S2nhN*O5MZYPb{";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFileArray0[0];
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getName());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getName());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].toString());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getName());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNotNull(nodeTraversal0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getDescription());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getDescription());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertNotNull(objectType0);
//       
//       typeValidator0.expectActualObject(nodeTraversal0, node0, objectType0, compilerOptions0.instrumentationTemplate);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getDescription());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//   }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = ".";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals(".", jSSourceFile0.toString());
//       assertEquals(".", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals(".", jSSourceFile0.getName());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals(".", jSSourceFileArray0[0].toString());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals(".", jSSourceFileArray0[0].getName());
//       assertEquals(".", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals(".", jSSourceFile0.toString());
//       assertEquals(".", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals(".", jSSourceFile0.getName());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFile0;
//       assertEquals(".", jSSourceFile0.toString());
//       assertEquals(".", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals(".", jSSourceFile0.getName());
//       assertEquals(".", jSSourceFileArray0[1].toString());
//       assertEquals(".", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals(".", jSSourceFileArray0[1].getName());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFileArray0[1];
//       assertEquals(".", jSSourceFileArray0[2].getName());
//       assertEquals(".", jSSourceFileArray0[2].getOriginalPath());
//       assertEquals(".", jSSourceFileArray0[2].toString());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFile0;
//       assertEquals(".", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals(".", jSSourceFileArray0[3].toString());
//       assertEquals(".", jSSourceFileArray0[3].getName());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertEquals(".", jSSourceFile0.toString());
//       assertEquals(".", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals(".", jSSourceFile0.getName());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals(".", jSSourceFileArray0[4].getName());
//       assertEquals(".", jSSourceFileArray0[4].toString());
//       assertEquals(".", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertEquals(".", jSSourceFile0.toString());
//       assertEquals(".", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals(".", jSSourceFile0.getName());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFile0;
//       assertEquals(".", jSSourceFileArray0[5].toString());
//       assertEquals(".", jSSourceFileArray0[5].getName());
//       assertEquals(".", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals(".", jSSourceFile0.toString());
//       assertEquals(".", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals(".", jSSourceFile0.getName());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals(".", jSSourceFileArray0[6].toString());
//       assertEquals(".", jSSourceFileArray0[6].getName());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals(".", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals(".", jSSourceFile0.toString());
//       assertEquals(".", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals(".", jSSourceFile0.getName());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(checkSideEffects0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getVisibility());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getVisibility());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(objectType0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(nodeTraversal0);
//       
//       boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, objectType0, compilerOptions0.renamePrefixNamespace);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertNull(jSDocInfo0.getVisibility());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getVersion());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertTrue(boolean0);
//   }

  @Test
  public void test15()  throws Throwable  {
      JSType jSType0 = null;
      DiagnosticType diagnosticType0 = ObjectPropertyStringPreprocess.INVALID_NUM_ARGUMENTS_ERROR;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      assertEquals(0, jSError0.getNodeLength());
      assertEquals(-1, jSError0.getLineNumber());
      assertEquals(-1, jSError0.getCharno());
      assertNotNull(jSError0);
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      assertEquals(0, jSError0.getNodeLength());
      assertEquals(-1, jSError0.getLineNumber());
      assertEquals(-1, jSError0.getCharno());
      assertNotNull(typeValidator_TypeMismatch0);
      
      String string0 = typeValidator_TypeMismatch0.toString();
      assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      assertEquals(0, jSError0.getNodeLength());
      assertEquals(-1, jSError0.getLineNumber());
      assertEquals(-1, jSError0.getCharno());
      assertNotNull(string0);
      assertEquals("(null, null)", string0);
  }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "new:";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[0].getName());
//       assertEquals("new:", jSSourceFileArray0[0].toString());
//       assertEquals("new:", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFile0;
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("new:", jSSourceFileArray0[1].toString());
//       assertEquals("new:", jSSourceFileArray0[1].getName());
//       assertEquals("new:", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFile0;
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertEquals("new:", jSSourceFileArray0[2].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[2].getName());
//       assertEquals("new:", jSSourceFileArray0[2].toString());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFileArray0[0];
//       assertEquals("new:", jSSourceFileArray0[3].getName());
//       assertEquals("new:", jSSourceFileArray0[3].toString());
//       assertEquals("new:", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[4].getName());
//       assertEquals("new:", jSSourceFileArray0[4].toString());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[5].toString());
//       assertEquals("new:", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[5].getName());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[6].getName());
//       assertEquals("new:", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[6].toString());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNotNull(result0);
//       
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNotNull(typeValidator0);
//       
//       Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNotNull(iterable0);
//   }

  @Test
  public void test17() {}
//   @Test
//   public void test17()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "new:";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("new:", jSSourceFileArray0[0].toString());
//       assertEquals("new:", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[0].getName());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFile0;
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("new:", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[1].getName());
//       assertEquals("new:", jSSourceFileArray0[1].toString());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFile0;
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertEquals("new:", jSSourceFileArray0[2].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[2].toString());
//       assertEquals("new:", jSSourceFileArray0[2].getName());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFileArray0[0];
//       assertEquals("new:", jSSourceFileArray0[3].toString());
//       assertEquals("new:", jSSourceFileArray0[3].getName());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertEquals("new:", jSSourceFileArray0[3].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals("new:", jSSourceFileArray0[4].toString());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertEquals("new:", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[4].getName());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFile0;
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals("new:", jSSourceFileArray0[5].toString());
//       assertEquals("new:", jSSourceFileArray0[5].getName());
//       assertEquals("new:", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals("new:", jSSourceFile0.getName());
//       assertEquals("new:", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("new:", jSSourceFile0.getOriginalPath());
//       assertEquals("new:", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals("new:", jSSourceFileArray0[6].getName());
//       assertEquals("new:", jSSourceFileArray0[6].toString());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertNotNull(nodeTraversal0);
//       
//       typeValidator0.expectValidTypeofName(nodeTraversal0, node0, compilerOptions0.aliasStringsBlacklist);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(2, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//   }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "+!/S2nhN*O5MZYPb{";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertNotNull(jSSourceFile0);
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].getName());
//       assertEquals(false, jSSourceFileArray0[0].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[0].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertNotNull(jSSourceFileArray0[0]);
//       
//       jSSourceFileArray0[1] = jSSourceFileArray0[0];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[1].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[1].getName());
//       assertNotNull(jSSourceFileArray0[1]);
//       
//       jSSourceFileArray0[2] = jSSourceFileArray0[1];
//       assertEquals(false, jSSourceFileArray0[2].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[2].getOriginalPath());
//       assertNotNull(jSSourceFileArray0[2]);
//       
//       jSSourceFileArray0[3] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[3].isExtern());
//       assertNotNull(jSSourceFileArray0[3]);
//       
//       jSSourceFileArray0[4] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFileArray0[4].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[4].toString());
//       assertNotNull(jSSourceFileArray0[4]);
//       
//       jSSourceFileArray0[5] = jSSourceFileArray0[1];
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getOriginalPath());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].toString());
//       assertEquals(false, jSSourceFileArray0[5].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[5].getName());
//       assertNotNull(jSSourceFileArray0[5]);
//       
//       jSSourceFileArray0[6] = jSSourceFile0;
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFile0.toString());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getName());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].getOriginalPath());
//       assertEquals(false, jSSourceFileArray0[6].isExtern());
//       assertEquals("+!/S2nhN*O5MZYPb{", jSSourceFileArray0[6].toString());
//       assertNotNull(jSSourceFileArray0[6]);
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(result0);
//       
//       Node node0 = null;
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(typeValidator0);
//       
//       CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(checkSideEffects0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects0);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(nodeTraversal0);
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(tightenTypes0);
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertNull(jSDocInfo0.getVersion());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertNull(jSDocInfo0.getMeaning());
//       assertNotNull(jSDocInfo0);
//       
//       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertNull(jSDocInfo0.getVersion());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//       assertNotNull(objectType0);
//       
//       typeValidator0.expectNumber(nodeTraversal0, node0, objectType0, compilerOptions0.syntheticBlockStartMarker);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(false, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(true, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, jSDocInfo0.isIdGenerator());
//       assertEquals(false, jSDocInfo0.makesDicts());
//       assertEquals(false, jSDocInfo0.hasFileOverview());
//       assertNull(jSDocInfo0.getDescription());
//       assertEquals(false, jSDocInfo0.isInterface());
//       assertEquals(false, jSDocInfo0.isConstructor());
//       assertEquals(false, jSDocInfo0.isNoAlias());
//       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       assertNull(jSDocInfo0.getVersion());
//       assertNull(jSDocInfo0.getDeprecationReason());
//       assertNull(jSDocInfo0.getReturnDescription());
//       assertEquals(false, jSDocInfo0.isNoShadow());
//       assertEquals(false, jSDocInfo0.isNoSideEffects());
//       assertNull(jSDocInfo0.getFileOverview());
//       assertEquals(false, jSDocInfo0.isJavaDispatch());
//       assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       assertNull(jSDocInfo0.getLendsName());
//       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
//       assertEquals(false, jSDocInfo0.hasTypedefType());
//       assertEquals(false, jSDocInfo0.isExpose());
//       assertNull(jSDocInfo0.getOriginalCommentString());
//       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       assertEquals(false, jSDocInfo0.hasModifies());
//       assertEquals(false, jSDocInfo0.isConstant());
//       assertEquals(false, jSDocInfo0.isNoCompile());
//       assertEquals(false, jSDocInfo0.containsDeclaration());
//       assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       assertEquals(false, jSDocInfo0.isDeprecated());
//       assertEquals(false, jSDocInfo0.isImplicitCast());
//       assertEquals(false, jSDocInfo0.isDisposes());
//       assertEquals(false, jSDocInfo0.isNgInject());
//       assertEquals(false, jSDocInfo0.isHidden());
//       assertEquals(0, jSDocInfo0.getParameterCount());
//       assertEquals(false, jSDocInfo0.isWizaction());
//       assertEquals(false, jSDocInfo0.isDefine());
//       assertEquals(false, jSDocInfo0.isExterns());
//       assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       assertNull(jSDocInfo0.getVisibility());
//       assertEquals(false, jSDocInfo0.makesStructs());
//       assertNull(jSDocInfo0.getBlockDescription());
//       assertEquals(false, jSDocInfo0.hasReturnType());
//       assertEquals(false, jSDocInfo0.hasType());
//       assertEquals(false, jSDocInfo0.hasThisType());
//       assertNull(jSDocInfo0.getLicense());
//       assertEquals(false, jSDocInfo0.isExport());
//       assertNull(jSDocInfo0.getSourceName());
//       assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       assertEquals(false, jSDocInfo0.isOverride());
//       assertEquals(false, jSDocInfo0.hasBaseType());
//       assertEquals("JSDocInfo", jSDocInfo0.toString());
//       assertEquals(false, jSDocInfo0.isStableIdGenerator());
//       assertEquals(false, jSDocInfo0.isMappedIdGenerator());
//       assertNull(jSDocInfo0.getMeaning());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(2, compiler0.getErrorCount());
//   }
}
