/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:37:32 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.EmptyExpression;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.StringLiteral;
import com.google.javascript.rhino.head.ast.XmlDotQuery;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class JsDocInfoParserEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "{(o";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{8i:8FPmY+a[";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "[c,@>YxZnclN'Z#";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "[c,9xZnclN'Z#";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "(D)V";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNull());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTypeOf());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertNotNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "{8i:(@8FPmY+a[";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "b|SmBGP,'KxY=B}_";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFor());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(2, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCast());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNew());
      assertNotNull(node0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "(cW|\n*YT(aG?ve e]S-\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "(TcM\n*YT\tative e]\n}\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasChildren());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCast());
      assertEquals(9, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertNotNull(node0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isCall());
      assertEquals(4, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFor());
      assertNotNull(node0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "function (";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "fB:iIHcED";
      int int0 = (-1581);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0);
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1581, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1581, xmlDotQuery0.getAbsolutePosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(1, xmlDotQuery0.getLength());
      assertNotNull(xmlDotQuery0);
      
      Comment comment0 = xmlDotQuery0.getJsDocNode();
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1581, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1581, xmlDotQuery0.getAbsolutePosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(1, xmlDotQuery0.getLength());
      assertNull(comment0);
      
      Node node0 = Node.newNumber((double) int0);
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getCharno());
      assertNotNull(node0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1581, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1581, xmlDotQuery0.getAbsolutePosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getCharno());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.STAR;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1581, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1581, xmlDotQuery0.getAbsolutePosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isWith());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isDec());
      assertEquals(302, node1.getType());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isVar());
      assertEquals(0, node1.getSideEffectFlags());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isCast());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isStringKey());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isReturn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "-$4!4r-";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(306, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isVoid());
      assertEquals(3, node0.getCharno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(3, node0.getSourcePosition());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDebugger());
      assertNotNull(node0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(int0);
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      String string0 = ",9TW_?0";
      byte[] byteArray0 = new byte[5];
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, byteArray0[1], int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jsDocTokenStream0);
      
      StringLiteral stringLiteral0 = new StringLiteral();
      assertEquals(0, stringLiteral0.depth());
      assertEquals(-1, stringLiteral0.getAbsolutePosition());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(-1, stringLiteral0.getLineno());
      assertNull(stringLiteral0.getValue());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(1, stringLiteral0.getLength());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(-1, stringLiteral0.getPosition());
      assertNotNull(stringLiteral0);
      
      Comment comment0 = stringLiteral0.getJsDocNode();
      assertEquals(0, stringLiteral0.depth());
      assertEquals(-1, stringLiteral0.getAbsolutePosition());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(-1, stringLiteral0.getLineno());
      assertNull(stringLiteral0.getValue());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(1, stringLiteral0.getLength());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(-1, stringLiteral0.getPosition());
      assertNull(comment0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(set0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(-1, stringLiteral0.getAbsolutePosition());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(-1, stringLiteral0.getLineno());
      assertNull(stringLiteral0.getValue());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(1, stringLiteral0.getLength());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(-1, stringLiteral0.getPosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(-1, stringLiteral0.getAbsolutePosition());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(-1, stringLiteral0.getLineno());
      assertNull(stringLiteral0.getValue());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(1, stringLiteral0.getLength());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(-1, stringLiteral0.getPosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertNull(jSDocInfo0);
      
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(-1, stringLiteral0.getAbsolutePosition());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(-1, stringLiteral0.getLineno());
      assertNull(stringLiteral0.getValue());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(1, stringLiteral0.getLength());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(-1, stringLiteral0.getPosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertNotNull(jsDocInfoParser1);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser1.parseInlineTypeDoc();
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(-1, stringLiteral0.getAbsolutePosition());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(-1, stringLiteral0.getLineno());
      assertNull(stringLiteral0.getValue());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(1, stringLiteral0.getLength());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(-1, stringLiteral0.getPosition());
      assertEquals(false, jSDocInfo1.isNoTypeCheck());
      assertEquals(false, jSDocInfo1.isExpose());
      assertEquals(false, jSDocInfo1.makesDicts());
      assertEquals(false, jSDocInfo1.isConsistentIdGenerator());
      assertNull(jSDocInfo1.getLendsName());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo1.makesStructs());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo1.getVisibility());
      assertEquals(false, jSDocInfo1.shouldPreserveTry());
      assertEquals(false, jSDocInfo1.hasFileOverview());
      assertEquals(false, jSDocInfo1.isNgInject());
      assertEquals(false, jSDocInfo1.hasBaseType());
      assertEquals(false, jSDocInfo1.isConstant());
      assertNull(jSDocInfo1.getReturnDescription());
      assertEquals(true, jSDocInfo1.containsDeclaration());
      assertEquals(false, jSDocInfo1.isHidden());
      assertEquals(false, jSDocInfo1.isOverride());
      assertNull(jSDocInfo1.getSourceName());
      assertNull(jSDocInfo1.getBlockDescription());
      assertEquals(false, jSDocInfo1.hasThisType());
      assertEquals(false, jSDocInfo1.isNoShadow());
      assertNull(jSDocInfo1.getLicense());
      assertEquals(false, jSDocInfo1.hasTypedefType());
      assertEquals(true, jSDocInfo1.hasType());
      assertEquals(false, jSDocInfo1.isInterface());
      assertEquals(false, jSDocInfo1.isNoCompile());
      assertEquals(false, jSDocInfo1.isConstructor());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertEquals(false, jSDocInfo1.isNoAlias());
      assertNull(jSDocInfo1.getOriginalCommentString());
      assertEquals(false, jSDocInfo1.isDefine());
      assertEquals(false, jSDocInfo1.isDeprecated());
      assertNull(jSDocInfo1.getVersion());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertNull(jSDocInfo1.getFileOverview());
      assertEquals(false, jSDocInfo1.hasModifies());
      assertNull(jSDocInfo1.getMeaning());
      assertEquals(false, jSDocInfo1.hasReturnType());
      assertEquals(false, jSDocInfo1.hasEnumParameterType());
      assertEquals(false, jSDocInfo1.isNoSideEffects());
      assertNull(jSDocInfo1.getDescription());
      assertEquals(false, jSDocInfo1.isJavaDispatch());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo1.isExport());
      assertEquals(false, jSDocInfo1.isExterns());
      assertEquals(false, jSDocInfo1.isIdGenerator());
      assertEquals(false, jSDocInfo1.isStableIdGenerator());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertEquals(false, jSDocInfo1.isImplicitCast());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertNotNull(jSDocInfo1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "ASSIGN_URSH";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 2694;
      EmptyExpression emptyExpression0 = new EmptyExpression(int0, int0);
      assertEquals(2694, emptyExpression0.getAbsolutePosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(2694, emptyExpression0.getLength());
      assertEquals(0, emptyExpression0.depth());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(2694, emptyExpression0.getPosition());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(-1, emptyExpression0.getLineno());
      assertNotNull(emptyExpression0);
      
      Comment comment0 = emptyExpression0.getJsDocNode();
      assertEquals(2694, emptyExpression0.getAbsolutePosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(2694, emptyExpression0.getLength());
      assertEquals(0, emptyExpression0.depth());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(2694, emptyExpression0.getPosition());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(-1, emptyExpression0.getLineno());
      assertNull(comment0);
      
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(2694, emptyExpression0.getAbsolutePosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(2694, emptyExpression0.getLength());
      assertEquals(0, emptyExpression0.depth());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(2694, emptyExpression0.getPosition());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(-1, emptyExpression0.getLineno());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.BANG;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isIn());
      assertEquals(10, node1.getSourcePosition());
      assertEquals(false, node1.isFor());
      assertEquals(306, node1.getType());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isVoid());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isStringKey());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isCase());
      assertEquals(10, node1.getCharno());
      assertEquals(false, node1.isArrayLit());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isCast());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isWhile());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isThrow());
      assertEquals(0, node1.getLineno());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(2694, emptyExpression0.getAbsolutePosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(2694, emptyExpression0.getLength());
      assertEquals(0, emptyExpression0.depth());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(2694, emptyExpression0.getPosition());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(-1, emptyExpression0.getLineno());
      assertNotNull(node1);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = " ? ";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "$h3S.<2d6kNhFeLu9";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "";
      int int0 = (-1845);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals("[]", treeSet0.toString());
      assertNull(node1);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "?,m]rIY?r[Hn#PDbmp";
      int int0 = (-1845);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(context0.generateObserverCount);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.wasEmptyNode());
      assertNull(node1.getSourceFileName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isStringKey());
      assertEquals(false, node1.isComma());
      assertEquals(304, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNew());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isDec());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isCast());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isCatch());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isFor());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(node1);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean1);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals("[]", treeSet0.toString());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      byte byte0 = (byte)79;
      String string0 = ">F^5We<1@AUoq";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, byte0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((int) byte0, (int) byte0, token_CommentType0, string0);
      assertNull(comment0.getJsDoc());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals(79, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(79, comment0.getLength());
      assertNotNull(comment0);
      
      Node node0 = new Node((int) byte0);
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertNotNull(node0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertNull(comment0.getJsDoc());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals(79, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(79, comment0.getLength());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertNull(comment0.getJsDoc());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals(79, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(79, comment0.getLength());
      assertNull(jSDocInfo0);
      
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertNull(comment0.getJsDoc());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals(79, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(79, comment0.getLength());
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertNotNull(jsDocInfoParser1);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser1.parseInlineTypeDoc();
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, jSDocInfo1.isNoTypeCheck());
      assertEquals(false, jSDocInfo1.hasTypedefType());
      assertEquals(false, jSDocInfo1.makesStructs());
      assertNull(jSDocInfo1.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertEquals(true, jSDocInfo1.hasType());
      assertEquals(false, jSDocInfo1.isIdGenerator());
      assertEquals(false, jSDocInfo1.makesDicts());
      assertEquals(false, jSDocInfo1.isExpose());
      assertEquals(false, jSDocInfo1.hasFileOverview());
      assertNull(jSDocInfo1.getSourceName());
      assertEquals(false, jSDocInfo1.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo1.hasThisType());
      assertEquals(false, jSDocInfo1.isNoSideEffects());
      assertNull(jSDocInfo1.getLicense());
      assertEquals(false, jSDocInfo1.isOverride());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo1.getVisibility());
      assertEquals(false, jSDocInfo1.isConstructor());
      assertNull(jSDocInfo1.getVersion());
      assertNull(jSDocInfo1.getReturnDescription());
      assertEquals(false, jSDocInfo1.isExport());
      assertEquals(false, jSDocInfo1.isConstant());
      assertNull(jSDocInfo1.getBlockDescription());
      assertEquals(false, jSDocInfo1.isStableIdGenerator());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertNull(jSDocInfo1.getFileOverview());
      assertEquals(false, jSDocInfo1.isNoCompile());
      assertEquals(false, jSDocInfo1.isDefine());
      assertNull(jSDocInfo1.getLendsName());
      assertEquals(false, jSDocInfo1.isExterns());
      assertEquals(false, jSDocInfo1.isNoShadow());
      assertNull(jSDocInfo1.getDescription());
      assertEquals(false, jSDocInfo1.hasEnumParameterType());
      assertEquals(false, jSDocInfo1.isNgInject());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo1.shouldPreserveTry());
      assertEquals(false, jSDocInfo1.hasModifies());
      assertNull(jSDocInfo1.getOriginalCommentString());
      assertEquals(false, jSDocInfo1.isImplicitCast());
      assertEquals(false, jSDocInfo1.isJavaDispatch());
      assertEquals(false, jSDocInfo1.hasReturnType());
      assertEquals(false, jSDocInfo1.isHidden());
      assertEquals(false, jSDocInfo1.isDeprecated());
      assertEquals(false, jSDocInfo1.isNoAlias());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertEquals(false, jSDocInfo1.isInterface());
      assertEquals(false, jSDocInfo1.hasBaseType());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertEquals(true, jSDocInfo1.containsDeclaration());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertNull(comment0.getJsDoc());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals(79, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(79, comment0.getLength());
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertNotNull(jSDocInfo1);
      
      boolean boolean1 = jsDocInfoParser1.parse();
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      assertFalse(boolean1);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertNull(comment0.getJsDoc());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals(79, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(79, comment0.getLength());
      assertTrue(boolean1 == boolean0);
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "fB:iIHcED";
      int int0 = (-1581);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0);
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1581, xmlDotQuery0.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals("146", xmlDotQuery0.toString());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(-1581, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertNotNull(xmlDotQuery0);
      
      Comment comment0 = xmlDotQuery0.getJsDocNode();
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1581, xmlDotQuery0.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals("146", xmlDotQuery0.toString());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(-1581, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertNull(comment0);
      
      Node node0 = Node.newNumber((double) int0);
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(node0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      node0.setSourceFileForTesting(string0);
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals("fB:iIHcED", node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals("fB:iIHcED", node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1581, xmlDotQuery0.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals("146", xmlDotQuery0.toString());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(-1581, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertNotNull(jsDocInfoParser0);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals("fB:iIHcED", node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1581, xmlDotQuery0.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals("146", xmlDotQuery0.toString());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(-1581, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertNotNull(jSTypeExpression0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "[{9Z,nu}.wx";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = ";^uie|tjGjjJ9";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(6, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDebugger());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertNotNull(node0);
      
      int int0 = (-536870912);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(set0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(6, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDebugger());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(6, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDebugger());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = ";^uie|tjGjjJ9";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVoid());
      assertEquals(6, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCast());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertNotNull(node0);
      
      int int0 = (-536870912);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(set0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVoid());
      assertEquals(6, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCast());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(jsDocInfoParser0);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVoid());
      assertEquals(6, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCast());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertNotNull(node_FileLevelJsDocBuilder0);
      
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVoid());
      assertEquals(6, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCast());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
  }

  @Test
  public void test26()  throws Throwable  {
      byte byte0 = (byte)79;
      String string0 = ">F^5We<1@AUoq";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, byte0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((int) byte0, (int) byte0, token_CommentType0, string0);
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals(79, comment0.getPosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(79, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertNotNull(comment0);
      
      Node node0 = new Node((int) byte0);
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFor());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertNotNull(node0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals(79, comment0.getPosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(79, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFor());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(boolean1);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals(79, comment0.getPosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(79, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFor());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test27()  throws Throwable  {
      byte byte0 = (byte)79;
      String string0 = ">F^5We<1@AUoq";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, byte0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((int) byte0, (int) byte0, token_CommentType0, string0);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(79, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(79, comment0.getPosition());
      assertNotNull(comment0);
      
      Node node0 = new Node((int) byte0);
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertNotNull(node0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(79, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(79, comment0.getPosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(79, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(79, comment0.getPosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNull(jSDocInfo0);
      
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(79, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(79, comment0.getPosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertNotNull(jsDocInfoParser1);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser1.parseInlineTypeDoc();
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(79, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(79, comment0.getPosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo1.getVisibility());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertEquals(false, jSDocInfo1.isInterface());
      assertEquals(false, jSDocInfo1.shouldPreserveTry());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertEquals(false, jSDocInfo1.isNoCompile());
      assertEquals(false, jSDocInfo1.isNoTypeCheck());
      assertNull(jSDocInfo1.getDescription());
      assertEquals(false, jSDocInfo1.isExpose());
      assertEquals(false, jSDocInfo1.hasFileOverview());
      assertEquals(false, jSDocInfo1.hasBaseType());
      assertEquals(false, jSDocInfo1.isHidden());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo1.hasThisType());
      assertNull(jSDocInfo1.getBlockDescription());
      assertEquals(false, jSDocInfo1.isNoAlias());
      assertEquals(true, jSDocInfo1.hasType());
      assertEquals(false, jSDocInfo1.isDeprecated());
      assertEquals(false, jSDocInfo1.isJavaDispatch());
      assertEquals(false, jSDocInfo1.isNoShadow());
      assertEquals(false, jSDocInfo1.isOverride());
      assertEquals(false, jSDocInfo1.isConsistentIdGenerator());
      assertNull(jSDocInfo1.getLendsName());
      assertNull(jSDocInfo1.getSourceName());
      assertEquals(false, jSDocInfo1.isExterns());
      assertNull(jSDocInfo1.getMeaning());
      assertEquals(false, jSDocInfo1.hasModifies());
      assertEquals(false, jSDocInfo1.isConstructor());
      assertNull(jSDocInfo1.getFileOverview());
      assertEquals(true, jSDocInfo1.containsDeclaration());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertEquals(">F^5We<1@AUoq", jSDocInfo1.getOriginalCommentString());
      assertEquals(false, jSDocInfo1.isExport());
      assertEquals(false, jSDocInfo1.isStableIdGenerator());
      assertEquals(false, jSDocInfo1.isConstant());
      assertEquals(false, jSDocInfo1.makesDicts());
      assertNull(jSDocInfo1.getLicense());
      assertNull(jSDocInfo1.getVersion());
      assertEquals(false, jSDocInfo1.isNgInject());
      assertEquals(false, jSDocInfo1.isIdGenerator());
      assertEquals(false, jSDocInfo1.hasTypedefType());
      assertEquals(false, jSDocInfo1.isImplicitCast());
      assertNull(jSDocInfo1.getReturnDescription());
      assertEquals(false, jSDocInfo1.isDefine());
      assertEquals(false, jSDocInfo1.hasReturnType());
      assertEquals(false, jSDocInfo1.isNoSideEffects());
      assertEquals(false, jSDocInfo1.hasEnumParameterType());
      assertEquals(false, jSDocInfo1.makesStructs());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertNotNull(jSDocInfo1);
      
      boolean boolean1 = jsDocInfoParser1.parse();
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      assertFalse(boolean1);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(79, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(">F^5We<1@AUoq", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(79, comment0.getAbsolutePosition());
      assertEquals(79, comment0.getPosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "( \n\tnative e]\n}\n";
      int int0 = 2657;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
