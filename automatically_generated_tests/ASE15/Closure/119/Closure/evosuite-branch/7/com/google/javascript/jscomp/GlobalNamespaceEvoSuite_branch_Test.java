/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:37:26 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSlot;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

 
public class GlobalNamespaceEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      // Undeclared exception!
      try {
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      // Undeclared exception!
      try {
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref0.isSet();
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref0.isSet();
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref0.isSet();
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      String string0 = globalNamespace_Ref0.getSourceName();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "o{\"m2`";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isSimpleName();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean0);
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      
      boolean boolean1 = globalNamespace_Name2.isSimpleName();
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(boolean1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "E6B^U-zhn<;fA\\%+";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean0);
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      
      globalNamespace_Name2.setDeclaredType();
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      
      boolean boolean1 = globalNamespace_Name1.isNamespace();
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertTrue(boolean0 == boolean1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "o{\"m2`";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isNamespace();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "o{\"m2`";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "0D";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      
      globalNamespace_Name1.addRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.shouldKeepKeys();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "o{\"m2`";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      String string1 = globalNamespace_Name1.getName();
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      
      boolean boolean1 = globalNamespace_Name1.canEliminate();
      assertSame(string0, string1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string1, boolean1);
      assertNotNull(globalNamespace_Name2);
      assertSame(string0, string1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertSame(string1, string0);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      
      boolean boolean2 = globalNamespace_Name2.canCollapse();
      assertSame(string0, string1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertSame(string1, string0);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(boolean2);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      globalNamespace_Name1.setDeclaredType();
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "v";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isSimpleStubDeclaration();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRefInternal(globalNamespace_Ref0);
      // Undeclared exception!
      try {
        boolean boolean1 = globalNamespace_Name1.isSimpleStubDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.DELETE_PROP;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      
      globalNamespace_Name1.addRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.CALL_GET;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      
      globalNamespace_Name1.addRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRefInternal(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.DIRECT_GET;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      
      globalNamespace_Name1.addRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRefInternal(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "v";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      
      globalNamespace_Name1.addRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      
      globalNamespace_Name1.addRefInternal(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "v";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      
      globalNamespace_Name1.addRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = null;
      globalNamespace_Name1.addRefInternal(globalNamespace_Ref0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref1);
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref1);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      
      globalNamespace_Name1.addRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      
      globalNamespace_Name1.addRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "E6B^U-zhn<;fA\\%+";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean0);
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      
      String string1 = globalNamespace_Name2.getFullName();
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertEquals(".", string1);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "E6B^U-zhn<;fA\\%+";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean1);
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      
      GlobalNamespace.Name globalNamespace_Name3 = globalNamespace_Name1.addProperty(string0, boolean1);
      assertNotNull(globalNamespace_Name3);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name3);
      assertNotSame(globalNamespace_Name3, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name3, globalNamespace_Name2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name3));
      assertFalse(globalNamespace_Name3.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name3.equals((Object)globalNamespace_Name2));
  }

  @Test
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      int int0 = 0;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "";
      // Undeclared exception!
      try {
        GlobalNamespace.Name globalNamespace_Name0 = globalNamespace0.getSlot(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0, node0);
      assertNotNull(globalNamespace0);
      
      Stack<GlobalNamespace.AstChange> stack0 = new Stack<GlobalNamespace.AstChange>();
      assertNotNull(stack0);
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      globalNamespace0.scanNewNodes(stack0);
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
  }

  @Test
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      int int0 = 0;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      
      boolean boolean0 = globalNamespace0.hasExternsRoot();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      assertTrue(boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0, node0);
      assertNotNull(globalNamespace0);
      
      boolean boolean0 = globalNamespace0.hasExternsRoot();
      assertFalse(boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = globalNamespace_Name1.getDeclaration();
      assertNull(globalNamespace_Ref0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isTypeInferred();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "E6B^U-zhn<;fA\\%+";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isDeclaredType();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      JSType jSType0 = globalNamespace_Name1.getType();
      assertNull(jSType0);
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "o{\"m2`";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      JSDocInfo jSDocInfo0 = globalNamespace_Name1.getJSDocInfo();
      assertNull(jSDocInfo0);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "o{\"m2`";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      String string1 = globalNamespace_Name1.toString();
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("o{\"m2` (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", string1);
  }

  @Test
  public void test44()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      StaticSlot<JSType> staticSlot0 = globalNamespace_Ref0.getSymbol();
      assertNull(staticSlot0);
  }

  @Test
  public void test45()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      StaticSourceFile staticSourceFile0 = globalNamespace_Ref0.getSourceFile();
      assertNull(staticSourceFile0);
  }

  @Test
  public void test46()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      Node node0 = null;
      Scope scope0 = Scope.createLatticeBottom(node0);
      assertNotNull(scope0);
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      
      String string0 = "";
      boolean boolean0 = false;
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(abstractCompiler0, string0, boolean0);
      assertNotNull(processCommonJSModules0);
      
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
      
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      int int0 = 0;
      GlobalNamespace.Ref globalNamespace_Ref0 = null;
      try {
        globalNamespace_Ref0 = new GlobalNamespace.Ref(jSModule0, scope0, node0, globalNamespace_Name0, globalNamespace_Ref_Type0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      JSModule jSModule0 = globalNamespace_Ref0.getModule();
      assertNull(jSModule0);
  }

  @Test
  public void test48()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.getTwin();
      assertNull(globalNamespace_Ref1);
  }

  @Test
  public void test49()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      Node node0 = globalNamespace_Ref0.getNode();
      assertNull(node0);
  }

  @Test
  public void test50()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      Node node0 = null;
      String string1 = globalNamespace_Name1.getBaseName();
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(abstractCompiler0, string1);
      assertNotNull(processCommonJSModules0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      Scope scope0 = null;
      GlobalNamespace.AstChange globalNamespace_AstChange0 = new GlobalNamespace.AstChange(jSModule0, scope0, node0);
      assertNotNull(globalNamespace_AstChange0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test51()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0, node0);
      assertNotNull(globalNamespace0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = globalNamespace0.getTypeOfThis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0, node0);
      assertNotNull(globalNamespace0);
      
      StaticScope<JSType> staticScope0 = globalNamespace0.getParentScope();
      assertNull(staticScope0);
  }

  @Test
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      int int0 = 0;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isComma());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isComma());
      
      Node node1 = globalNamespace0.getRootNode();
      assertNull(node1);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isComma());
  }

  @Test
  public void test55()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0, node0);
      assertNotNull(globalNamespace0);
      
      // Undeclared exception!
      try {
        Map<String, GlobalNamespace.Name> map0 = globalNamespace0.getNameIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0, node0);
      assertNotNull(globalNamespace0);
      
      // Undeclared exception!
      try {
        Iterable<GlobalNamespace.Name> iterable0 = globalNamespace0.getAllSymbols();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0, node0);
      assertNotNull(globalNamespace0);
      
      StaticScope<JSType> staticScope0 = globalNamespace0.getScope(globalNamespace_Name1);
      assertNotNull(staticScope0);
      assertSame(globalNamespace0, staticScope0);
  }

  @Test
  public void test58()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "@r";
      int int0 = (-10);
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWith());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWith());
      
      // Undeclared exception!
      try {
        GlobalNamespace.Name globalNamespace_Name0 = globalNamespace0.getSlot(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test59()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0, node0);
      assertNotNull(globalNamespace0);
      
      // Undeclared exception!
      try {
        Iterable<GlobalNamespace.Ref> iterable0 = globalNamespace0.getReferences(globalNamespace_Name0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
