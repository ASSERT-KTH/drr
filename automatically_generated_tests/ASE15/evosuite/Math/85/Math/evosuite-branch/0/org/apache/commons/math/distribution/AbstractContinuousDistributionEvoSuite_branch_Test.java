/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:06:08 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathException;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.apache.commons.math.distribution.GammaDistribution;
import org.apache.commons.math.distribution.GammaDistributionImpl;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class AbstractContinuousDistributionEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 2164.9555909918345;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(2164.9555909918345, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(2164.9555909918345, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      // Undeclared exception!
      try {
        double double1 = fDistributionImpl0.inverseCumulativeProbability(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,164.956 out of [0, 1] range
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = (-1030.264919163517);
      // Undeclared exception!
      try {
        double double1 = normalDistributionImpl0.inverseCumulativeProbability(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,030.265 out of [0, 1] range
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 138.9;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double0);
      assertEquals(138.9, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(138.9, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0, (GammaDistribution) gammaDistributionImpl0);
      assertEquals(69.45, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(138.9, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(138.9, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      double double1 = 3.399E-5;
      try {
        double double2 = chiSquaredDistributionImpl0.inverseCumulativeProbability(double1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: number of iterations=70, maximum iterations=2,147,483,647, initial=69.45, lower bound=0, upper bound=138.9, final a value=0, final b value=138.9, f(a)=-0, f(b)=-0
         //
      }
  }
}
