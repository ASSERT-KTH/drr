/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:18:55 GMT 2014
 */

package org.apache.commons.math.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BrentOptimizerEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      
      int int0 = (-1491);
      double double0 = (-1.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) int0;
      double double1 = 735.1;
      doubleArray0[6] = double1;
      doubleArray0[7] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), (-1491.0), 0.0, 735.1, (-1491.0), 0.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), (-1491.0), 0.0, 735.1, (-1491.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertEquals(6, polynomialFunction1.degree());
      assertEquals(7, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction2 = polynomialFunction0.multiply(polynomialFunction1);
      assertNotNull(polynomialFunction2);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), (-1491.0), 0.0, 735.1, (-1491.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertEquals(6, polynomialFunction1.degree());
      assertEquals(13, polynomialFunction2.degree());
      assertEquals(7, polynomialFunction0.degree());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double2 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction2, goalType0, doubleArray0[1], doubleArray0[3]);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), (-1491.0), 0.0, 735.1, (-1491.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-0.608692237880111), double2, 0.01D);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertEquals(6, polynomialFunction1.degree());
      assertEquals(13, brentOptimizer0.getIterationCount());
      assertEquals(14, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals((-1.0), brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals((-0.5), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(13, polynomialFunction2.degree());
      assertEquals(7, polynomialFunction0.degree());
  }

  @Test
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      
      int int0 = (-1491);
      double double0 = brentOptimizer0.getMin();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      
      GoalType goalType0 = brentOptimizer0.getGoalType();
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      
      double double1 = (-1.0);
      assertFalse(double1 == double0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = double1;
      doubleArray0[4] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), (-1491.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction0.degree());
      
      double double2 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), (-1491.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-5.030181090506178E-4), double2, 0.01D);
      assertEquals(4, polynomialFunction0.degree());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(39, brentOptimizer0.getEvaluations());
      assertEquals(38, brentOptimizer0.getIterationCount());
      assertEquals((-1.0), brentOptimizer0.getMax(), 0.01D);
      assertEquals((-0.5), brentOptimizer0.getStartValue(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      
      double[] doubleArray0 = new double[5];
      double double0 = (-1954.0);
      doubleArray0[0] = double0;
      doubleArray0[2] = doubleArray0[0];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {(-1954.0), 0.0, (-1954.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.negate();
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {(-1954.0), 0.0, (-1954.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction0.degree());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = 2053.1450299735066;
      double double2 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction1, goalType0, double1, doubleArray0[0], doubleArray0[2]);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {(-1954.0), 0.0, (-1954.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3.1968383593818335E-11, double2, 0.01D);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction0.degree());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(46, brentOptimizer0.getEvaluations());
      assertEquals(2053.1450299735066, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(45, brentOptimizer0.getIterationCount());
      assertEquals((-1954.0), brentOptimizer0.getMax(), 0.01D);
      assertEquals((-1954.0), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
  }

  @Test
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      
      double[] doubleArray0 = new double[5];
      double double0 = (-1954.0);
      doubleArray0[0] = double0;
      doubleArray0[2] = doubleArray0[0];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {(-1954.0), 0.0, (-1954.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.negate();
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertArrayEquals(new double[] {(-1954.0), 0.0, (-1954.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertEquals(2, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction1.degree());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction1, goalType0, doubleArray0[0], doubleArray0[4]);
      assertFalse(double1 == double0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertArrayEquals(new double[] {(-1954.0), 0.0, (-1954.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-7.364141886007863E-9), double1, 0.01D);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertEquals(2, polynomialFunction0.degree());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(66, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(65, brentOptimizer0.getIterationCount());
      assertEquals((-1954.0), brentOptimizer0.getMin(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals((-977.0), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(2, polynomialFunction1.degree());
  }

  @Test
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      
      double[] doubleArray0 = new double[3];
      double double0 = 718.23382;
      double double1 = (-454.74135665039);
      doubleArray0[0] = double1;
      doubleArray0[2] = double1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {(-454.74135665039), 0.0, (-454.74135665039)}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double2 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, doubleArray0[0], double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertArrayEquals(new double[] {(-454.74135665039), 0.0, (-454.74135665039)}, doubleArray0, 0.01);
      assertEquals((-7.3676461655029E-9), double2, 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(131.74623167480502, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(718.23382, brentOptimizer0.getMax(), 0.01D);
      assertEquals((-454.74135665039), brentOptimizer0.getMin(), 0.01D);
      assertEquals(42, brentOptimizer0.getIterationCount());
      assertEquals(43, brentOptimizer0.getEvaluations());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(2, polynomialFunction0.degree());
  }

  @Test
  public void test5()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      
      brentOptimizer0.resetAbsoluteAccuracy();
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      
      // Undeclared exception!
      try {
        double double0 = brentOptimizer0.doOptimize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      
      brentOptimizer0.resetRelativeAccuracy();
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      
      // Undeclared exception!
      try {
        double double0 = brentOptimizer0.doOptimize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }
}
