/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:42:12 GMT 2014
 */

package org.apache.commons.math;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MaxIterationsExceededException;
import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class ConvergingAlgorithmImplEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      double double0 = brentOptimizer0.getAbsoluteAccuracy();
      assertEquals(1.0E-11, double0, 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      double[] doubleArray0 = new double[9];
      double double1 = 1978.12031;
      assertFalse(double1 == double0);
      
      doubleArray0[0] = double1;
      doubleArray0[8] = doubleArray0[0];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {1978.12031, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1978.12031}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction0.degree());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      try {
        double double2 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, double0, doubleArray0[7], doubleArray0[8]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of iterations (100) exceeded
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      assertNotNull(secantSolver0);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, secantSolver0.getMaximalIterationCount());
      assertEquals(0, secantSolver0.getIterationCount());
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01D);
      
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      
      int int0 = secantSolver0.getMaximalIterationCount();
      assertEquals(100, int0);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, secantSolver0.getMaximalIterationCount());
      assertEquals(0, secantSolver0.getIterationCount());
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01D);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, secantSolver0.getMaximalIterationCount());
      assertEquals(0, secantSolver0.getIterationCount());
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01D);
      
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction0.degree());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, doubleArray0[0], doubleArray0[7], doubleArray0[8]);
      assertArrayEquals(new double[] {100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(99.99999983307586, double0, 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(100.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(43, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(42, brentOptimizer0.getIterationCount());
      assertEquals(0, polynomialFunction0.degree());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      assertNotNull(mullerSolver0);
      assertEquals(0, mullerSolver0.getIterationCount());
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, mullerSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, mullerSolver0.getAbsoluteAccuracy(), 0.01D);
      
      mullerSolver0.resetMaximalIterationCount();
      assertEquals(0, mullerSolver0.getIterationCount());
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, mullerSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, mullerSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction0.degree());
      
      LaguerreSolver laguerreSolver0 = new LaguerreSolver((UnivariateRealFunction) polynomialFunction0);
      assertNotNull(laguerreSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, laguerreSolver0.getIterationCount());
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, polynomialFunction0.degree());
      
      int int0 = laguerreSolver0.getIterationCount();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, laguerreSolver0.getIterationCount());
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, polynomialFunction0.degree());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      assertNotNull(brentSolver0);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      
      brentSolver0.resetRelativeAccuracy();
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction0.degree());
      
      NewtonSolver newtonSolver0 = new NewtonSolver((DifferentiableUnivariateRealFunction) polynomialFunction0);
      assertNotNull(newtonSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(100, newtonSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, newtonSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, newtonSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, newtonSolver0.getIterationCount());
      assertEquals(0, polynomialFunction0.degree());
      
      newtonSolver0.resetAbsoluteAccuracy();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(100, newtonSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, newtonSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, newtonSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, newtonSolver0.getIterationCount());
      assertEquals(0, polynomialFunction0.degree());
  }
}
