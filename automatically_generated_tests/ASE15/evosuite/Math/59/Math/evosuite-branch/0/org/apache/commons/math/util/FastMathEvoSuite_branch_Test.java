/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:23:38 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      double double0 = (-3921.553473);
      double double1 = FastMath.tanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
      
      float float0 = 0.0F;
      double double2 = FastMath.max((double) float0, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test001()  throws Throwable  {
      int int0 = (-1666);
      int int1 = FastMath.max(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1666), int1);
      
      double double0 = FastMath.max((double) int1, (double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1666.0), double0, 0.01D);
  }

  @Test
  public void test002()  throws Throwable  {
      double double0 = (-0.3058015757857271);
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      
      double double2 = FastMath.log10(double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.max(double2, double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  //@Test
  public void test003()  throws Throwable  {
      long long0 = 0L;
      float float0 = (-25.6364F);
      float float1 = FastMath.max((float) long0, float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test004()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = (-1.0F);
      float float2 = FastMath.max(float0, float1);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
  }

  @Test
  public void test005()  throws Throwable  {
      int int0 = (-2626);
      long long0 = FastMath.max((long) int0, (long) int0);
      assertEquals((-2626L), long0);
  }

  @Test
  public void test006()  throws Throwable  {
      int int0 = (-2626);
      long long0 = (-2778L);
      long long1 = FastMath.max((long) int0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-2626L), long1);
  }

  @Test
  public void test007()  throws Throwable  {
      int int0 = 1242;
      int int1 = 0;
      int int2 = FastMath.max(int0, int1);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(1242, int2);
  }

  @Test
  public void test008()  throws Throwable  {
      double double0 = 0.15;
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.9887710779360422, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.1500000000000003, double2, 0.01D);
      
      double double3 = FastMath.min(double1, double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.1500000000000003, double3, 0.01D);
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      double double0 = FastMath.min((double) int0, (double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test010()  throws Throwable  {
      double double0 = (-410.7996479144671);
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      long long0 = FastMath.round(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals((-411L), long0);
      
      double double2 = FastMath.min(double1, (double) long0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test011()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = 0.0F;
      float float2 = FastMath.min(float0, float1);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
  }

  @Test
  public void test012()  throws Throwable  {
      int int0 = (-1666);
      int int1 = 0;
      float float0 = FastMath.min((float) int1, (float) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1666.0F), float0, 0.01F);
  }

  @Test
  public void test013()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-1865L);
      long long2 = FastMath.min(long0, long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertEquals((-1865L), long2);
  }

  @Test
  public void test014()  throws Throwable  {
      int int0 = (-1481);
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1481), int1);
  }

  @Test
  public void test015()  throws Throwable  {
      float float0 = (-2496.34F);
      int int0 = FastMath.round(float0);
      assertEquals((-2496), int0);
      
      int int1 = (-1684);
      assertFalse(int1 == int0);
      
      int int2 = FastMath.min(int1, int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-2496), int2);
  }

  @Test
  public void test016()  throws Throwable  {
      float float0 = (-1560.5F);
      double double0 = FastMath.rint((double) float0);
      assertEquals((-1560.0), double0, 0.01D);
  }

  //@Test
  public void test017()  throws Throwable  {
      int int0 = (-255);
      Random.setNextRandom(int0);
      double double0 = FastMath.random();
      assertEquals(0.5, double0, 0.01D);
      
      double double1 = FastMath.rint(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test018()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.toRadians((double) float0);
      assertEquals((-0.017453292519943295), double0, 0.01D);
      
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test019()  throws Throwable  {
      int int0 = (-1683);
      double double0 = FastMath.rint((double) int0);
      assertEquals((-1683.0), double0, 0.01D);
  }

  @Test
  public void test020()  throws Throwable  {
      double double0 = (-0.16666666666666666);
      double double1 = FastMath.ceil(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test021()  throws Throwable  {
      long long0 = (-302932621132653766L);
      long long1 = FastMath.min(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-302932621132653766L), long1);
      
      double double0 = FastMath.ceil((double) long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-3.0293262113265376E17), double0, 0.01D);
  }

  @Test
  public void test022()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.min(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
      
      double double0 = 2.384185791015625E-7;
      double double1 = FastMath.nextAfter(double0, (double) float1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(2.3841857910156247E-7, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(float0 == float1);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(float1 == float0);
      assertEquals(2.384185791015625E-7, double2, 0.01D);
  }

  @Test
  public void test023()  throws Throwable  {
      double double0 = (-1501.203);
      double double1 = FastMath.tanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.nextAfter(double1, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-1.0000000000000002), double2, 0.01D);
  }

  @Test
  public void test024()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.abs(float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
      
      double double0 = (-1.0E-6);
      double double1 = FastMath.nextAfter((double) float1, double0);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
      assertEquals((-4.9E-324), double1, 0.01D);
  }

  @Test
  public void test025()  throws Throwable  {
      long long0 = 4095L;
      double double0 = FastMath.cosh((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.nextAfter(double0, (double) long0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test026()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.max(float0, float0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      
      double double0 = FastMath.nextUp((double) float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test027()  throws Throwable  {
      float float0 = (-1291.0F);
      float float1 = FastMath.abs(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1291.0F, float1, 0.01F);
  }

  @Test
  public void test028()  throws Throwable  {
      long long0 = (-302932621132653766L);
      long long1 = FastMath.abs(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(302932621132653766L, long1);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = 2795;
      long long0 = FastMath.abs((long) int0);
      assertEquals(2795L, long0);
  }

  @Test
  public void test030()  throws Throwable  {
      double double0 = (-410.7996479144671);
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test031()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.7031839360032603E-108, double2, 0.01D);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test033()  throws Throwable  {
      double double0 = (-0.16666666666666666);
      double double1 = FastMath.nextUp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.16666666666666663), double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-0.5503212081491045), double2, 0.01D);
  }

  @Test
  public void test034()  throws Throwable  {
      double double0 = (-21.142906127252537);
      double double1 = FastMath.toRadians(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.36901332536063997), double1, 0.01D);
      
      double double2 = FastMath.ulp(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(5.551115123125783E-17, double2, 0.01D);
      
      double double3 = FastMath.acos(double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test
  public void test035()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test
  public void test036()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test037()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.141592653589793, double1, 0.01D);
  }

  @Test
  public void test038()  throws Throwable  {
      long long0 = (-302932621132653766L);
      long long1 = FastMath.min(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-302932621132653766L), long1);
      
      double double0 = FastMath.acos((double) long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test040()  throws Throwable  {
      long long0 = (-1L);
      double double0 = FastMath.asin((double) long0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test
  public void test041()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.asin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = (-2433.532685056);
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      double double0 = 5207.78054;
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = 1871.0;
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      double double0 = 143.48;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.966195652664082, double1, 0.01D);
      
      float float0 = 0.0F;
      double double2 = FastMath.atan2(double1, (double) float0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      double double0 = (-0.16666666666666666);
      double double1 = 0.0;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      long long0 = 0L;
      int int0 = (-2120);
      int int1 = FastMath.abs(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(2120, int1);
      
      double double0 = FastMath.log((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2((double) int1, double0);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertEquals(3.141592653589793, double1, 0.01D);
  }

  @Test
  public void test048()  throws Throwable  {
      double double0 = (-3.0648051211502416);
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.8387428360123554), double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.log(double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.atan2(double1, double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertEquals((-3.141592653589793), double4, 0.01D);
  }

  @Test
  public void test049()  throws Throwable  {
      double double0 = 1252.5;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = 3659.5261472135066;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test050()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.toRadians(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.017453292519943295, double1, 0.01D);
      
      long long0 = (-1L);
      double double2 = FastMath.log1p((double) long0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertEquals((-1.5707963267948966), double3, 0.01D);
  }

  @Test
  public void test051()  throws Throwable  {
      double double0 = 2282.10374200574;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.7853981633974483, double2, 0.01D);
  }

  @Test
  public void test052()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test053()  throws Throwable  {
      double double0 = (-3921.553473);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      int int0 = (-1683);
      double double2 = FastMath.atan2((double) int0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(-0.0, double2, 0.01D);
      
      double double3 = FastMath.atan2(double2, double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-3.141592653589793), double3, 0.01D);
  }

  @Test
  public void test054()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1.0);
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test
  public void test055()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.floor(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = (-1721.17322494);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.cosh(double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.atan2(double1, double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertTrue(double0 == double1);
      assertTrue(double0 == double4);
      assertFalse(double0 == double2);
      assertTrue(double4 == double0);
      assertTrue(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double1 == double4);
      assertEquals(0.0, double4, 0.01D);
  }

  //@Test
  public void test056()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.atan2(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test057()  throws Throwable  {
      long long0 = (-302932621132653766L);
      long long1 = FastMath.min(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-302932621132653766L), long1);
      
      double double0 = FastMath.atan2((double) long1, (double) long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-2.356194490192345), double0, 0.01D);
  }

  @Test
  public void test058()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.asin(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test059()  throws Throwable  {
      double double0 = (-0.16666666666666666);
      double double1 = FastMath.nextUp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.16666666666666663), double1, 0.01D);
      
      double double2 = FastMath.signum(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-1.0), double2, 0.01D);
      
      double double3 = FastMath.atan(double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertEquals((-0.7853981633974483), double3, 0.01D);
  }

  @Test
  public void test060()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.2246467991473532E-16, double1, 0.01D);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = 2211.2176733925635;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test062()  throws Throwable  {
      double double0 = (-3921.553473);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      int int0 = (-1683);
      double double2 = FastMath.atan2((double) int0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(-0.0, double2, 0.01D);
      
      double double3 = FastMath.tan(double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertEquals(-0.0, double3, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      double double0 = 54.482853;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.997886028311519, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-0.6552420181951705), double2, 0.01D);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test065()  throws Throwable  {
      int int0 = (-2626);
      double double0 = FastMath.cos((double) int0);
      assertEquals(0.9317989739620733, double0, 0.01D);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = 1912.9928841728;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test067()  throws Throwable  {
      long long0 = (-2672L);
      double double0 = FastMath.sin((double) long0);
      assertEquals((-0.9971551403476294), double0, 0.01D);
  }

  @Test
  public void test068()  throws Throwable  {
      double double0 = (-2379.0823904363574);
      long long0 = 0L;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2((double) long0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      
      double double3 = FastMath.sin(double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertEquals(1.2246467991473532E-16, double3, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      long long0 = (-2683L);
      double double0 = FastMath.sinh((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, (double) long0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.min(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
      
      double double0 = FastMath.sin((double) float1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test071()  throws Throwable  {
      long long0 = (-2672L);
      double double0 = FastMath.sinh((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test072()  throws Throwable  {
      long long0 = 4208363204685324176L;
      double double0 = FastMath.sin((double) long0);
      assertEquals((-0.9878149748940149), double0, 0.01D);
  }

  @Test
  public void test073()  throws Throwable  {
      long long0 = 2147483648L;
      double double0 = FastMath.sin((double) long0);
      assertEquals((-0.9713101757929392), double0, 0.01D);
  }

  @Test
  public void test074()  throws Throwable  {
      double double0 = 3294201.8319809153;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.03205220000777717), double1, 0.01D);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = (-4.5035996273704895E15);
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.2861057279699865), double1, 0.01D);
  }

  @Test
  public void test076()  throws Throwable  {
      double double0 = 143.48;
      double double1 = FastMath.exp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.053866746682766E62, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.9999972465162096, double2, 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      double double0 = 436.834177027941;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.592045342295063E189, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-0.2767470873064527), double2, 0.01D);
  }

  @Test
  public void test078()  throws Throwable  {
      long long0 = (-1806L);
      long long1 = FastMath.min(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-1806L), long1);
      
      double double0 = 0.75;
      double double1 = FastMath.pow(double0, (double) long1);
      assertFalse(double1 == double0);
      assertTrue(long1 == long0);
      assertFalse(double0 == double1);
      assertTrue(long0 == long1);
      assertEquals(4.3587134095298394E225, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(long1 == long0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(long0 == long1);
      assertEquals(0.024316991596798065, double2, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = 356.1;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.245096485803869E154, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.060887124330327606, double2, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      double double0 = (-3921.553473);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      long long0 = FastMath.round(double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(9223372036854775807L, long0);
      
      double double2 = FastMath.cos((double) long0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.011800076512800236, double2, 0.01D);
  }

  @Test
  public void test081()  throws Throwable  {
      int int0 = 1;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      double double0 = FastMath.tan((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1.5574077246549023, double0, 0.01D);
  }

  @Test
  public void test082()  throws Throwable  {
      int int0 = (-2626);
      double double0 = FastMath.tan((double) int0);
      assertEquals(0.38954191221028983, double0, 0.01D);
  }

  @Test
  public void test083()  throws Throwable  {
      double double0 = 0.07490822288864472;
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.07778523033027851, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.07770681358929964, double2, 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      int int0 = 932;
      double double0 = (-8.0E298);
      double double1 = FastMath.pow((double) int0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test085()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.toRadians((double) float0);
      assertEquals((-0.017453292519943295), double0, 0.01D);
      
      float float1 = FastMath.min(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-1.0F), float1, 0.01F);
      
      double double1 = FastMath.pow(double0, (double) float1);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
      assertEquals((-57.29577951308232), double1, 0.01D);
  }

  @Test
  public void test086()  throws Throwable  {
      double double0 = (-0.16666666666666666);
      double double1 = FastMath.nextUp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.16666666666666663), double1, 0.01D);
      
      int int0 = (-2626);
      double double2 = FastMath.pow((double) int0, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      double double0 = (-4.503599627370496E15);
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test088()  throws Throwable  {
      double double0 = (-0.16666666666666666);
      double double1 = FastMath.nextUp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.16666666666666663), double1, 0.01D);
      
      int int0 = (-2626);
      double double2 = FastMath.pow(double1, (double) int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = (-2379.0823904363574);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.ulp(double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(4.547473508864641E-13, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test090()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = 1.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = (-2379.0823904363574);
      long long0 = 0L;
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2((double) long0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(3.141592653589793, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      double double0 = 0.15;
      double double1 = (-4.9E-324);
      double double2 = FastMath.nextUp(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(-0.0, double2, 0.01D);
      
      double double3 = FastMath.log(double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.pow(double3, double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      long long0 = (-2672L);
      double double0 = FastMath.sinh((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, (double) long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      double double0 = 4.503599627370493E15;
      double double1 = (-4.9E-324);
      double double2 = FastMath.nextUp(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(-0.0, double2, 0.01D);
      
      double double3 = FastMath.log(double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.pow(double3, double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertTrue(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertTrue(double3 == double4);
      assertFalse(double3 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double4, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = (-3.0648051211502416);
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.8387428360123554), double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.log(double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.pow(double3, double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertTrue(double4 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertEquals(0.0, double4, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      long long0 = 4208363204685324176L;
      double double0 = FastMath.sinh((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = (-0.1428571423679182);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      long long0 = 4208363204685324176L;
      double double0 = FastMath.sinh((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      long long1 = (-1L);
      double double1 = FastMath.pow((double) long1, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      long long0 = 4208363204685324176L;
      double double0 = FastMath.sinh((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow((double) long0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = (-1721.17322494);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.expm1(double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-1.0), double2, 0.01D);
      
      double double3 = FastMath.pow(double1, double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = 2211.2176733925635;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.nextUp(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.acos(double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals((-1.5707963267948966), double2, 0.01D);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = 4.503599627370493E15;
      double double1 = FastMath.cos(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(0.6040454286950109, double1, 0.01D);
      
      double double2 = (-4.9E-324);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.nextUp(double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertEquals(-0.0, double3, 0.01D);
      
      double double4 = FastMath.pow(double3, double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertEquals(0.0, double4, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = (-2405.0);
      double double1 = (-4.9E-324);
      double double2 = FastMath.nextUp(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(-0.0, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      double double0 = (-2405.0);
      float float0 = 0.0F;
      int int0 = FastMath.round(float0);
      assertEquals(0, int0);
      
      double double1 = FastMath.pow((double) int0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log1p(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      double double0 = 1252.5;
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      long long0 = 4095L;
      double double0 = FastMath.log1p((double) long0);
      assertEquals(8.317766166719343, double0, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      int int0 = (-2626);
      double double0 = FastMath.log1p((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.nextUp((double) int0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = 1.0;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.acosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = 1.25;
      double double1 = FastMath.log10(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.09691001300805642, double1, 0.01D);
  }

  @Test
  public void test112()  throws Throwable  {
      int int0 = 2350;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(2350, int1);
      
      double double0 = 0.75;
      double double1 = FastMath.pow(double0, (double) int1);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
      assertTrue(int0 == int1);
      assertFalse(double1 == double0);
      assertEquals(2.4772450569185636E-294, double1, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.nextAfter(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(4.9E-324, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double2);
      assertFalse(double3 == double2);
      assertTrue(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertEquals(1.0, double3, 0.01D);
  }

  @Test
  public void test114()  throws Throwable  {
      long long0 = 4208363204685324176L;
      double double0 = FastMath.sinh((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test115()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.toRadians((double) float0);
      assertEquals((-0.017453292519943295), double0, 0.01D);
      
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.017301866053338645), double1, 0.01D);
  }

  @Test
  public void test116()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = FastMath.expm1((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = (-0.3058015757857271);
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      float float0 = (-1103.0939F);
      double double2 = FastMath.pow((double) float0, double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = (-738.863866287);
      double double1 = FastMath.expm1(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = (-741.8393);
      double double1 = FastMath.exp(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.signum(double1);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = (-0.3058015757857271);
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      
      double double2 = FastMath.signum(double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = 0.030589580535888672;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.03059912701512731, double1, 0.01D);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = 0.07490822288864472;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.07504880588537914, double1, 0.01D);
  }

  @Test
  public void test124()  throws Throwable  {
      double double0 = 0.0875862700108075;
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.08781127502621158, double1, 0.01D);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test126()  throws Throwable  {
      double double0 = 0.031;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.03099503697929222, double1, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      double double0 = 0.08371849358081818;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.08362100656848195, double1, 0.01D);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = (-0.1666666567325592);
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.16590454047035794), double1, 0.01D);
  }

  @Test
  public void test129()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.asinh((double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test130()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.tanh((double) float0);
      assertEquals((-0.7615941559557649), double0, 0.01D);
  }

  @Test
  public void test131()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tanh(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test132()  throws Throwable  {
      double double0 = 0.19999954120254515;
      double double1 = FastMath.tanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.19737487930078948, double1, 0.01D);
  }

  @Test
  public void test133()  throws Throwable  {
      double double0 = 0.19999998807907104;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.20133599038095068, double1, 0.01D);
  }

  @Test
  public void test134()  throws Throwable  {
      double double0 = (-3921.553473);
      double double1 = FastMath.tanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-1.1752011936438014), double2, 0.01D);
  }

  //@Test
  public void test135()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.sinh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test136()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5430806348152437, double1, 0.01D);
  }

  @Test
  public void test137()  throws Throwable  {
      double double0 = 2211.2176733925635;
      double double1 = FastMath.tanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.cosh(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.5430806348152437, double2, 0.01D);
  }

  @Test
  public void test138()  throws Throwable  {
      double double0 = (-0.3058015757857271);
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      
      double double2 = FastMath.expm1(double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test139()  throws Throwable  {
      double double0 = 0.07490822288864472;
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.toDegrees(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(57.29577951308232, double2, 0.01D);
  }

  @Test
  public void test140()  throws Throwable  {
      double double0 = (-1501.203);
      double double1 = FastMath.ulp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.2737367544323206E-13, double1, 0.01D);
  }
}
