/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:12:30 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class RealMatrixImplEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][4];
      double double0 = 282.1554;
      doubleArray0[0] = double0;
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(282.1554, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      int int0 = realMatrixImpl0.hashCode();
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(282.1554, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals((-2055139631), int0);
      
      try {
        double[] doubleArray2 = realMatrixImpl0.getRow(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][4];
      double double0 = 282.155439;
      doubleArray0[0] = double0;
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(282.155439, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.inverse();
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(282.155439, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.00354414575010195, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertNotNull(realMatrixImpl1);
      
      RealMatrixImpl realMatrixImpl2 = (RealMatrixImpl)realMatrixImpl0.getLUMatrix();
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl0, realMatrixImpl2);
      assertNotSame(realMatrixImpl2, realMatrixImpl0);
      assertNotSame(realMatrixImpl2, realMatrixImpl1);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl2));
      assertTrue(realMatrixImpl2.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl2.equals((Object)realMatrixImpl1));
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(282.155439, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl2.getColumnDimension());
      assertEquals(true, realMatrixImpl2.isSquare());
      assertEquals(1, realMatrixImpl2.getRowDimension());
      assertEquals(282.155439, realMatrixImpl2.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][4];
      double double0 = 282.155439;
      doubleArray0[0] = double0;
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(282.155439, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl0);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.transpose();
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(282.155439, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(282.155439, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl1);
      
      double double1 = 0.0;
      doubleArray0[0] = double1;
      boolean boolean0 = realMatrixImpl0.equals((Object) realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(282.155439, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 0;
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.getSubMatrix(int0, int0, int0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl1);
      
      boolean boolean0 = realMatrixImpl0.equals((Object) realMatrixImpl1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.transpose();
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl1);
      
      boolean boolean0 = realMatrixImpl0.equals((Object) realMatrixImpl1);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl0);
      
      int[] intArray0 = new int[2];
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.getSubMatrix(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(2, realMatrixImpl1.getColumnDimension());
      assertEquals(2, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl1);
      
      boolean boolean0 = realMatrixImpl0.equals((Object) realMatrixImpl1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(2, realMatrixImpl1.getColumnDimension());
      assertEquals(2, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      double[][] doubleArray0 = new double[1][4];
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(4, realMatrixImpl1.getColumnDimension());
      assertNotNull(realMatrixImpl1);
      
      // Undeclared exception!
      try {
        boolean boolean0 = realMatrixImpl1.equals((Object) realMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = realMatrixImpl0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 37;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(37, realMatrixImpl0.getRowDimension());
      assertEquals(37, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      String string0 = realMatrixImpl0.toString();
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(37, realMatrixImpl0.getRowDimension());
      assertEquals(37, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals("RealMatrixImpl{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      String string0 = realMatrixImpl0.toString();
      assertEquals("RealMatrixImpl{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[24];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(24, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getLUMatrix();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      int[] intArray0 = new int[1];
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.getSubMatrix(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl1);
      
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.solve((RealMatrix) realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][4];
      double double0 = 282.155439;
      doubleArray0[0] = double0;
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(282.155439, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      double[] doubleArray2 = realMatrixImpl0.solve(doubleArray1[0]);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(282.155439, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 11;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertEquals(11, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(11, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl0);
      
      double[] doubleArray0 = new double[4];
      try {
        double[] doubleArray1 = realMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      try {
        double[] doubleArray2 = realMatrixImpl0.solve(doubleArray1[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Matrix is singular.
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[14][7];
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(14, realMatrixImpl0.getRowDimension());
      assertEquals(7, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      try {
        double[] doubleArray1 = realMatrixImpl0.preMultiply(doubleArray0[9]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      double[] doubleArray1 = realMatrixImpl0.preMultiply(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertEquals(5, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      double[] doubleArray1 = new double[9];
      try {
        double[] doubleArray2 = realMatrixImpl0.operate(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      boolean boolean0 = false;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(3, realMatrixImpl0.getColumnDimension());
      assertEquals(8, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      double[] doubleArray1 = realMatrixImpl0.operate(doubleArray0[4]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(3, realMatrixImpl0.getColumnDimension());
      assertEquals(8, realMatrixImpl0.getRowDimension());
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      try {
        double double0 = realMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 54;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(54, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(54, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      double double0 = realMatrixImpl0.getTrace();
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(54, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(54, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][4];
      double double0 = 282.155439;
      doubleArray0[0] = double0;
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertEquals(282.155439, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      realMatrixImpl0.luDecompose();
      assertEquals(282.155439, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      boolean boolean0 = realMatrixImpl0.isSingular();
      assertEquals(282.155439, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      double double0 = 282.155439;
      doubleArray0[0] = double0;
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      int int0 = 0;
      realMatrixImpl0.setSubMatrix(doubleArray1, int0, int0);
      assertArrayEquals(new double[] {282.155439}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(282.155439, realMatrixImpl0.getNorm(), 0.01D);
      
      double double1 = realMatrixImpl0.getDeterminant();
      assertArrayEquals(new double[] {282.155439}, doubleArray0, 0.01);
      assertTrue(double1 == double0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(282.155439, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(282.155439, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      try {
        double double0 = realMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      double double0 = realMatrixImpl0.getDeterminant();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      int int0 = realMatrixImpl0.getRowDimension();
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, int0);
      
      try {
        double[] doubleArray2 = realMatrixImpl0.getColumn(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 54;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertEquals(54, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(54, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      int int1 = 0;
      double[] doubleArray0 = realMatrixImpl0.getColumn(int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(54, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(54, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      int int0 = realMatrixImpl0.hashCode();
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(1949881706, int0);
      
      try {
        double[] doubleArray1 = realMatrixImpl0.getRow(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 0;
      double[] doubleArray1 = realMatrixImpl0.getRow(int0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      int int0 = (-741);
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getColumnMatrix(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 37;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(37, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(37, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      int int1 = 0;
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.getColumnMatrix(int1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(37, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(37, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(37, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl0);
      
      int int0 = realMatrixImpl0.getRowDimension();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, int0);
      
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getRowMatrix(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 1;
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.getRowMatrix(int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl0);
      
      double[][] doubleArray1 = new double[2][2];
      int int0 = 0;
      try {
        realMatrixImpl0.setSubMatrix(doubleArray1, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(8, realMatrixImpl0.getRowDimension());
      assertEquals(6, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 11;
      try {
        realMatrixImpl0.setSubMatrix(doubleArray0, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[][] doubleArray1 = new double[10][4];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-731);
      double[] doubleArray0 = new double[19];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(19, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      double[][] doubleArray1 = new double[10][5];
      int int1 = 12;
      try {
        realMatrixImpl0.setSubMatrix(doubleArray1, int1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      double[][] doubleArray0 = new double[8][8];
      int int0 = (-2334);
      try {
        realMatrixImpl0.setSubMatrix(doubleArray0, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl0);
      
      int int0 = realMatrixImpl0.getRowDimension();
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, int0);
      
      int int1 = 7;
      assertFalse(int1 == int0);
      
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(int0, int0, int0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      int int0 = realMatrixImpl0.getRowDimension();
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(1, int0);
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(int0, int0, int0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(8, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 0;
      int int1 = (-1790);
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(int0, int0, int1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 20;
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(int0, int0, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      boolean boolean0 = false;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertEquals(3, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 32;
      int int1 = 2;
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(int0, int1, int1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      int[] intArray0 = new int[9];
      int int0 = (-3229);
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(int0, intArray0[2], intArray0[4], intArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      double double0 = realMatrixImpl0.getNorm();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      doubleArray0[1] = doubleArray0[0];
      assertNotNull(doubleArray0[1]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.preMultiply((RealMatrix) realMatrixImpl0);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertEquals(2, realMatrixImpl1.getColumnDimension());
      assertEquals(2, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[7][10];
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertEquals(10, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      double double0 = (-236.76413823781627);
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.scalarMultiply(double0);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(10, realMatrixImpl1.getColumnDimension());
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(10, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double double0 = 282.155439;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl0);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.scalarAdd(double0);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(282.155439, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(4, realMatrixImpl1.getColumnDimension());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(8, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl0);
      
      int int0 = 1;
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(int0, int0);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertNotNull(realMatrixImpl1);
      
      try {
        RealMatrixImpl realMatrixImpl2 = realMatrixImpl0.subtract(realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.subtract((RealMatrix) realMatrixImpl0);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(4, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl0);
      
      double[][] doubleArray1 = new double[10][9];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray1[1];
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray1[6];
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      doubleArray1[9] = doubleArray0;
      assertNotNull(doubleArray1[9]);
      
      boolean boolean0 = false;
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1, boolean0);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(2, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(10, realMatrixImpl1.getRowDimension());
      assertNotNull(realMatrixImpl1);
      
      try {
        RealMatrixImpl realMatrixImpl2 = realMatrixImpl0.subtract(realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl0);
      
      int int0 = 1;
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(int0, int0);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl1.isSquare());
      assertNotNull(realMatrixImpl1);
      
      try {
        RealMatrixImpl realMatrixImpl2 = realMatrixImpl1.add(realMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl0);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.add((RealMatrix) realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(4, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      int int0 = 37;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(37, realMatrixImpl0.getRowDimension());
      assertEquals(37, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      boolean boolean0 = false;
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0, boolean0);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(3, realMatrixImpl1.getColumnDimension());
      assertEquals(2, realMatrixImpl1.getRowDimension());
      assertNotNull(realMatrixImpl1);
      
      try {
        RealMatrixImpl realMatrixImpl2 = realMatrixImpl0.add(realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[8];
      doubleArray0[2] = doubleArray1;
      assertNotNull(doubleArray0[2]);
      
      boolean boolean0 = false;
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 1096;
      int int1 = 0;
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be postive
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 0;
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be postive
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      double double0 = (-1071.95);
      doubleArray1[1] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[2];
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double0;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(1071.95, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.inverse();
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(1071.95, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(9.328793320583982E-4, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(2, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(2, realMatrixImpl1.getColumnDimension());
      assertNotNull(realMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(6, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 1550;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertEquals(1550, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1550, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try {
        int[] intArray0 = realMatrixImpl0.getPermutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl0);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.copy();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertNotNull(realMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(6, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.preMultiply((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
      }
  }
}
