/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:16:39 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class RealMatrixImplEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 1;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      int int1 = (-14);
      try {
        double[] doubleArray0 = realMatrixImpl0.getRow(int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 111;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(111, realMatrixImpl0.getRowDimension());
      assertEquals(111, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getLUMatrix();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is singular
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 153.98873492425975;
      doubleArray0[0] = double0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {153.98873492425975}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(153.98873492425975, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.inverse();
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertArrayEquals(new double[] {153.98873492425975}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotNull(realMatrixImpl1);
      assertEquals(0.006493981527232209, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(153.98873492425975, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      
      RealMatrixImpl realMatrixImpl2 = (RealMatrixImpl)realMatrixImpl0.getLUMatrix();
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl2));
      assertTrue(realMatrixImpl2.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl2.equals((Object)realMatrixImpl1));
      assertArrayEquals(new double[] {153.98873492425975}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl0, realMatrixImpl2);
      assertNotSame(realMatrixImpl2, realMatrixImpl0);
      assertNotSame(realMatrixImpl2, realMatrixImpl1);
      assertNotNull(realMatrixImpl2);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(153.98873492425975, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(true, realMatrixImpl2.isSquare());
      assertEquals(1, realMatrixImpl2.getColumnDimension());
      assertEquals(1, realMatrixImpl2.getRowDimension());
      assertEquals(153.98873492425975, realMatrixImpl2.getNorm(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 865;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(865, realMatrixImpl0.getColumnDimension());
      assertEquals(865, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      
      int int1 = realMatrixImpl0.hashCode();
      assertEquals(1919430265, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(865, realMatrixImpl0.getColumnDimension());
      assertEquals(865, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 53;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(53, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(53, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      
      RealMatrixImpl realMatrixImpl1 = realMatrixImpl0.multiply(realMatrixImpl0);
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      assertEquals(53, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(53, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(53, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(53, realMatrixImpl1.getColumnDimension());
      
      boolean boolean0 = realMatrixImpl0.equals((Object) realMatrixImpl1);
      assertTrue(boolean0);
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertEquals(53, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(53, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(53, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(53, realMatrixImpl1.getColumnDimension());
  }

  @Test
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[14];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(14, realMatrixImpl0.getColumnDimension());
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0[0]);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(14, realMatrixImpl1.getRowDimension());
      
      boolean boolean0 = realMatrixImpl0.equals((Object) realMatrixImpl1);
      assertFalse(boolean0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(14, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(14, realMatrixImpl1.getRowDimension());
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 154.8970716;
      doubleArray0[0] = double0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {154.8970716}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(154.8970716, realMatrixImpl0.getNorm(), 0.01D);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.inverse();
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertArrayEquals(new double[] {154.8970716}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(154.8970716, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(0.006455899970674462, realMatrixImpl1.getNorm(), 0.01D);
      
      boolean boolean0 = realMatrixImpl0.equals((Object) realMatrixImpl1);
      assertFalse(boolean0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertArrayEquals(new double[] {154.8970716}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(154.8970716, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(0.006455899970674462, realMatrixImpl1.getNorm(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      
      boolean boolean0 = realMatrixImpl0.equals((Object) doubleArray0[4]);
      assertFalse(boolean0);
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
  }

  @Test
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(6, realMatrixImpl0.getRowDimension());
      
      String string0 = realMatrixImpl0.toString();
      assertEquals("RealMatrixImpl{{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}}", string0);
      assertNotNull(string0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(6, realMatrixImpl0.getRowDimension());
  }

  @Test
  public void test09()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      String string0 = realMatrixImpl0.toString();
      assertEquals("RealMatrixImpl{}", string0);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1.0E-11;
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[9][7];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertNotNull(realMatrixImpl0);
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(9.000000000000001E-11, realMatrixImpl0.getNorm(), 0.01D);
      
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Matrix is singular.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][10];
      int int0 = 53;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(53, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(53, realMatrixImpl0.getRowDimension());
      
      boolean boolean0 = realMatrixImpl0.equals((Object) realMatrixImpl0);
      assertTrue(boolean0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(53, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(53, realMatrixImpl0.getRowDimension());
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0, boolean0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(53, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(53, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(10, realMatrixImpl1.getColumnDimension());
      
      try {
        RealMatrix realMatrix0 = realMatrixImpl1.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      
      double[][] doubleArray1 = new double[3][4];
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(3, realMatrixImpl1.getRowDimension());
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(4, realMatrixImpl1.getColumnDimension());
      
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.solve((RealMatrix) realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = 865;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(865, realMatrixImpl0.getRowDimension());
      assertEquals(865, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      
      try {
        double[] doubleArray1 = realMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(3, realMatrixImpl0.getRowDimension());
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      try {
        double[] doubleArray2 = realMatrixImpl0.preMultiply(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[5];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      
      try {
        double[] doubleArray2 = realMatrixImpl0.operate(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(3, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      double[] doubleArray1 = realMatrixImpl0.operate(doubleArray0[0]);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(3, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 2528;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(2528, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2528, realMatrixImpl0.getRowDimension());
      
      double double0 = realMatrixImpl0.getTrace();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(2528, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2528, realMatrixImpl0.getRowDimension());
  }

  @Test
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(8, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(5, realMatrixImpl0.getColumnDimension());
      
      try {
        double double0 = realMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 154.8970716;
      doubleArray0[0] = double0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {154.8970716}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(154.8970716, realMatrixImpl0.getNorm(), 0.01D);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.inverse();
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertArrayEquals(new double[] {154.8970716}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotNull(realMatrixImpl1);
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(0.006455899970674462, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(154.8970716, realMatrixImpl0.getNorm(), 0.01D);
      
      double double1 = realMatrixImpl0.getDeterminant();
      assertEquals(154.8970716, double1, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertArrayEquals(new double[] {154.8970716}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(154.8970716, realMatrixImpl0.getNorm(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(5, realMatrixImpl0.getRowDimension());
      
      try {
        double double0 = realMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      
      double double0 = realMatrixImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(5, realMatrixImpl0.getRowDimension());
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.transpose();
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotNull(realMatrixImpl1);
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(4, realMatrixImpl1.getRowDimension());
      assertEquals(5, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(5, realMatrixImpl0.getRowDimension());
  }

  @Test
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(6, realMatrixImpl0.getRowDimension());
      
      int int0 = (-539);
      try {
        double[] doubleArray1 = realMatrixImpl0.getColumn(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(6, realMatrixImpl0.getRowDimension());
      
      int int0 = 0;
      double[] doubleArray1 = realMatrixImpl0.getColumn(int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(6, realMatrixImpl0.getRowDimension());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 1;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      
      try {
        double[] doubleArray0 = realMatrixImpl0.getRow(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(5, realMatrixImpl0.getRowDimension());
      
      int int0 = 0;
      double[] doubleArray1 = realMatrixImpl0.getRow(int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(5, realMatrixImpl0.getRowDimension());
  }

  @Test
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertNotNull(realMatrixImpl0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(5, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      int int0 = 707;
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getColumnMatrix(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      
      int int0 = 0;
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.getColumnMatrix(int0);
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(7, realMatrixImpl1.getRowDimension());
  }

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      
      int int0 = 3140;
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getRowMatrix(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      double[][] doubleArray0 = new double[1][1];
      boolean boolean0 = false;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertNotNull(realMatrixImpl0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.getRowMatrix(int0);
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotNull(realMatrixImpl1);
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
  }

  @Test
  public void test31()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(5, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      
      int int0 = 0;
      int int1 = realMatrixImpl0.getRowDimension();
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals(5, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      
      try {
        realMatrixImpl0.setSubMatrix(doubleArray0, int1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 70;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      double[][] doubleArray0 = new double[2][7];
      try {
        realMatrixImpl0.setSubMatrix(doubleArray0, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must be initialized to perfom this method
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      
      int int0 = 7;
      int int1 = (-653);
      try {
        realMatrixImpl0.setSubMatrix(doubleArray0, int0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      boolean boolean0 = false;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertNotNull(realMatrixImpl0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      int[] intArray0 = new int[4];
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.getSubMatrix(intArray0, intArray0);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotNull(realMatrixImpl1);
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(4, realMatrixImpl1.getColumnDimension());
      assertEquals(4, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
  }

  @Test
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[24];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(24, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      
      int int0 = 0;
      int int1 = 2375;
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(int0, int0, int0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      
      int int0 = 0;
      int int1 = 528;
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(int0, int0, int1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      
      int int0 = 0;
      int int1 = (-530);
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(int0, int0, int1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      int int0 = 0;
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.getSubMatrix(int0, int0, int0, int0);
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotNull(realMatrixImpl1);
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
  }

  @Test
  public void test40()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertNotNull(realMatrixImpl0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(7, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      
      int int0 = 0;
      int int1 = 2721;
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(int0, int1, int1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      int int0 = 0;
      int int1 = (-2718);
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(int0, int1, int1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      int int0 = 865;
      int int1 = (-1277);
      try {
        RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(int1, int0, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      
      double double0 = realMatrixImpl0.getNorm();
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      
      int int0 = 865;
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(int0, int0);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      assertEquals(865, realMatrixImpl1.getColumnDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(865, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      
      try {
        RealMatrix realMatrix0 = realMatrixImpl1.preMultiply((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double double0 = (-2590.48628);
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(3, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.scalarMultiply(double0);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotNull(realMatrixImpl1);
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(3, realMatrixImpl1.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(3, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double double0 = (-23.08294366247);
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertNotNull(realMatrixImpl0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(6, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.scalarAdd(double0);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotNull(realMatrixImpl1);
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(6, realMatrixImpl1.getColumnDimension());
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(23.08294366247, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(6, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
  }

  @Test
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      
      double[] doubleArray1 = realMatrixImpl0.preMultiply(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotNull(realMatrixImpl1);
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      
      try {
        RealMatrixImpl realMatrixImpl2 = realMatrixImpl0.subtract(realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      
      RealMatrixImpl realMatrixImpl1 = realMatrixImpl0.subtract(realMatrixImpl0);
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotNull(realMatrixImpl1);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(4, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
  }

  @Test
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      
      double[][] doubleArray1 = new double[6][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(6, realMatrixImpl1.getColumnDimension());
      assertEquals(6, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      
      try {
        RealMatrixImpl realMatrixImpl2 = realMatrixImpl1.subtract(realMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      double[][] doubleArray1 = new double[10][5];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      doubleArray1[9] = doubleArray0;
      assertNotNull(doubleArray1[9]);
      
      boolean boolean0 = false;
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1, boolean0);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(10, realMatrixImpl1.getRowDimension());
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      
      try {
        RealMatrixImpl realMatrixImpl2 = realMatrixImpl0.add(realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.add((RealMatrix) realMatrixImpl0);
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(5, realMatrixImpl1.getRowDimension());
      assertEquals(4, realMatrixImpl1.getColumnDimension());
  }

  @Test
  public void test52()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[6];
      boolean boolean0 = false;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(6, realMatrixImpl1.getRowDimension());
      
      try {
        RealMatrixImpl realMatrixImpl2 = realMatrixImpl0.add(realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      boolean boolean0 = false;
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[24];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(24, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      
      boolean boolean0 = realMatrixImpl0.isSingular();
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(24, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      
      double[][] doubleArray1 = new double[9][7];
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1, boolean0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(24, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(9, realMatrixImpl1.getRowDimension());
      assertEquals(7, realMatrixImpl1.getColumnDimension());
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = 17;
      int int1 = (-1071);
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be postive
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = 0;
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be postive
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 6.077760867023175;
      doubleArray0[0] = double0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {6.077760867023175}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(6.077760867023175, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      double[] doubleArray1 = realMatrixImpl0.solve(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.077760867023175}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6.077760867023175, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
  }

  @Test
  public void test58()  throws Throwable  {
      int int0 = 865;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(865, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(865, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      
      // Undeclared exception!
      try {
        int[] intArray0 = realMatrixImpl0.getPermutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(8, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.copy();
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotNull(realMatrixImpl1);
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01D);
      assertEquals(8, realMatrixImpl1.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(8, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
  }
}
