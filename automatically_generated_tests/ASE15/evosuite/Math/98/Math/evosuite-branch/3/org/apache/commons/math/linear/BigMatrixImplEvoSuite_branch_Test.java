/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:23:02 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.linear.BigMatrix;
import org.apache.commons.math.linear.BigMatrixImpl;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.MatrixIndexException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class BigMatrixImplEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      int int0 = (-222);
      BigDecimal bigDecimal0 = new BigDecimal(int0);
      assertEquals(-222, bigDecimal0.shortValue());
      assertEquals(34, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(-222, bigDecimal0.shortValue());
      assertEquals(34, bigDecimal0.byteValue());
      assertEquals(-222, bigDecimalArray0[0].shortValue());
      assertEquals(34, bigDecimalArray0[0].byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(-222, bigDecimal1.shortValue());
      assertEquals(34, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getLUMatrix();
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotNull(bigMatrixImpl1);
  }

  @Test
  public void test01()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[5];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimalArray1[0].byteValue());
      assertEquals(1, bigDecimalArray1[0].shortValue());
      assertNotNull(bigDecimalArray1[0]);
      
      bigDecimalArray1[1] = bigDecimal0;
      assertEquals(1, bigDecimalArray1[1].shortValue());
      assertEquals(1, bigDecimalArray1[1].byteValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertNotNull(bigDecimalArray1[1]);
      
      bigDecimalArray1[2] = bigDecimalArray1[1];
      assertEquals(1, bigDecimalArray1[2].shortValue());
      assertEquals(1, bigDecimalArray1[2].byteValue());
      assertNotNull(bigDecimalArray1[2]);
      
      bigDecimalArray1[3] = bigDecimalArray1[0];
      assertEquals(1, bigDecimalArray1[3].shortValue());
      assertEquals(1, bigDecimalArray1[3].byteValue());
      assertNotNull(bigDecimalArray1[3]);
      
      bigDecimalArray1[4] = bigDecimal0;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimalArray1[4].shortValue());
      assertEquals(1, bigDecimalArray1[4].byteValue());
      assertNotNull(bigDecimalArray1[4]);
      
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = bigMatrixImpl0.hashCode();
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1190520503, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 184;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(int0, int0);
      assertEquals(184, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(184, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigMatrixImpl0.equals(object0);
      assertEquals(184, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(184, bigMatrixImpl0.getRowDimension());
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      boolean boolean0 = bigMatrixImpl0.equals((Object) bigMatrixImpl0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[4][4];
      bigDecimalArray1[0] = bigDecimalArray0;
      assertNotNull(bigDecimalArray1[0]);
      
      bigDecimalArray1[1] = bigDecimalArray0;
      assertNotNull(bigDecimalArray1[1]);
      
      bigDecimalArray1[2] = bigDecimalArray0;
      assertNotNull(bigDecimalArray1[2]);
      
      bigDecimalArray1[3] = bigDecimalArray1[0];
      assertNotNull(bigDecimalArray1[3]);
      
      boolean boolean0 = true;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1, boolean0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotNull(bigMatrixImpl1);
      
      boolean boolean1 = bigMatrixImpl1.equals((Object) bigMatrixImpl0);
      assertFalse(boolean0 == boolean1);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(boolean1 == boolean0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertFalse(boolean1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 17;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(int0, int0);
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(17, bigMatrixImpl0.getColumnDimension());
      assertEquals(17, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      String string0 = bigMatrixImpl0.toString();
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(17, bigMatrixImpl0.getColumnDimension());
      assertEquals(17, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals("BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null}}", string0);
      assertNotNull(string0);
  }

  @Test
  public void test06()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      String string0 = bigMatrixImpl0.toString();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals("BigMatrixImpl{}", string0);
      assertNotNull(string0);
  }

  @Test
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      try {
        BigDecimal[] bigDecimalArray2 = bigMatrixImpl0.solve(bigDecimalArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][2];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[3];
      boolean boolean0 = true;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, boolean0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(2, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(3, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotNull(bigMatrixImpl1);
      
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl1.solve((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 184;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(int0, int0);
      assertEquals(184, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(184, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray0 = new double[5];
      try {
        BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      int int0 = (-1328);
      BigDecimal bigDecimal0 = new BigDecimal(int0);
      assertEquals(-1328, bigDecimal0.shortValue());
      assertEquals(-48, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(-48, bigDecimalArray0[0].byteValue());
      assertEquals(-1328, bigDecimalArray0[0].shortValue());
      assertEquals(-1328, bigDecimal0.shortValue());
      assertEquals(-48, bigDecimal0.byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      bigDecimalArray0[1] = bigDecimalArray0[0];
      assertEquals(-48, bigDecimalArray0[1].byteValue());
      assertEquals(-1328, bigDecimalArray0[1].shortValue());
      assertNotNull(bigDecimalArray0[1]);
      
      bigDecimalArray0[2] = bigDecimal0;
      assertEquals(-1328, bigDecimal0.shortValue());
      assertEquals(-48, bigDecimal0.byteValue());
      assertEquals(-48, bigDecimalArray0[2].byteValue());
      assertEquals(-1328, bigDecimalArray0[2].shortValue());
      assertNotNull(bigDecimalArray0[2]);
      
      bigDecimalArray0[3] = bigDecimal0;
      assertEquals(-1328, bigDecimal0.shortValue());
      assertEquals(-48, bigDecimal0.byteValue());
      assertEquals(-1328, bigDecimalArray0[3].shortValue());
      assertEquals(-48, bigDecimalArray0[3].byteValue());
      assertNotNull(bigDecimalArray0[3]);
      
      bigDecimalArray0[4] = bigDecimal0;
      assertEquals(-1328, bigDecimal0.shortValue());
      assertEquals(-48, bigDecimal0.byteValue());
      assertEquals(-48, bigDecimalArray0[4].byteValue());
      assertEquals(-1328, bigDecimalArray0[4].shortValue());
      assertNotNull(bigDecimalArray0[4]);
      
      bigDecimalArray0[5] = bigDecimalArray0[3];
      assertEquals(-48, bigDecimalArray0[5].byteValue());
      assertEquals(-1328, bigDecimalArray0[5].shortValue());
      assertNotNull(bigDecimalArray0[5]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(6, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.preMultiply(bigDecimalArray0);
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertFalse(bigDecimalArray0.equals((Object)bigDecimalArray1));
      assertEquals(6, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotNull(bigDecimalArray1);
  }

  @Test
  public void test12()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][8];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[3];
      boolean boolean0 = true;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, boolean0);
      assertEquals(8, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      try {
        BigDecimal[] bigDecimalArray2 = bigMatrixImpl0.preMultiply(bigDecimalArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.operate(bigDecimalArray0);
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertFalse(bigDecimalArray0.equals((Object)bigDecimalArray1));
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotNull(bigDecimalArray1);
  }

  @Test
  public void test14()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(6, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray0 = new double[8];
      try {
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 177;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(int0, int0);
      assertEquals(177, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(177, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = bigMatrixImpl0.getTrace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      try {
        BigDecimal bigDecimal0 = bigMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      boolean boolean0 = false;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, boolean0);
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      BigDecimal bigDecimal0 = bigMatrixImpl0.getTrace();
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNull(bigDecimal0);
  }

  @Test
  public void test18()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      boolean boolean0 = bigMatrixImpl0.isSingular();
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(boolean0);
      
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.solve(bigDecimalArray0);
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertFalse(bigDecimalArray0.equals((Object)bigDecimalArray1));
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotNull(bigDecimalArray1);
  }

  @Test
  public void test19()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimalArray0[0].shortValue());
      assertEquals(0, bigDecimalArray0[0].byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(0, bigDecimal1.byteValue());
      assertEquals(0, bigDecimal1.shortValue());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test
  public void test20()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[8];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(8, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      try {
        BigDecimal bigDecimal0 = bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.transpose();
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl1);
  }

  @Test
  public void test22()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      double[] doubleArray0 = bigMatrixImpl0.getColumnAsDoubleArray(int0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 802;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(int0, int0);
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(802, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(802, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      try {
        double[] doubleArray0 = bigMatrixImpl0.getColumnAsDoubleArray(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = (-2249);
      try {
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.getColumn(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[5];
      int int0 = 0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.getColumn(int0);
      assertFalse(bigDecimalArray0.equals((Object)bigDecimalArray1));
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertNotNull(bigDecimalArray1);
  }

  @Test
  public void test26()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[5];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      double[] doubleArray0 = bigMatrixImpl0.getRowAsDoubleArray(int0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test27()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = (-39);
      try {
        double[] doubleArray0 = bigMatrixImpl0.getRowAsDoubleArray(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 4089;
      try {
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.getRow(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(9, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.getRow(int0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(9, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigDecimalArray0);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 184;
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[5][8];
      boolean boolean0 = true;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, boolean0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(8, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.getColumnMatrix(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getColumnMatrix(int0);
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotNull(bigMatrixImpl1);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 64;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(int0, int0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.getRowMatrix(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      boolean boolean0 = false;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, boolean0);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getRowMatrix(int0);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(10, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertNotNull(bigMatrixImpl1);
  }

  @Test
  public void test34()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      int int0 = 7;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(int0, int0);
      assertEquals(7, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int1 = 0;
      try {
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, int1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      int int0 = 7;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(int0, int0);
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertEquals(7, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      try {
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[6][6];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[5];
      bigDecimalArray0[2] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[2]);
      
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[4][3];
      int int0 = 0;
      int int1 = (-1527);
      try {
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, int0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[10];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(10, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      int int1 = (-931);
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.getSubMatrix(int0, int0, int0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(7, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 1;
      int int1 = 1431;
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.getSubMatrix(int0, int1, int1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(7, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = (-2897);
      int int1 = 0;
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.getSubMatrix(int1, int0, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[10];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(10, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getSubMatrix(int0, int0, int0, int0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(10, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotNull(bigMatrixImpl1);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = (-2272);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.getSubMatrix(int0, int0, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      int int0 = (-1);
      BigDecimal bigDecimal0 = new BigDecimal(int0);
      assertEquals(-1, bigDecimal0.byteValue());
      assertEquals(-1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      assertEquals(-1, bigDecimalArray1[0].byteValue());
      assertEquals(-1, bigDecimalArray1[0].shortValue());
      assertEquals(-1, bigDecimal0.byteValue());
      assertEquals(-1, bigDecimal0.shortValue());
      assertNotNull(bigDecimalArray1[0]);
      
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal1 = bigMatrixImpl0.getNorm();
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigDecimal1.byteValue());
      assertEquals(1, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test
  public void test44()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][8];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[3];
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigDecimalArray1[0].shortValue());
      assertEquals(0, bigDecimalArray1[0].byteValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimalArray1[0]);
      
      bigDecimalArray1[1] = bigDecimalArray1[0];
      assertEquals(0, bigDecimalArray1[1].shortValue());
      assertEquals(0, bigDecimalArray1[1].byteValue());
      assertNotNull(bigDecimalArray1[1]);
      
      bigDecimalArray1[2] = bigDecimal0;
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigDecimalArray1[2].shortValue());
      assertEquals(0, bigDecimalArray1[2].byteValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimalArray1[2]);
      
      boolean boolean0 = true;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, boolean0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(3, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      double[][] doubleArray0 = bigMatrixImpl0.getDataAsDoubleArray();
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(3, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(doubleArray0);
  }

  @Test
  public void test45()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][4];
      boolean boolean0 = false;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, boolean0);
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      try {
        BigMatrixImpl bigMatrixImpl1 = bigMatrixImpl0.multiply(bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[5];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      assertEquals(1, bigDecimalArray1[0].shortValue());
      assertEquals(1, bigDecimalArray1[0].byteValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertNotNull(bigDecimalArray1[0]);
      
      bigDecimalArray1[1] = bigDecimalArray1[0];
      assertEquals(1, bigDecimalArray1[1].byteValue());
      assertEquals(1, bigDecimalArray1[1].shortValue());
      assertNotNull(bigDecimalArray1[1]);
      
      bigDecimalArray1[2] = bigDecimalArray1[0];
      assertEquals(1, bigDecimalArray1[2].byteValue());
      assertEquals(1, bigDecimalArray1[2].shortValue());
      assertNotNull(bigDecimalArray1[2]);
      
      bigDecimalArray1[3] = bigDecimalArray1[0];
      assertEquals(1, bigDecimalArray1[3].shortValue());
      assertEquals(1, bigDecimalArray1[3].byteValue());
      assertNotNull(bigDecimalArray1[3]);
      
      bigDecimalArray1[4] = bigDecimalArray1[2];
      assertEquals(1, bigDecimalArray1[4].shortValue());
      assertEquals(1, bigDecimalArray1[4].byteValue());
      assertNotNull(bigDecimalArray1[4]);
      
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarMultiply(bigDecimal0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(5, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotNull(bigMatrixImpl1);
  }

  @Test
  public void test47()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][2];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimalArray1[0].shortValue());
      assertEquals(0, bigDecimalArray1[0].byteValue());
      assertNotNull(bigDecimalArray1[0]);
      
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarAdd(bigDecimalArray1[0]);
      assertTrue(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotNull(bigMatrixImpl1);
  }

  @Test
  public void test48()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[5];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimalArray1[0].byteValue());
      assertEquals(1, bigDecimalArray1[0].shortValue());
      assertNotNull(bigDecimalArray1[0]);
      
      bigDecimalArray1[1] = bigDecimal0;
      assertEquals(1, bigDecimalArray1[1].shortValue());
      assertEquals(1, bigDecimalArray1[1].byteValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertNotNull(bigDecimalArray1[1]);
      
      bigDecimalArray1[2] = bigDecimal0;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimalArray1[2].byteValue());
      assertEquals(1, bigDecimalArray1[2].shortValue());
      assertNotNull(bigDecimalArray1[2]);
      
      bigDecimalArray1[3] = bigDecimalArray1[0];
      assertEquals(1, bigDecimalArray1[3].shortValue());
      assertEquals(1, bigDecimalArray1[3].byteValue());
      assertNotNull(bigDecimalArray1[3]);
      
      bigDecimalArray1[4] = bigDecimalArray1[2];
      assertEquals(1, bigDecimalArray1[4].byteValue());
      assertEquals(1, bigDecimalArray1[4].shortValue());
      assertNotNull(bigDecimalArray1[4]);
      
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = bigMatrixImpl0.subtract(bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(5, bigMatrixImpl1.getColumnDimension());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotNull(bigMatrixImpl1);
  }

  @Test
  public void test49()  throws Throwable  {
      int int0 = 1411;
      int int1 = 1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1411, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[19];
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(19, bigMatrixImpl1.getRowDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotNull(bigMatrixImpl1);
      
      try {
        BigMatrixImpl bigMatrixImpl2 = bigMatrixImpl0.subtract(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(10, bigMatrixImpl1.getColumnDimension());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotNull(bigMatrixImpl1);
      
      try {
        BigMatrixImpl bigMatrixImpl2 = bigMatrixImpl1.subtract(bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[5];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimalArray1[0].byteValue());
      assertEquals(1, bigDecimalArray1[0].shortValue());
      assertNotNull(bigDecimalArray1[0]);
      
      bigDecimalArray1[1] = bigDecimalArray1[0];
      assertEquals(1, bigDecimalArray1[1].byteValue());
      assertEquals(1, bigDecimalArray1[1].shortValue());
      assertNotNull(bigDecimalArray1[1]);
      
      bigDecimalArray1[2] = bigDecimalArray1[0];
      assertEquals(1, bigDecimalArray1[2].shortValue());
      assertEquals(1, bigDecimalArray1[2].byteValue());
      assertNotNull(bigDecimalArray1[2]);
      
      bigDecimalArray1[3] = bigDecimalArray1[0];
      assertEquals(1, bigDecimalArray1[3].byteValue());
      assertEquals(1, bigDecimalArray1[3].shortValue());
      assertNotNull(bigDecimalArray1[3]);
      
      bigDecimalArray1[4] = bigDecimal0;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimalArray1[4].byteValue());
      assertEquals(1, bigDecimalArray1[4].shortValue());
      assertNotNull(bigDecimalArray1[4]);
      
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.add((BigMatrix) bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(5, bigMatrixImpl1.getColumnDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotNull(bigMatrixImpl1);
  }

  @Test
  public void test52()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[1][5];
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      
      boolean boolean0 = true;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1, boolean0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(5, bigMatrixImpl1.getColumnDimension());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertNotNull(bigMatrixImpl1);
      
      try {
        BigMatrixImpl bigMatrixImpl2 = bigMatrixImpl1.add(bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      String[][] stringArray0 = new String[11][2];
      String[] stringArray1 = new String[22];
      stringArray0[0] = stringArray1;
      assertNotNull(stringArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      String[][] stringArray0 = new String[11][2];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[26];
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
  }

  @Test
  public void test57()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[7][5];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[9];
      bigDecimalArray0[1] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[1]);
      
      boolean boolean0 = false;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      int[] intArray0 = new int[2];
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(2, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(2, bigMatrixImpl1.getRowDimension());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotNull(bigMatrixImpl1);
  }

  @Test
  public void test59()  throws Throwable  {
      int int0 = 24;
      int int1 = (-469);
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
      }
  }

  @Test
  public void test60()  throws Throwable  {
      int int0 = (-1);
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
      }
  }

  @Test
  public void test61()  throws Throwable  {
      int int0 = (-245);
      double[][] doubleArray0 = new double[1][9];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(9, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      bigMatrixImpl0.setScale(int0);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(-245, bigMatrixImpl0.getScale());
      assertEquals(9, bigMatrixImpl0.getColumnDimension());
  }

  @Test
  public void test62()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try {
        int[] intArray0 = bigMatrixImpl0.getPermutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test63()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.inverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test64()  throws Throwable  {
      int int0 = 184;
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[5][8];
      boolean boolean0 = true;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, boolean0);
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertEquals(8, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      bigMatrixImpl0.setRoundingMode(int0);
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertEquals(8, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(184, bigMatrixImpl0.getRoundingMode());
  }

  @Test
  public void test65()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.preMultiply((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test66()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      boolean boolean0 = false;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, boolean0);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        double double0 = bigMatrixImpl0.getEntryAsDouble(int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test67()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][8];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[3];
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimalArray1[0].shortValue());
      assertEquals(0, bigDecimalArray1[0].byteValue());
      assertNotNull(bigDecimalArray1[0]);
      
      bigDecimalArray1[1] = bigDecimalArray1[0];
      assertEquals(0, bigDecimalArray1[1].shortValue());
      assertEquals(0, bigDecimalArray1[1].byteValue());
      assertNotNull(bigDecimalArray1[1]);
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(1, bigDecimal1.shortValue());
      assertEquals(1, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      
      bigDecimalArray1[2] = bigDecimal1;
      assertEquals(1, bigDecimalArray1[2].byteValue());
      assertEquals(1, bigDecimalArray1[2].shortValue());
      assertEquals(1, bigDecimal1.shortValue());
      assertEquals(1, bigDecimal1.byteValue());
      assertNotNull(bigDecimalArray1[2]);
      
      boolean boolean0 = true;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, boolean0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(3, bigMatrixImpl1.getRowDimension());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotNull(bigMatrixImpl1);
      
      BigMatrixImpl bigMatrixImpl2 = bigMatrixImpl0.multiply(bigMatrixImpl1);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertEquals(3, bigMatrixImpl1.getRowDimension());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(1, bigMatrixImpl2.getRowDimension());
      assertEquals(true, bigMatrixImpl2.isSquare());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotNull(bigMatrixImpl2);
      
      double[] doubleArray0 = new double[1];
      BigDecimal[] bigDecimalArray2 = bigMatrixImpl2.solve(doubleArray0);
      assertFalse(bigDecimalArray2.equals((Object)bigDecimalArray1));
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertEquals(3, bigMatrixImpl1.getRowDimension());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(1, bigMatrixImpl2.getRowDimension());
      assertEquals(true, bigMatrixImpl2.isSquare());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(bigDecimalArray2, bigDecimalArray1);
      assertNotSame(bigDecimalArray1, bigDecimalArray2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotNull(bigDecimalArray2);
  }

  @Test
  public void test68()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(9, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = bigMatrixImpl0.getScale();
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(9, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, int0);
  }

  @Test
  public void test69()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test70()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = bigMatrixImpl0.getRoundingMode();
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertEquals(4, int0);
  }
}
