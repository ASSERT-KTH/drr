/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:59:20 GMT 2014
 */

package org.apache.commons.math.geometry.euclidean.threed;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.geometry.Vector;
import org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException;
import org.apache.commons.math.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException;
import org.apache.commons.math.geometry.euclidean.threed.Rotation;
import org.apache.commons.math.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class RotationEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 0.8538810116934062;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      
      double double1 = (-0.21222560656618214);
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertFalse(double0 == double1);
      
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray0, double1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unable to orthogonalize matrix in 10 iterations
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      double double0 = 604.966369;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals((-0.7772540904243443), rotation0.getQ1(), 0.01D);
      assertEquals(2.8787833738834, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals((-0.615392603281304), rotation0.getQ3(), 0.01D);
      assertEquals((-0.13102680162960875), rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder1 = null;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertNotNull(doubleArray0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals((-0.7772540904243443), rotation0.getQ1(), 0.01D);
      assertEquals(2.8787833738834, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals((-0.615392603281304), rotation0.getQ3(), 0.01D);
      assertEquals((-0.13102680162960875), rotation0.getQ0(), 0.01D);
      assertArrayEquals(new double[] {0.20978318396478762, 1.7805795107596842, (-2.9318094696250054)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      double double0 = 604.966369;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals((-0.615392603281304), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals((-0.13102680162960875), rotation0.getQ0(), 0.01D);
      assertEquals(2.8787833738834, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7772540904243443), rotation0.getQ1(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals((-0.615392603281304), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals((-0.13102680162960875), rotation0.getQ0(), 0.01D);
      assertEquals(2.8787833738834, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7772540904243443), rotation0.getQ1(), 0.01D);
      assertArrayEquals(new double[] {1.7805795107596842, 1.7805795107596842, 1.7805795107596842}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = false;
      double double0 = 0.0;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA1();
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals("ZXZ", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      
      double double0 = 0.0;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      
      Vector3D vector3D1 = Vector3D.MINUS_I;
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D0, vector3D1);
      assertNotNull(rotation0);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.7071067811865475, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 0.25;
      boolean boolean0 = true;
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertArrayEquals(new double[] {3.141592653589793, 1.5707963267948966, 1.5707963267948966}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 1.0;
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(1.9390875288225067, rotation0.getAngle(), 0.01D);
      assertEquals(0.5656758145325667, rotation0.getQ0(), 0.01D);
      assertEquals((-0.5709414713577319), rotation0.getQ3(), 0.01D);
      assertEquals((-0.5709414713577319), rotation0.getQ2(), 0.01D);
      assertEquals((-0.16751879124639693), rotation0.getQ1(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      
      RotationOrder rotationOrder1 = RotationOrder.YXY;
      assertNotNull(rotationOrder1);
      assertEquals("YXY", rotationOrder1.toString());
      assertNotSame(rotationOrder1, rotationOrder0);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertNotNull(doubleArray0);
      assertEquals(1.9390875288225067, rotation0.getAngle(), 0.01D);
      assertEquals(0.5656758145325667, rotation0.getQ0(), 0.01D);
      assertEquals((-0.5709414713577319), rotation0.getQ3(), 0.01D);
      assertEquals((-0.5709414713577319), rotation0.getQ2(), 0.01D);
      assertEquals((-0.16751879124639693), rotation0.getQ1(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals("YXY", rotationOrder1.toString());
      assertArrayEquals(new double[] {(-0.49536728921867335), 1.2745557823062943, 2.075429037576223}, doubleArray0, 0.01);
      assertNotSame(rotationOrder0, rotationOrder1);
      assertNotSame(rotationOrder1, rotationOrder0);
      assertFalse(rotationOrder0.equals((Object)rotationOrder1));
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      
      double double0 = 0.0;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-682.334);
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      Vector3D vector3D1 = new Vector3D(double0, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(682.334, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getAlpha(), 0.01D);
      assertEquals(465579.6875559999, vector3D1.getNormSq(), 0.01D);
      assertEquals(682.334, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(682.334, vector3D1.getNormInf(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals((-682.334), vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1);
      assertNotNull(rotation0);
      assertEquals(682.334, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getAlpha(), 0.01D);
      assertEquals(465579.6875559999, vector3D1.getNormSq(), 0.01D);
      assertEquals(682.334, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(682.334, vector3D1.getNormInf(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals((-682.334), vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ3(), 0.01D);
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals((-1.0), vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals((-1.0), vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = null;
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      double double0 = 604.966369355;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(2.8787829911156844, rotation0.getAngle(), 0.01D);
      assertEquals((-0.615392421828831), rotation0.getQ1(), 0.01D);
      assertEquals((-0.7772542021049951), rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals((-0.13102699136350932), rotation0.getQ0(), 0.01D);
      assertEquals("XYX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals(2.8787829911156844, rotation0.getAngle(), 0.01D);
      assertEquals((-0.615392421828831), rotation0.getQ1(), 0.01D);
      assertEquals((-0.7772542021049951), rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals((-0.13102699136350932), rotation0.getQ0(), 0.01D);
      assertEquals("XYX", rotationOrder0.toString());
      assertArrayEquals(new double[] {1.7805798657596816, 1.780579865759682, 1.7805798657596816}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      double double0 = 3053.3519385722275;
      double double1 = 0.0;
      double double2 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double1, double2, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(3053.3519385722275, rotation0.getQ2(), 0.01D);
      assertEquals(3053.3519385722275, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 0.25;
      double double1 = (-1.0);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double1, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.22941573387056174, rotation0.getQ1(), 0.01D);
      assertEquals(0.22941573387056174, rotation0.getQ0(), 0.01D);
      assertEquals((-0.917662935482247), rotation0.getQ2(), 0.01D);
      assertEquals(2.678637925649435, rotation0.getAngle(), 0.01D);
      assertEquals(0.22941573387056174, rotation0.getQ3(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("ZYX", rotationOrder0.toString());
      assertEquals(0.22941573387056174, rotation0.getQ1(), 0.01D);
      assertEquals(0.22941573387056174, rotation0.getQ0(), 0.01D);
      assertEquals((-0.917662935482247), rotation0.getQ2(), 0.01D);
      assertEquals(2.678637925649435, rotation0.getAngle(), 0.01D);
      assertEquals(0.22941573387056174, rotation0.getQ3(), 0.01D);
      assertArrayEquals(new double[] {(-2.5535900500422257), 0.3212885892648103, (-2.5535900500422257)}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = (-2927.455);
      boolean boolean0 = false;
      double double1 = 4201.8;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals((-2927.455), rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals((-2927.455), rotation0.getQ1(), 0.01D);
      assertEquals(4201.8, rotation0.getQ3(), 0.01D);
      assertEquals((-2927.455), rotation0.getQ0(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 0.25;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-727.34);
      double double2 = 13.07;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double1, double2, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(13.07, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals((-727.34), rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 0.8538810116934062;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertArrayEquals(new double[] {(-1.5707963267948966), 0.0, (-1.5707963267948966)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      double double0 = 0.0;
      double double1 = 2339.19;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double1, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(2339.19, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 1108.24;
      Rotation rotation1 = new Rotation(rotationOrder0, double1, double2, double0);
      assertNotNull(rotation1);
      assertEquals((-0.5627008533356339), rotation1.getQ1(), 0.01D);
      assertEquals(0.21896549991352657, rotation1.getQ0(), 0.01D);
      assertEquals(2.7000844234876213, rotation1.getAngle(), 0.01D);
      assertEquals((-0.28907561338787313), rotation1.getQ2(), 0.01D);
      assertEquals(0.7428708832949328, rotation1.getQ3(), 0.01D);
      assertEquals("YXZ", rotationOrder0.toString());
      assertNotSame(rotation1, rotation0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      Rotation rotation2 = rotation0.applyTo(rotation1);
      assertNotNull(rotation2);
      assertEquals(2339.19, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals((-0.5627008533356339), rotation1.getQ1(), 0.01D);
      assertEquals(0.21896549991352657, rotation1.getQ0(), 0.01D);
      assertEquals(2.7000844234876213, rotation1.getAngle(), 0.01D);
      assertEquals((-0.28907561338787313), rotation1.getQ2(), 0.01D);
      assertEquals(0.7428708832949328, rotation1.getQ3(), 0.01D);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals((-1737.7161414946738), rotation2.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation2.getAngle(), 0.01D);
      assertEquals(512.2019077427223, rotation2.getQ2(), 0.01D);
      assertEquals(676.202784080779, rotation2.getQ0(), 0.01D);
      assertEquals((-1316.2642091141815), rotation2.getQ3(), 0.01D);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation2, rotation1);
      assertNotSame(rotation2, rotation0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(rotation0.equals((Object)rotation2));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation1.equals((Object)rotation2));
      assertFalse(rotation2.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      try {
        double[] doubleArray0 = rotation2.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      double double0 = 0.0;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals("YZX", rotationOrder0.toString());
      
      RotationOrder rotationOrder1 = RotationOrder.XZY;
      assertNotNull(rotationOrder1);
      assertEquals("XZY", rotationOrder1.toString());
      assertNotSame(rotationOrder1, rotationOrder0);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertNotNull(doubleArray0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals("XZY", rotationOrder1.toString());
      assertEquals("YZX", rotationOrder0.toString());
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(rotationOrder1, rotationOrder0);
      assertNotSame(rotationOrder0, rotationOrder1);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      assertFalse(rotationOrder0.equals((Object)rotationOrder1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      double double0 = (-706.3592);
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.9690178442462812, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(2.6424455958863016, rotation0.getAngle(), 0.01D);
      assertEquals(0.2469907235753801, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.9690178442462812, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(2.6424455958863016, rotation0.getAngle(), 0.01D);
      assertEquals(0.2469907235753801, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertArrayEquals(new double[] {(-3.141592653589793), (-0.49914705770349155), (-3.141592653589793)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 795.0;
      double double1 = (-1287.908923105);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals((-1287.908923105), rotation0.getQ3(), 0.01D);
      assertEquals(795.0, rotation0.getQ0(), 0.01D);
      assertEquals(795.0, rotation0.getQ1(), 0.01D);
      assertEquals(795.0, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XYZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 1.0;
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      double double1 = (-2680.27751);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double1);
      assertNotNull(rotation0);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals(0.032575932596466656, rotation0.getQ0(), 0.01D);
      assertEquals(3.0764292597910137, rotation0.getAngle(), 0.01D);
      assertEquals(0.511592053635, rotation0.getQ3(), 0.01D);
      assertEquals((-0.303826068325792), rotation0.getQ1(), 0.01D);
      assertEquals(0.8030579676951627, rotation0.getQ2(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Rotation rotation1 = rotation0.revert();
      assertNotNull(rotation1);
      assertEquals(0.511592053635, rotation1.getQ3(), 0.01D);
      assertEquals((-0.032575932596466656), rotation1.getQ0(), 0.01D);
      assertEquals((-0.303826068325792), rotation1.getQ1(), 0.01D);
      assertEquals(0.8030579676951627, rotation1.getQ2(), 0.01D);
      assertEquals(3.0764292597910137, rotation1.getAngle(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals(0.032575932596466656, rotation0.getQ0(), 0.01D);
      assertEquals(3.0764292597910137, rotation0.getAngle(), 0.01D);
      assertEquals(0.511592053635, rotation0.getQ3(), 0.01D);
      assertEquals((-0.303826068325792), rotation0.getQ1(), 0.01D);
      assertEquals(0.8030579676951627, rotation0.getQ2(), 0.01D);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(rotation0.equals((Object)rotation1));
      
      double double2 = rotation1.getAngle();
      assertEquals(0.511592053635, rotation1.getQ3(), 0.01D);
      assertEquals((-0.032575932596466656), rotation1.getQ0(), 0.01D);
      assertEquals((-0.303826068325792), rotation1.getQ1(), 0.01D);
      assertEquals(0.8030579676951627, rotation1.getQ2(), 0.01D);
      assertEquals(3.0764292597910137, rotation1.getAngle(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals(0.032575932596466656, rotation0.getQ0(), 0.01D);
      assertEquals(3.0764292597910137, rotation0.getAngle(), 0.01D);
      assertEquals(0.511592053635, rotation0.getQ3(), 0.01D);
      assertEquals((-0.303826068325792), rotation0.getQ1(), 0.01D);
      assertEquals(0.8030579676951627, rotation0.getQ2(), 0.01D);
      assertEquals(3.0764292597910137, double2, 0.01D);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(rotation0.equals((Object)rotation1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 0.25;
      boolean boolean0 = true;
      double double1 = 52.47169878829015;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.004764310926291191, rotation0.getQ1(), 0.01D);
      assertEquals(0.004764310926291191, rotation0.getQ2(), 0.01D);
      assertEquals(0.004764310926291191, rotation0.getQ0(), 0.01D);
      assertEquals(0.999965951432444, rotation0.getQ3(), 0.01D);
      assertEquals(3.13206399568902, rotation0.getAngle(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = rotation0.getAngle();
      assertEquals(0.004764310926291191, rotation0.getQ1(), 0.01D);
      assertEquals(0.004764310926291191, rotation0.getQ2(), 0.01D);
      assertEquals(0.004764310926291191, rotation0.getQ0(), 0.01D);
      assertEquals(0.999965951432444, rotation0.getQ3(), 0.01D);
      assertEquals(3.13206399568902, rotation0.getAngle(), 0.01D);
      assertEquals(3.13206399568902, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      Vector3D vector3D1 = rotation0.getAxis();
      assertNotNull(vector3D1);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(true, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA1();
      assertNotNull(vector3D0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      Vector3D vector3D1 = rotation0.getAxis();
      assertNotNull(vector3D1);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.ZERO;
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D1, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertNotNull(vector3D0);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      
      double double0 = (-169.9);
      double double1 = 939.4035867012363;
      Vector3D vector3D1 = new Vector3D(double0, double0, double1);
      assertNotNull(vector3D1);
      assertEquals(969.6448415307262, vector3D1.getNorm(), 0.01D);
      assertEquals(939.4035867012363, vector3D1.getNormInf(), 0.01D);
      assertEquals(940211.1187071473, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(939.4035867012363, vector3D1.getZ(), 0.01D);
      assertEquals(1279.2035867012364, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-2.356194490192345), vector3D1.getAlpha(), 0.01D);
      assertEquals((-169.9), vector3D1.getY(), 0.01D);
      assertEquals(1.3203908656628034, vector3D1.getDelta(), 0.01D);
      assertEquals((-169.9), vector3D1.getX(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D1, vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(969.6448415307262, vector3D1.getNorm(), 0.01D);
      assertEquals(939.4035867012363, vector3D1.getNormInf(), 0.01D);
      assertEquals(940211.1187071473, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(939.4035867012363, vector3D1.getZ(), 0.01D);
      assertEquals(1279.2035867012364, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-2.356194490192345), vector3D1.getAlpha(), 0.01D);
      assertEquals((-169.9), vector3D1.getY(), 0.01D);
      assertEquals(1.3203908656628034, vector3D1.getDelta(), 0.01D);
      assertEquals((-169.9), vector3D1.getX(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      double double0 = 766.65457;
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      
      Vector3D vector3D1 = new Vector3D(double0, double0, double0);
      assertNotNull(vector3D1);
      assertEquals(0.7853981633974483, vector3D1.getAlpha(), 0.01D);
      assertEquals(766.65457, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(766.65457, vector3D1.getX(), 0.01D);
      assertEquals(766.65457, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.6154797086703875, vector3D1.getDelta(), 0.01D);
      assertEquals(766.65457, vector3D1.getZ(), 0.01D);
      assertEquals(1327.8846670948703, vector3D1.getNorm(), 0.01D);
      assertEquals(2299.96371, vector3D1.getNorm1(), 0.01D);
      assertEquals(1763277.6891056546, vector3D1.getNormSq(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Vector3D vector3D2 = vector3D1.crossProduct((Vector<Euclidean3D>) vector3D0);
      assertNotNull(vector3D2);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.7853981633974483, vector3D1.getAlpha(), 0.01D);
      assertEquals(766.65457, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(766.65457, vector3D1.getX(), 0.01D);
      assertEquals(766.65457, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.6154797086703875, vector3D1.getDelta(), 0.01D);
      assertEquals(766.65457, vector3D1.getZ(), 0.01D);
      assertEquals(1327.8846670948703, vector3D1.getNorm(), 0.01D);
      assertEquals(2299.96371, vector3D1.getNorm1(), 0.01D);
      assertEquals(1763277.6891056546, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(766.65457, vector3D2.getNormInf(), 0.01D);
      assertEquals(766.65457, vector3D2.getY(), 0.01D);
      assertEquals((-0.7853981633974484), vector3D2.getDelta(), 0.01D);
      assertEquals((-766.65457), vector3D2.getZ(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1533.30914, vector3D2.getNorm1(), 0.01D);
      assertEquals(1084.2132905493133, vector3D2.getNorm(), 0.01D);
      assertEquals(1175518.4594037698, vector3D2.getNormSq(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      
      Rotation rotation0 = new Rotation(vector3D2, vector3D1, vector3D1, vector3D0);
      assertNotNull(rotation0);
      assertEquals(0.6969234250586759, rotation0.getQ1(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      assertEquals((-0.26900240123039243), rotation0.getQ3(), 0.01D);
      assertEquals(0.4381043799561551, rotation0.getQ2(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.7853981633974483, vector3D1.getAlpha(), 0.01D);
      assertEquals(766.65457, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(766.65457, vector3D1.getX(), 0.01D);
      assertEquals(766.65457, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.6154797086703875, vector3D1.getDelta(), 0.01D);
      assertEquals(766.65457, vector3D1.getZ(), 0.01D);
      assertEquals(1327.8846670948703, vector3D1.getNorm(), 0.01D);
      assertEquals(2299.96371, vector3D1.getNorm1(), 0.01D);
      assertEquals(1763277.6891056546, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(766.65457, vector3D2.getNormInf(), 0.01D);
      assertEquals(766.65457, vector3D2.getY(), 0.01D);
      assertEquals((-0.7853981633974484), vector3D2.getDelta(), 0.01D);
      assertEquals((-766.65457), vector3D2.getZ(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1533.30914, vector3D2.getNorm1(), 0.01D);
      assertEquals(1084.2132905493133, vector3D2.getNorm(), 0.01D);
      assertEquals(1175518.4594037698, vector3D2.getNormSq(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      double double0 = (-3006.15);
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.9843614286112788, rotation0.getQ3(), 0.01D);
      assertEquals((-0.16522722048768218), rotation0.getQ0(), 0.01D);
      assertEquals(2.809615865786619, rotation0.getAngle(), 0.01D);
      assertEquals(0.061094545356171696, rotation0.getQ2(), 0.01D);
      
      Vector3D vector3D1 = rotation0.getAxis();
      assertNotNull(vector3D1);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(0.9999999999999998, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.06194595989575641, vector3D1.getY(), 0.01D);
      assertEquals(1.0600254647712914, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.9999999999999997, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.998079504875535, vector3D1.getZ(), 0.01D);
      assertEquals(1.5088106807726762, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.998079504875535, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.9843614286112788, rotation0.getQ3(), 0.01D);
      assertEquals((-0.16522722048768218), rotation0.getQ0(), 0.01D);
      assertEquals(2.809615865786619, rotation0.getAngle(), 0.01D);
      assertEquals(0.061094545356171696, rotation0.getQ2(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D1);
      assertNotNull(vector3D2);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(0.9999999999999998, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.06194595989575641, vector3D1.getY(), 0.01D);
      assertEquals(1.0600254647712914, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.9999999999999997, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.998079504875535, vector3D1.getZ(), 0.01D);
      assertEquals(1.5088106807726762, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.998079504875535, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.9843614286112788, rotation0.getQ3(), 0.01D);
      assertEquals((-0.16522722048768218), rotation0.getQ0(), 0.01D);
      assertEquals(2.809615865786619, rotation0.getAngle(), 0.01D);
      assertEquals(0.061094545356171696, rotation0.getQ2(), 0.01D);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(vector3D0, vector3D1, vector3D0, vector3D2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = 0.0;
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D1, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertNotNull(vector3D0);
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      double double0 = 0.0;
      Vector3D vector3D1 = new Vector3D(double0, vector3D0, double0, vector3D0, double0, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D1, vector3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = 0.25;
      double double1 = 1884.184901284611;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(1.3268336521947774E-4, rotation0.getQ0(), 0.01D);
      assertEquals(1.3268336521947774E-4, rotation0.getQ2(), 0.01D);
      assertEquals(1.3268336521947774E-4, rotation0.getQ1(), 0.01D);
      assertEquals(3.1413272868585755, rotation0.getAngle(), 0.01D);
      assertEquals(0.9999999735926866, rotation0.getQ3(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals(1.3268336521947774E-4, rotation0.getQ0(), 0.01D);
      assertEquals(1.3268336521947774E-4, rotation0.getQ2(), 0.01D);
      assertEquals(1.3268336521947774E-4, rotation0.getQ1(), 0.01D);
      assertEquals(3.1413272868585755, rotation0.getAngle(), 0.01D);
      assertEquals(0.9999999735926866, rotation0.getQ3(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Rotation rotation1 = new Rotation(doubleArray0, double1);
      assertNotNull(rotation1);
      assertEquals(1.3268336521947774E-4, rotation0.getQ0(), 0.01D);
      assertEquals(1.3268336521947774E-4, rotation0.getQ2(), 0.01D);
      assertEquals(1.3268336521947774E-4, rotation0.getQ1(), 0.01D);
      assertEquals(3.1413272868585755, rotation0.getAngle(), 0.01D);
      assertEquals(0.9999999735926866, rotation0.getQ3(), 0.01D);
      assertEquals(1.326833652194777E-4, rotation1.getQ2(), 0.01D);
      assertEquals(0.9999999735926866, rotation1.getQ3(), 0.01D);
      assertEquals(1.326833652194777E-4, rotation1.getQ1(), 0.01D);
      assertEquals(1.326833652194777E-4, rotation1.getQ0(), 0.01D);
      assertEquals(3.1413272868585755, rotation1.getAngle(), 0.01D);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = 0.25;
      double double1 = (-1.0);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double1, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.22941573387056174, rotation0.getQ3(), 0.01D);
      assertEquals(0.22941573387056174, rotation0.getQ0(), 0.01D);
      assertEquals((-0.917662935482247), rotation0.getQ2(), 0.01D);
      assertEquals(2.678637925649435, rotation0.getAngle(), 0.01D);
      assertEquals(0.22941573387056174, rotation0.getQ1(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals(0.22941573387056174, rotation0.getQ3(), 0.01D);
      assertEquals(0.22941573387056174, rotation0.getQ0(), 0.01D);
      assertEquals((-0.917662935482247), rotation0.getQ2(), 0.01D);
      assertEquals(2.678637925649435, rotation0.getAngle(), 0.01D);
      assertEquals(0.22941573387056174, rotation0.getQ1(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      Rotation rotation1 = new Rotation(doubleArray0, double0);
      assertNotNull(rotation1);
      assertEquals(0.22941573387056174, rotation0.getQ3(), 0.01D);
      assertEquals(0.22941573387056174, rotation0.getQ0(), 0.01D);
      assertEquals((-0.917662935482247), rotation0.getQ2(), 0.01D);
      assertEquals(2.678637925649435, rotation0.getAngle(), 0.01D);
      assertEquals(0.22941573387056174, rotation0.getQ1(), 0.01D);
      assertEquals(0.9176629354822471, rotation1.getQ2(), 0.01D);
      assertEquals((-0.22941573387056166), rotation1.getQ0(), 0.01D);
      assertEquals(2.678637925649437, rotation1.getAngle(), 0.01D);
      assertEquals((-0.22941573387056172), rotation1.getQ3(), 0.01D);
      assertEquals((-0.2294157338705618), rotation1.getQ1(), 0.01D);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertFalse(double1 == double0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double0 == double1);
      assertFalse(rotation1.equals((Object)rotation0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      double double0 = 766.65457;
      double double1 = (-4.130437053102075);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double1);
      assertNotNull(rotation0);
      assertEquals(2.2600366924628714, rotation0.getAngle(), 0.01D);
      assertEquals((-0.4266432153030152), rotation0.getQ0(), 0.01D);
      assertEquals(0.04521841601198062, rotation0.getQ2(), 0.01D);
      assertEquals(0.027562356961997048, rotation0.getQ3(), 0.01D);
      assertEquals(0.9028683061044794, rotation0.getQ1(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = rotation0.getAngle();
      assertEquals(2.2600366924628714, rotation0.getAngle(), 0.01D);
      assertEquals((-0.4266432153030152), rotation0.getQ0(), 0.01D);
      assertEquals(0.04521841601198062, rotation0.getQ2(), 0.01D);
      assertEquals(0.027562356961997048, rotation0.getQ3(), 0.01D);
      assertEquals(0.9028683061044794, rotation0.getQ1(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals(2.2600366924628714, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals(2.2600366924628714, rotation0.getAngle(), 0.01D);
      assertEquals((-0.4266432153030152), rotation0.getQ0(), 0.01D);
      assertEquals(0.04521841601198062, rotation0.getQ2(), 0.01D);
      assertEquals(0.027562356961997048, rotation0.getQ3(), 0.01D);
      assertEquals(0.9028683061044794, rotation0.getQ1(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      Rotation rotation1 = new Rotation(doubleArray0, double2);
      assertNotNull(rotation1);
      assertEquals(2.2600366924628714, rotation0.getAngle(), 0.01D);
      assertEquals((-0.4266432153030152), rotation0.getQ0(), 0.01D);
      assertEquals(0.04521841601198062, rotation0.getQ2(), 0.01D);
      assertEquals(0.027562356961997048, rotation0.getQ3(), 0.01D);
      assertEquals(0.9028683061044794, rotation0.getQ1(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals((-0.42664321530301524), rotation1.getQ0(), 0.01D);
      assertEquals(2.2600366924628714, rotation1.getAngle(), 0.01D);
      assertEquals(0.045218416011980615, rotation1.getQ2(), 0.01D);
      assertEquals(0.9028683061044794, rotation1.getQ1(), 0.01D);
      assertEquals(0.027562356961997044, rotation1.getQ3(), 0.01D);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      double double0 = 2655.73;
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      
      doubleArray1[1] = doubleArray1[0];
      assertNotNull(doubleArray1[1]);
      
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray1, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, doubleArray1[2]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = (-5334.05824);
      double[][] doubleArray0 = new double[3][5];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x5 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      double double0 = 766.65457;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(0.9929959139922017, rotation0.getQ0(), 0.01D);
      assertEquals((-0.10561593689807938), rotation0.getQ1(), 0.01D);
      assertEquals((-0.052956478998637105), rotation0.getQ3(), 0.01D);
      assertEquals(0.23685062831898304, rotation0.getAngle(), 0.01D);
      assertEquals(4.3368086899420177E-19, rotation0.getQ2(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals(0.9929959139922017, rotation0.getQ0(), 0.01D);
      assertEquals((-0.10561593689807938), rotation0.getQ1(), 0.01D);
      assertEquals((-0.052956478998637105), rotation0.getQ3(), 0.01D);
      assertEquals(0.23685062831898304, rotation0.getAngle(), 0.01D);
      assertEquals(4.3368086899420177E-19, rotation0.getQ2(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      
      Rotation rotation1 = new Rotation(doubleArray0, double0);
      assertNotNull(rotation1);
      assertEquals(0.9929959139922017, rotation0.getQ0(), 0.01D);
      assertEquals((-0.10561593689807938), rotation0.getQ1(), 0.01D);
      assertEquals((-0.052956478998637105), rotation0.getQ3(), 0.01D);
      assertEquals(0.23685062831898304, rotation0.getAngle(), 0.01D);
      assertEquals(4.3368086899420177E-19, rotation0.getQ2(), 0.01D);
      assertEquals((-0.10561593689807938), rotation1.getQ1(), 0.01D);
      assertEquals((-0.0529564789986371), rotation1.getQ3(), 0.01D);
      assertEquals(0.23685062831898304, rotation1.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertEquals(0.9929959139922016, rotation1.getQ0(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double double0 = 798.06080431322;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 1x8 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      
      double double0 = 0.0;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm for rotation axis
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      
      double double0 = rotation0.getQ2();
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      double double0 = 766.65457;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals((-0.052956478998637105), rotation0.getQ3(), 0.01D);
      assertEquals(0.9929959139922017, rotation0.getQ0(), 0.01D);
      assertEquals((-0.10561593689807938), rotation0.getQ1(), 0.01D);
      assertEquals(4.3368086899420177E-19, rotation0.getQ2(), 0.01D);
      assertEquals(0.23685062831898304, rotation0.getAngle(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      
      double double1 = rotation0.getQ0();
      assertEquals((-0.052956478998637105), rotation0.getQ3(), 0.01D);
      assertEquals(0.9929959139922017, rotation0.getQ0(), 0.01D);
      assertEquals((-0.10561593689807938), rotation0.getQ1(), 0.01D);
      assertEquals(4.3368086899420177E-19, rotation0.getQ2(), 0.01D);
      assertEquals(0.23685062831898304, rotation0.getAngle(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals(0.9929959139922017, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      double double0 = 0.0;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      
      double double1 = rotation0.getQ1();
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = 0.0;
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals("YZX", rotationOrder0.toString());
      
      double double1 = rotation0.getQ3();
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      double double0 = Rotation.distance(rotation0, rotation0);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      double double0 = 766.65457;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals((-0.052956478998637105), rotation0.getQ3(), 0.01D);
      assertEquals(0.9929959139922017, rotation0.getQ0(), 0.01D);
      assertEquals(0.23685062831898304, rotation0.getAngle(), 0.01D);
      assertEquals((-0.10561593689807938), rotation0.getQ1(), 0.01D);
      assertEquals(4.3368086899420177E-19, rotation0.getQ2(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals((-0.052956478998637105), rotation0.getQ3(), 0.01D);
      assertEquals(0.9929959139922017, rotation0.getQ0(), 0.01D);
      assertEquals(0.23685062831898304, rotation0.getAngle(), 0.01D);
      assertEquals((-0.10561593689807938), rotation0.getQ1(), 0.01D);
      assertEquals(4.3368086899420177E-19, rotation0.getQ2(), 0.01D);
      assertArrayEquals(new double[] {0.105962524090485, 0.10596252409048282, 0.105962524090485}, doubleArray0, 0.01);
  }
}
