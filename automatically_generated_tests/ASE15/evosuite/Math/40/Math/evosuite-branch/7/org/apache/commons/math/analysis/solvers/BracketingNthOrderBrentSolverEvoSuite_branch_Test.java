/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:45:43 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Power;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.exception.NoBracketingException;
import org.apache.commons.math.exception.NumberIsTooSmallException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BracketingNthOrderBrentSolverEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 8.59224;
      int int0 = 2964;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double0, double0, int0);
      assertEquals(2964, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(8.59224, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(8.59224, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(8.59224, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = (-5.5299180508885456E281);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sin0, double1, (double) int0, double0, allowedSolution0);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals(8.59224, double2, 0.01D);
      assertEquals(2964, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals((-5.5299180508885456E281), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(8.59224, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(2, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(2964.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(8.59224, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2964, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(8.59224, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(8.59224, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      
      double double3 = 1.710400694074481;
      assertFalse(double3 == double2);
      
      AllowedSolution allowedSolution1 = AllowedSolution.BELOW_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double4 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sin0, double3, double2, allowedSolution1);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double4);
      assertTrue(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertTrue(double0 == double2);
      assertEquals(5.15132034703724, double4, 0.01D);
      assertEquals(2964, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(2, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.710400694074481, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(8.59224, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2964, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(8.59224, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(8.59224, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(8.59224, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(5.15132034703724, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      double double0 = bracketingNthOrderBrentSolver0.getRelativeAccuracy();
      assertEquals(1.0E-14, double0, 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      
      int int0 = 1426;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double1 = (-508.8203477087);
      assertFalse(double1 == double0);
      
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sinc0, double1, (double) int0, double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-34.55751918948773), double2, 0.01D);
      assertEquals(1426, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals((-508.8203477087), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(22, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1426.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 29.195470697817477;
      int int0 = 2920;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double0, double0, int0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(29.195470697817477, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2920, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(29.195470697817477, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(29.195470697817477, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = (-2454.9493);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sin0, double1, (double) int0, double0, allowedSolution0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals((-2454.9493), double2, 0.01D);
      assertEquals(2920.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(29.195470697817477, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2920, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(2920, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(29.195470697817477, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2454.9493), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(29.195470697817477, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(2, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(29.195470697817477, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 1.0E-14;
      int int0 = 2952;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double0, double0, int0);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2952, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = (-5.5299180508885456E281);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sin0, double1, (double) int0, double0, allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-2.9668723385591967E254), double2, 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2952, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(2952.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(32, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals((-5.5299180508885456E281), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2952, bracketingNthOrderBrentSolver0.getMaximalOrder());
      
      AllowedSolution allowedSolution1 = AllowedSolution.RIGHT_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double3 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sin0, double2, double0, allowedSolution1);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-2.504796256998007E254), double3, 0.01D);
      assertEquals((-2.9668723385591967E254), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.4834361692795984E254), bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2952, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(32, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2952, bracketingNthOrderBrentSolver0.getMaximalOrder());
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 1.0476851365587745;
      int int0 = 2293;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double0, double0, int0);
      assertEquals(2293, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1.0476851365587745, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0476851365587745, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.0476851365587745, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double1 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sinc0, double0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1147.0238425682794, double1, 0.01D);
      assertEquals(2293.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(2293, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1147.0238425682794, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0476851365587745, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0476851365587745, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1.0476851365587745, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0476851365587745, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2293, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(2, bracketingNthOrderBrentSolver0.getEvaluations());
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 23;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double0, int0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(23, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      double double1 = (-6.679737442193143E-9);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, double0, (double) int0);
      assertFalse(double0 == double1);
      assertNotNull(harmonicOscillator0);
      
      // Undeclared exception!
      try {
        double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) harmonicOscillator0, double1, double0, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-0, 0], values: [-12.255, -12.255]
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 23;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double0, int0);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(23, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Power power0 = new Power((double) int0);
      assertNotNull(power0);
      
      double double1 = (-6.679737442193143E-9);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) power0, double1, double0, allowedSolution0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(23, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-3.3398687210965715E-9), bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals((-6.679737442193143E-9), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(23, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = (-775.0146537016502);
      int int0 = 2930;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double0, (double) int0, int0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals((-775.0146537016502), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(2930, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(2930.0, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals((-775.0146537016502), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = (-5.5299180508885456E281);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sin0, double1, (double) int0, double0, allowedSolution0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-775.0146537016502), double2, 0.01D);
      assertEquals((-5.5299180508885456E281), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals((-775.0146537016502), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2930, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(2930, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(2930.0, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-775.0146537016502), bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals((-775.0146537016502), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2930.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(3, bracketingNthOrderBrentSolver0.getEvaluations());
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-775.0146537016502);
      int int0 = 2930;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double0, (double) int0, int0);
      assertEquals((-775.0146537016502), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals((-775.0146537016502), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2930, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(2930.0, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = 0.0;
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sin0, double1, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(2930, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals((-775.0146537016502), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2930.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals((-775.0146537016502), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2930, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(2, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(2930.0, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1465.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-30.771455);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      int int0 = 1363;
      Minus minus0 = new Minus();
      assertNotNull(minus0);
      
      double double1 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) minus0, double0, (double) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-30.771455), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1363.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(666.1142725000001, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1363, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) minus0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(Double.NaN, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(Double.NaN, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1363, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1, bracketingNthOrderBrentSolver0.getEvaluations());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-3769);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((double) int0, (double) int0, (double) int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,769 is smaller than the minimum (2)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 1.0476851365587745;
      int int0 = (-1017);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,017 is smaller than the minimum (2)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-1207);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,207 is smaller than the minimum (2)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = 1.0476851365587745;
      int int0 = 2293;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double0, double0, int0);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.0476851365587745, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0476851365587745, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0476851365587745, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2293, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      int int1 = bracketingNthOrderBrentSolver0.getMaximalOrder();
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(2293, int1);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.0476851365587745, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0476851365587745, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0476851365587745, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2293, bracketingNthOrderBrentSolver0.getMaximalOrder());
  }
}
