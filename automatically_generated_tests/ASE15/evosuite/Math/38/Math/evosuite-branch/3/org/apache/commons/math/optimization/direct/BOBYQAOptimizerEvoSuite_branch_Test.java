/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:05:20 GMT 2014
 */

package org.apache.commons.math.optimization.direct;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.MultivariateFunction;
import org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math.exception.MathIllegalStateException;
import org.apache.commons.math.exception.NumberIsTooSmallException;
import org.apache.commons.math.exception.OutOfRangeException;
import org.apache.commons.math.exception.TooManyEvaluationsException;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.direct.BOBYQAOptimizer;
import org.apache.commons.math.random.RandomGenerator;
import org.apache.commons.math.random.UnitSphereRandomVectorGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BOBYQAOptimizerEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 52;
      BOBYQAOptimizer bOBYQAOptimizer0 = new BOBYQAOptimizer(int0);
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertNotNull(bOBYQAOptimizer0);
      
      double[][] doubleArray0 = new double[7][7];
      int int1 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = null;
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray0[6], int0, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = bOBYQAOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0[3], doubleArray0[1], doubleArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of interpolation points (52)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      BOBYQAOptimizer bOBYQAOptimizer0 = new BOBYQAOptimizer(int0);
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertNotNull(bOBYQAOptimizer0);
      
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      RandomGenerator randomGenerator0 = null;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0, randomGenerator0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray0[0], int0, int0, unitSphereRandomVectorGenerator0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray2 = new double[26];
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[0] = doubleArray2;
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = bOBYQAOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of interpolation points (0)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      BOBYQAOptimizer bOBYQAOptimizer0 = new BOBYQAOptimizer(int0);
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertNotNull(bOBYQAOptimizer0);
      
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      RandomGenerator randomGenerator0 = null;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0, randomGenerator0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray0[0], int0, int0, unitSphereRandomVectorGenerator0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = bOBYQAOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 is smaller than the minimum (2)
         //
      }
  }

  //@Test
  public void test3()  throws Throwable  {
      int int0 = 28;
      BOBYQAOptimizer bOBYQAOptimizer0 = new BOBYQAOptimizer(int0);
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertNotNull(bOBYQAOptimizer0);
      
      int int1 = bOBYQAOptimizer0.getEvaluations();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertEquals(0, int1);
      
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[7];
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, int1, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = bOBYQAOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (28) exceeded: evaluations
         //
      }
  }

  //@Test
  public void test4()  throws Throwable  {
      int int0 = 19;
      BOBYQAOptimizer bOBYQAOptimizer0 = new BOBYQAOptimizer(int0);
      //  // Unstable assertion: assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNull(bOBYQAOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNotNull(bOBYQAOptimizer0);
      
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[7];
      int int1 = 692;
      int int2 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int2);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, int1, int2, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = bOBYQAOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // trust region step has failed to reduce Q
         //
      }
  }

  //@Test
  public void test5()  throws Throwable  {
      int int0 = 20;
      BOBYQAOptimizer bOBYQAOptimizer0 = new BOBYQAOptimizer(int0);
      //  // Unstable assertion: assertNull(bOBYQAOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNotNull(bOBYQAOptimizer0);
      
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[7];
      int int1 = 692;
      int int2 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int2);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, int1, int2, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = bOBYQAOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // trust region step has failed to reduce Q
         //
      }
  }

  //@Test
  public void test6()  throws Throwable  {
      int int0 = 12;
      BOBYQAOptimizer bOBYQAOptimizer0 = new BOBYQAOptimizer(int0);
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertNotNull(bOBYQAOptimizer0);
      
      int int1 = bOBYQAOptimizer0.getEvaluations();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertEquals(0, int1);
      
      double[][] doubleArray0 = new double[7][7];
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = null;
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray0[6], int1, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = bOBYQAOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0[3], doubleArray0[1], doubleArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
      }
  }
}
