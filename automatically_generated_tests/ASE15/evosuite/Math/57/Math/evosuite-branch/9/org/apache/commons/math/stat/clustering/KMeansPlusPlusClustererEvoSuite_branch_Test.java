/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:45:22 GMT 2014
 */

package org.apache.commons.math.stat.clustering;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

 
public class KMeansPlusPlusClustererEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>((Random) mockRandom0);
      assertNotNull(kMeansPlusPlusClusterer0);
      
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = 2389;
      int[] intArray0 = new int[4];
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(euclideanIntegerPoint0);
      
      boolean boolean0 = linkedList0.offerFirst(euclideanIntegerPoint0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(1, linkedList0.size());
      assertEquals("[(0,0,0,0)]", linkedList0.toString());
      assertTrue(boolean0);
      
      int[] intArray1 = new int[4];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = int0;
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray1);
      assertArrayEquals(new int[] {0, 2389, 0, 0}, intArray1);
      assertNotNull(euclideanIntegerPoint1);
      assertNotSame(euclideanIntegerPoint1, euclideanIntegerPoint0);
      assertNotSame(intArray1, intArray0);
      assertFalse(euclideanIntegerPoint1.equals((Object)euclideanIntegerPoint0));
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = linkedList0.add(euclideanIntegerPoint1);
      assertArrayEquals(new int[] {0, 2389, 0, 0}, intArray1);
      assertNotSame(euclideanIntegerPoint1, euclideanIntegerPoint0);
      assertNotSame(intArray1, intArray0);
      assertFalse(euclideanIntegerPoint1.equals((Object)euclideanIntegerPoint0));
      assertTrue(boolean1 == boolean0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, linkedList0.size());
      assertEquals("[(0,0,0,0), (0,2389,0,0)]", linkedList0.toString());
      assertTrue(boolean1);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      boolean boolean2 = linkedList0.offerFirst(euclideanIntegerPoint0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotSame(euclideanIntegerPoint0, euclideanIntegerPoint1);
      assertNotSame(intArray0, intArray1);
      assertFalse(euclideanIntegerPoint0.equals((Object)euclideanIntegerPoint1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(3, linkedList0.size());
      assertEquals("[(0,0,0,0), (0,0,0,0), (0,2389,0,0)]", linkedList0.toString());
      assertTrue(boolean2);
      
      // Undeclared exception!
      try {
        List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster((Collection<EuclideanIntegerPoint>) linkedList0, intArray1[1], intArray1[1]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>((Random) mockRandom0);
      assertNotNull(kMeansPlusPlusClusterer0);
      
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = 2389;
      int[] intArray0 = new int[4];
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(euclideanIntegerPoint0);
      
      boolean boolean0 = linkedList0.offerFirst(euclideanIntegerPoint0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals("[(0,0,0,0)]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      int[] intArray1 = new int[4];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = int0;
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray1);
      assertArrayEquals(new int[] {0, 2389, 0, 0}, intArray1);
      assertNotNull(euclideanIntegerPoint1);
      assertNotSame(euclideanIntegerPoint1, euclideanIntegerPoint0);
      assertNotSame(intArray1, intArray0);
      assertFalse(euclideanIntegerPoint1.equals((Object)euclideanIntegerPoint0));
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = linkedList0.add(euclideanIntegerPoint1);
      assertArrayEquals(new int[] {0, 2389, 0, 0}, intArray1);
      assertNotSame(euclideanIntegerPoint1, euclideanIntegerPoint0);
      assertNotSame(intArray1, intArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(euclideanIntegerPoint1.equals((Object)euclideanIntegerPoint0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("[(0,0,0,0), (0,2389,0,0)]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      
      int int1 = 0;
      List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster((Collection<EuclideanIntegerPoint>) linkedList0, int1, int0);
      assertNotNull(list0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("[(0,0,0,0), (0,2389,0,0)]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>((Random) mockRandom0);
      assertNotNull(kMeansPlusPlusClusterer0);
      
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = new int[1];
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(euclideanIntegerPoint0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      boolean boolean0 = linkedList0.offerFirst(euclideanIntegerPoint0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, linkedList0.size());
      assertEquals("[(0)]", linkedList0.toString());
      assertTrue(boolean0);
      
      List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster((Collection<EuclideanIntegerPoint>) linkedList0, int0, int0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals("[(0)]", linkedList0.toString());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>((Random) mockRandom0);
      assertNotNull(kMeansPlusPlusClusterer0);
      
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int[] intArray0 = new int[1];
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(euclideanIntegerPoint0);
      
      boolean boolean0 = linkedList0.offerFirst(euclideanIntegerPoint0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, linkedList0.size());
      assertEquals("[(0)]", linkedList0.toString());
      assertTrue(boolean0);
      
      int int0 = (-1);
      intArray0[0] = int0;
      List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster((Collection<EuclideanIntegerPoint>) linkedList0, int0, intArray0[0]);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertEquals("[(-1)]", linkedList0.toString());
  }
}
