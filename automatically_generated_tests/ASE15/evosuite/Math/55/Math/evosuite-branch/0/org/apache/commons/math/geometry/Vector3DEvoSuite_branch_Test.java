/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:47:37 GMT 2014
 */

package org.apache.commons.math.geometry;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.exception.MathArithmeticException;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class Vector3DEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.ZERO;
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D2);
      assertSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(0.0, vector3D2.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      
      int int0 = vector3D0.hashCode();
      assertEquals((-1397751808), int0);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      
      double double0 = 1.18038246986535;
      Vector3D vector3D1 = new Vector3D(double0, vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertTrue(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm(), 0.01D);
      assertEquals(true, vector3D1.isInfinite());
      assertEquals((-2.356194490192345), vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      
      boolean boolean0 = vector3D1.equals((Object) vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertTrue(vector3D0.equals((Object)vector3D1));
      assertTrue(boolean0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm(), 0.01D);
      assertEquals(true, vector3D1.isInfinite());
      assertEquals((-2.356194490192345), vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      
      Vector3D vector3D1 = vector3D0.negate();
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotNull(vector3D1);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      
      boolean boolean0 = vector3D0.equals((Object) vector3D1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(boolean0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      double double0 = (-0.25);
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Vector3D vector3D2 = new Vector3D(double0, vector3D1);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertNotNull(vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertEquals(0.0625, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.25, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.25, vector3D2.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(0.25, vector3D2.getNorm(), 0.01D);
      assertEquals(-0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.25, vector3D2.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      boolean boolean0 = vector3D2.equals((Object) vector3D1);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(boolean0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertEquals(0.0625, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.25, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.25, vector3D2.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(0.25, vector3D2.getNorm(), 0.01D);
      assertEquals(-0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.25, vector3D2.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      boolean boolean0 = vector3D0.equals((Object) vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(boolean0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      
      String string0 = vector3D0.toString();
      assertNotNull(string0);
      assertEquals("{-1; 0; 0}", string0);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      
      boolean boolean0 = vector3D0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      double double0 = vector3D0.getNormSq();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      double double1 = 0.6;
      assertFalse(double1 == double0);
      
      Vector3D vector3D1 = new Vector3D(double1, double1, double0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm(), 0.01D);
      assertEquals(true, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.7853981633974483, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.6, vector3D1.getX(), 0.01D);
      assertEquals(0.6, vector3D1.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      boolean boolean0 = vector3D1.isInfinite();
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(boolean0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm(), 0.01D);
      assertEquals(true, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.7853981633974483, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.6, vector3D1.getX(), 0.01D);
      assertEquals(0.6, vector3D1.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 706.6885;
      double double1 = Double.POSITIVE_INFINITY;
      Vector3D vector3D0 = new Vector3D(double0, double1, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(706.6885, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      
      boolean boolean0 = vector3D0.isInfinite();
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(706.6885, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-736.3333834941674);
      double double1 = 0.0;
      Vector3D vector3D0 = new Vector3D(double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.2939962890442278, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.9322934318735558), vector3D0.getY(), 0.01D);
      assertEquals(0.9322934318735558, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.2007025541557608), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.36170285717067197, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      double double2 = Double.POSITIVE_INFINITY;
      Vector3D vector3D1 = new Vector3D(double0, vector3D0, double0, vector3D0, double0, vector3D0, double2, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals((-0.7853981633974483), vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.2939962890442278, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.9322934318735558), vector3D0.getY(), 0.01D);
      assertEquals(0.9322934318735558, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.2007025541557608), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.36170285717067197, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      int int0 = vector3D1.hashCode();
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(8, int0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals((-0.7853981633974483), vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.2939962890442278, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.9322934318735558), vector3D0.getY(), 0.01D);
      assertEquals(0.9322934318735558, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.2007025541557608), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.36170285717067197, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
  }

  @Test
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotNull(vector3D1);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      
      boolean boolean0 = vector3D1.isInfinite();
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(boolean0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      boolean boolean0 = vector3D0.isInfinite();
      assertFalse(boolean0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      assertTrue(vector3D0.equals((Object)vector3D1));
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertNotNull(vector3D1);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      
      boolean boolean0 = vector3D0.equals((Object) vector3D1);
      assertTrue(vector3D0.equals((Object)vector3D1));
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertTrue(boolean0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
  }

  @Test
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
  }

  @Test
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      Vector3D vector3D1 = vector3D0.negate();
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotNull(vector3D1);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getX(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(3.141592653589793, double0, 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getX(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertNotNull(vector3D0);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.negate();
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Vector3D vector3D2 = vector3D0.add(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D2);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      // Undeclared exception!
      try {
        double double0 = Vector3D.angle(vector3D1, vector3D2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero norm
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      double double0 = 4.0;
      double double1 = 0.0;
      Vector3D vector3D0 = new Vector3D(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(vector3D0);
      assertEquals(1.4104461161715403, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-0.6536436208636119), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.7568024953079282, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-0.7568024953079282), vector3D0.getY(), 0.01D);
      assertEquals((-2.2831853071795867), vector3D0.getAlpha(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(2.4292036732051034, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.7568024953079282, vector3D1.getNormInf(), 0.01D);
      assertEquals((-0.7568024953079282), vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.4104461161715403, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.6536436208636119, vector3D1.getY(), 0.01D);
      assertEquals(1.4104461161715403, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-0.6536436208636119), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.7568024953079282, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-0.7568024953079282), vector3D0.getY(), 0.01D);
      assertEquals((-2.2831853071795867), vector3D0.getAlpha(), 0.01D);
      
      Vector3D vector3D2 = vector3D1.orthogonal();
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertNotNull(vector3D2);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(2.4292036732051034, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.7568024953079282, vector3D1.getNormInf(), 0.01D);
      assertEquals((-0.7568024953079282), vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.4104461161715403, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.6536436208636119, vector3D1.getY(), 0.01D);
      assertEquals(1.4104461161715403, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-0.6536436208636119), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.7568024953079282, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-0.7568024953079282), vector3D0.getY(), 0.01D);
      assertEquals((-2.2831853071795867), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.7568024953079282, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.6536436208636119, vector3D2.getX(), 0.01D);
      assertEquals(0.8584073464102067, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(0.7568024953079282, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.4104461161715403, vector3D2.getNorm1(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      double double0 = (-0.25);
      Vector3D vector3D1 = new Vector3D(double0, vector3D0, double0, vector3D0, double0, vector3D0, double0, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      Vector3D vector3D2 = vector3D1.orthogonal();
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(1.0, vector3D2.getZ(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      // Undeclared exception!
      try {
        Vector3D vector3D1 = vector3D0.orthogonal();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero norm
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      double double0 = 0.0;
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      
      Vector3D vector3D1 = new Vector3D(double0, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotNull(vector3D1);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      
      // Undeclared exception!
      try {
        Vector3D vector3D2 = vector3D1.normalize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot normalize a zero norm vector
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      
      double double0 = vector3D0.getAlpha();
      assertEquals(3.141592653589793, double0, 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.normalize();
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertTrue(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals((-1.0), vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-1.5707963267948966), vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      
      double double0 = vector3D0.getNormInf();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      
      Vector3D vector3D1 = vector3D0.subtract(double0, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
  }

  @Test
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(true, vector3D0.isInfinite());
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      
      double double0 = vector3D0.getNorm1();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(true, vector3D0.isInfinite());
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      
      Vector3D vector3D1 = new Vector3D(double0, vector3D0, double0, vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertTrue(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01D);
      assertEquals((-2.356194490192345), vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm(), 0.01D);
      assertEquals(true, vector3D1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(true, vector3D0.isInfinite());
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
  }

  @Test
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      
      double double0 = vector3D0.getDelta();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      double double0 = (-736.3333834941674);
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(0.13082895688542753, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.9322934318735558, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.2007025541557608), vector3D0.getDelta(), 0.01D);
      assertEquals(1.4003355867890996, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.2007025541557608), vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.9322934318735558), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.33721319803011635), vector3D0.getY(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.subtract(vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.13082895688542753, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.9322934318735558, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.2007025541557608), vector3D0.getDelta(), 0.01D);
      assertEquals(1.4003355867890996, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.2007025541557608), vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.9322934318735558), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.33721319803011635), vector3D0.getY(), 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      double double0 = 4.0;
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(0.7568024953079282, vector3D0.getNormInf(), 0.01D);
      assertEquals((-0.7568024953079282), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.8584073464102067, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.4272499830956933, vector3D0.getX(), 0.01D);
      assertEquals(1.6787316017153124, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.4946791233116909, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.8584073464102067), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      double double1 = Vector3D.distanceInf(vector3D0, vector3D0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.7568024953079282, vector3D0.getNormInf(), 0.01D);
      assertEquals((-0.7568024953079282), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.8584073464102067, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.4272499830956933, vector3D0.getX(), 0.01D);
      assertEquals(1.6787316017153124, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.4946791233116909, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.8584073464102067), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = 4.0;
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.8584073464102067, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.6787316017153124, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.4946791233116909, vector3D0.getY(), 0.01D);
      assertEquals(0.4272499830956933, vector3D0.getX(), 0.01D);
      assertEquals(0.7568024953079282, vector3D0.getNormInf(), 0.01D);
      assertEquals((-0.8584073464102067), vector3D0.getDelta(), 0.01D);
      assertEquals((-0.7568024953079282), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      Vector3D vector3D1 = new Vector3D(double0, vector3D0, double0, vector3D0, double0, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotNull(vector3D1);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.8584073464102067, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.6787316017153124, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.4946791233116909, vector3D0.getY(), 0.01D);
      assertEquals(0.4272499830956933, vector3D0.getX(), 0.01D);
      assertEquals(0.7568024953079282, vector3D0.getNormInf(), 0.01D);
      assertEquals((-0.8584073464102067), vector3D0.getDelta(), 0.01D);
      assertEquals((-0.7568024953079282), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(5.9361494797402905, vector3D1.getY(), 0.01D);
      assertEquals(0.8584073464102067, vector3D1.getAlpha(), 0.01D);
      assertEquals((-9.081629943695138), vector3D1.getZ(), 0.01D);
      assertEquals(11.999999999999998, vector3D1.getNorm(), 0.01D);
      assertEquals(143.99999999999997, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(20.144779220583747, vector3D1.getNorm1(), 0.01D);
      assertEquals(5.126999797148319, vector3D1.getX(), 0.01D);
      assertEquals(9.081629943695138, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-0.8584073464102067), vector3D1.getDelta(), 0.01D);
  }

  @Test
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      double double0 = (-0.25);
      Vector3D vector3D1 = vector3D0.add(double0, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.75, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.75, vector3D1.getNorm(), 0.01D);
      assertEquals(0.5625, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.75, vector3D1.getNormInf(), 0.01D);
      assertEquals((-0.75), vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = 4.0;
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(0.4946791233116909, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.8584073464102067, vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.8584073464102067), vector3D0.getDelta(), 0.01D);
      assertEquals((-0.7568024953079282), vector3D0.getZ(), 0.01D);
      assertEquals(1.6787316017153124, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.4272499830956933, vector3D0.getX(), 0.01D);
      assertEquals(0.7568024953079282, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      
      double double1 = Vector3D.distance1(vector3D0, vector3D0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.4946791233116909, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.8584073464102067, vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.8584073464102067), vector3D0.getDelta(), 0.01D);
      assertEquals((-0.7568024953079282), vector3D0.getZ(), 0.01D);
      assertEquals(1.6787316017153124, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.4272499830956933, vector3D0.getX(), 0.01D);
      assertEquals(0.7568024953079282, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
  }

  @Test
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      double double0 = Vector3D.distance(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
  }
}
