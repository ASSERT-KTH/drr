/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:48 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math.fraction.Fraction;
import org.apache.commons.math.fraction.FractionFormat;
import org.apache.commons.math.fraction.ProperFractionFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ProperFractionFormatEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ProperFractionFormat properFractionFormat0 = null;
      try {
        properFractionFormat0 = new ProperFractionFormat(numberFormat0, numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // whole format can not be null.
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = "KR-%:6;1i&&n-l'I";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
      assertNotNull(choiceFormat0);
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) choiceFormat0, (NumberFormat) choiceFormat0, (NumberFormat) choiceFormat0);
      assertNotNull(properFractionFormat0);
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      
      try {
        Fraction fraction0 = properFractionFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable fraction number: \"KR-%:6;1i&&n-l'I\"
         //
      }
  }

  @Test
  public void test2() {}
//   @Test
//   public void test2()  throws Throwable  {
//       String string0 = "Ej S{Mp0";
//       DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
//       assertNotNull(decimalFormatSymbols0);
//       assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
//       assertEquals('#', decimalFormatSymbols0.getDigit());
//       assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
//       assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
//       assertEquals('0', decimalFormatSymbols0.getZeroDigit());
//       assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
//       assertEquals('%', decimalFormatSymbols0.getPercent());
//       assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
//       assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
//       assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
//       assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
//       assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
//       assertEquals('-', decimalFormatSymbols0.getMinusSign());
//       assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
//       
//       DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols0);
//       assertNotNull(decimalFormat0);
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("Ej S{Mp", decimalFormat0.getPositivePrefix());
//       assertEquals("Ej S{Mp#0", decimalFormat0.toLocalizedPattern());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals("Ej S{Mp#0", decimalFormat0.toPattern());
//       assertEquals(false, decimalFormat0.isGroupingUsed());
//       assertEquals(0, decimalFormat0.getGroupingSize());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("-Ej S{Mp", decimalFormat0.getNegativePrefix());
//       assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
//       assertEquals('#', decimalFormatSymbols0.getDigit());
//       assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
//       assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
//       assertEquals('0', decimalFormatSymbols0.getZeroDigit());
//       assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
//       assertEquals('%', decimalFormatSymbols0.getPercent());
//       assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
//       assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
//       assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
//       assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
//       assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
//       assertEquals('-', decimalFormatSymbols0.getMinusSign());
//       assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
//       
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       
//       DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getNumberInstance(locale0);
//       assertNotNull(decimalFormat1);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals(1, decimalFormat1.getMultiplier());
//       assertEquals("", decimalFormat1.getPositiveSuffix());
//       assertEquals(0, decimalFormat1.getMinimumFractionDigits());
//       assertEquals(3, decimalFormat1.getGroupingSize());
//       assertEquals("", decimalFormat1.getNegativeSuffix());
//       assertEquals(false, decimalFormat1.isParseIntegerOnly());
//       assertEquals(3, decimalFormat1.getMaximumFractionDigits());
//       assertEquals("-", decimalFormat1.getNegativePrefix());
//       assertEquals(2147483647, decimalFormat1.getMaximumIntegerDigits());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
//       assertEquals(true, decimalFormat1.isGroupingUsed());
//       assertEquals(false, decimalFormat1.isParseBigDecimal());
//       assertEquals("", decimalFormat1.getPositivePrefix());
//       assertEquals(false, decimalFormat1.isDecimalSeparatorAlwaysShown());
//       assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
//       assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
//       assertEquals("#,##0.###", decimalFormat1.toPattern());
//       assertFalse(decimalFormat1.equals((Object)decimalFormat0));
//       assertNotSame(decimalFormat1, decimalFormat0);
//       
//       ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) decimalFormat0, (NumberFormat) decimalFormat1, (NumberFormat) decimalFormat1);
//       assertNotNull(properFractionFormat0);
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("Ej S{Mp", decimalFormat0.getPositivePrefix());
//       assertEquals("Ej S{Mp#0", decimalFormat0.toLocalizedPattern());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals("Ej S{Mp#0", decimalFormat0.toPattern());
//       assertEquals(false, decimalFormat0.isGroupingUsed());
//       assertEquals(0, decimalFormat0.getGroupingSize());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("-Ej S{Mp", decimalFormat0.getNegativePrefix());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals(1, decimalFormat1.getMultiplier());
//       assertEquals("", decimalFormat1.getPositiveSuffix());
//       assertEquals(0, decimalFormat1.getMinimumFractionDigits());
//       assertEquals(3, decimalFormat1.getGroupingSize());
//       assertEquals("", decimalFormat1.getNegativeSuffix());
//       assertEquals(false, decimalFormat1.isParseIntegerOnly());
//       assertEquals(3, decimalFormat1.getMaximumFractionDigits());
//       assertEquals("-", decimalFormat1.getNegativePrefix());
//       assertEquals(2147483647, decimalFormat1.getMaximumIntegerDigits());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
//       assertEquals(true, decimalFormat1.isGroupingUsed());
//       assertEquals(false, decimalFormat1.isParseBigDecimal());
//       assertEquals("", decimalFormat1.getPositivePrefix());
//       assertEquals(false, decimalFormat1.isDecimalSeparatorAlwaysShown());
//       assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
//       assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
//       assertEquals("#,##0.###", decimalFormat1.toPattern());
//       assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
//       assertEquals('#', decimalFormatSymbols0.getDigit());
//       assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
//       assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
//       assertEquals('0', decimalFormatSymbols0.getZeroDigit());
//       assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
//       assertEquals('%', decimalFormatSymbols0.getPercent());
//       assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
//       assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
//       assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
//       assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
//       assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
//       assertEquals('-', decimalFormatSymbols0.getMinusSign());
//       assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
//       assertFalse(decimalFormat0.equals((Object)decimalFormat1));
//       assertFalse(decimalFormat1.equals((Object)decimalFormat0));
//       assertNotSame(decimalFormat0, decimalFormat1);
//       assertNotSame(decimalFormat1, decimalFormat0);
//       
//       Fraction fraction0 = properFractionFormat0.parse(string0);
//       assertNotNull(fraction0);
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("Ej S{Mp", decimalFormat0.getPositivePrefix());
//       assertEquals("Ej S{Mp#0", decimalFormat0.toLocalizedPattern());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals("Ej S{Mp#0", decimalFormat0.toPattern());
//       assertEquals(false, decimalFormat0.isGroupingUsed());
//       assertEquals(0, decimalFormat0.getGroupingSize());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("-Ej S{Mp", decimalFormat0.getNegativePrefix());
//       assertEquals(1, fraction0.getDenominator());
//       assertEquals(0, fraction0.byteValue());
//       assertEquals(0, fraction0.intValue());
//       assertEquals(0L, fraction0.longValue());
//       assertEquals(0, fraction0.shortValue());
//       assertEquals(0, fraction0.getNumerator());
//       assertEquals(0.0, fraction0.doubleValue(), 0.01D);
//       assertEquals(0.0F, fraction0.floatValue(), 0.01F);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals(1, decimalFormat1.getMultiplier());
//       assertEquals("", decimalFormat1.getPositiveSuffix());
//       assertEquals(0, decimalFormat1.getMinimumFractionDigits());
//       assertEquals(3, decimalFormat1.getGroupingSize());
//       assertEquals("", decimalFormat1.getNegativeSuffix());
//       assertEquals(false, decimalFormat1.isParseIntegerOnly());
//       assertEquals(3, decimalFormat1.getMaximumFractionDigits());
//       assertEquals("-", decimalFormat1.getNegativePrefix());
//       assertEquals(2147483647, decimalFormat1.getMaximumIntegerDigits());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
//       assertEquals(true, decimalFormat1.isGroupingUsed());
//       assertEquals(false, decimalFormat1.isParseBigDecimal());
//       assertEquals("", decimalFormat1.getPositivePrefix());
//       assertEquals(false, decimalFormat1.isDecimalSeparatorAlwaysShown());
//       assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
//       assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
//       assertEquals("#,##0.###", decimalFormat1.toPattern());
//       assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
//       assertEquals('#', decimalFormatSymbols0.getDigit());
//       assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
//       assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
//       assertEquals('0', decimalFormatSymbols0.getZeroDigit());
//       assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
//       assertEquals('%', decimalFormatSymbols0.getPercent());
//       assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
//       assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
//       assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
//       assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
//       assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
//       assertEquals('-', decimalFormatSymbols0.getMinusSign());
//       assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
//       assertFalse(decimalFormat0.equals((Object)decimalFormat1));
//       assertFalse(decimalFormat1.equals((Object)decimalFormat0));
//       assertNotSame(decimalFormat0, decimalFormat1);
//       assertNotSame(decimalFormat1, decimalFormat0);
//   }

  @Test
  public void test3()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      String string0 = "overflow: too large to negate";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
      assertNotNull(choiceFormat0);
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      
      properFractionFormat0.setNumeratorFormat((NumberFormat) choiceFormat0);
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      
      String string1 = FractionFormat.formatFraction(fraction0);
      assertNotNull(string1);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertFalse(string1.equals((Object)string0));
      assertEquals("1 / 1", string1);
      assertNotSame(string1, string0);
      
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      
      Fraction fraction1 = (Fraction)properFractionFormat0.parseObject(string1, parsePosition0);
      assertNotNull(fraction1);
      assertEquals("java.text.ParsePosition[index=5,errorIndex=2]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getErrorIndex());
      assertEquals(5, parsePosition0.getIndex());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertFalse(string1.equals((Object)string0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(string1, string0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  //@Test
  public void test4()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      String string0 = "9-6eG'Fnf!)hP)N";
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      
      Object object0 = properFractionFormat0.parseObject(string0, parsePosition0);
      assertNull(object0);
      assertEquals(1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
  }

  @Test
  public void test5()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      String string0 = "35e|8_Q!r*i_U";
      try {
        Fraction fraction0 = properFractionFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable fraction number: \"35e|8_Q!r*i_U\"
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      
      String string0 = FractionFormat.formatFraction(fraction0);
      assertNotNull(string0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals("1 / 1", string0);
      
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      
      Fraction fraction1 = (Fraction)properFractionFormat0.parseObject(string0, parsePosition0);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals("java.text.ParsePosition[index=5,errorIndex=-1]", parsePosition0.toString());
      assertEquals(5, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test7()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      
      String string0 = "overflow: add";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(29, stringBuffer0.capacity());
      assertEquals("overflow: add", stringBuffer0.toString());
      assertEquals(13, stringBuffer0.length());
      
      int int0 = 6;
      FieldPosition fieldPosition0 = new FieldPosition(int0);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(6, fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=6,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      
      StringBuffer stringBuffer1 = properFractionFormat0.format(fraction0, stringBuffer0, fieldPosition0);
      assertNotNull(stringBuffer1);
      assertEquals(20, stringBuffer1.length());
      assertEquals(29, stringBuffer1.capacity());
      assertEquals("overflow: add1 0 / 1", stringBuffer1.toString());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(20, stringBuffer0.length());
      assertEquals(29, stringBuffer0.capacity());
      assertEquals("overflow: add1 0 / 1", stringBuffer0.toString());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(6, fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=6,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
  }

  @Test
  public void test8()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      
      StringBuffer stringBuffer0 = null;
      int int0 = 268;
      FieldPosition fieldPosition0 = new FieldPosition(int0);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals("java.text.FieldPosition[field=268,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(268, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      // Undeclared exception!
      try {
        StringBuffer stringBuffer1 = properFractionFormat0.format(fraction0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      String string0 = "overflow: add";
      int int0 = 6;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition0.toString());
      assertEquals(6, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      
      Object object0 = properFractionFormat0.parseObject(string0, parsePosition0);
      assertNull(object0);
      assertEquals(6, parsePosition0.getIndex());
      assertEquals(6, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=6,errorIndex=6]", parsePosition0.toString());
  }
}
