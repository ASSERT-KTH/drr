/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:33:07 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.AttributedCharacterIterator;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import org.apache.commons.math.fraction.Fraction;
import org.apache.commons.math.fraction.FractionFormat;
import org.apache.commons.math.fraction.ProperFractionFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ProperFractionFormatEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ProperFractionFormat properFractionFormat0 = null;
      try {
        properFractionFormat0 = new ProperFractionFormat(numberFormat0, numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // whole format can not be null.
         //
      }
  }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       String string0 = "@!FoijEl4";
//       String string1 = "/\\";
//       assertNotSame(string1, string0);
//       
//       ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
//       assertNotNull(choiceFormat0);
//       assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
//       assertEquals(true, choiceFormat0.isGroupingUsed());
//       assertEquals("", choiceFormat0.toPattern());
//       assertEquals(3, choiceFormat0.getMaximumFractionDigits());
//       assertEquals(false, choiceFormat0.isParseIntegerOnly());
//       assertEquals(0, choiceFormat0.getMinimumFractionDigits());
//       assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
//       assertNotSame(string0, string1);
//       assertFalse(string0.equals((Object)string1));
//       
//       DecimalFormat decimalFormat0 = (DecimalFormat)FractionFormat.getDefaultNumberFormat();
//       assertNotNull(decimalFormat0);
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals("#,##0", decimalFormat0.toPattern());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("#.##0", decimalFormat0.toLocalizedPattern());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(true, decimalFormat0.isParseIntegerOnly());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       
//       ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) choiceFormat0, (NumberFormat) choiceFormat0, (NumberFormat) decimalFormat0);
//       assertNotNull(properFractionFormat0);
//       assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
//       assertEquals(true, choiceFormat0.isGroupingUsed());
//       assertEquals("", choiceFormat0.toPattern());
//       assertEquals(3, choiceFormat0.getMaximumFractionDigits());
//       assertEquals(false, choiceFormat0.isParseIntegerOnly());
//       assertEquals(0, choiceFormat0.getMinimumFractionDigits());
//       assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals("#,##0", decimalFormat0.toPattern());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("#.##0", decimalFormat0.toLocalizedPattern());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(true, decimalFormat0.isParseIntegerOnly());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertNotSame(string0, string1);
//       assertFalse(string0.equals((Object)string1));
//       
//       try {
//         Fraction fraction0 = properFractionFormat0.parse(string1);
//         fail("Expecting exception: ParseException");
//       
//       } catch(ParseException e) {
//          //
//          // Unparseable fraction number: \"/\\\"
//          //
//       }
//   }

  @Test
  public void test2()  throws Throwable  {
      String string0 = "@!FoijEl4";
      int int0 = 1;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
      
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
      assertNotNull(choiceFormat0);
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) choiceFormat0, (NumberFormat) choiceFormat0, (NumberFormat) choiceFormat0);
      assertNotNull(properFractionFormat0);
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      
      Fraction fraction0 = properFractionFormat0.parse(string0, parsePosition0);
      assertNull(fraction0);
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(1, parsePosition0.getErrorIndex());
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      int int0 = (-51);
      String string0 = properFractionFormat0.format((Object) int0);
      assertNotNull(string0);
      assertEquals("-51 0 / 1", string0);
      
      Fraction fraction0 = (Fraction)properFractionFormat0.parseObject(string0);
      assertNotNull(fraction0);
      assertEquals(-51, fraction0.byteValue());
      assertEquals(-51, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-51L), fraction0.longValue());
      assertEquals(-51, fraction0.getNumerator());
      assertEquals(-51, fraction0.intValue());
      assertEquals((-51.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-51.0), fraction0.doubleValue(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      String string0 = "|XbC/ ";
      try {
        Object object0 = properFractionFormat0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      
      String string0 = FractionFormat.formatFraction(fraction0);
      assertNotNull(string0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals("0 / 1", string0);
      
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      Fraction fraction1 = (Fraction)properFractionFormat0.parseObject(string0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test6()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      AttributedCharacterIterator attributedCharacterIterator0 = properFractionFormat0.formatToCharacterIterator((Object) fraction0);
      assertNotNull(attributedCharacterIterator0);
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(5, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(5, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test
  public void test7()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      String string0 = "1G80!xn\"*[";
      try {
        Object object0 = properFractionFormat0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }
}
