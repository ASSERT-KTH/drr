/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:34:09 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.exception.DimensionMismatchException;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.apache.commons.math.exception.OutOfRangeException;
import org.apache.commons.math.util.MultidimensionalCounter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class MultidimensionalCounterEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 813;
      intArray0[1] = int0;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      intArray1[0] = intArray0[1];
      intArray1[1] = intArray0[1];
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(multidimensionalCounter0);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertEquals(660969, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {813, 813}, intArray1);
      
      try {
        int int1 = multidimensionalCounter0.getCount(intArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 813 out of [0, 812] range
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 126;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(126, multidimensionalCounter0.getSize());
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {126}, intArray0);
      
      String string0 = multidimensionalCounter0.toString();
      assertNotNull(string0);
      assertEquals(126, multidimensionalCounter0.getSize());
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals("[0]", string0);
      assertArrayEquals(new int[] {126}, intArray0);
  }

  @Test
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-53);
      intArray0[0] = int0;
      int int1 = 904;
      intArray0[1] = int1;
      int int2 = 2097;
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      int int4 = 1;
      intArray0[4] = int4;
      int int5 = 625;
      intArray0[5] = int5;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1629844440, multidimensionalCounter0.getSize());
      assertEquals(6, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {(-53), 904, 2097, 1, 1, 625}, intArray0);
      
      // Undeclared exception!
      try {
        String string0 = multidimensionalCounter0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 6
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-57);
      intArray0[0] = int0;
      int int1 = 813;
      intArray0[1] = int1;
      int int2 = (-327);
      intArray0[2] = int2;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertEquals(15153507, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {(-57), 813, (-327)}, intArray0);
      
      try {
        int int3 = multidimensionalCounter0.getCount(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -57 out of [0, -58] range
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 57;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(57, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {57}, intArray0);
      
      // Undeclared exception!
      try {
        int[] intArray1 = multidimensionalCounter0.getCounts(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 57 out of [0, 57] range
         //
      }
  }

  //@Test
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-57);
      intArray0[0] = int0;
      int int1 = 813;
      intArray0[1] = int1;
      int int2 = (-327);
      intArray0[2] = int2;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertEquals(15153507, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {(-57), 813, (-327)}, intArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = multidimensionalCounter0.getCounts(intArray1[0]);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertEquals(15153507, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {8077, 627, 2147483556}, intArray2);
      assertArrayEquals(new int[] {(-57), 813, (-327)}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }

  @Test
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 710;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(710, multidimensionalCounter0.getSize());
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {710}, intArray0);
      
      int int1 = (-1);
      // Undeclared exception!
      try {
        int[] intArray1 = multidimensionalCounter0.getCounts(int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1 out of [0, 710] range
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[3];
      MultidimensionalCounter multidimensionalCounter0 = null;
      try {
        multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1;
      intArray0[0] = int0;
      intArray0[1] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {1, 1}, intArray0);
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();
      assertNotNull(multidimensionalCounter_Iterator0);
      assertEquals(1, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {1, 1}, intArray0);
      
      Integer integer0 = multidimensionalCounter_Iterator0.next();
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertEquals(0, (int)integer0);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      
      Integer integer1 = multidimensionalCounter_Iterator0.next();
      assertFalse(integer1.equals((Object)integer0));
      assertNotSame(integer1, integer0);
      assertEquals(1, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertEquals(1, (int)integer1);
      assertArrayEquals(new int[] {1, 1}, intArray0);
  }

  @Test
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-57);
      intArray0[0] = int0;
      int int1 = 813;
      intArray0[1] = int1;
      intArray0[2] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertEquals(2641437, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {(-57), 813, (-57)}, intArray0);
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();
      assertNotNull(multidimensionalCounter_Iterator0);
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertEquals(2641437, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {(-57), 813, (-57)}, intArray0);
      
      boolean boolean0 = multidimensionalCounter_Iterator0.hasNext();
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertEquals(2641437, multidimensionalCounter0.getSize());
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-57), 813, (-57)}, intArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1;
      intArray0[0] = int0;
      intArray0[1] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {1, 1}, intArray0);
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();
      assertNotNull(multidimensionalCounter_Iterator0);
      assertEquals(1, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {1, 1}, intArray0);
      
      Integer integer0 = multidimensionalCounter_Iterator0.next();
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertEquals(0, (int)integer0);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      
      boolean boolean0 = multidimensionalCounter_Iterator0.hasNext();
      assertEquals(1, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertFalse(boolean0);
      assertArrayEquals(new int[] {1, 1}, intArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 710;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(710, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {710}, intArray0);
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      assertNotNull(multidimensionalCounter_Iterator0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(710, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {710}, intArray0);
      
      int int1 = multidimensionalCounter_Iterator0.getCount();
      assertFalse(int1 == int0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(710, multidimensionalCounter0.getSize());
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {710}, intArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-57);
      intArray0[0] = int0;
      int int1 = 813;
      intArray0[1] = int1;
      int int2 = (-327);
      intArray0[2] = int2;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(15153507, multidimensionalCounter0.getSize());
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {(-57), 813, (-327)}, intArray0);
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();
      assertNotNull(multidimensionalCounter_Iterator0);
      assertEquals(15153507, multidimensionalCounter0.getSize());
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {(-57), 813, (-327)}, intArray0);
      
      int[] intArray1 = multidimensionalCounter_Iterator0.getCounts();
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(15153507, multidimensionalCounter0.getSize());
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {0, 0, (-1)}, intArray1);
      assertArrayEquals(new int[] {(-57), 813, (-327)}, intArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1;
      intArray0[0] = int0;
      intArray0[1] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {1, 1}, intArray0);
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();
      assertNotNull(multidimensionalCounter_Iterator0);
      assertEquals(1, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {1, 1}, intArray0);
      
      // Undeclared exception!
      try {
        multidimensionalCounter_Iterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 4082;
      intArray0[0] = int0;
      intArray0[1] = intArray0[0];
      intArray0[2] = int0;
      int int1 = (-334);
      intArray0[3] = int1;
      intArray0[4] = intArray0[1];
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(775960352, multidimensionalCounter0.getSize());
      assertEquals(5, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {4082, 4082, 4082, (-334), 4082}, intArray0);
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();
      assertNotNull(multidimensionalCounter_Iterator0);
      assertEquals(775960352, multidimensionalCounter0.getSize());
      assertEquals(5, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {4082, 4082, 4082, (-334), 4082}, intArray0);
      
      // Undeclared exception!
      try {
        int int2 = multidimensionalCounter_Iterator0.getCount(intArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4082
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-57);
      intArray0[0] = int0;
      int int1 = 813;
      intArray0[1] = int1;
      int int2 = (-327);
      intArray0[2] = int2;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(15153507, multidimensionalCounter0.getSize());
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {(-57), 813, (-327)}, intArray0);
      
      int[] intArray1 = multidimensionalCounter0.getSizes();
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(15153507, multidimensionalCounter0.getSize());
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {(-57), 813, (-327)}, intArray1);
      assertArrayEquals(new int[] {(-57), 813, (-327)}, intArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 710;
      intArray0[0] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(710, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {710}, intArray0);
      
      int int1 = multidimensionalCounter0.getDimension();
      assertFalse(int1 == int0);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(710, multidimensionalCounter0.getSize());
      assertEquals(1, int1);
      assertArrayEquals(new int[] {710}, intArray0);
  }

  @Test
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1;
      intArray0[0] = int0;
      intArray0[1] = int0;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertNotNull(multidimensionalCounter0);
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertEquals(1, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {1, 1}, intArray0);
      
      int int1 = multidimensionalCounter0.getSize();
      assertTrue(int1 == int0);
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertEquals(1, multidimensionalCounter0.getSize());
      assertEquals(1, int1);
      assertArrayEquals(new int[] {1, 1}, intArray0);
  }
}
