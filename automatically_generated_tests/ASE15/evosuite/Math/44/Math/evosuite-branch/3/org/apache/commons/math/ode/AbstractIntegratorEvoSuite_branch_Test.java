/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:10:28 GMT 2014
 */

package org.apache.commons.math.ode;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math.ode.sampling.StepHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class AbstractIntegratorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double double0 = (-258.3836);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertNotNull(threeEighthesIntegrator0);
      
      Collection<EventHandler> collection0 = threeEighthesIntegrator0.getEventHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertNotNull(collection0);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-258.3836);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertNotNull(threeEighthesIntegrator0);
      
      int int0 = threeEighthesIntegrator0.getEvaluations();
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(0, int0);
      
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((double) int0);
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, eulerIntegrator0.getEvaluations());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(2147483647, eulerIntegrator0.getMaxEvaluations());
      assertNotNull(eulerIntegrator0);
      
      double double1 = eulerIntegrator0.getCurrentSignedStepsize();
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, eulerIntegrator0.getEvaluations());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(2147483647, eulerIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = (-258.3836);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertNotNull(threeEighthesIntegrator0);
      
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try {
        threeEighthesIntegrator0.computeDerivatives(doubleArray0[2], doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-387.0373087493518);
      double[] doubleArray0 = new double[8];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(double0, double0, doubleArray0, doubleArray0);
      assertEquals(387.0373087493518, dormandPrince54Integrator0.getMinStep(), 0.01D);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(387.0373087493518, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, dormandPrince54Integrator0.getMaxEvaluations());
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0, dormandPrince54Integrator0.getEvaluations());
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01D);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01D);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(387.0373087493518, dormandPrince54Integrator0.getMaxStep(), 0.01D);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      dormandPrince54Integrator0.clearEventHandlers();
      assertEquals(387.0373087493518, dormandPrince54Integrator0.getMinStep(), 0.01D);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(387.0373087493518, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, dormandPrince54Integrator0.getMaxEvaluations());
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0, dormandPrince54Integrator0.getEvaluations());
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01D);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01D);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(387.0373087493518, dormandPrince54Integrator0.getMaxStep(), 0.01D);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-2512.1);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(double0);
      assertEquals(2147483647, eulerIntegrator0.getMaxEvaluations());
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, eulerIntegrator0.getEvaluations());
      assertNotNull(eulerIntegrator0);
      
      double double1 = eulerIntegrator0.getCurrentStepStart();
      assertEquals(2147483647, eulerIntegrator0.getMaxEvaluations());
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, eulerIntegrator0.getEvaluations());
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = (-2512.1);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(double0, double0, double0, double0);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01D);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(2512.1, dormandPrince54Integrator0.getMinStep(), 0.01D);
      assertEquals(2512.1, dormandPrince54Integrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, dormandPrince54Integrator0.getMaxEvaluations());
      assertEquals(2512.1, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01D);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0, dormandPrince54Integrator0.getEvaluations());
      assertNotNull(dormandPrince54Integrator0);
      
      String string0 = dormandPrince54Integrator0.getName();
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01D);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(2512.1, dormandPrince54Integrator0.getMinStep(), 0.01D);
      assertEquals(2512.1, dormandPrince54Integrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, dormandPrince54Integrator0.getMaxEvaluations());
      assertEquals(2512.1, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01D);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0, dormandPrince54Integrator0.getEvaluations());
      assertEquals("Dormand-Prince 5(4)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 1.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(double0, double0, double0, double0);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(1.0, dormandPrince54Integrator0.getMinStep(), 0.01D);
      assertEquals(1.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, dormandPrince54Integrator0.getEvaluations());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01D);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(2147483647, dormandPrince54Integrator0.getMaxEvaluations());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01D);
      assertEquals(1.0, dormandPrince54Integrator0.getMaxStep(), 0.01D);
      assertNotNull(dormandPrince54Integrator0);
      
      int int0 = dormandPrince54Integrator0.getMaxEvaluations();
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(1.0, dormandPrince54Integrator0.getMinStep(), 0.01D);
      assertEquals(1.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, dormandPrince54Integrator0.getEvaluations());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01D);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(2147483647, dormandPrince54Integrator0.getMaxEvaluations());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01D);
      assertEquals(1.0, dormandPrince54Integrator0.getMaxStep(), 0.01D);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 1.0;
      double[] doubleArray0 = new double[3];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(double0, double0, doubleArray0, doubleArray0);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(1.0, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(1.0, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(1.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(highamHall54Integrator0);
      
      EventHandler eventHandler0 = null;
      int int0 = 5;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, doubleArray0[0], doubleArray0[0]);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(pegasusSolver0);
      
      EventState eventState0 = new EventState(eventHandler0, doubleArray0[0], double0, int0, (UnivariateRealSolver) pegasusSolver0);
      assertEquals(1.0, eventState0.getConvergence(), 0.01D);
      assertEquals(false, eventState0.stop());
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01D);
      assertEquals(5, eventState0.getMaxIterationCount());
      assertEquals(Double.NEGATIVE_INFINITY, eventState0.getEventTime(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eventState0);
      
      EventHandler eventHandler1 = eventState0.getEventHandler();
      assertEquals(1.0, eventState0.getConvergence(), 0.01D);
      assertEquals(false, eventState0.stop());
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01D);
      assertEquals(5, eventState0.getMaxIterationCount());
      assertEquals(Double.NEGATIVE_INFINITY, eventState0.getEventTime(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNull(eventHandler1);
      
      highamHall54Integrator0.addEventHandler(eventHandler1, (double) int0, double0, int0);
      assertEquals(1.0, eventState0.getConvergence(), 0.01D);
      assertEquals(false, eventState0.stop());
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01D);
      assertEquals(5, eventState0.getMaxIterationCount());
      assertEquals(Double.NEGATIVE_INFINITY, eventState0.getEventTime(), 0.01D);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(1.0, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(1.0, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(1.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-387.0373087493518);
      double[] doubleArray0 = new double[8];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(double0, double0, doubleArray0, doubleArray0);
      assertEquals(387.0373087493518, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(387.0373087493518, dormandPrince54Integrator0.getMinStep(), 0.01D);
      assertEquals(387.0373087493518, dormandPrince54Integrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, dormandPrince54Integrator0.getMaxEvaluations());
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01D);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(0, dormandPrince54Integrator0.getEvaluations());
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      StepHandler stepHandler0 = null;
      dormandPrince54Integrator0.addStepHandler(stepHandler0);
      assertEquals(387.0373087493518, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(387.0373087493518, dormandPrince54Integrator0.getMinStep(), 0.01D);
      assertEquals(387.0373087493518, dormandPrince54Integrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, dormandPrince54Integrator0.getMaxEvaluations());
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01D);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(0, dormandPrince54Integrator0.getEvaluations());
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-258.3836);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(double0);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertNotNull(midpointIntegrator0);
      
      Collection<StepHandler> collection0 = midpointIntegrator0.getStepHandlers();
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertNotNull(collection0);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 1.0;
      double[] doubleArray0 = new double[3];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(double0, double0, doubleArray0, doubleArray0);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(1.0, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(1.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(1.0, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(highamHall54Integrator0);
      
      highamHall54Integrator0.clearStepHandlers();
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(1.0, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(1.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(1.0, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
