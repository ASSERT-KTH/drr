/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:07:30 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseSecantSolverEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 9.2195E-9;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(9.2195E-9, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 21;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, double0, double0, allowedSolution0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(9.2195E-9, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(21, illinoisSolver0.getMaxEvaluations());
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(9.2195E-9, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = (-193.5910405928);
      assertFalse(double3 == double2);
      
      AllowedSolution allowedSolution1 = AllowedSolution.ABOVE_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double4 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double3, double1, double2, allowedSolution1);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertTrue(double2 == double0);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertEquals(9, illinoisSolver0.getEvaluations());
      assertEquals((-193.5910405928), illinoisSolver0.getMin(), 0.01D);
      assertEquals(9.2195E-9, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(21, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(9.2195E-9, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(4.037873705018821E-9, double4, 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 0.4627347354989522;
      double double1 = 2161.17946637894;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.4627347354989522, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2161.17946637894, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2161.17946637894, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertNotNull(illinoisSolver0);
      
      int int0 = (-1656);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      int int1 = 1720;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, (double) int1, double0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertNotNull(harmonicOscillator0);
      
      double double2 = illinoisSolver0.solve(int1, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int1, double0, allowedSolution0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.4627347354989522, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1720.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.4627347354989522, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2161.17946637894, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.4627347354989522, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1720, illinoisSolver0.getMaxEvaluations());
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(2161.17946637894, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(49.120185329117476, double2, 0.01D);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution1 = AllowedSolution.BELOW_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2161.17946637894, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      double double3 = pegasusSolver0.solve(int1, (UnivariateRealFunction) inverse0, (double) int0, double2, double0, allowedSolution1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertEquals(0.4627347354989522, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1720.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.4627347354989522, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2161.17946637894, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.4627347354989522, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1720, illinoisSolver0.getMaxEvaluations());
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(2161.17946637894, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1720, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-1656.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.4627347354989522, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(49.120185329117476, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2161.17946637894, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1606.8798146708828), double3, 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 2139.4;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double1, double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 18;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, double0, double1, allowedSolution0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(2139.4, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getMin(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(18, illinoisSolver0.getMaxEvaluations());
      assertEquals(2139.4, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = (-1680.6654234986277);
      assertFalse(double3 == double2);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double2, double1, double2);
      assertFalse(double0 == double3);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertTrue(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertEquals(2139.4, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(2139.4, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getMin(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(18, illinoisSolver0.getMaxEvaluations());
      assertEquals(2139.4, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      double double4 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double3, (double) int0, (double) int0, allowedSolution0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertTrue(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertEquals((-1680.6654234986277), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(2139.4, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(18.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(18.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(18, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(2139.4, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getMin(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(18, illinoisSolver0.getMaxEvaluations());
      assertEquals(2139.4, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-288.8032632931086), double4, 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 2139.4;
      double double2 = 2.499057115931724;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double2, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2.499057115931724, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 18;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double2, double0, double1, allowedSolution0);
      assertFalse(double3 == double2);
      assertTrue(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double3);
      assertEquals(2139.4, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2.499057115931724, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2.499057115931724, illinoisSolver0.getMin(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(18, illinoisSolver0.getMaxEvaluations());
      assertEquals(2139.4, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, double3, 0.01D);
      
      double double4 = (-1680.6654234986277);
      assertFalse(double4 == double3);
      
      AllowedSolution allowedSolution1 = AllowedSolution.ABOVE_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double5 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double4, double2, double3, allowedSolution1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertTrue(double3 == double0);
      assertFalse(double3 == double5);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double5);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertTrue(double2 == double5);
      assertFalse(double2 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double5);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double5 == double1);
      assertFalse(double5 == double3);
      assertTrue(double5 == double2);
      assertFalse(double5 == double0);
      assertFalse(double5 == double4);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double5);
      assertFalse(double0 == double2);
      assertTrue(double0 == double3);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertNotSame(allowedSolution0, allowedSolution1);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertEquals((-1680.6654234986277), illinoisSolver0.getMin(), 0.01D);
      assertEquals(2.499057115931724, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2139.4, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2.499057115931724, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(18, illinoisSolver0.getMaxEvaluations());
      assertEquals(2139.4, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2.499057115931724, double5, 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 2161.2298103;
      double double2 = 0.14451854645474824;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double2, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.14451854645474824, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2161.2298103, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(2161.2298103, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertNotNull(illinoisSolver0);
      
      int int0 = 10;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double2, double0, double1, allowedSolution0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(10, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.14451854645474824, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2161.2298103, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(2161.2298103, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2161.2298103, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.14451854645474824, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, double3, 0.01D);
      
      double double4 = (-189.18);
      assertFalse(double4 == double3);
      
      AllowedSolution allowedSolution1 = AllowedSolution.BELOW_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double5 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double4, double2, double3, allowedSolution1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double5);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertTrue(double0 == double3);
      assertFalse(double5 == double3);
      assertFalse(double5 == double0);
      assertFalse(double5 == double4);
      assertFalse(double5 == double1);
      assertFalse(double5 == double2);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double5);
      assertFalse(double2 == double0);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertTrue(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double5);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double5);
      assertFalse(double1 == double4);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double5);
      assertFalse(double4 == double0);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertEquals(0.14451854645474824, illinoisSolver0.getMax(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(10, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.14451854645474824, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2161.2298103, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-189.18), illinoisSolver0.getMin(), 0.01D);
      assertEquals(2161.2298103, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-15.712925092484275), double5, 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 2108.803;
      double double2 = 9.219544613762692E-9;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double2, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2108.803, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(9.219544613762692E-9, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(2108.803, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 24;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double2, double0, double1, allowedSolution0);
      assertTrue(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(2108.803, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2108.803, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(9.219544613762692E-9, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(9.219544613762692E-9, illinoisSolver0.getMin(), 0.01D);
      assertEquals(24, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(2108.803, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, double3, 0.01D);
      
      double double4 = (-727.9890008850705);
      assertFalse(double4 == double3);
      
      double double5 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double4, double2, double3, allowedSolution0);
      assertFalse(double5 == double3);
      assertFalse(double5 == double0);
      assertFalse(double5 == double4);
      assertTrue(double5 == double2);
      assertFalse(double5 == double1);
      assertFalse(double0 == double5);
      assertTrue(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double4);
      assertTrue(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double5);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertTrue(double2 == double5);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double5);
      assertFalse(double1 == double0);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double5);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-727.9890008850705), illinoisSolver0.getMin(), 0.01D);
      assertEquals(2108.803, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(9.219544613762692E-9, illinoisSolver0.getMax(), 0.01D);
      assertEquals(9.219544613762692E-9, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(24, illinoisSolver0.getMaxEvaluations());
      assertEquals(2108.803, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(9.219544613762692E-9, double5, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 0.46273;
      double double1 = 2160.747215850769;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(2160.747215850769, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(2160.747215850769, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.46273, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 19;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, double0, double0);
      assertFalse(double0 == double1);
      assertNotNull(harmonicOscillator0);
      
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, double1, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals(2160.747215850769, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(19, illinoisSolver0.getMaxEvaluations());
      assertEquals(2160.747215850769, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.46273, illinoisSolver0.getMin(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(2160.747215850769, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(19.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.46273, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.46273, double2, 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 2122.1405925033755;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double1, double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(2122.1405925033755, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(2122.1405925033755, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2122.1405925033755, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 4911;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, double0, double1, allowedSolution0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(2122.1405925033755, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(2122.1405925033755, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(2122.1405925033755, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(4911, illinoisSolver0.getMaxEvaluations());
      assertEquals(2122.1405925033755, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = (-1671.5);
      assertFalse(double3 == double2);
      
      double double4 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double3, double1, double2, allowedSolution0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertTrue(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2122.1405925033755, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(2122.1405925033755, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1671.5), illinoisSolver0.getMin(), 0.01D);
      assertEquals(4911, illinoisSolver0.getMaxEvaluations());
      assertEquals(2122.1405925033755, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2122.1405925033755, illinoisSolver0.getMax(), 0.01D);
      assertEquals(149.89702823567382, double4, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-534.742388764);
      double double1 = 2161.65;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double1, double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(2161.65, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2161.65, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2161.65, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 2249;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, double1, double0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(2249, illinoisSolver0.getMaxEvaluations());
      assertEquals(2161.65, illinoisSolver0.getMax(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-534.742388764), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-534.742388764), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2161.65, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2161.65, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2161.65, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(505.1344842741398, double2, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-0.18332915367917857);
      double double1 = 2161.2298103;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.18332915367917857), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2161.2298103, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(2161.2298103, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 421;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, double0, allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-0.18332915367917857), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-0.18332915367917857), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-0.18332915367917857), illinoisSolver0.getMin(), 0.01D);
      assertEquals(421.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2161.2298103, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2161.2298103, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(421, illinoisSolver0.getMaxEvaluations());
      assertEquals(421.0, double2, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 56.192365912817394;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(56.192365912817394, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      double double1 = regulaFalsiSolver0.getRelativeAccuracy();
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(56.192365912817394, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, double1, 0.01D);
      
      int int0 = 20;
      Logit logit0 = new Logit();
      assertNotNull(logit0);
      
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      assertNotNull(univariateRealFunction0);
      
      double double2 = regulaFalsiSolver0.solve(int0, univariateRealFunction0, double1, (double) int0, (double) int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(56.192365912817394, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(20, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(20.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(20.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(20.0, double2, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-853.21963);
      int int0 = 1111;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals((-853.21963), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-853.21963), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, (double) int0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-853.21963), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-853.21963), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(16, illinoisSolver0.getEvaluations());
      assertEquals(1111.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1111, illinoisSolver0.getMaxEvaluations());
      assertEquals((-853.21963), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-853.21963), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-15.707963267948966), double1, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 0.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertNotNull(pegasusSolver0);
      
      int int0 = 1677;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      double double1 = 896.850815128824;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) tan0, double1, (double) int0, allowedSolution0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1677.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1677, pegasusSolver0.getMaxEvaluations());
      assertEquals(1286.9254075644121, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(896.850815128824, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(87, pegasusSolver0.getEvaluations());
      assertEquals(1157.6768928478434, double2, 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-853.21963);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-853.21963), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals((-853.21963), illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-853.21963), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 1111;
      Minus minus0 = new Minus();
      assertNotNull(minus0);
      
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) minus0, double0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-853.21963), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1111.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-853.21963), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(1111, illinoisSolver0.getMaxEvaluations());
      assertEquals((-853.21963), illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(128.89018499999997, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-853.21963), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
  }
}
