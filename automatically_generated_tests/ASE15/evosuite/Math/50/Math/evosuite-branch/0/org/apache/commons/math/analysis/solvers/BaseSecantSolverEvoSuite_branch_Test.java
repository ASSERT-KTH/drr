/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:44:19 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Logistic;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.NumberIsTooLargeException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseSecantSolverEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 1386.268970041;
      int int0 = (-3820);
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1386.268970041, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      
      int int1 = 825;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) signum0, (double) int0, double0, allowedSolution0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(84.70172753075008, double1, 0.01D);
      assertEquals(825, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-3820.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(4, regulaFalsiSolver0.getEvaluations());
      assertEquals(1386.268970041, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1386.268970041, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1216.8655149795), regulaFalsiSolver0.getStartValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 1377.75042;
      int int0 = (-1058);
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1377.75042, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      
      int int1 = 914;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) signum0, (double) int0, double0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertEquals((-1058.0), double1, 0.01D);
      assertEquals(1377.75042, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(914, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1377.75042, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(159.87521000000015, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals((-1058.0), regulaFalsiSolver0.getMin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      
      int int0 = 399;
      double double0 = 1.0;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double1 = (-1160.383342082303);
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) atan0, double1, double0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.066929547586669E-7, double2, 0.01D);
      assertEquals(399, illinoisSolver0.getMaxEvaluations());
      assertEquals((-1160.383342082303), illinoisSolver0.getMin(), 0.01D);
      assertEquals(12, illinoisSolver0.getEvaluations());
      assertEquals((-579.6916710411515), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      
      int int0 = 557;
      int int1 = (-1127);
      Logistic logistic0 = new Logistic((double) int0, (double) int1, (double) int1, (double) int0, (double) int1, (double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(logistic0);
      
      double double0 = illinoisSolver0.solve(int0, (UnivariateRealFunction) logistic0, (double) int1, (double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1126.8071200558607), double0, 0.01D);
      assertEquals(557, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1127.0), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(13, illinoisSolver0.getEvaluations());
      assertEquals((-285.0), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(557.0, illinoisSolver0.getMax(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 1377.75042;
      int int0 = (-1058);
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1377.75042, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      
      int int1 = 914;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) signum0, (double) int0, (double) int1, (double) int1, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertEquals((-72.0), double1, 0.01D);
      assertEquals(914.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(914, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(914.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1377.75042, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1058.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int1, double1, (double) int1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(914.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals((-72.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(914.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(914.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(914, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(914.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1377.75042, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1058.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      
      AllowedSolution allowedSolution1 = AllowedSolution.BELOW_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double2 = pegasusSolver0.solve(int1, (UnivariateRealFunction) signum0, double1, (double) int1, allowedSolution1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(int1 == int0);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertFalse(int0 == int1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertEquals((-72.0), double2, 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(914.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(914.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(914, pegasusSolver0.getMaxEvaluations());
      assertEquals((-72.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-72.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(914.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(421.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(914.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(914, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(914.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1377.75042, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1058.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 1396.521330200667;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1396.521330200667, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      int int0 = 281;
      double double1 = (-808.368849458259);
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) signum0, double1, double0, (double) int0, allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(294.076240371204, double2, 0.01D);
      assertEquals(1396.521330200667, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(281, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals((-808.368849458259), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1396.521330200667, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(281.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, double2, (double) int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertNotNull(pegasusSolver0);
      assertEquals(294.076240371204, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(281.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(281.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1396.521330200667, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(281, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals((-808.368849458259), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1396.521330200667, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(281.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) signum0, double1, double2, allowedSolution0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertEquals(294.076240371204, double3, 0.01D);
      assertEquals(294.076240371204, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(281.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(294.076240371204, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-808.368849458259), pegasusSolver0.getMin(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(281.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-257.14630454352744), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(281, pegasusSolver0.getMaxEvaluations());
      assertEquals(1396.521330200667, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(281, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals((-808.368849458259), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1396.521330200667, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(281.0, regulaFalsiSolver0.getStartValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 1377.75042;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      int int0 = 849;
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, double0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(1377.75042, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(849.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(849.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      double double1 = (-1365.533088210468);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) signum0, double1, double0, allowedSolution0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(6.108665894766091, double2, 0.01D);
      assertEquals(6.108665894766091, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1377.75042, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1377.75042, pegasusSolver0.getMax(), 0.01D);
      assertEquals(849.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1365.533088210468), pegasusSolver0.getMin(), 0.01D);
      assertEquals(849, pegasusSolver0.getMaxEvaluations());
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(849.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-3752.5);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals((-3752.5), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      
      int int0 = 620;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.232595164407831E-31), double1, 0.01D);
      assertEquals((-3752.5), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(620, pegasusSolver0.getMaxEvaluations());
      assertEquals((-3752.5), pegasusSolver0.getMin(), 0.01D);
      assertEquals(620.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(19, pegasusSolver0.getEvaluations());
      assertEquals((-1566.25), pegasusSolver0.getStartValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 60;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double0 = (-1.0);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-6.1444870661029525E-19), double1, 0.01D);
      assertEquals(60.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(29.5, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(10, pegasusSolver0.getEvaluations());
      assertEquals(60, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.0), pegasusSolver0.getMin(), 0.01D);
      
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(60.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(60.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(60.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      double double2 = (-1478.4);
      assertFalse(double2 == double1);
      
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) cos0, double2, double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertEquals((-1157.7256222073804), double3, 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(60, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-739.2), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-1478.4), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(60.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(60.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-6.1444870661029525E-19), regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(60.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(60.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(29.5, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(10, pegasusSolver0.getEvaluations());
      assertEquals(60, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.0), pegasusSolver0.getMin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      int int0 = 399;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double0 = (-1160.383342082303);
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.089675755094743E-26, double1, 0.01D);
      assertEquals(399, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-380.6916710411515), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(399.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1160.383342082303), illinoisSolver0.getMin(), 0.01D);
      assertEquals(17, illinoisSolver0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-3752.5);
      int int0 = 620;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-3752.5), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-3752.5), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-3752.5), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, double0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(620.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-3752.5), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(20, pegasusSolver0.getEvaluations());
      assertEquals((-3752.5), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(620, pegasusSolver0.getMaxEvaluations());
      assertEquals((-3752.5), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-3752.5), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-3752.5), pegasusSolver0.getMin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      
      int int0 = 720;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, (double) int0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      double double0 = (-1138.1778790629207);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(367.6069930365076, double1, 0.01D);
      assertEquals((-209.08893953146037), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(720, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(24, regulaFalsiSolver0.getEvaluations());
      assertEquals(720.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-1138.1778790629207), regulaFalsiSolver0.getMin(), 0.01D);
      
      Sigmoid sigmoid0 = new Sigmoid();
      assertNotNull(sigmoid0);
      
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sigmoid0, double0, double1, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-1138.1778790629207), double2, 0.01D);
      assertEquals(720.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(720, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertEquals(367.6069930365076, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-1138.1778790629207), regulaFalsiSolver0.getMin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 620;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0, (double) int0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(620.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(620.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      
      int int0 = 399;
      Log10 log10_0 = new Log10();
      assertNotNull(log10_0);
      
      double double0 = 1.0;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) log10_0, (double) int0, double0, (double) int0, allowedSolution0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(399.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(399, illinoisSolver0.getMaxEvaluations());
      assertEquals(399.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      // Undeclared exception!
      try {
        double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) atan0, double1, double1, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1, 1]
         //
      }
  }
}
