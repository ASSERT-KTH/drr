/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:05:06 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Floor;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseSecantSolverEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 729;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-1979.6714856009646);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertEquals(729.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1979.6714856009646), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-625.3357428004822), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(729, illinoisSolver0.getMaxEvaluations());
      assertEquals(29, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.9047096183877462E-7), double1, 0.01D);
      
      AllowedSolution allowedSolution1 = AllowedSolution.ABOVE_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, (double) int0, allowedSolution1);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertEquals(729.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1979.6714856009646), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-625.3357428004822), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(729, illinoisSolver0.getMaxEvaluations());
      assertEquals(29, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.9047096183877462E-7), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(8, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(364.4999999047645, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(729.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(729, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertEquals(5.820966359087953E-7, double2, 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 729;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-1979.6714856009646);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertEquals((-1979.6714856009646), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-625.3357428004822), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(729.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(729, illinoisSolver0.getMaxEvaluations());
      assertEquals(29, illinoisSolver0.getEvaluations());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.9047096183877462E-7), double1, 0.01D);
      
      AllowedSolution allowedSolution1 = AllowedSolution.RIGHT_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, (double) int0, (double) int0, allowedSolution1);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertEquals(6, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(729.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(729, illinoisSolver0.getMaxEvaluations());
      assertEquals(729.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-1.9047096183877462E-7), illinoisSolver0.getMin(), 0.01D);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(3.346924457588034E-7, double2, 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 1.0E-6;
      double double1 = 191.06160720744307;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertNotNull(illinoisSolver0);
      assertFalse(double0 == double1);
      
      Log log0 = new Log();
      assertNotNull(log0);
      
      int int0 = 212;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) log0, double0, double1, allowedSolution0);
      assertEquals(1.0E-6, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(95.53080410372154, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(212, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(191.06160720744307, illinoisSolver0.getMax(), 0.01D);
      assertEquals(14, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getMin(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.9999998658938016, double2, 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 929.0;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(929.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(929.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(929.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 41;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = 478.3230320588;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sin0, (double) int0, double1, allowedSolution0);
      assertEquals(41.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(929.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(478.3230320588, illinoisSolver0.getMax(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(259.6615160294, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(929.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(929.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(41, illinoisSolver0.getMaxEvaluations());
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(120.13099223879021, double2, 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 963.562959043;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(963.562959043, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(963.562959043, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(963.562959043, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 41;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sin0, (double) int0, double0, allowedSolution0);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(502.2814795215, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(963.562959043, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(41, illinoisSolver0.getMaxEvaluations());
      assertEquals(963.562959043, illinoisSolver0.getMax(), 0.01D);
      assertEquals(963.562959043, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(963.562959043, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(41.0, illinoisSolver0.getMin(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(41.0, double1, 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 752;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-2018.9567418097552);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      double double1 = illinoisSolver0.getFunctionValueAccuracy();
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertEquals(1.0E-15, double1, 0.01D);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double1, double1, (double) int0);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(752.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      assertFalse(double1 == double0);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, double1, allowedSolution0);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(752.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(752, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(4, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2018.9567418097552), pegasusSolver0.getMin(), 0.01D);
      assertEquals(752.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(113.26394727488173, double2, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 960.0778359507557;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(960.0778359507557, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(960.0778359507557, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(960.0778359507557, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 41;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = 478.323;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sin0, (double) int0, double1, allowedSolution0);
      assertEquals(960.0778359507557, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(259.6615, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(960.0778359507557, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(478.323, illinoisSolver0.getMax(), 0.01D);
      assertEquals(41, illinoisSolver0.getMaxEvaluations());
      assertEquals(41.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(960.0778359507557, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(41.0, double2, 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 929.7587432812006;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(929.7587432812006, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(929.7587432812006, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(929.7587432812006, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 42;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = 478.3230320588;
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sin0, (double) int0, double1, allowedSolution0);
      assertEquals(42, illinoisSolver0.getMaxEvaluations());
      assertEquals(42.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(260.1615160294, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(929.7587432812006, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(929.7587432812006, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(478.3230320588, illinoisSolver0.getMax(), 0.01D);
      assertEquals(929.7587432812006, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(286.6559147670422, double2, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 437.04360368809756;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(437.04360368809756, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(437.04360368809756, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(437.04360368809756, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 41;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = 472.82190138854213;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sin0, (double) int0, double1, allowedSolution0);
      assertEquals(437.04360368809756, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(437.04360368809756, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(41, illinoisSolver0.getMaxEvaluations());
      assertEquals(256.91095069427104, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(472.82190138854213, illinoisSolver0.getMax(), 0.01D);
      assertEquals(437.04360368809756, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(41.0, illinoisSolver0.getMin(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(472.82190138854213, double2, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 926.5655684094683;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(926.5655684094683, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(926.5655684094683, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(926.5655684094683, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertNotNull(illinoisSolver0);
      
      int int0 = 81;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sin0, (double) int0, double0, allowedSolution0);
      assertEquals(926.5655684094683, illinoisSolver0.getMax(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(81.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(503.7827842047341, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(81, illinoisSolver0.getMaxEvaluations());
      assertEquals(926.5655684094683, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(926.5655684094683, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(926.5655684094683, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(720.5932234768895, double1, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-3772.6150484181208);
      double double1 = 1.445743919835673;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double1, double1, double0);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-3772.6150484181208), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.445743919835673, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.445743919835673, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 917;
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      double double2 = 3491.0514;
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) cos0, double1, double2);
      assertEquals(3491.0514, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(917, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals((-3772.6150484181208), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1746.2485719599176, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.445743919835673, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.445743919835673, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.445743919835673, regulaFalsiSolver0.getMin(), 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertEquals(506.4483508649155, double3, 0.01D);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, (double) int0, double3);
      assertEquals(3491.0514, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(917, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals((-3772.6150484181208), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1746.2485719599176, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.445743919835673, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.445743919835673, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.445743919835673, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-3772.6150484181208), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(917.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(506.4483508649155, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertNotNull(illinoisSolver0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      
      double double4 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cos0, double0, (double) int0);
      assertEquals(3491.0514, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(917, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals((-3772.6150484181208), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1746.2485719599176, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.445743919835673, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.445743919835673, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.445743919835673, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(917, illinoisSolver0.getMaxEvaluations());
      assertEquals((-1427.8075242090604), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-3772.6150484181208), illinoisSolver0.getMin(), 0.01D);
      assertEquals(917.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-3772.6150484181208), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(917.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(506.4483508649155, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertEquals((-1472.6780252299254), double4, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 929.0;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(929.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(929.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(929.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertNotNull(illinoisSolver0);
      
      int int0 = 41;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = (-493.75003640208996);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sin0, double1, (double) int0, allowedSolution0);
      assertEquals(929.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(41, illinoisSolver0.getMaxEvaluations());
      assertEquals((-493.75003640208996), illinoisSolver0.getMin(), 0.01D);
      assertEquals(929.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(929.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(41.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-226.37501820104495), illinoisSolver0.getStartValue(), 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals((-493.75003640208996), double2, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = (-961.3);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals((-961.3), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 1286;
      Floor floor0 = new Floor();
      assertNotNull(floor0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) floor0, double0, (double) int0, allowedSolution0);
      assertEquals((-961.3), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-961.3), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1286, illinoisSolver0.getMaxEvaluations());
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(1286.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(162.35000000000014, illinoisSolver0.getStartValue(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.40044483985752777, double1, 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-0.4759884363859178);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals((-0.4759884363859178), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-0.4759884363859178), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals((-0.4759884363859178), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      double double1 = pegasusSolver0.getRelativeAccuracy();
      assertEquals((-0.4759884363859178), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-0.4759884363859178), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals((-0.4759884363859178), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-0.4759884363859178), double1, 0.01D);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double1, double0);
      assertEquals((-0.4759884363859178), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-0.4759884363859178), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-0.4759884363859178), illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.4759884363859178), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-0.4759884363859178), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals((-0.4759884363859178), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      int int0 = 2025;
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      Sigmoid sigmoid0 = new Sigmoid(double2, double1);
      assertEquals((-0.4759884363859178), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-0.4759884363859178), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals((-0.4759884363859178), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(sigmoid0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      
      double double3 = (-1880.5529626187706);
      assertFalse(double3 == double1);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double4 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sigmoid0, double1, double3, double0, allowedSolution0);
      assertEquals((-1880.5529626187706), illinoisSolver0.getMax(), 0.01D);
      assertEquals(2025, illinoisSolver0.getMaxEvaluations());
      assertEquals((-0.4759884363859178), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-0.4759884363859178), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals((-0.4759884363859178), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-0.4759884363859178), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-0.4759884363859178), illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.4759884363859178), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-0.4759884363859178), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals((-0.4759884363859178), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(double3 == double4);
      assertFalse(double3 == double1);
      assertTrue(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertEquals((-1880.5529626187706), double4, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = (-0.4759884363859178);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals((-0.4759884363859178), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals((-0.4759884363859178), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-0.4759884363859178), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      double double1 = pegasusSolver0.getRelativeAccuracy();
      assertEquals((-0.4759884363859178), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals((-0.4759884363859178), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-0.4759884363859178), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-0.4759884363859178), double1, 0.01D);
      
      int int0 = 2025;
      Gaussian gaussian0 = new Gaussian();
      assertNotNull(gaussian0);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) gaussian0, (double) int0, double0, double1);
      assertEquals((-0.4759884363859178), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2025, pegasusSolver0.getMaxEvaluations());
      assertEquals((-0.4759884363859178), pegasusSolver0.getMax(), 0.01D);
      assertEquals((-0.4759884363859178), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2025.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(2, pegasusSolver0.getEvaluations());
      assertEquals((-0.4759884363859178), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-0.4759884363859178), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(2025.0, double2, 0.01D);
  }
}
