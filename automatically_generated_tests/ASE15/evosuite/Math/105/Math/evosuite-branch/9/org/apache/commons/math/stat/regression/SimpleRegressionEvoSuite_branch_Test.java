/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:20:14 GMT 2014
 */

package org.apache.commons.math.stat.regression;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.stat.regression.SimpleRegression;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class SimpleRegressionEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      
      double double0 = (-686.38962925625);
      // Undeclared exception!
      try {
        double double1 = simpleRegression0.getSlopeConfidenceInterval(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      
      double double0 = simpleRegression0.getRegressionSumSquares();
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
      
      // Undeclared exception!
      try {
        double double1 = simpleRegression0.getSlopeConfidenceInterval(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //@Test
  public void test02()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[7];
      double double0 = (-1.0);
      doubleArray1[0] = double0;
      double double1 = 593.5193958093456;
      doubleArray1[1] = double1;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      doubleArray0[2] = doubleArray0[1];
      assertNotNull(doubleArray0[2]);
      
      simpleRegression0.addData(doubleArray0);
      assertEquals(1.0, simpleRegression0.getRSquare(), 0.01D);
      assertEquals((-3.789561257387201E-14), simpleRegression0.getIntercept(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(234843.5154679271, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(0.0, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals((-593.5193958093457), simpleRegression0.getSlope(), 0.01D);
      assertEquals(234843.5154679272, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(0.0, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals((-1.0), simpleRegression0.getR(), 0.01D);
      
      double double2 = simpleRegression0.getR();
      assertEquals(1.0, simpleRegression0.getRSquare(), 0.01D);
      assertEquals((-3.789561257387201E-14), simpleRegression0.getIntercept(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(234843.5154679271, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(0.0, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals((-593.5193958093457), simpleRegression0.getSlope(), 0.01D);
      assertEquals(234843.5154679272, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(0.0, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals((-1.0), simpleRegression0.getR(), 0.01D);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-1.0), double2, 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      doubleArray0[1] = doubleArray0[0];
      assertNotNull(doubleArray0[1]);
      
      doubleArray0[2] = doubleArray1;
      assertNotNull(doubleArray0[2]);
      
      simpleRegression0.addData(doubleArray0);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      
      double double0 = simpleRegression0.getSlopeStdErr();
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[7];
      double double0 = (-1.0);
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      doubleArray0[2] = doubleArray0[0];
      assertNotNull(doubleArray0[2]);
      
      simpleRegression0.addData(doubleArray0);
      assertEquals(0.0, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(0.0, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(0.0, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      
      double double1 = simpleRegression0.getIntercept();
      assertEquals(0.0, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(0.0, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(0.0, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      doubleArray0[2] = doubleArray0[0];
      assertNotNull(doubleArray0[2]);
      
      simpleRegression0.addData(doubleArray0);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      
      double double0 = simpleRegression0.getIntercept();
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      //  // Unstable assertion: assertNotNull(simpleRegression0);
      //  // Unstable assertion: assertEquals(0L, simpleRegression0.getN());
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      
      double double0 = simpleRegression0.getRegressionSumSquares();
      //  // Unstable assertion: assertEquals(0L, simpleRegression0.getN());
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = simpleRegression0.predict(double0);
      //  // Unstable assertion: assertEquals(0L, simpleRegression0.getN());
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      
      double double0 = simpleRegression0.getInterceptStdErr();
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      
      double double0 = simpleRegression0.getR();
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      
      long long0 = simpleRegression0.getN();
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      
      simpleRegression0.clear();
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      
      // Undeclared exception!
      try {
        double double0 = simpleRegression0.getSignificance();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      
      // Undeclared exception!
      try {
        double double0 = simpleRegression0.getSlopeConfidenceInterval();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
      }
  }
}
