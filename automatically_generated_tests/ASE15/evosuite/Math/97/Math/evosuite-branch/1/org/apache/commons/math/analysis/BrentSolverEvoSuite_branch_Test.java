/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:20:56 GMT 2014
 */

package org.apache.commons.math.analysis;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MaxIterationsExceededException;
import org.apache.commons.math.analysis.BrentSolver;
import org.apache.commons.math.analysis.PolynomialFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class BrentSolverEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1527.0;
      doubleArray0[2] = double0;
      double double1 = (-496.9588757841964);
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[3];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 1527.0, (-496.9588757841964), 1527.0, (-496.9588757841964), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotNull(polynomialFunction1);
      assertArrayEquals(new double[] {0.0, 0.0, 1527.0, (-496.9588757841964), 1527.0, (-496.9588757841964), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(8, polynomialFunction0.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      PolynomialFunction polynomialFunction2 = polynomialFunction1.polynomialDerivative();
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotNull(polynomialFunction2);
      assertArrayEquals(new double[] {0.0, 0.0, 1527.0, (-496.9588757841964), 1527.0, (-496.9588757841964), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(6, polynomialFunction2.degree());
      assertEquals(8, polynomialFunction0.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 1527.0, (-496.9588757841964), 1527.0, (-496.9588757841964), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(6, polynomialFunction2.degree());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(8, polynomialFunction0.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      doubleArray0[1] = double0;
      double double2 = 0.0;
      doubleArray0[5] = double2;
      double double3 = brentSolver0.solve(doubleArray0[5], doubleArray0[1]);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertEquals(1.7721674146664956, double3, 0.01D);
      assertArrayEquals(new double[] {0.0, 1527.0, 1527.0, (-496.9588757841964), 1527.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(6, polynomialFunction2.degree());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(8, polynomialFunction0.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
  }

  //@Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction0.degree());
      
      BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) polynomialFunction0);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1, polynomialFunction0.degree());
      
      int int0 = (-1739);
      brentSolver0.setMaximalIterationCount(int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(-1739, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1, polynomialFunction0.degree());
      
      double double0 = 43.891906702305995;
      double double1 = brentSolver0.solve((double) int0, double0);
      assertEquals((-1739.0), double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(-1739, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1, polynomialFunction0.degree());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      brentSolver0.setFunctionValueAccuracy(double1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1739.0), brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(-1739, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1, polynomialFunction0.degree());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      try {
        double double2 = brentSolver0.solve(double0, doubleArray0[0], double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Maximal number of iterations (-1,739) exceeded
         //
      }
  }

  //@Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction0.degree());
      
      BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) polynomialFunction0);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(8, polynomialFunction0.degree());
      
      int int0 = brentSolver0.getMaximalIterationCount();
      assertEquals(100, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(8, polynomialFunction0.degree());
      
      doubleArray0[1] = (double) int0;
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(8, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotNull(polynomialFunction1);
      assertArrayEquals(new double[] {0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction1.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      
      BrentSolver brentSolver1 = new BrentSolver((UnivariateRealFunction) polynomialFunction1);
      assertNotSame(brentSolver1, brentSolver0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotNull(brentSolver1);
      assertArrayEquals(new double[] {0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-15, brentSolver1.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver1.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver1.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver1.getMaximalIterationCount());
      assertEquals(8, polynomialFunction1.degree());
      assertFalse(brentSolver1.equals((Object)brentSolver0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      
      double double0 = (-2051.4582918297474);
      double double1 = brentSolver1.solve(double0, doubleArray0[0]);
      assertNotSame(brentSolver1, brentSolver0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertEquals(0.0, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-15, brentSolver1.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver1.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver1.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver1.getMaximalIterationCount());
      assertEquals(8, polynomialFunction1.degree());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(brentSolver1.equals((Object)brentSolver0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1527.0;
      double double1 = (-496.9588757841964);
      doubleArray0[3] = double1;
      doubleArray0[5] = doubleArray0[3];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-496.9588757841964), 0.0, (-496.9588757841964), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction0.degree());
      
      BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) polynomialFunction0);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-496.9588757841964), 0.0, (-496.9588757841964), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction0.degree());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      
      doubleArray0[1] = double0;
      double double2 = brentSolver0.solve(doubleArray0[5], doubleArray0[1]);
      assertEquals(7.734045115066383E-7, double2, 0.01D);
      assertArrayEquals(new double[] {0.0, 1527.0, 0.0, (-496.9588757841964), 0.0, (-496.9588757841964), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction0.degree());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-757.2471569206527);
      doubleArray0[2] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, (-757.2471569206527), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotNull(polynomialFunction1);
      assertArrayEquals(new double[] {0.0, 0.0, (-757.2471569206527), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(5, polynomialFunction0.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      PolynomialFunction polynomialFunction2 = polynomialFunction1.polynomialDerivative();
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotNull(polynomialFunction2);
      assertArrayEquals(new double[] {0.0, 0.0, (-757.2471569206527), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(3, polynomialFunction2.degree());
      assertEquals(5, polynomialFunction0.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, (-757.2471569206527), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(3, polynomialFunction2.degree());
      assertEquals(5, polynomialFunction0.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      // Undeclared exception!
      try {
        double double1 = brentSolver0.solve(doubleArray0[2], doubleArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function values at endpoints do not have different signs.  Endpoints: [-757.2471569206527,0.0]  Values: [-1514.4943138413055,-1514.4943138413055]
         //
      }
  }

  //@Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 460.5425142933;
      doubleArray0[2] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 460.5425142933}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      
      BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) polynomialFunction0);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 460.5425142933}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      
      double double1 = 1.0E-14;
      double double2 = brentSolver0.solve(double1, double0);
      assertEquals(1.0E-14, double2, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 460.5425142933}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, polynomialFunction0.degree());
      
      BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) polynomialFunction0);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(9, polynomialFunction0.degree());
      
      double double0 = Double.NaN;
      double double1 = brentSolver0.solve(double0, doubleArray0[1]);
      assertEquals(0.0, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(9, polynomialFunction0.degree());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(13, polynomialFunction0.degree());
      
      BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) polynomialFunction0);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(13, polynomialFunction0.degree());
      
      double double0 = brentSolver0.defaultFunctionValueAccuracy;
      assertEquals(1.0E-15, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(13, polynomialFunction0.degree());
      
      doubleArray0[0] = double0;
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(13, polynomialFunction0.degree());
      
      double double1 = (-2130.0);
      assertFalse(double1 == double0);
      
      doubleArray0[1] = doubleArray0[0];
      PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotNull(polynomialFunction1);
      assertArrayEquals(new double[] {1.0E-15, 1.0E-15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(13, polynomialFunction1.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      
      BrentSolver brentSolver1 = new BrentSolver((UnivariateRealFunction) polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(brentSolver1, brentSolver0);
      assertNotNull(brentSolver1);
      assertArrayEquals(new double[] {1.0E-15, 1.0E-15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(13, polynomialFunction1.degree());
      assertEquals(1.0E-6, brentSolver1.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver1.getRelativeAccuracy(), 0.01D);
      assertEquals(100, brentSolver1.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver1.getFunctionValueAccuracy(), 0.01D);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(brentSolver1.equals((Object)brentSolver0));
      
      double double2 = brentSolver1.solve(double0, double1, double0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(brentSolver0, brentSolver1);
      assertNotSame(brentSolver1, brentSolver0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertEquals((-0.9999999999999999), double2, 0.01D);
      assertArrayEquals(new double[] {1.0E-15, 1.0E-15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(13, polynomialFunction1.degree());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver1.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver1.getRelativeAccuracy(), 0.01D);
      assertEquals(100, brentSolver1.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver1.getFunctionValueAccuracy(), 0.01D);
      assertEquals(13, polynomialFunction0.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(brentSolver0.equals((Object)brentSolver1));
      assertFalse(brentSolver1.equals((Object)brentSolver0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, polynomialFunction0.degree());
      
      BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) polynomialFunction0);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(9, polynomialFunction0.degree());
      
      double double0 = Double.NaN;
      double double1 = (-1.0);
      double double2 = brentSolver0.solve(double0, double1, double0);
      assertEquals(0.0, double2, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(9, polynomialFunction0.degree());
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1527.0;
      double double1 = (-496.9588757841964);
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[3];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-496.9588757841964), 1527.0, (-496.9588757841964), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotNull(polynomialFunction1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-496.9588757841964), 1527.0, (-496.9588757841964), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(8, polynomialFunction0.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      PolynomialFunction polynomialFunction2 = polynomialFunction1.polynomialDerivative();
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotNull(polynomialFunction2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-496.9588757841964), 1527.0, (-496.9588757841964), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(8, polynomialFunction0.degree());
      assertEquals(6, polynomialFunction2.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      
      BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-496.9588757841964), 1527.0, (-496.9588757841964), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(8, polynomialFunction0.degree());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(6, polynomialFunction2.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      
      double double2 = brentSolver0.solve(doubleArray0[3], doubleArray0[4], doubleArray0[4]);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertEquals(1.663242783146888, double2, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-496.9588757841964), 1527.0, (-496.9588757841964), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(8, polynomialFunction0.degree());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(6, polynomialFunction2.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, polynomialFunction0.degree());
      
      BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) polynomialFunction0);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, polynomialFunction0.degree());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      
      double double0 = Double.NaN;
      double double1 = brentSolver0.solve(doubleArray0[2], doubleArray0[2], double0);
      assertEquals(0.0, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, polynomialFunction0.degree());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(13, polynomialFunction0.degree());
      
      BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) polynomialFunction0);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(13, polynomialFunction0.degree());
      
      double double0 = brentSolver0.defaultFunctionValueAccuracy;
      assertEquals(1.0E-15, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(13, polynomialFunction0.degree());
      
      double double1 = brentSolver0.solve(doubleArray0[0], double0, doubleArray0[0]);
      assertEquals(0.0, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(13, polynomialFunction0.degree());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.POSITIVE_INFINITY;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, polynomialFunction0.degree());
      
      BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) polynomialFunction0);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(9, polynomialFunction0.degree());
      
      double double1 = 1.6333651873124073;
      // Undeclared exception!
      try {
        double double2 = brentSolver0.solve(double0, double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial guess is not in search interval.  Initial: 1.6333651873124073  Endpoints: [Infinity,Infinity]
         //
      }
  }
}
