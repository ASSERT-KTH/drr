/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:17:17 GMT 2014
 */

package org.apache.commons.math.optimization.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.LinkedList;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.linear.RealVectorImpl;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class SimplexTableauEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      simplexTableau0.divideRow(int0, doubleArray0[1]);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.8852547515252;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.8852547515252, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.8852547515252, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau1);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.8852547515252, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertTrue(boolean1);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.8852547515252, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1844.48506586;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1844.48506586, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(1844.48506586, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray1);
      assertNotNull(realVectorImpl0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction((RealVector) realVectorImpl0, doubleArray0[1]);
      assertNotNull(linearObjectiveFunction1);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals(3, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau1);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals(3, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals(3, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(1844.48506586, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[6]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[2]);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = true;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, doubleArray0[2]);
      assertNotNull(simplexTableau1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean2);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = (-15.303529658338359);
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 30.695280051460255;
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[1]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Object object0 = null;
      boolean boolean1 = simplexTableau0.equals(object0);
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = 0;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, int0, int0);
      assertNotNull(realVectorImpl0);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0, realVectorImpl0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      RealVectorImpl realVectorImpl1 = (RealVectorImpl)realVectorImpl0.append(doubleArray0[0]);
      assertNotNull(realVectorImpl1);
      assertFalse(realVectorImpl0.equals((Object)realVectorImpl1));
      assertFalse(realVectorImpl1.equals((Object)realVectorImpl0));
      assertNotSame(realVectorImpl0, realVectorImpl1);
      assertNotSame(realVectorImpl1, realVectorImpl0);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl1.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl1.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl1.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl1.isInfinite());
      assertEquals(1, realVectorImpl1.getDimension());
      assertEquals(false, realVectorImpl1.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl1, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertFalse(realVectorImpl0.equals((Object)realVectorImpl1));
      assertFalse(realVectorImpl1.equals((Object)realVectorImpl0));
      assertNotSame(realVectorImpl0, realVectorImpl1);
      assertNotSame(realVectorImpl1, realVectorImpl0);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, realVectorImpl1.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl1.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl1.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl1.isInfinite());
      assertEquals(1, realVectorImpl1.getDimension());
      assertEquals(false, realVectorImpl1.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotNull(simplexTableau0);
      assertFalse(realVectorImpl0.equals((Object)realVectorImpl1));
      assertFalse(realVectorImpl1.equals((Object)realVectorImpl0));
      assertNotSame(realVectorImpl0, realVectorImpl1);
      assertNotSame(realVectorImpl1, realVectorImpl0);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, realVectorImpl1.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl1.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl1.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl1.isInfinite());
      assertEquals(1, realVectorImpl1.getDimension());
      assertEquals(false, realVectorImpl1.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(realPointValuePair0);
      assertFalse(realVectorImpl0.equals((Object)realVectorImpl1));
      assertFalse(realVectorImpl1.equals((Object)realVectorImpl0));
      assertNotSame(realVectorImpl0, realVectorImpl1);
      assertNotSame(realVectorImpl1, realVectorImpl0);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, realPointValuePair0.getValue(), 0.01D);
      assertEquals(0.0, realVectorImpl1.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl1.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl1.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl1.isInfinite());
      assertEquals(1, realVectorImpl1.getDimension());
      assertEquals(false, realVectorImpl1.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double double0 = 1221.7464580289463;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {1221.7464580289463, 1221.7464580289463, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = true;
      RealVectorImpl realVectorImpl0 = (RealVectorImpl)linearObjectiveFunction0.getCoefficients();
      //  // Unstable assertion: assertNotNull(realVectorImpl0);
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isInfinite());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isNaN());
      //  // Unstable assertion: assertEquals(19, realVectorImpl0.getDimension());
      //  // Unstable assertion: assertEquals(2443.4929160578927, realVectorImpl0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(1727.8104107258273, realVectorImpl0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(3.202735034935401E8, realVectorImpl0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {1221.7464580289463, 1221.7464580289463, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) realVectorImpl0, relationship0, double0);
      //  // Unstable assertion: assertNotNull(linearConstraint0);
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isInfinite());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isNaN());
      //  // Unstable assertion: assertEquals(19, realVectorImpl0.getDimension());
      //  // Unstable assertion: assertEquals(2443.4929160578927, realVectorImpl0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(1727.8104107258273, realVectorImpl0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(3.202735034935401E8, realVectorImpl0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1221.7464580289463, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {1221.7464580289463, 1221.7464580289463, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList0.offerFirst(linearConstraint0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isInfinite());
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isNaN());
      //  // Unstable assertion: assertEquals(19, realVectorImpl0.getDimension());
      //  // Unstable assertion: assertEquals(2443.4929160578927, realVectorImpl0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(1727.8104107258273, realVectorImpl0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(3.202735034935401E8, realVectorImpl0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertEquals(1221.7464580289463, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {1221.7464580289463, 1221.7464580289463, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = 0.0;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double1);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {1221.7464580289463, 1221.7464580289463, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 30.695280051460255;
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[1]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.discardArtificialVariables();
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-2295.67902297909);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[3]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linearObjectiveFunction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapInvToSelf();
      assertNotNull(openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.append((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0E-12, openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) openMapRealVector2, relationship0, doubleArray0[3]);
      assertNotNull(linearConstraint0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0E-12, openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertTrue(boolean1);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0E-12, openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship1 = Relationship.GEQ;
      assertNotSame(relationship1, relationship0);
      
      LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, double0, relationship1, doubleArray0, doubleArray0[1]);
      assertNotNull(linearConstraint1);
      assertFalse(linearConstraint1.equals((Object)linearConstraint0));
      assertFalse(relationship1.equals((Object)relationship0));
      assertNotSame(linearConstraint1, linearConstraint0);
      assertNotSame(relationship1, relationship0);
      assertEquals(Relationship.GEQ, linearConstraint1.getRelationship());
      assertEquals(2295.67902297909, linearConstraint1.getValue(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = linkedList0.add(linearConstraint1);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(linearConstraint1.equals((Object)linearConstraint0));
      assertFalse(relationship1.equals((Object)relationship0));
      assertNotSame(linearConstraint1, linearConstraint0);
      assertNotSame(relationship1, relationship0);
      assertEquals(2, linkedList0.size());
      assertEquals(Relationship.GEQ, linearConstraint1.getRelationship());
      assertEquals(2295.67902297909, linearConstraint1.getValue(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      double double1 = (-2936.943959944256);
      doubleArray0[1] = double1;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertFalse(double0 == double1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, (-2936.943959944256), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, doubleArray0[1]);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2936.943959944256), linearConstraint0.getValue(), 0.01D);
      assertArrayEquals(new double[] {0.0, (-2936.943959944256), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2936.943959944256), linearConstraint0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, (-2936.943959944256), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertTrue(boolean0 == boolean1);
      assertFalse(double0 == double1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, (-2936.943959944256), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = 0;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, int0, int0);
      assertNotNull(realVectorImpl0);
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = simplexTableau0.getNumArtificialVariables();
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.hashCode();
      assertEquals(1230, int0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-4570);
      // Undeclared exception!
      try {
        simplexTableau0.setEntry(int0, int0, doubleArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (-4,570, -4,570) in a 1x24 matrix
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = 0;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, int0, int0);
      assertNotNull(realVectorImpl0);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = simplexTableau0.getNumSlackVariables();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = simplexTableau0.getData();
      assertNotNull(doubleArray1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertEquals(5, int0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double double0 = 1221.7464580289463;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = true;
      RealVectorImpl realVectorImpl0 = (RealVectorImpl)linearObjectiveFunction0.getCoefficients();
      assertNotNull(realVectorImpl0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(19, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) realVectorImpl0, relationship0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(19, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1221.7464580289463, linearConstraint0.getValue(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList0.offerFirst(linearConstraint0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(19, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1221.7464580289463, linearConstraint0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = 0.0;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double1);
      assertNotNull(simplexTableau0);
      assertTrue(boolean0 == boolean1);
      assertFalse(double1 == double0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.discardArtificialVariables();
      assertTrue(boolean0 == boolean1);
      assertFalse(double1 == double0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
