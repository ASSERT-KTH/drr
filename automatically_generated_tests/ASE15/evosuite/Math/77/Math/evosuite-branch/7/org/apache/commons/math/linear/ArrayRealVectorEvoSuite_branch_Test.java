/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:39:02 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.junit.runner.RunWith;

 
public class ArrayRealVectorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1008.39409338008);
      doubleArray0[0] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1008.39409338008), 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(1008.39409338008, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1426.0846030750304, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2016.78818676016, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSinhToSelf();
      assertArrayEquals(new double[] {(-1008.39409338008), 0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      
      arrayRealVector0.unitize();
      assertArrayEquals(new double[] {(-1008.39409338008), 0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(true, arrayRealVector0.isNaN());
      
      int int0 = arrayRealVector0.hashCode();
      assertArrayEquals(new double[] {(-1008.39409338008), 0.0}, doubleArray0, 0.01);
      assertEquals(9, int0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(true, arrayRealVector0.isNaN());
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      
      int int0 = arrayRealVector0.hashCode();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(28629151, int0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 889;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(889, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(889, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapPowToSelf(doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(889, arrayRealVector1.getDimension());
      assertEquals(29.816103031751148, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(889.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(889.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(889, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(29.816103031751148, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      boolean boolean0 = arrayRealVector0.equals((Object) openMapRealVector0);
      assertFalse(boolean0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(889, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(889.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(889, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(29.816103031751148, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test03()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      boolean boolean0 = arrayRealVector0.equals((Object) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      
      String string0 = arrayRealVector0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      
      boolean boolean0 = arrayRealVector0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      String string0 = null;
      boolean boolean0 = arrayRealVector0.equals((Object) string0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1008.39409338008);
      doubleArray0[0] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1008.39409338008), 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1426.0846030750304, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1008.39409338008, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(2016.78818676016, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSinhToSelf();
      assertArrayEquals(new double[] {(-1008.39409338008), 0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertArrayEquals(new double[] {(-1008.39409338008), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1008.39409338008);
      doubleArray0[0] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1008.39409338008), 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1426.0846030750304, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1008.39409338008, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2016.78818676016, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSinhToSelf();
      assertArrayEquals(new double[] {(-1008.39409338008), 0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      
      arrayRealVector0.unitize();
      assertArrayEquals(new double[] {(-1008.39409338008), 0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01D);
      
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertArrayEquals(new double[] {(-1008.39409338008), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[19] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(19, polynomialFunction0.degree());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.map((UnivariateRealFunction) polynomialFunction0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(20, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(19, polynomialFunction0.degree());
      
      boolean boolean0 = arrayRealVector0.equals((Object) arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(20, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(19, polynomialFunction0.degree());
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[6]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(20, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.add((RealVector) openMapRealVector0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(20, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(20, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      
      boolean boolean0 = arrayRealVector0.equals((Object) arrayRealVector1);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(20, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(20, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      int int0 = 5;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      
      arrayRealVector0.setSubVector(int0, (RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = 31.781749325587825;
      Double[] doubleArray0 = new Double[35];
      doubleArray0[2] = (Double) double0;
      doubleArray0[3] = (Double) double0;
      int int0 = 2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(31.781749325587825, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(44.94618093218827, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(63.56349865117565, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(31.781749325587825, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(44.94618093218827, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(63.56349865117565, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 411;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(411, arrayRealVector0.getDimension());
      
      try {
        arrayRealVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      
      try {
        RealVector realVector0 = arrayRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      double double0 = arrayRealVector0.getLInfDistance((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 889;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(889, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(889, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double double0 = arrayRealVector0.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(889, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(889, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = 31.781749325587825;
      Double[] doubleArray0 = new Double[35];
      doubleArray0[2] = (Double) double0;
      doubleArray0[3] = (Double) double0;
      int int0 = 2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(63.56349865117565, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(31.781749325587825, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(44.94618093218827, arrayRealVector0.getNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double double1 = arrayRealVector0.getDistance((RealVector) openMapRealVector0);
      assertFalse(double1 == double0);
      assertEquals(44.94618093218827, double1, 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(63.56349865117565, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(31.781749325587825, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(44.94618093218827, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      double double0 = arrayRealVector0.getLInfNorm();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      double double0 = arrayRealVector0.getL1Norm();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.5182255036392979;
      doubleArray0[0] = double0;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.5182255036392979}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.5182255036392979, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.5182255036392979, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.5182255036392979, arrayRealVector0.getNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.5182255036392979}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)arrayRealVector0.projection((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.5182255036392979}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(0.5182255036392979, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.5182255036392979, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.5182255036392979, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
  }

  @Test
  public void test22()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.projection((RealVector) arrayRealVector0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector1.getDimension());
  }

  @Test
  public void test23()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 209.78585144777696;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(209.78585144777696, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(593.3639926228672, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(209.78585144777696, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1678.2868115822162, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(8.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(2.8284271247461903, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(593.3639926228672, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(209.78585144777696, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1678.2868115822162, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 89;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(89, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(89, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(89, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(89, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(89, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(89, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapUlpToSelf();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(4.9E-324, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4.9E-324, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(4.9E-324, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(4.9E-324, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSignumToSelf();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapRint();
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(20, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 209.78585144777696;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(209.78585144777696, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1678.2868115822162, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(593.3639926228672, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(209.78585144777696, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapFloorToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(1672.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector1.getDimension());
      assertEquals(591.1412690719537, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(209.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1672.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(209.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(591.1412690719537, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 209.78585144777696;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(209.78585144777696, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(209.78585144777696, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1678.2868115822162, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(593.3639926228672, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCbrtToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(16.806233444830255, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(47.5352065401745, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(8, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(5.941900817521812, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(16.806233444830255, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(5.941900817521812, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(47.5352065401745, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 889;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(889, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSqrt();
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(889, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(889, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
  }

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAbs();
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(5, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapInv();
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAtan();
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAsinToSelf();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      double[] doubleArray1 = new double[2];
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1, arrayRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(2, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)arrayRealVector1.mapAcos();
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotNull(arrayRealVector2);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(2, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(1.5707963267948966, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(3.141592653589793, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(2.221441469079183, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(2, arrayRealVector2.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapTanToSelf();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSin();
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCos();
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(4.47213595499958, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(20, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(20.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapTanhToSelf();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(11, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
  }

  @Test
  public void test40()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      double[] doubleArray1 = new double[2];
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1, arrayRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(2, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)arrayRealVector1.mapLog1p();
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotNull(arrayRealVector2);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(2, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(2, arrayRealVector2.getDimension());
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(0.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector2.isNaN());
  }

  @Test
  public void test41()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(0.0, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapLog10ToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapLog();
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(20, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector0.getDimension());
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 14;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapExpm1();
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 889;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(889, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapExp();
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(889.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(29.816103031751148, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(889, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(889, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
  }

  @Test
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCoshToSelf();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(11.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(3.3166247903554, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(11, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(11.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3.3166247903554, arrayRealVector0.getNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)arrayRealVector0.unitVector();
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector2);
      assertEquals(11, arrayRealVector2.getDimension());
      assertEquals(0.30151134457776363, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(1.0, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(3.3166247903554007, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(11.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3.3166247903554, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.projection(doubleArray0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(7, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = 89;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(89, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSubtract((double) int0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(89, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(839.6243207530378, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(89.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(7921.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(89, arrayRealVector1.getDimension());
  }

  @Test
  public void test48()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 209.78585144777696;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(209.78585144777696, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1678.2868115822162, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(593.3639926228672, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(209.78585144777696, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAdd((double) doubleArray0[2]);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1678.2868115822162, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(593.3639926228672, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(209.78585144777696, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(8, arrayRealVector1.getDimension());
      assertEquals(3356.5736231644323, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(419.5717028955539, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1186.7279852457343, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[28];
      double double0 = 2.2;
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {2.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(0.03571428571428571, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(28, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {2.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(28, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2.2, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2.2, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2.2, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.03571428571428571, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(28, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.subtract((RealVector) openMapRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertArrayEquals(new double[] {2.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(28, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2.2, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2.2, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2.2, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.03571428571428571, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(28, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(28, arrayRealVector1.getDimension());
  }

  @Test
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.add(arrayRealVector0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(11, arrayRealVector1.getDimension());
  }

  @Test
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(40, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
  }

  @Test
  public void test52()  throws Throwable  {
      int int0 = 14;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(28, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
  }

  @Test
  public void test53()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, boolean0);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test54()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      int int0 = 13;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // position 13 and size 13 dont fit to the size of the input array {2}
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      int int0 = 833;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // position 833 and size 833 dont fit to the size of the input array {2}
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = (-2568);
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      boolean boolean0 = true;
      double[] doubleArray0 = null;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 209.78585144777696;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(209.78585144777696, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals(209.78585144777696, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1678.2868115822162, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(593.3639926228672, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double double2 = arrayRealVector0.getL1Distance((RealVector) arrayRealVector0);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(209.78585144777696, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1678.2868115822162, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(593.3639926228672, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test59()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      
      double double0 = (-414.7442);
      arrayRealVector0.set(double0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
  }

  @Test
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[28];
      double double0 = 2.2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(28, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(28, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(28, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.append(double0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(29, arrayRealVector1.getDimension());
      assertEquals(2.2, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(2.2, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(2.2, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(28, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(28, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
  }

  @Test
  public void test62()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      arrayRealVector0.setSubVector(int0, (RealVector) arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test63()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.append(arrayRealVector0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
  }

  @Test
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      double double0 = arrayRealVector0.getDistance((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test65()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      
      double[] doubleArray0 = arrayRealVector0.getData();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      // Undeclared exception!
      try {
        RealVector realVector0 = arrayRealVector0.projection((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 0 but expected 1
         //
      }
  }

  @Test
  public void test67()  throws Throwable  {
      int int0 = 411;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(411, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.ebeDivide((RealVector) arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(411, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(411, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
  }

  @Test
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.subtract((RealVector) arrayRealVector0);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test69()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      try {
        RealVector realVector0 = arrayRealVector0.add((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
      }
  }

  @Test
  public void test70()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 209.78585144777696;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(209.78585144777696, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1678.2868115822162, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(593.3639926228672, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(209.78585144777696, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)openMapRealVector0.add((RealVector) arrayRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(419.5717028955539, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(3356.5736231644323, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1186.7279852457343, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1678.2868115822162, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(593.3639926228672, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(209.78585144777696, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test71()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 209.78585144777696;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(209.78585144777696, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(593.3639926228672, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(209.78585144777696, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1678.2868115822162, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      
      double double2 = arrayRealVector0.getL1Distance((RealVector) openMapRealVector0);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(593.3639926228672, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(209.78585144777696, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1678.2868115822162, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
  }

  @Test
  public void test72()  throws Throwable  {
      int int0 = 889;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(889, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.append(doubleArray0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(889, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(891, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
  }

  @Test
  public void test73()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      double[] doubleArray1 = arrayRealVector0.toArray();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(11, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test74()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      try {
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid row dimension 0 (must be positive)
         //
      }
  }

  @Test
  public void test75()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(0.0, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCeil();
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
  }

  @Test
  public void test76()  throws Throwable  {
      int int0 = 889;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(889, arrayRealVector0.getDimension());
      
      // Undeclared exception!
      try {
        RealVector realVector0 = arrayRealVector0.getSubVector(int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 889 out of allowed range [0, 888]
         //
      }
  }

  @Test
  public void test77()  throws Throwable  {
      int int0 = 411;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(411, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.append((RealVector) arrayRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(822, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(411, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test78()  throws Throwable  {
      int int0 = 411;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(411, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.ebeMultiply((RealVector) arrayRealVector0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(411, arrayRealVector0.getDimension());
      assertEquals(411, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
  }
}
