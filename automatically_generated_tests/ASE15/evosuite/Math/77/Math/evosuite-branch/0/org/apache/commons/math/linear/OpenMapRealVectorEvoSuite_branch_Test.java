/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:16:27 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.linear.AbstractRealVector;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class OpenMapRealVectorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double double0 = (-2148.358);
      Double double1 = new Double(double0);
      assertEquals((-2148.358), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) double1;
      doubleArray0[2] = (double) double1;
      doubleArray0[3] = (double) double1;
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = (double) double1;
      doubleArray0[6] = (double) double1;
      doubleArray0[7] = doubleArray0[0];
      doubleArray0[8] = doubleArray0[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {(-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358)}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAcosToSelf();
      assertNotNull(openMapRealVector1);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {(-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358)}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeDivide(doubleArray0);
      assertNotNull(openMapRealVector2);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertArrayEquals(new double[] {(-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358)}, doubleArray0, 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector2);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector2.getDimension());
      assertTrue(boolean0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertArrayEquals(new double[] {(-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358), (-2148.358)}, doubleArray0, 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertFalse(boolean0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertFalse(boolean0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test03()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      double double0 = 1.0E-12;
      Double double1 = new Double(double0);
      assertEquals(1.0E-12, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = double1;
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = doubleArray0[1];
      doubleArray0[7] = doubleArray0[4];
      doubleArray0[8] = doubleArray0[2];
      doubleArray0[9] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      assertNotNull(abstractRealVector_EntryImpl0);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      boolean boolean0 = openMapRealVector0.equals((Object) abstractRealVector_EntryImpl0);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      double double0 = 1.0E-12;
      Double double1 = new Double(double0);
      assertEquals(1.0E-12, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = double1;
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = doubleArray0[1];
      doubleArray0[7] = doubleArray0[4];
      doubleArray0[8] = doubleArray0[2];
      doubleArray0[9] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      
      Object object0 = null;
      boolean boolean0 = openMapRealVector0.equals(object0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[7] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.1111111111111111, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.1111111111111111, openMapRealVector1.getSparcity(), 0.01D);
      assertFalse(boolean0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test06()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[15];
      double double0 = (-3824.2);
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertEquals(15, openMapRealVector1.getDimension());
      assertEquals(0.06666666666666667, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {(-3824.2), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      int int0 = openMapRealVector1.hashCode();
      assertEquals(15, openMapRealVector1.getDimension());
      assertEquals(0.06666666666666667, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals((-1107347528), int0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {(-3824.2), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 32;
      double double0 = (-1267.1615);
      Double[] doubleArray0 = new Double[10];
      Double double1 = new Double((double) int0);
      assertEquals(32.0, (double)double1, 0.01D);
      assertFalse(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = (Double) double0;
      doubleArray0[3] = (Double) double0;
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = (Double) double0;
      doubleArray0[6] = (Double) double0;
      doubleArray0[7] = (Double) double0;
      doubleArray0[8] = (Double) double0;
      doubleArray0[9] = doubleArray0[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      
      double[] doubleArray1 = new double[10];
      doubleArray1[4] = (double) int0;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray1);
      assertNotNull(openMapRealVector1);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.1, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 32.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.1, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(10, openMapRealVector2.getDimension());
      assertEquals(0.9, openMapRealVector2.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 32.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 0;
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((double) int0);
      assertEquals(0.0, (double)double0, 0.01D);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[1];
      doubleArray0[4] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      
      double[] doubleArray1 = new double[1];
      openMapRealVector0.setSubVector(int0, doubleArray1);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.5;
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.5, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct(doubleArray0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.5, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-2148.358);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {(-2148.358), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAcosToSelf();
      assertNotNull(openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {(-2148.358), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertTrue(boolean0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {(-2148.358), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[7] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      boolean boolean0 = openMapRealVector1.isInfinite();
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertFalse(boolean0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test16()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = double1;
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[3];
      double double2 = (-1.0);
      Double double3 = new Double(double2);
      assertEquals((-1.0), (double)double3, 0.01D);
      assertNotSame(double3, double1);
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double2 == double0);
      
      doubleArray0[7] = double3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.125, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.125, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.ebeMultiply(arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(8, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.125, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      
      double double4 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVector1);
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(8, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.125, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(2.0, double4, 0.01D);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertEquals(13, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertEquals(13, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(13, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      //  // Unstable assertion: assertEquals(13, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(13, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(6, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(6, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)openMapRealVector0.add(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test20()  throws Throwable  {
      double double0 = (-378.9541312);
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(double0);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      double double1 = openMapRealVector0.getL1Distance(openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1515.8165248, double1, 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test21()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      double double0 = 1.0E-12;
      Double double1 = new Double(double0);
      assertEquals(1.0E-12, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = double1;
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = doubleArray0[1];
      doubleArray0[7] = doubleArray0[4];
      doubleArray0[8] = doubleArray0[2];
      doubleArray0[9] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      
      double double2 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
  }

  @Test
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector0.getDistance((RealVector) arrayRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      double double0 = openMapRealVector0.getDistance(openMapRealVector1);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, double0, 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1670.166135592329);
      doubleArray0[3] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(1670.166135592329, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1670.166135592329, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(1670.166135592329, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(1670.166135592329, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1670.166135592329, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(1670.166135592329, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = openMapRealVector0.toArray();
      assertNotNull(doubleArray1);
      assertEquals(1670.166135592329, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1670.166135592329, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(1670.166135592329, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 438;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(438, openMapRealVector0.getDimension());
      
      openMapRealVector0.set((double) int0);
      assertEquals(438, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      int int1 = 2;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(int1, int1);
      assertNotNull(openMapRealVector1);
      assertEquals(438, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(int1 == int0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(int0 == int1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1670.166135592329);
      doubleArray0[3] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(1670.166135592329, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1670.166135592329, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1670.166135592329, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1670.166135592329, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1670.166135592329, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1670.166135592329, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1670.166135592329, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1670.166135592329, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1670.166135592329, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.2, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test28()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      double double0 = Double.NaN;
      Double double1 = new Double(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, (double)double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1.equals((Object)double0));
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = new double[24];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (double) double1);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertEquals(24, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertTrue(double1.equals((Object)double0));
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf((double) doubleArray0[1]);
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertEquals(24, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(24, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertTrue(double1.equals((Object)double0));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeMultiply((RealVector) openMapRealVector0);
      //  // Unstable assertion: assertNotNull(openMapRealVector2);
      //  // Unstable assertion: assertEquals(24, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(24, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(24, openMapRealVector2.getDimension());
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector2);
      //  // Unstable assertion: assertSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector2);
      //  // Unstable assertion: assertNotSame(openMapRealVector2, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector2, openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertTrue(double1.equals((Object)double0));
      //  // Unstable assertion: assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      //  // Unstable assertion: assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      //  // Unstable assertion: assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
  }

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1670.166135592329);
      doubleArray0[3] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1670.166135592329, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1670.166135592329, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1670.166135592329, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1670.166135592329, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1670.166135592329, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1670.166135592329, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1670.166135592329, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1670.166135592329, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1670.166135592329, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.2, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1670.166135592329);
      doubleArray0[3] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(1670.166135592329, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1670.166135592329, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1670.166135592329, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(1670.166135592329, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1670.166135592329, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1670.166135592329, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertEquals(1670.166135592329, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1670.166135592329, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1670.166135592329, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.projection(doubleArray0);
      assertNotNull(openMapRealVector2);
      assertEquals(1670.166135592329, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1670.166135592329, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1670.166135592329, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5, openMapRealVector2.getDimension());
      assertEquals(0.2, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1670.166135592329), 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 0;
      Double[] doubleArray0 = new Double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      Double double0 = new Double((double) int0);
      assertEquals(0.0, (double)double0, 0.01D);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double double1 = 4.973619087220793;
      Double double2 = new Double(double1);
      assertEquals(4.973619087220793, (double)double2, 0.01D);
      assertNotSame(double2, double0);
      assertFalse(double2.equals((Object)double0));
      assertTrue(double2.equals((Object)double1));
      
      doubleArray0[2] = double2;
      doubleArray0[3] = double2;
      doubleArray0[4] = doubleArray0[0];
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(0.4, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertEquals(0.4, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector2.getDimension());
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(0.4, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
  }

  @Test
  public void test32()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[5];
      double double2 = (-1.0);
      Double double3 = new Double(double2);
      assertEquals((-1.0), (double)double3, 0.01D);
      assertNotSame(double3, double1);
      assertFalse(double3.equals((Object)double0));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double2 == double0);
      
      doubleArray0[8] = double3;
      double double4 = 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double4);
      assertNotNull(openMapRealVector0);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      
      double double5 = 1.0;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(double5);
      assertNotNull(openMapRealVector1);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.8888888888888888, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(double4 == double5);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double5 == double2);
      assertFalse(double5 == double0);
      assertTrue(double5 == double4);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector2.getDimension());
      assertEquals(0.8888888888888888, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(double4 == double5);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double5 == double2);
      assertFalse(double5 == double0);
      assertTrue(double5 == double4);
  }

  @Test
  public void test33()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[5];
      doubleArray0[8] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 1593;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1593, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1593, openMapRealVector0.getDimension());
      assertEquals(1593, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 438;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(438, openMapRealVector0.getDimension());
      
      try {
        openMapRealVector0.setSubVector(int0, (RealVector) openMapRealVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 438 out of allowed range [0, 437]
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test
  public void test37()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[5];
      doubleArray0[8] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[7]);
      assertNotNull(openMapRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((double) doubleArray0[2]);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 438;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(438, openMapRealVector0.getDimension());
      
      double double0 = openMapRealVector0.getSparcity();
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(438, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[7] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)openMapRealVector0.add((RealVector) arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      // Undeclared exception!
      try {
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      double double0 = Double.NaN;
      Double double1 = new Double(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, (double)double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1.equals((Object)double0));
      
      double[] doubleArray0 = new double[24];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(24, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1.equals((Object)double0));
      
      double double2 = openMapRealVector0.dotProduct(doubleArray0);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(24, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(double1.equals((Object)double2));
      //  // Unstable assertion: assertTrue(double1.equals((Object)double0));
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
  }
}
