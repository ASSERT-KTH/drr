/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:28:24 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.linear.AbstractRealVector;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class AbstractRealVectorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1.0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
  }

  @Test
  public void test01()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      double double0 = (-1837.505623);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-1837.505623), (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[0];
      doubleArray0[8] = doubleArray0[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      assertTrue(double1.equals((Object)double0));
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      AbstractRealVector.SparseEntryIterator abstractRealVector_SparseEntryIterator0 = openMapRealVector0.new SparseEntryIterator();
      assertTrue(double1.equals((Object)double0));
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(abstractRealVector_SparseEntryIterator0);
      
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = null;
      abstractRealVector_SparseEntryIterator0.advance(abstractRealVector_EntryImpl0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1.0;
      doubleArray0[2] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-285.4665223457558);
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(570.9330446915116, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(285.4665223457558, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(403.71062750485004, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-285.4665223457558)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertEquals(0.14285714285714285, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(14, openMapRealVector0.getDimension());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(570.9330446915116, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(285.4665223457558, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(403.71062750485004, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-285.4665223457558)}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      double double1 = openMapRealVector0.getLInfNorm();
      assertFalse(double1 == double0);
      assertEquals(0.14285714285714285, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(14, openMapRealVector0.getDimension());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(570.9330446915116, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(285.4665223457558, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(403.71062750485004, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-285.4665223457558)}, doubleArray0, 0.01);
      assertEquals(285.4665223457558, double1, 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      double double0 = 0.0;
      doubleArray0[1] = (Double) double0;
      double[] doubleArray1 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (double) doubleArray0[1]);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(openMapRealVector0);
      
      double double1 = openMapRealVector0.getL1Norm();
      assertTrue(double1 == double0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(0.0, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      assertTrue(double1.equals((Object)double0));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.unitVector();
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(double1.equals((Object)double0));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) openMapRealVector0, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)openMapRealVector0.add((RealVector) arrayRealVector1);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(1, arrayRealVector2.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector2);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1.0;
      doubleArray0[2] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)openMapRealVector0.add(doubleArray0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      int int0 = 468;
      try {
        openMapRealVector0.setSubVector(int0, (RealVector) openMapRealVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 468 out of allowed range [0, 9]
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      double double0 = (-1837.505623);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-1837.505623), (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[0];
      doubleArray0[8] = doubleArray0[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      assertTrue(double1.equals((Object)double0));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      int int0 = (-274);
      double[] doubleArray1 = new double[6];
      try {
        openMapRealVector0.setSubVector(int0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index -274 out of allowed range [0, 8]
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 1 but expected 8
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 24;
      Double double0 = new Double((double) int0);
      assertEquals(24.0, (double)double0, 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, (double) double0);
      assertEquals(24, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      AbstractRealVector.SparseEntryIterator abstractRealVector_SparseEntryIterator0 = openMapRealVector0.new SparseEntryIterator();
      assertEquals(24, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(abstractRealVector_SparseEntryIterator0);
      
      // Undeclared exception!
      try {
        abstractRealVector_SparseEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 24;
      Double double0 = new Double((double) int0);
      assertEquals(24.0, (double)double0, 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, (double) double0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(24, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapExpm1ToSelf();
      assertEquals(24, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(24, openMapRealVector0.getDimension());
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-1024.56789);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-1024.56789), (double)double1, 0.01D);
      
      int int0 = 33;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, (double) double1);
      assertTrue(double1.equals((Object)double0));
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(33, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(33, openMapRealVector0.getDimension());
      assertEquals(33, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-775.9256579988614);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) doubleArray0[0];
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[2] = doubleArray1[1];
      doubleArray1[3] = (Double) doubleArray0[0];
      doubleArray1[4] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (double) doubleArray1[1]);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapFloor();
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapExpm1();
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
  }

  @Test
  public void test16()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      double double0 = 0.0;
      doubleArray0[1] = (Double) double0;
      double[] doubleArray1 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (double) doubleArray0[1]);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAbs();
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 1368;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1368, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAdd((double) int0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1368, arrayRealVector0.getDimension());
      assertEquals(50597.51013636936, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1871424.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1368, arrayRealVector1.getDimension());
      assertEquals(1368.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-775.9256579988614);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) doubleArray0[0];
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[2] = doubleArray1[1];
      doubleArray1[3] = (Double) doubleArray0[0];
      doubleArray1[4] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (double) doubleArray1[1]);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSinhToSelf();
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapExp();
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCos();
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test21()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAsin();
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCeil();
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test23()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      double double0 = 0.0;
      doubleArray0[1] = (Double) double0;
      double[] doubleArray1 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (double) doubleArray0[1]);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapUlp();
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 1249;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1249, arrayRealVector0.getDimension());
      assertEquals(1560001.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1249.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(44141.15142358658, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapDivide((double) int0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1249, arrayRealVector0.getDimension());
      assertEquals(1560001.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1249.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(44141.15142358658, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(35.34119409414458, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1249, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1249.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
  }

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-775.9256579988614);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) doubleArray0[0];
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[2] = doubleArray1[1];
      doubleArray1[3] = (Double) doubleArray0[0];
      doubleArray1[4] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (double) doubleArray1[1]);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSignum();
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSin();
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-1667.8487934842835);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      double double1 = openMapRealVector0.dotProduct(doubleArray0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCosh();
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test29()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      double double0 = (-1837.505623);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-1837.505623), (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[0];
      doubleArray0[8] = doubleArray0[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      assertTrue(double1.equals((Object)double0));
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      int int0 = (-274);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((double) int0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(double1.equals((Object)double0));
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test30()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      double double0 = (-1837.505623);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-1837.505623), (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[0];
      doubleArray0[8] = doubleArray0[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      assertTrue(double1.equals((Object)double0));
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double[] doubleArray1 = new double[6];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray1);
      assertEquals(0, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(polynomialFunction0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.map((UnivariateRealFunction) polynomialFunction0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(double1.equals((Object)double0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, polynomialFunction0.degree());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-775.9256579988614);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) doubleArray0[0];
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[2] = doubleArray1[1];
      doubleArray1[3] = (Double) doubleArray0[0];
      doubleArray1[4] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (double) doubleArray1[1]);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapPow((double) doubleArray1[1]);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCbrt();
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test33()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAcos();
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1.0;
      doubleArray0[2] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try {
        RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapLog1p();
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test36()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapTanhToSelf();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = (-4);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-4, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAtan();
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(-4, openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-4, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test39()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(0.0, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      assertTrue(double1.equals((Object)double0));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapTan();
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(double1.equals((Object)double0));
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test40()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSqrt();
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-775.9256579988614);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) doubleArray0[0];
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[2] = doubleArray1[1];
      doubleArray1[3] = (Double) doubleArray0[0];
      doubleArray1[4] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (double) doubleArray1[1]);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapInv();
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 22;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(22, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertEquals(22, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSinh();
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(22, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(22, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
  }

  @Test
  public void test43()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapRint();
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-775.9256579988614);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) doubleArray0[0];
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[2] = doubleArray1[1];
      doubleArray1[3] = (Double) doubleArray0[0];
      doubleArray1[4] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (double) doubleArray1[1]);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapLog();
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 1249;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1560001.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1249, arrayRealVector0.getDimension());
      assertEquals(44141.15142358658, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1249.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapTanh();
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1560001.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1249, arrayRealVector0.getDimension());
      assertEquals(44141.15142358658, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1249.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(35.34119409414458, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1249.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1249, arrayRealVector1.getDimension());
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
  }

  @Test
  public void test46()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(0.0, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      assertTrue(double1.equals((Object)double0));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapLog10();
      assertTrue(double1.equals((Object)double0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
  }
}
