/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:50:44 GMT 2014
 */

package org.apache.commons.math3.genetics;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.genetics.Chromosome;
import org.apache.commons.math3.genetics.ElitisticListPopulation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class ListPopulationEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = 1;
      Chromosome chromosome0 = null;
      linkedList0.addLast(chromosome0);
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      int int1 = 3;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int1, (double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(elitisticListPopulation0);
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(3, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1, elitisticListPopulation0.getPopulationSize());
      assertEquals("[null]", elitisticListPopulation0.toString());
      
      elitisticListPopulation0.addChromosome(chromosome0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(2, elitisticListPopulation0.getPopulationSize());
      assertEquals(3, elitisticListPopulation0.getPopulationLimit());
      assertEquals("[null, null]", elitisticListPopulation0.toString());
      
      // Undeclared exception!
      try {
        elitisticListPopulation0.setPopulationLimit(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 is smaller than the minimum (2)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 288;
      double double0 = 0.0;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(int0, double0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(288, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      
      int int1 = (-37);
      // Undeclared exception!
      try {
        elitisticListPopulation0.setPopulationLimit(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population limit has to be positive
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 1;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, (double) int0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      elitisticListPopulation0.setPopulationLimit(int0);
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test03()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 145;
      double double0 = 0.0;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, double0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(145, elitisticListPopulation0.getPopulationLimit());
      assertEquals("[]", elitisticListPopulation0.toString());
      
      Chromosome chromosome0 = null;
      elitisticListPopulation0.addChromosome(chromosome0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(145, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1, elitisticListPopulation0.getPopulationSize());
      assertEquals("[null]", elitisticListPopulation0.toString());
      
      // Undeclared exception!
      try {
        Chromosome chromosome1 = elitisticListPopulation0.getFittestChromosome();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = 1;
      Chromosome chromosome0 = null;
      boolean boolean0 = linkedList0.add(chromosome0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("[null]", linkedList0.toString());
      
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, (double) int0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(1, linkedList0.size());
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals("[null]", elitisticListPopulation0.toString());
      assertEquals(1, elitisticListPopulation0.getPopulationSize());
      
      // Undeclared exception!
      try {
        elitisticListPopulation0.addChromosome(chromosome0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list of chromosomes bigger than maxPopulationSize
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 1;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, (double) int0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      
      Chromosome chromosome0 = null;
      linkedList0.addLast(chromosome0);
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      elitisticListPopulation0.setChromosomes((List<Chromosome>) linkedList0);
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals("[null]", elitisticListPopulation0.toString());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1, elitisticListPopulation0.getPopulationSize());
      
      // Undeclared exception!
      try {
        elitisticListPopulation0.addChromosomes((Collection<Chromosome>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list of chromosomes bigger than maxPopulationSize
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 1;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, (double) int0);
      assertNotNull(elitisticListPopulation0);
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      elitisticListPopulation0.addChromosomes((Collection<Chromosome>) linkedList0);
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test07()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = 1;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, (double) int0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Chromosome chromosome0 = null;
      linkedList0.addLast(chromosome0);
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(chromosome0);
      assertTrue(boolean0);
      assertEquals("[null, null]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      
      // Undeclared exception!
      try {
        elitisticListPopulation0.setChromosomes((List<Chromosome>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list of chromosomes bigger than maxPopulationSize
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 1032;
      double double0 = 0.0;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(int0, double0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(1032, elitisticListPopulation0.getPopulationLimit());
      
      List<Chromosome> list0 = null;
      // Undeclared exception!
      try {
        elitisticListPopulation0.setChromosomes(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = 1;
      Chromosome chromosome0 = null;
      linkedList0.addLast(chromosome0);
      assertEquals(1, linkedList0.size());
      assertEquals("[null]", linkedList0.toString());
      
      linkedList0.addLast(chromosome0);
      assertEquals(2, linkedList0.size());
      assertEquals("[null, null]", linkedList0.toString());
      
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list of chromosomes bigger than maxPopulationSize
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-26);
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population limit has to be positive
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      List<Chromosome> list0 = null;
      int int0 = (-8);
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation(list0, int0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = 1;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, (double) int0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int1 = elitisticListPopulation0.getPopulationLimit();
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(1, int1);
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1032;
      double double0 = 0.0;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(int0, double0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(1032, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      
      Iterator<Chromosome> iterator0 = elitisticListPopulation0.iterator();
      assertNotNull(iterator0);
      assertEquals(1032, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 1;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, (double) int0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals("[]", elitisticListPopulation0.toString());
      
      int int1 = elitisticListPopulation0.getPopulationSize();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals("[]", elitisticListPopulation0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 1;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, (double) int0);
      assertNotNull(elitisticListPopulation0);
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = elitisticListPopulation0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = 1;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, (double) int0);
      assertNotNull(elitisticListPopulation0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      
      List<Chromosome> list0 = elitisticListPopulation0.getChromosomeList();
      assertNotNull(list0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
  }
}
