/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:18:29 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class HypergeometricDistributionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      int int0 = 1054;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well44497b0, int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1054.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1054, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1054, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1054, hypergeometricDistribution0.getSampleSize());
      assertEquals(1054, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1054, hypergeometricDistribution0.getSupportUpperBound());
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(1054.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1054, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1054, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1054, hypergeometricDistribution0.getSampleSize());
      assertEquals(1054, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1054, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1054, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.sample();
      assertEquals(1054.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1054, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1054, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1054, hypergeometricDistribution0.getSampleSize());
      assertEquals(1054, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1054, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1054, int2);
      assertTrue(int0 == int1);
      assertTrue(int0 == int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 2227;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2227, hypergeometricDistribution0.getSampleSize());
      assertEquals(2227, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2227, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2227, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2227, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2227.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      
      RandomGenerator randomGenerator0 = null;
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2227, hypergeometricDistribution0.getSampleSize());
      assertEquals(2227, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2227, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2227, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2227, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2227.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2227, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = 606;
      assertFalse(int2 == int1);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(randomGenerator0, int1, int2, int2);
      assertNotNull(hypergeometricDistribution1);
      assertEquals(2227, hypergeometricDistribution0.getSampleSize());
      assertEquals(2227, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2227, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2227, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2227, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2227.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(606, hypergeometricDistribution1.getSampleSize());
      assertEquals(0, hypergeometricDistribution1.getSupportLowerBound());
      assertEquals(606, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(606, hypergeometricDistribution1.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution1.isSupportConnected());
      assertEquals(2227, hypergeometricDistribution1.getPopulationSize());
      assertEquals(164.90166142792995, hypergeometricDistribution1.getNumericalMean(), 0.01D);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double0 = hypergeometricDistribution1.upperCumulativeProbability(int2);
      assertEquals(2227, hypergeometricDistribution0.getSampleSize());
      assertEquals(2227, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2227, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2227, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2227, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2227.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(606, hypergeometricDistribution1.getSampleSize());
      assertEquals(0, hypergeometricDistribution1.getSupportLowerBound());
      assertEquals(606, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(606, hypergeometricDistribution1.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution1.isSupportConnected());
      assertEquals(2227, hypergeometricDistribution1.getPopulationSize());
      assertEquals(164.90166142792995, hypergeometricDistribution1.getNumericalMean(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 2227;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2227, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2227, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertEquals(2227, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2227, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 4039;
      int int1 = 0;
      int[] intArray0 = new int[4];
      intArray0[2] = int0;
      intArray0[3] = int0;
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertNotNull(well1024a0);
      assertArrayEquals(new int[] {0, 0, 4039, 4039}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well1024a0, intArray0[3], int1, intArray0[3]);
      assertNotNull(hypergeometricDistribution0);
      assertArrayEquals(new int[] {0, 0, 4039, 4039}, intArray0);
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(4039, hypergeometricDistribution0.getSampleSize());
      assertEquals(4039, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertFalse(int1 == int0);
      
      double double0 = hypergeometricDistribution0.probability(intArray0[2]);
      assertArrayEquals(new int[] {0, 0, 4039, 4039}, intArray0);
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(4039, hypergeometricDistribution0.getSampleSize());
      assertEquals(4039, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      int int0 = 1054;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well44497b0, int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1054, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1054, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1054.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1054, hypergeometricDistribution0.getSampleSize());
      assertEquals(1054, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1054, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = (-3228);
      double double0 = hypergeometricDistribution0.probability(int1);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1054, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1054, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1054.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1054, hypergeometricDistribution0.getSampleSize());
      assertEquals(1054, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1054, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2227;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2227, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2227, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      RandomGenerator randomGenerator0 = null;
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2227, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2227, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2227, int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = 606;
      assertFalse(int3 == int2);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(randomGenerator0, int2, int3, int3);
      assertNotNull(hypergeometricDistribution1);
      assertEquals(606, hypergeometricDistribution1.getSampleSize());
      assertEquals(606, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(606, hypergeometricDistribution1.getSupportUpperBound());
      assertEquals(2227, hypergeometricDistribution1.getPopulationSize());
      assertEquals(164.90166142792995, hypergeometricDistribution1.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution1.isSupportConnected());
      assertEquals(0, hypergeometricDistribution1.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2227, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2227, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertFalse(int0 == int3);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      
      int int4 = hypergeometricDistribution1.solveInverseCumulativeProbability(int2, int1, int3);
      assertEquals(606, hypergeometricDistribution1.getSampleSize());
      assertEquals(606, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(606, hypergeometricDistribution1.getSupportUpperBound());
      assertEquals(2227, hypergeometricDistribution1.getPopulationSize());
      assertEquals(164.90166142792995, hypergeometricDistribution1.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution1.isSupportConnected());
      assertEquals(0, hypergeometricDistribution1.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2227, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2227, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(606, int4);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 498;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(498.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(498, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(498, hypergeometricDistribution0.getPopulationSize());
      assertEquals(498, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(498, hypergeometricDistribution0.getSampleSize());
      assertEquals(498, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      
      int int1 = 0;
      double double0 = hypergeometricDistribution0.cumulativeProbability(int1);
      assertEquals(498.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(498, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(498, hypergeometricDistribution0.getPopulationSize());
      assertEquals(498, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(498, hypergeometricDistribution0.getSampleSize());
      assertEquals(498, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      int int0 = 1054;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well44497b0, int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1054, hypergeometricDistribution0.getSampleSize());
      assertEquals(1054, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1054, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1054.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1054, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1054, hypergeometricDistribution0.getSupportLowerBound());
      
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1054, hypergeometricDistribution0.getSampleSize());
      assertEquals(1054, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1054, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1054.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1054, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1054, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1054, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(int0, int1);
      assertEquals(1054, hypergeometricDistribution0.getSampleSize());
      assertEquals(1054, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1054, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1054.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1054, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1054, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 177;
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertNotNull(well44497a0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int1 = 2636;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well44497a0, int0, intArray0[0], int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,636) must be less than or equal to population size (177)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 4039;
      int int1 = 4112;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (4,112) must be less than or equal to population size (4,039)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) well44497b0);
      assertNotNull(randomAdaptor0);
      
      int int0 = 2179;
      int int1 = (-3678);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) randomAdaptor0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,678)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 1815;
      int int1 = (-1300);
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      assertNotNull(iSAACRandom0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) iSAACRandom0, int0, int1, intArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,300)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 2227;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2227, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2227, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2227, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2227, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2227, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(int1, int2, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      int int0 = 4899;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) jDKRandomGenerator0, int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(4899, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(4899, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4899, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(4899.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(4899, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(4899, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(4899, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(4899, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4899, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(4899.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(4899, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(4899, hypergeometricDistribution0.getSampleSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      int int0 = 1054;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well44497b0, int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1054, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1054, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1054.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1054, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1054, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1054, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertEquals(1054, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1054, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1054.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1054, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1054, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1054, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01D);
  }
}
