/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:25:04 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class HypergeometricDistributionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 4279;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(4279, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(4279, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4279, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(4279, hypergeometricDistribution0.getSampleSize());
      assertEquals(4279, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4279.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(4279, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(4279, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4279, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(4279, hypergeometricDistribution0.getSampleSize());
      assertEquals(4279, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4279.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(4279, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(4279, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(4279, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4279, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(4279, hypergeometricDistribution0.getSampleSize());
      assertEquals(4279, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4279.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 2105;
      int int1 = 923;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int1);
      assertEquals(923, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(404.716864608076, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(923, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(923, hypergeometricDistribution0.getSampleSize());
      assertEquals(2105, hypergeometricDistribution0.getPopulationSize());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int1);
      assertEquals(923, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(404.716864608076, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(923, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(923, hypergeometricDistribution0.getSampleSize());
      assertEquals(2105, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 2105;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(2105.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2105, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2105, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2105, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2105, hypergeometricDistribution0.getSampleSize());
      assertEquals(2105, hypergeometricDistribution0.getSupportLowerBound());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertEquals(2105.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2105, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2105, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2105, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2105, hypergeometricDistribution0.getSampleSize());
      assertEquals(2105, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 4279;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int1);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(4279, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(4279, hypergeometricDistribution0.getPopulationSize());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(4279, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(4279, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(2, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = 59;
      double double0 = hypergeometricDistribution0.probability(int1);
      assertEquals(2, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(2, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = 1;
      double double0 = hypergeometricDistribution0.probability(int1);
      assertEquals(2, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 2105;
      int int1 = 923;
      int int2 = 1389;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int2);
      assertEquals(923, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(207, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2105, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(923, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(609.0484560570071, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1389, hypergeometricDistribution0.getSampleSize());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertNotNull(hypergeometricDistribution0);
      
      int int3 = 93;
      int int4 = hypergeometricDistribution0.solveInverseCumulativeProbability(int2, int3, int2);
      assertEquals(923, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(207, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2105, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(923, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(609.0484560570071, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1389, hypergeometricDistribution0.getSampleSize());
      assertEquals(1389, int4);
      assertTrue(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1952;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(1952, hypergeometricDistribution0.getSampleSize());
      assertEquals(1952, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1952, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1952, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1952, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1952.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertFalse(int0 == int1);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(int1);
      assertEquals(1952, hypergeometricDistribution0.getSampleSize());
      assertEquals(1952, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1952, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1952, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1952, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1952.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 2;
      int int1 = 1;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int1, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2) must be less than or equal to population size (1)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 113236205062349959L;
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      int int0 = 449;
      int int1 = 2274;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937c0, int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,274) must be less than or equal to population size (449)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1952;
      Well44497b well44497b0 = new Well44497b((long) int0);
      assertNotNull(well44497b0);
      
      int int1 = (-168);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well44497b0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-168)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 726;
      int int1 = (-13);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-13)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-2);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 2105;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(2105, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2105, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2105.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2105, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2105, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2105, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(2105, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2105, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2105.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2105, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2105, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2105, hypergeometricDistribution0.getSampleSize());
      assertTrue(boolean0);
  }
}
