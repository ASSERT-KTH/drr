/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:42:12 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.tan(double0);
      assertEquals((-1.2246467991473532E-16), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      float float2 = FastMath.copySign(float1, float0);
      assertEquals(-0.0F, float2, 0.01F);
      assertTrue(float2 == float1);
      assertTrue(float2 == float0);
      assertTrue(float0 == float1);
      assertTrue(float0 == float2);
      assertTrue(float1 == float2);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float float0 = (-881.4357F);
      int int0 = (-826);
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(-0.0F, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      
      int int1 = FastMath.getExponent((double) float0);
      //  // Unstable assertion: assertEquals(9, int1);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      float float2 = FastMath.copySign(float1, (float) int1);
      //  // Unstable assertion: assertEquals(0.0F, float2, 0.01F);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.copySign((double) float0, (double) float0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float float0 = 1604.8898F;
      int int0 = FastMath.round(float0);
      assertEquals(1605, int0);
      
      double double0 = (-1979.750093);
      double double1 = FastMath.copySign(double0, (double) int0);
      assertEquals(1979.750093, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = (-853);
      long long0 = (-9223372036854775808L);
      double double0 = FastMath.hypot((double) int0, (double) long0);
      assertEquals(9.223372036854776E18, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 11;
      double double0 = FastMath.signum((double) int0);
      assertEquals(1.0, double0, 0.01D);
      
      float float0 = 0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.hypot(double0, (double) float1);
      assertEquals(1.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(float1 == float0);
      assertTrue(double1 == double0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float float0 = (-578.2754F);
      float float1 = FastMath.min(float0, float0);
      //  // Unstable assertion: assertEquals((-578.2754F), float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      
      int int0 = 744;
      double double0 = FastMath.pow((double) float0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double1 = FastMath.hypot((double) float1, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = 0.0;
      float float0 = Float.NaN;
      double double1 = FastMath.hypot((double) float0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = (-4.351843341274115E227);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double2 = FastMath.hypot((double) float1, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = (-2406.2);
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.hypot(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = (-4.351843341274115E227);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.max(double1, double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.max((double) float1, (double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 2838;
      int int1 = FastMath.getExponent((double) int0);
      assertEquals(11, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = FastMath.min(int0, int0);
      assertEquals(2838, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      
      double double0 = FastMath.max((double) int2, (double) int1);
      assertEquals(2838.0, double0, 0.01D);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.max(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      float float0 = 1.0F;
      float float1 = FastMath.nextAfter(float0, double1);
      assertEquals(0.99999994F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertFalse(float0 == float1);
      
      float float2 = FastMath.max(float1, float0);
      assertEquals(1.0F, float2, 0.01F);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertTrue(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float1);
      assertTrue(float2 == float0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 970;
      int int1 = (-1895);
      float float0 = FastMath.max((float) int0, (float) int1);
      assertEquals(970.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = (-853);
      long long0 = (-9223372036854775808L);
      long long1 = FastMath.min((long) int0, long0);
      assertEquals((-9223372036854775808L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      long long2 = FastMath.max((long) int0, long1);
      assertEquals((-853L), long2);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 2259;
      int int1 = 1173;
      int int2 = FastMath.max(int0, int1);
      assertEquals(2259, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = (-2265.86819458);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.min(double2, double1);
      assertEquals((-2265.86819458), double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.min(float0, float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      float float2 = 0.0F;
      assertFalse(float2 == float1);
      
      float float3 = FastMath.max(float2, float2);
      assertEquals(0.0F, float3, 0.01F);
      assertTrue(float2 == float3);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float3 == float0);
      assertFalse(float3 == float1);
      assertTrue(float3 == float2);
      
      float float4 = FastMath.min(float3, float1);
      assertEquals((-1.0F), float4, 0.01F);
      assertTrue(float2 == float3);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float2 == float4);
      assertTrue(float4 == float0);
      assertFalse(float4 == float2);
      assertTrue(float4 == float1);
      assertFalse(float4 == float3);
      assertTrue(float1 == float4);
      assertTrue(float1 == float0);
      assertFalse(float1 == float3);
      assertFalse(float1 == float2);
      assertFalse(float3 == float4);
      assertFalse(float3 == float0);
      assertFalse(float3 == float1);
      assertTrue(float3 == float2);
      assertTrue(float0 == float1);
      assertTrue(float0 == float4);
      assertFalse(float0 == float3);
      assertFalse(float0 == float2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = (-852);
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals((-852L), long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 970;
      int int1 = (-1895);
      int int2 = FastMath.min(int0, int1);
      assertEquals((-1895), int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = (-0.49999999999999994);
      double double1 = FastMath.rint(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = (-2013.5);
      double double1 = FastMath.rint(double0);
      assertEquals((-2014.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 11;
      double double0 = FastMath.rint((double) int0);
      assertEquals(11.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = (-881.4357F);
      double double0 = FastMath.ceil((double) float0);
      assertEquals((-881.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = (-0.16624879837036133);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = (-1931.0);
      double double1 = FastMath.ceil(double0);
      assertEquals((-1931.0), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = (-9.374695893307895E158);
      double double1 = FastMath.ceil(double0);
      assertEquals((-9.374695893307895E158), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = Float.NaN;
      double double0 = FastMath.rint((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float float0 = (-2080.14F);
      float float1 = 0.0F;
      float float2 = FastMath.nextAfter(float1, (double) float0);
      assertEquals((-1.4E-45F), float2, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(1.4E-45F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = 1.5874010519681994;
      double double1 = FastMath.exp(double0);
      assertEquals(4.8910208866246965, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = 3398.3901F;
      int int0 = Integer.MAX_VALUE;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.nextAfter(float1, double1);
      assertEquals(3.4028235E38F, float2, 0.01F);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = (-1687.009F);
      float float2 = FastMath.copySign(float0, float1);
      assertEquals(Float.NEGATIVE_INFINITY, float2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      
      float float3 = FastMath.nextUp(float2);
      assertEquals((-3.4028235E38F), float3, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float3);
      assertFalse(float1 == float2);
      assertFalse(float3 == float0);
      assertFalse(float3 == float2);
      assertFalse(float3 == float1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float3);
      assertFalse(float2 == float0);
      assertFalse(float0 == float3);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = 577.38F;
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertEquals(577.38F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = (-2.9031739430339586E-28);
      double double1 = 0.0;
      double double2 = FastMath.IEEEremainder(double0, double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      long long0 = 0L;
      long long1 = FastMath.max(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      float float0 = FastMath.nextAfter((float) long1, double2);
      assertEquals(Float.NaN, float0, 0.01F);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.nextAfter(float0, (double) float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = (-1.930436269002062E-8);
      double double1 = FastMath.nextUp(double0);
      assertEquals((-1.9304362690020615E-8), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 2080;
      int int1 = FastMath.getExponent((double) int0);
      assertEquals(11, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.nextAfter((double) int0, (double) int1);
      assertEquals(2079.9999999999995, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = (-1152.167F);
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      int int0 = 0;
      double double0 = FastMath.nextAfter((double) int0, (double) float1);
      assertEquals((-4.9E-324), double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = 874.0080063;
      int int0 = 0;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double1, (double) int0);
      assertEquals(1.7976931348623157E308, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.nextAfter(double2, double1);
      assertEquals((-1.7976931348623157E308), double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = 1302.84712;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double1, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 11;
      float float0 = FastMath.signum((float) int0);
      //  // Unstable assertion: assertEquals(1.0F, float0, 0.01F);
      
      double double0 = FastMath.asin((double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.nextAfter((double) float0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float float0 = 1254.327F;
      double double0 = FastMath.expm1((double) float0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      int int0 = 797;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      
      double double1 = FastMath.tan((double) float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      
      double double2 = FastMath.nextAfter(double1, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      int int0 = 128;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = 1.4E-45F;
      int int0 = 219;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(1.1805916E21F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 750;
      int int1 = (-204);
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      long long0 = (-1L);
      float float1 = FastMath.scalb((float) long0, int0);
      assertEquals((-5.877472E-39F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float float0 = (-578.2754F);
      float float1 = FastMath.min(float0, float0);
      assertEquals((-578.2754F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      int int0 = (-127);
      int int1 = FastMath.getExponent((double) float1);
      assertEquals(9, int1);
      assertFalse(int1 == int0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      float float2 = FastMath.scalb((float) int1, int0);
      assertEquals(5.2897246E-38F, float2, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertTrue(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float0 == float2);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      float float1 = FastMath.ulp(float0);
      assertEquals(2.028241E31F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      int int0 = 128;
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 2838;
      float float0 = (-3204.431F);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 709;
      int int1 = (-1153);
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 2834;
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 709;
      int int1 = FastMath.abs(int0);
      //  // Unstable assertion: assertEquals(709, int1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      float float0 = Float.NaN;
      float float1 = FastMath.scalb(float0, int1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 24;
      int int1 = FastMath.min(int0, int0);
      assertEquals(24, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(4.02653184E8F, float0, 0.01F);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = 1153.0;
      int int0 = 1075;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      int int0 = 1075;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 1444;
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(2.4049076047604052E111, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float float0 = (-2080.14F);
      int int0 = FastMath.round(float0);
      assertEquals((-2080), int0);
      
      double double0 = 5.167390528799477E-9;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-4.9E-324);
      double double2 = FastMath.hypot(double0, double1);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float float0 = (-2080.14F);
      int int0 = (-2608);
      int int1 = FastMath.round(float0);
      assertEquals((-2080), int1);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      double double1 = FastMath.scalb((double) int0, int0);
      assertEquals((-1.1381252786264335E-305), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 2247;
      int int1 = FastMath.abs(int0);
      assertEquals(2247, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = (-784.923416);
      double double1 = FastMath.scalb(double0, int1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 829;
      int int1 = (-4061);
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = (-1.4677321100833294E199);
      int int0 = (-5123);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 1419;
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      int int0 = 1146;
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float float0 = (-1152.167F);
      double double0 = FastMath.log((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      int int0 = 1923;
      double double1 = FastMath.scalb(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.ulp((double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.abs((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = 0L;
      float float0 = FastMath.abs((float) long0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.abs(long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toDegrees(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.toDegrees((double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.min(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float float0 = 1539.1163F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(1539.1165F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.pow((double) float1, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double1 = FastMath.toRadians(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float float0 = 3398.3901F;
      int int0 = Integer.MAX_VALUE;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.cbrt((double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals(1.7031839360032603E-108, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.min(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = (-826);
      double double0 = FastMath.cbrt((double) int0);
      assertEquals((-9.382675196178836), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = (-0.1666666567325592);
      double double1 = FastMath.acos(double0);
      assertEquals(1.7382443959395621, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = 6.7171126157142075E-9;
      double double1 = FastMath.acos(double0);
      assertEquals(1.570796320077784, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.min(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.nextUp(double1);
      assertEquals(4.9E-324, double2, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.acos(double2);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cosh(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = (-303.03716);
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = (-3096);
      double double0 = FastMath.acos((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 11;
      double double0 = FastMath.acos((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = 1.4E-45F;
      int int0 = 24;
      double double0 = FastMath.pow((double) float0, int0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.asin(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.asin(double0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = 2.7600590782738726E-238;
      double double1 = FastMath.signum(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.asin(double1);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = (-2289.25);
      double double1 = FastMath.asin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 1796.931;
      double double1 = FastMath.acosh(double0);
      assertEquals(8.186982591853132, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = (-4.9E-324);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals(-0.0, double3, 0.01D);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2((double) float0, double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = 3155.69369497402;
      int int0 = 0;
      double double1 = FastMath.atan2(double0, (double) int0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.min(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = (-673.0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.signum(double2);
      assertEquals((-1.0), double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      
      double double4 = FastMath.atan2(double3, double1);
      assertEquals((-1.5707963267948966), double4, 0.01D);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1465.4969388647;
      double double2 = (-3656.96004);
      double double3 = FastMath.tanh(double2);
      assertEquals((-1.0), double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double4 = FastMath.log(double1, double0);
      assertEquals(Double.NEGATIVE_INFINITY, double4, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      
      double double5 = FastMath.atan2(double3, double4);
      assertEquals((-3.141592653589793), double5, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double5);
      assertFalse(double3 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double5);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double5);
      assertFalse(double5 == double4);
      assertFalse(double5 == double3);
      assertFalse(double5 == double0);
      assertFalse(double5 == double2);
      assertFalse(double5 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double5);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double2 == double5);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = 1465.4969388647;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.log(double2, double1);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      
      double double4 = FastMath.atan2(double2, double3);
      assertEquals(3.141592653589793, double4, 0.01D);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertTrue(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = (-1687.009F);
      float float2 = FastMath.min(float1, float0);
      assertEquals((-1687.009F), float2, 0.01F);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      
      double double0 = FastMath.atan2((double) float2, (double) float0);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.exp(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log10(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals((-1.5707963267948966), double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double1, double1);
      assertEquals((-2.356194490192345), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = 1064.675790029;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double1, double0);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = 1064.675790029;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double1);
      assertEquals(0.7853981633974483, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = (-3956.582379407);
      long long1 = FastMath.round(double1);
      assertEquals((-3957L), long1);
      assertFalse(double1 == double0);
      assertFalse(long1 == long0);
      
      double double2 = FastMath.atan2((double) long0, (double) long1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = (-2127.15012409);
      double double1 = FastMath.exp(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log10(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals(3.141592653589793, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = 0.0F;
      double double0 = FastMath.atan2((double) float1, (double) float0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = (-1022.34276748167);
      int int0 = 970;
      double double1 = 0.0;
      double double2 = FastMath.max(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      
      int int1 = FastMath.min(int0, int0);
      assertEquals(970, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double3 = FastMath.atan2(double2, (double) int1);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertTrue(double3 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double3);
      assertTrue(double1 == double2);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = (-752.6);
      int int0 = 874;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals((-9.479390719716589E265), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double0);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = (-1783.53765);
      double double1 = FastMath.log1p(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.atan(double1);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = (-3656.96004);
      float float0 = 1.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.atan2(double0, (double) float1);
      assertEquals((-1.5705228756321448), double1, 0.01D);
      assertTrue(float1 == float0);
      assertFalse(double1 == double0);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float float0 = (-881.4357F);
      int int0 = (-826);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.tan((double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = (-1489.0419428);
      double double1 = FastMath.tan(double0);
      assertEquals(0.0731048172569137, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = 242.701;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.6978781723733575), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = (-2289.25);
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(3237.488397662608, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      assertEquals((-0.07709157275800899), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 3019;
      int int1 = FastMath.abs(int0);
      assertEquals(3019, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.scalb((double) int1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double1 = FastMath.cos(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertTrue(int1 == int0);
      assertFalse(double1 == double0);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = 4368491638549381120L;
      long long1 = FastMath.max(long0, long0);
      assertEquals(4368491638549381120L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.sinh((double) long1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double1 = FastMath.sin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = (-6.344612631552417E-136);
      double double1 = FastMath.rint(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.sin(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.sin((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = 1.3608995799112174E108;
      double double1 = FastMath.sin(double0);
      assertEquals((-0.98627663936882), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = 3.378413594504258E148;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.7243614884434852), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = (-853);
      long long0 = (-9223372036854775808L);
      long long1 = FastMath.min((long) int0, long0);
      assertEquals((-9223372036854775808L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.cos((double) long1);
      assertEquals(0.011800076512800236, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = (-1783.53765);
      double double1 = FastMath.log1p(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = 0.09557436730242232;
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertEquals(3.00662468162277E29, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      
      double double4 = FastMath.sin(double3);
      //  // Unstable assertion: assertEquals((-0.8858475378306367), double4, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double4);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = (-548.85312016999);
      double double1 = FastMath.sinh(double0);
      assertEquals((-1.1557169147732333E238), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      assertEquals(0.15036872556173186, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = (-2644281811660520851L);
      double double0 = FastMath.sin((double) long0);
      assertEquals(0.927916953438894, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tan(double1);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = (-1783.53765);
      int int0 = (-1056);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals((-2.30997277E-315), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sin(double1);
      assertEquals((-2.30997277E-315), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = (-4.351843341274115E227);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      int int0 = FastMath.getExponent((double) float1);
      assertEquals((-1023), int0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double2 = FastMath.pow(double1, int0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = 0.8677835950278785;
      double double1 = FastMath.abs(double0);
      assertEquals(0.8677835950278785, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      long long0 = FastMath.round(double1);
      assertEquals(1L, long0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      int int0 = 0;
      double double2 = FastMath.pow((double) long0, int0);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = (-4147.979151);
      double double1 = FastMath.floor(double0);
      assertEquals((-4148.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-1153);
      double double2 = FastMath.pow((double) int0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = (-1.930436269002062E-8);
      float float0 = 552.336F;
      float float1 = FastMath.ulp(float0);
      assertEquals(6.1035156E-5F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double1 = FastMath.pow(double0, (double) float1);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = (-2644281811660520851L);
      double double0 = FastMath.pow((double) long0, (double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = 2.7600590782738726E-238;
      int int0 = 1099;
      double double1 = FastMath.signum(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.scalb(double0, int0);
      assertEquals(1.8744920930544024E93, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = (-1624.49167080621);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      
      double double4 = FastMath.min(double1, double3);
      assertEquals((-1624.49167080621), double4, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      
      double double5 = FastMath.pow(double4, double2);
      assertEquals(Double.POSITIVE_INFINITY, double5, 0.01D);
      assertFalse(double5 == double3);
      assertFalse(double5 == double4);
      assertFalse(double5 == double2);
      assertFalse(double5 == double1);
      assertFalse(double5 == double0);
      assertFalse(double1 == double5);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double5);
      assertTrue(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double5);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double2 == double5);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double5);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = 0.0;
      float float0 = 1604.8898F;
      int int0 = FastMath.round(float0);
      assertEquals(1605, int0);
      
      double double1 = FastMath.log10(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow((double) int0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float float0 = 1539.1163F;
      int int0 = Integer.MIN_VALUE;
      int int1 = FastMath.abs(int0);
      assertEquals(Integer.MIN_VALUE, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.acosh((double) int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double1 = FastMath.pow(double0, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float float0 = (-553.071F);
      int int0 = Integer.MIN_VALUE;
      int int1 = FastMath.abs(int0);
      assertEquals(Integer.MIN_VALUE, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.acosh((double) int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double1 = FastMath.pow(double0, (double) float0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float float0 = 1540.0F;
      double double0 = (-1600.1);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double1, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = (-1L);
      int int0 = Integer.MIN_VALUE;
      int int1 = FastMath.abs(int0);
      assertEquals(Integer.MIN_VALUE, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.acosh((double) int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double1 = FastMath.pow(double0, (double) long0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = 0.4537591338157654;
      float float0 = 3398.3901F;
      int int0 = Integer.MAX_VALUE;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double1 = FastMath.pow(double0, (double) float1);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = 2289.1536760053;
      double double1 = FastMath.signum(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = 3398.3901F;
      int int0 = Integer.MAX_VALUE;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double2 = FastMath.pow(double1, (double) float1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float float0 = 3398.3901F;
      int int0 = Integer.MAX_VALUE;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.pow((double) float0, (double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = 3051.400094823;
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-7713);
      double double2 = FastMath.pow(double1, (double) int0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float float0 = Float.NaN;
      double double0 = 3155.69369497402;
      double double1 = FastMath.cosh(double0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double1, (double) float0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = 1883.307139158303;
      double double1 = FastMath.floor(double0);
      assertEquals(1883.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = (-3.5997360512765566E-9);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.rint(double2);
      assertEquals(-0.0, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      
      double double4 = FastMath.pow(double3, double1);
      assertEquals(-0.0, double4, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double3 == double0);
      assertTrue(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertTrue(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = 1258.1522981364;
      double double1 = FastMath.floor(double0);
      //  // Unstable assertion: assertEquals(1258.0, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = (-3.5997360512765566E-9);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.rint(double2);
      //  // Unstable assertion: assertEquals(-0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      
      double double4 = FastMath.pow(double3, double1);
      //  // Unstable assertion: assertEquals(0.0, double4, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = (-4148.006554920881);
      double double1 = FastMath.floor(double0);
      assertEquals((-4149.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = (-3.5997360512765566E-9);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.rint(double2);
      assertEquals(-0.0, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      
      double double4 = FastMath.pow(double3, double1);
      assertEquals(Double.NEGATIVE_INFINITY, double4, 0.01D);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = 852.4829;
      double double1 = FastMath.asinh(double0);
      assertEquals(7.441300674873326, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = (-2858.9F);
      float float1 = FastMath.nextAfter(float0, double1);
      assertEquals((-2858.8997F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(float1 == float0);
      
      int int0 = (-166);
      float float2 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float2, 0.01F);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      
      double double2 = FastMath.pow((double) float2, (double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      float float1 = FastMath.ulp(float0);
      assertEquals(2.028241E31F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = (-2858.9F);
      assertFalse(float2 == float1);
      
      int int0 = (-166);
      float float3 = FastMath.scalb(float2, int0);
      assertEquals(-0.0F, float3, 0.01F);
      assertFalse(float2 == float3);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float3 == float1);
      assertFalse(float3 == float0);
      assertFalse(float3 == float2);
      
      double double0 = FastMath.pow((double) float3, (double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float2 == float3);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float0 == float3);
      assertFalse(float3 == float1);
      assertFalse(float3 == float0);
      assertFalse(float3 == float2);
      assertFalse(float1 == float0);
      assertFalse(float1 == float3);
      assertFalse(float1 == float2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = 372.1744314927129;
      double double1 = FastMath.atan(double0);
      assertEquals(1.5681094211160174, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = (-2127.15012409);
      long long0 = FastMath.round(double0);
      assertEquals((-2127L), long0);
      
      double double1 = 0.0;
      double double2 = FastMath.pow((double) long0, double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = (-1.4677321100833294E199);
      double double1 = FastMath.log10(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.log1p((double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 712;
      int int1 = FastMath.abs(int0);
      assertEquals(712, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.log1p((double) int1);
      assertEquals(6.569481420414296, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.log1p((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float float0 = (-0.06315489F);
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.log1p((double) float1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = (-1.930436269002062E-8);
      long long0 = (-1L);
      float float0 = FastMath.nextAfter((float) long0, double0);
      assertEquals((-0.99999994F), float0, 0.01F);
      
      long long1 = FastMath.abs(long0);
      assertEquals(1L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      
      double double1 = FastMath.pow((double) float0, (double) long1);
      assertEquals((-0.9999999403953552), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double double0 = 0.6366197723675814;
      double double1 = FastMath.rint(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log(double0, double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log(double1);
      assertEquals((-744.4400719213812), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float float0 = 1254.327F;
      double double0 = FastMath.expm1((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.log10(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 874;
      float float0 = (-1.4E-45F);
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals((-1.4E-45F), float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double0 = FastMath.expm1((double) float1);
      //  // Unstable assertion: assertEquals((-1.401298464324817E-45), double0, 0.01D);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = (-710.5253616645693);
      double double1 = FastMath.exp(double0);
      assertEquals(2.64701362505942E-309, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = (-2406.2);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = (-709.2707567706766);
      double double1 = FastMath.exp(double0);
      assertEquals(9.28162801890807E-309, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = FastMath.signum((double) float0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double double0 = (-1.4677321100833294E199);
      double double1 = FastMath.cos(double0);
      assertEquals(0.9732912768823831, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.signum(double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = 0.008336750013465571;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.008336943160121329, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.03601556410444137, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = (-0.1428571423679182);
      double double1 = FastMath.atanh(double0);
      assertEquals((-0.1438410357264736), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = (-252.57905181);
      long long0 = FastMath.round(double0);
      assertEquals((-253L), long0);
      
      double double1 = FastMath.atanh((double) long0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double double0 = 7.848361555046424E-8;
      double double1 = FastMath.atanh(double0);
      assertEquals(7.84836155504644E-8, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float float0 = 1.4E-45F;
      int int0 = 24;
      double double0 = FastMath.pow((double) float0, int0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.asinh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = 0.07073719799518585;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.07067833854257323, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double double0 = 0.1428571343421936;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.14237563473843468, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.004962015874444895), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.asinh(double1);
      assertEquals((-0.004961995512540884), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = 819.7824816520243;
      double double1 = FastMath.sin(double0);
      assertEquals(0.17233626964941118, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.asinh(double1);
      assertEquals(0.17149441463124468, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double double0 = (-4.068233003401932E-9);
      double double1 = FastMath.tanh(double0);
      assertEquals((-4.068233003401932E-9), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long long0 = (-1L);
      long long1 = FastMath.abs(long0);
      assertEquals(1L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      
      double double0 = FastMath.tanh((double) long1);
      assertEquals(0.7615941559557649, double0, 0.01D);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double double0 = 1064.675790029;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double double0 = 3.814697265625E-6;
      double double1 = FastMath.sinh(double0);
      assertEquals(3.814697265634252E-6, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      float float0 = (-819.36F);
      double double0 = FastMath.asinh((double) float0);
      assertEquals((-7.401671082779642), double0, 0.01D);
      
      double double1 = FastMath.sinh(double0);
      assertEquals((-819.3599853515624), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float float0 = (-881.4357F);
      int int0 = (-826);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.sinh((double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 87;
      double double0 = FastMath.sinh((double) int0);
      assertEquals(3.038015112528436E37, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = 4;
      int int1 = FastMath.max(int0, int0);
      assertEquals(4, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.cosh((double) int1);
      assertEquals(27.308232836016487, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double double0 = (-288.0);
      double double1 = FastMath.cosh(double0);
      assertEquals(5.967340126536054E124, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double double0 = 20.3966176241583;
      double double1 = FastMath.tan(double0);
      assertEquals(42.12462805811145, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(9.8506190079164518E17, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.004962015874444895), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(1.0000123108260284, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double double0 = (-2289.25);
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(3237.488397662608, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals(56.504832034328004, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double double0 = (-4.351843341274115E227);
      double double1 = FastMath.toDegrees(double0);
      assertEquals((-2.4934225655711714E229), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double double0 = 0.6366197723675814;
      double double1 = FastMath.cos(double0);
      assertEquals(0.8041098282287917, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double double0 = (-2289.25);
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(3237.488397662608, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextUp(double1);
      assertEquals(3237.4883976626083, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double double0 = (-4.351843341274115E227);
      double double1 = FastMath.acosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
  }
}
