/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:30:58 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      float float0 = (-1.0F);
      double double1 = FastMath.atan2(double0, (double) float0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tan(double1);
      assertEquals((-1.2246467991473532E-16), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = (-1612);
      int int1 = 0;
      float float0 = FastMath.copySign((float) int0, (float) int1);
      assertEquals(1612.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-1471);
      int int1 = FastMath.min(int0, int0);
      //  // Unstable assertion: assertEquals((-1471), int1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      float float1 = FastMath.copySign(float0, (float) int1);
      //  // Unstable assertion: assertEquals(-0.0F, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = (-3.43338934259355E-8);
      double double1 = FastMath.sinh(double0);
      assertEquals((-3.4333893425935504E-8), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = 0.0F;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double2 = FastMath.copySign(double1, (double) float1);
      assertEquals(3.4333893425935504E-8, double2, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = (-107.53567);
      double double1 = FastMath.copySign(double0, double0);
      assertEquals((-107.53567), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = (-734.635277375);
      double double1 = (-8.697724830833087E-8);
      double double2 = FastMath.IEEEremainder(double0, double1);
      assertEquals((-1.4001968878592004E-8), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      float float0 = 0.0F;
      int int0 = (-995);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double3 = FastMath.hypot((double) float1, double2);
      assertEquals(1.4001968878592004E-8, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = (-4.813899778443457E-9);
      long long0 = 4503599627370496L;
      double double1 = FastMath.hypot((double) long0, double0);
      assertEquals(4.503599627370496E15, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = (-661.65691193387);
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      //  // Unstable assertion: assertEquals(0, int1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.hypot((double) int1, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = 0.0;
      float float0 = 1.0F;
      double double1 = FastMath.IEEEremainder((double) float0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.hypot(double1, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = 4.90334700062756E236;
      float float0 = (-980.5616F);
      int int0 = FastMath.round(float0);
      assertEquals((-981), int0);
      
      int int1 = 1388;
      assertFalse(int1 == int0);
      
      double double1 = FastMath.scalb(double0, int1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.hypot((double) int0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = (-2585);
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.min((double) int0, (double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.hypot(double0, (double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.ceil(double0);
      //  // Unstable assertion: assertEquals(-0.0, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      float float0 = 0.0F;
      float float1 = FastMath.abs(float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      
      int int0 = FastMath.round(float1);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      
      double double2 = FastMath.max(double1, (double) int0);
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01D);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tan(double0);
      assertEquals((-2.58576685674799E-8), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.max(double1, double2);
      assertEquals(-0.0, double3, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double0);
      assertTrue(double3 == double1);
      assertFalse(double3 == double2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.max(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = (-995);
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals((-995L), long0);
      
      int int1 = 89;
      float float0 = FastMath.max((float) long0, (float) int1);
      assertEquals(89.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 0;
      float float0 = (-627.0F);
      float float1 = FastMath.nextAfter(float0, (double) int0);
      assertEquals((-626.99994F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.max((float) int0, float1);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float float0 = (-1.4E-45F);
      float float1 = FastMath.max(float0, float0);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 183;
      long long0 = 1424L;
      long long1 = FastMath.max(long0, (long) int0);
      assertEquals(1424L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = (-1283);
      int int1 = (-4101);
      int int2 = FastMath.max(int0, int1);
      assertEquals((-1283), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = (-4.813899778443457E-9);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 0;
      double double2 = FastMath.min(double1, (double) int0);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.min(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = (-5163L);
      float float0 = FastMath.min((float) long0, (float) long0);
      assertEquals((-5163.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = (-1612);
      int int1 = 0;
      int int2 = FastMath.round((float) int1);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      
      float float0 = FastMath.min((float) int2, (float) int0);
      assertEquals((-1612.0F), float0, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = (-5163L);
      long long1 = (-302932621132653753L);
      long long2 = FastMath.min(long0, long1);
      assertEquals((-302932621132653753L), long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 1367;
      int int1 = 1352;
      int int2 = FastMath.min(int0, int1);
      assertEquals(1352, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = (-2626.5);
      double double1 = FastMath.rint(double0);
      assertEquals((-2626.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = (-8.697724830833087E-8);
      double double1 = FastMath.rint(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = (-328.6);
      double double1 = FastMath.rint(double0);
      assertEquals((-329.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = 808.96607979;
      double double1 = FastMath.ceil(double0);
      assertEquals(809.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = (-1911);
      double double0 = FastMath.ceil((double) int0);
      assertEquals((-1911.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = (-3.096733638475319E128);
      long long0 = FastMath.round(double0);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      int int0 = FastMath.round(float0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float float0 = (-980.5616F);
      int int0 = FastMath.round(float0);
      assertEquals((-981), int0);
      
      int int1 = 64;
      assertFalse(int1 == int0);
      
      long long0 = FastMath.min((long) int1, (long) int1);
      assertEquals(64L, long0);
      assertFalse(int1 == int0);
      
      float float1 = FastMath.nextAfter((float) long0, (double) int0);
      assertEquals(63.999996F, float1, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = (-3337.4484213891);
      float float0 = 0.0F;
      float float1 = FastMath.ulp(float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      
      float float2 = FastMath.nextAfter(float1, double0);
      //  // Unstable assertion: assertEquals((-1.4E-45F), float2, 0.01F);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 1205;
      long long0 = FastMath.abs((long) int0);
      assertEquals(1205L, long0);
      
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      float float2 = FastMath.nextAfter(float1, (double) long0);
      assertEquals(3.4028235E38F, float2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 455;
      float float0 = FastMath.nextAfter((float) int0, (double) int0);
      assertEquals(455.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = (-244);
      int int1 = FastMath.max(int0, int0);
      assertEquals((-244), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.acos((double) int1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      float float0 = FastMath.nextAfter((float) int1, double0);
      assertEquals(Float.NaN, float0, 0.01F);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.nextUp((double) int0);
      //  // Unstable assertion: assertEquals(4.9E-324, double0, 0.01D);
      
      float float0 = Float.NaN;
      float float1 = FastMath.nextAfter(float0, double0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = 207.8099020748;
      double double1 = FastMath.max(double0, double0);
      assertEquals(207.8099020748, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.nextUp(double1);
      assertEquals(207.80990207480002, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = (-2588.5162);
      int int0 = 1205;
      double double1 = FastMath.nextAfter((double) int0, double0);
      assertEquals(1204.9999999999998, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.abs((double) int0);
      assertEquals(0.0, double0, 0.01D);
      
      float float0 = (-1859.7026F);
      double double1 = FastMath.nextAfter(double0, (double) float0);
      assertEquals((-4.9E-324), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float float0 = (-2851.29F);
      int int0 = 3265;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.nextUp((double) float1);
      assertEquals((-1.7976931348623157E308), double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.max(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      float float0 = 3.4028235E38F;
      float float1 = FastMath.abs(float0);
      assertEquals(3.4028235E38F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.cosh((double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.nextAfter(double0, (double) long1);
      assertEquals(1.7976931348623157E308, double1, 0.01D);
      assertFalse(double0 == double1);
      assertTrue(float1 == float0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertFalse(double1 == double0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.nextAfter(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = 0.0;
      float float0 = 1.0F;
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertEquals(1.0000001F, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      
      double double1 = FastMath.IEEEremainder(double0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter((double) float1, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.sqrt((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.nextAfter(double0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float float0 = (-469.80295F);
      int int0 = 128;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(1.4E-45F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      int int0 = 219;
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(1.1805916E21F, float2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = (-2593.92F);
      float float2 = FastMath.min(float1, float0);
      //  // Unstable assertion: assertEquals((-2593.92F), float2, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      
      int int0 = (-224);
      float float3 = FastMath.scalb(float2, int0);
      //  // Unstable assertion: assertEquals(-0.0F, float3, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float3);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float3);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float3);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float3 == float0);
      //  // Unstable assertion: assertFalse(float3 == float1);
      //  // Unstable assertion: assertFalse(float3 == float2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = 1886.1276F;
      int int0 = (-132);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-132), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float1 = FastMath.scalb(float0, int1);
      assertEquals(3.4642692E-37F, float1, 0.01F);
      assertTrue(int1 == int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 1367;
      int int1 = (-224);
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float float0 = (-2093.6F);
      float float1 = FastMath.ulp(float0);
      assertEquals(2.4414062E-4F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      int int0 = 690;
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = (-3451.607F);
      int int0 = (-2161);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 1205;
      int int1 = (-2255);
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = (-2851.29F);
      int int0 = 3265;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float2, 0.01F);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.nextUp((double) int0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      int int1 = 1109;
      double double1 = FastMath.scalb(double0, int1);
      assertEquals(3.4359738368E10, double1, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float float0 = (-2093.6F);
      int int0 = (-1388);
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = 0.15;
      double double1 = FastMath.log10(double0);
      assertEquals((-0.8239087409443188), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = (-1068);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals((-2.6E-322), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.hypot(double0, double1);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = (-2304.842959434706);
      int int0 = 8388643;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 355;
      int int1 = (-2165);
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-995);
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals((-995L), long0);
      
      int int1 = (-2640);
      double double0 = FastMath.scalb((double) long0, int1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = (-2031.503273053);
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      int int0 = 5272;
      double double2 = FastMath.scalb(double1, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.ulp((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = (-1612);
      float float0 = FastMath.abs((float) int0);
      assertEquals(1612.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = 0L;
      int int0 = FastMath.getExponent((float) long0);
      assertEquals((-127), int0);
      
      long long1 = FastMath.abs((long) int0);
      assertEquals(127L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-2161);
      int int1 = FastMath.abs(int0);
      assertEquals(2161, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = (-734.635277375);
      double double1 = (-8.697724830833087E-8);
      double double2 = FastMath.IEEEremainder(double0, double1);
      assertEquals((-1.4001968878592004E-8), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.toDegrees(double2);
      assertEquals((-8.022537216168479E-7), double3, 0.01D);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-995);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.toDegrees((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = (-2851.29F);
      int int0 = 3265;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.toDegrees((double) float1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.expm1(double0);
      assertEquals((-4.9E-324), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-995);
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals((-995L), long0);
      
      double double0 = FastMath.toRadians((double) long0);
      assertEquals((-17.36602605734358), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-995);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.toRadians((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float float0 = 3.4028235E38F;
      double double0 = FastMath.exp((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.toRadians(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = (-2588.5162);
      int int0 = 1205;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.ulp((double) float0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = FastMath.cbrt(double0);
      assertEquals(1.7031839360032603E-108, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = (-1.2093068629412478E-8);
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963388879653, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.ulp((double) int1);
      assertEquals(4.9E-324, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertTrue(int1 == int0);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = 1.0946771805301359;
      int int0 = (-1911);
      double double1 = FastMath.pow(double0, int0);
      assertEquals(8.400978877754278E-76, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = 0.9808930158615112;
      double double1 = FastMath.rint(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.acos((double) float1);
      assertEquals(3.141592653589793, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = 2570.6;
      double double1 = FastMath.asinh(double0);
      assertEquals(8.545041832068994, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = 1.716531820904728E50;
      int int0 = (-1612);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.asin((double) float0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.asin(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = 0L;
      int int0 = FastMath.getExponent((float) long0);
      assertEquals((-127), int0);
      
      double double0 = FastMath.asin((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = (-107.53567);
      double double1 = FastMath.tan(double0);
      assertEquals((-0.8797603550985049), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals((-1.07535789249692), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = (-107.53567);
      long long0 = FastMath.round(double0);
      assertEquals((-108L), long0);
      
      int int0 = FastMath.getExponent((float) long0);
      assertEquals(6, int0);
      
      double double1 = FastMath.asin((double) int0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float float0 = 291.4998F;
      int int0 = FastMath.round(float0);
      assertEquals(291, int0);
      
      double double0 = FastMath.atan2((double) int0, (double) int0);
      assertEquals(0.7853981633974483, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = (-2031.503273053);
      double double1 = FastMath.cos(double0);
      assertEquals((-0.44719114362463036), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals((-1.5707963267948966), double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = (-2031.503273053);
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = 0.0;
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double1, double2);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = (-708.0);
      double double1 = FastMath.cosh(double0);
      assertEquals(1.5116915721380276E307, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = 0.0F;
      double double2 = FastMath.log10((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals(3.141592653589793, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = (-5163L);
      float float0 = 0.0F;
      double double0 = FastMath.log10((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2((double) long0, double0);
      assertEquals((-3.141592653589793), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = 2421.3340037745;
      int int0 = 3407;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = Double.POSITIVE_INFINITY;
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float float0 = (-2851.29F);
      int int0 = 3265;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.atan2((double) float1, (double) float1);
      assertEquals((-2.356194490192345), double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float float0 = (-1.4E-45F);
      float float1 = 0.0F;
      double double0 = FastMath.log10((double) float1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      
      double double1 = FastMath.atan2(double0, (double) float0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = (-2585);
      float float0 = FastMath.nextUp((float) int0);
      assertEquals((-2584.9998F), float0, 0.01F);
      
      double double0 = FastMath.cosh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2(double0, (double) int0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.atan2((double) float1, (double) float1);
      assertEquals((-3.141592653589793), double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = 0.0;
      float float0 = 1.0F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(1.0000001F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double1 = FastMath.cbrt(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.atan2(double1, (double) float1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 0;
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.min((double) int0, (double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2((double) int0, double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = (-4920.03509089461);
      double double1 = FastMath.cbrt(double0);
      assertEquals((-17.008110421724506), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals(3.141592653589793, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan(double1);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 87;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = (-1505.11913798);
      double double1 = FastMath.nextUp((double) float1);
      assertEquals(4.9E-324, double1, 0.01D);
      assertTrue(float0 == float1);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(float0 == float1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-995);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.atan((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = (-1.5707963267948966);
      double double1 = FastMath.tan(double0);
      assertEquals((-1.633123935319537E16), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 3236.124;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tan(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = 972.942;
      double double1 = FastMath.cos(double0);
      assertEquals(0.5802810271258744, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cos(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float float0 = 1757.68F;
      int int0 = 183;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.cos((double) float1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = (-328.6);
      double double1 = FastMath.sin(double0);
      assertEquals((-0.9542760839750118), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = (-3.43338934259355E-8);
      double double1 = FastMath.sinh(double0);
      assertEquals((-3.4333893425935504E-8), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = (-557.2269294447962);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.min(double2, double1);
      assertEquals((-557.2269294447962), double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      
      double double4 = FastMath.sin(double3);
      assertEquals(0.9188000852177424, double4, 0.01D);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.sin((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 0;
      double double0 = (-1600.89601897);
      double double1 = FastMath.copySign((double) int0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sin(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.ulp(float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double0 = FastMath.sin((double) float1);
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01D);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = 1.34217729E8;
      double double1 = FastMath.sin(double0);
      assertEquals(0.1310562791155129, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = (-1.1345910784680524E163);
      double double1 = FastMath.cos(double0);
      assertEquals(0.15844117685958667, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = 3.107837179570674E180;
      double double1 = FastMath.tan(double0);
      assertEquals((-3.5866101609329726), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.sin(double0);
      assertEquals(0.004961954789184062, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = 1.9140971884979424E97;
      double double1 = FastMath.tan(double0);
      assertEquals(0.6743042525499355, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = 4.0891054447206644E61;
      double double1 = FastMath.tan(double0);
      assertEquals(0.13639767026358648, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = 207.8099020748;
      double double1 = 1.8014398509481984E16;
      double double2 = FastMath.max(double0, double1);
      assertEquals(1.8014398509481984E16, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.cos(double2);
      assertEquals((-0.4413505874729857), double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.sin(double0);
      assertEquals((-2.585766856747989E-8), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = (-3.43338934259355E-8);
      int int0 = 2097;
      double double1 = FastMath.pow(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = 208.42513033;
      int int0 = 0;
      double double1 = FastMath.pow(double0, int0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float float0 = 753.8352F;
      int int0 = FastMath.round(float0);
      assertEquals(754, int0);
      
      int int1 = (-442);
      assertFalse(int1 == int0);
      
      int int2 = 403;
      assertFalse(int2 == int0);
      
      int int3 = FastMath.min(int2, int0);
      assertEquals(403, int3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      double double0 = FastMath.pow((double) int1, (double) int3);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = (-248);
      double double0 = FastMath.pow((double) int0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = (-734.635277375);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = 1817.0;
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      int int0 = (-1471);
      int int1 = FastMath.min(int0, int0);
      //  // Unstable assertion: assertEquals((-1471), int1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      double double2 = FastMath.pow((double) int1, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float float0 = 2200.0F;
      long long0 = 0L;
      double double0 = FastMath.sinh((double) long0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = (-1.8981247089866317E-7);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log((double) float0, double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = (-5163L);
      long long1 = FastMath.min(long0, long0);
      assertEquals((-5163L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      float float0 = 0.0F;
      double double0 = FastMath.log10((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow((double) long1, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = (-2240.5867);
      int int0 = 76;
      int int1 = 1388;
      double double1 = FastMath.scalb(double0, int1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, (double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float float0 = (-2851.29F);
      int int0 = 3265;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.pow((double) float1, (double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = (-2240.5867);
      float float0 = (-980.5616F);
      int int0 = FastMath.round(float0);
      assertEquals((-981), int0);
      
      int int1 = 1388;
      assertFalse(int1 == int0);
      
      double double1 = FastMath.scalb(double0, int1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      
      double double2 = FastMath.pow(double1, (double) int0);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(int1 == int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = 1.7827257129423813E-8;
      float float0 = Float.NEGATIVE_INFINITY;
      double double1 = FastMath.pow((double) float0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float float0 = 1757.68F;
      double double0 = (-0.3058015757857271);
      int int0 = 183;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double1 = FastMath.pow(double0, (double) float1);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float float0 = 1757.68F;
      int int0 = 183;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.pow((double) float0, (double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = (-3235.1532185);
      float float0 = 1168.4918F;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = 4.90334700062756E236;
      float float0 = (-980.5616F);
      int int0 = FastMath.round(float0);
      assertEquals((-981), int0);
      
      int int1 = 1388;
      assertFalse(int1 == int0);
      
      double double1 = FastMath.scalb(double0, int1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      
      double double2 = FastMath.pow(double1, (double) int0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = (-2173.0760971);
      double double2 = FastMath.pow((double) long0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.ceil(double0);
      //  // Unstable assertion: assertEquals(-0.0, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = 0.0F;
      double double2 = FastMath.exp((double) float0);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(-0.0, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertTrue(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertTrue(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = (-3337.4484213891);
      double double1 = FastMath.log10(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.log1p((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = 0.1428571343421936;
      double double1 = FastMath.log1p(double0);
      assertEquals(0.133531385173942, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = 1338.564446545639;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float float0 = (-0.8787387F);
      int int0 = FastMath.round(float0);
      assertEquals((-1), int0);
      
      double double0 = FastMath.log1p((double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = (-682.3173205231217);
      int int0 = 3265;
      float float0 = FastMath.abs((float) int0);
      assertEquals(3265.0F, float0, 0.01F);
      
      double double1 = FastMath.signum((double) float0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double0);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = 3892.0;
      double double1 = FastMath.tanh(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = (-0.3058015757857271);
      double double1 = FastMath.asinh(double0);
      assertEquals((-0.3012254913904546), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.nextUp((double) int0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = FastMath.log(double0);
      assertEquals((-744.4400719213812), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double double0 = 1306.6095711;
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.acosh(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = 1306.6095711;
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log10(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long long0 = 0L;
      int int0 = FastMath.getExponent((float) long0);
      assertEquals((-127), int0);
      
      double double0 = FastMath.log1p((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = (-713.2355771);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double double0 = (-2.394588390685223E199);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = 0.75;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(0.8059274488676564, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float float0 = 168.7F;
      float float1 = FastMath.signum(float0);
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = (-995);
      float float0 = FastMath.copySign((float) int0, (float) int0);
      assertEquals((-995.0F), float0, 0.01F);
      
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      double double3 = FastMath.signum(double2);
      assertEquals(1.0, double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = (-1560.039555597291);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.signum(double1);
      assertEquals((-1.0), double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.signum(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = 0.041666663879186654;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.04169080167719773, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = 0.031;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.031009936063096846, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = 0.1428571343421936;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.14384102753354644, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.asinh(double0);
      assertEquals((-0.01071448572782725), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double double0 = 0.1075331771592698;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.10732700693912901, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.asinh(double0);
      assertEquals((-2.585766856747989E-8), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = 0.2674594521522522;
      double double1 = FastMath.tanh(double0);
      assertEquals(0.2612592715050388, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.tanh((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = (-4920.03509089461);
      double double1 = FastMath.cbrt(double0);
      assertEquals((-17.008110421724506), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.min(double0, double1);
      assertEquals((-4920.03509089461), double2, 0.01D);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      
      double double3 = FastMath.tanh(double2);
      assertEquals((-1.0), double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = (-107.53567);
      double double1 = FastMath.tan(double0);
      assertEquals((-0.8797603550985049), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tanh(double1);
      assertEquals((-0.7062992447477651), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double double0 = 0.375;
      double double1 = FastMath.sinh(double0);
      assertEquals(0.38385106791361456, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double double0 = (-2240.5867);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double double0 = 808.96607979;
      double double1 = FastMath.tan(double0);
      assertEquals((-167.4603840140473), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.sinh(double1);
      assertEquals((-2.667415798283174E72), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 455;
      double double0 = FastMath.sinh((double) int0);
      assertEquals(2.0089044015591397E197, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = 128;
      double double0 = FastMath.cosh((double) int0);
      assertEquals(1.9438542029972974E55, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double double0 = (-107.53567);
      double double1 = FastMath.tan(double0);
      assertEquals((-0.8797603550985049), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(1.4126021700102942, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      long long0 = (-267L);
      long long1 = FastMath.min(long0, long0);
      assertEquals((-267L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double2 = FastMath.atan2(double1, (double) long1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertTrue(long0 == long1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(long1 == long0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double double0 = 4.5374504961394207E266;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.8465145006977542), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = (-1911);
      double double0 = FastMath.nextUp((double) int0);
      assertEquals((-1910.9999999999998), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextUp(float0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }
}
