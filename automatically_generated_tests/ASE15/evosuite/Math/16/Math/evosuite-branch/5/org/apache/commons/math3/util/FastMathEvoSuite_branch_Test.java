/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:19:58 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.sin(double0);
      assertEquals((-1.2246467991473532E-16), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test001()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.copySign(float0, float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test002()  throws Throwable  {
      float float0 = 274.6F;
      float float1 = FastMath.ulp(float0);
      assertEquals(3.0517578E-5F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      float float2 = (-1.0F);
      assertFalse(float2 == float1);
      
      float float3 = FastMath.copySign(float1, float2);
      assertEquals((-3.0517578E-5F), float3, 0.01F);
      assertFalse(float2 == float3);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float3);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float3);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float3 == float2);
      assertFalse(float3 == float0);
      assertFalse(float3 == float1);
  }

  @Test
  public void test003()  throws Throwable  {
      int int0 = 1402;
      float float0 = FastMath.copySign((float) int0, (float) int0);
      assertEquals(1402.0F, float0, 0.01F);
  }

  @Test
  public void test004()  throws Throwable  {
      int int0 = 429;
      int int1 = (-3766);
      float float0 = FastMath.copySign((float) int1, (float) int0);
      assertEquals(3766.0F, float0, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test005()  throws Throwable  {
      int int0 = 1133;
      double double0 = (-2037.718541976);
      double double1 = FastMath.copySign(double0, (double) int0);
      assertEquals(2037.718541976, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test006()  throws Throwable  {
      double double0 = 0.06703783571720123;
      double double1 = FastMath.log10(double0);
      assertEquals((-1.1736800151303053), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 569;
      double double2 = FastMath.asinh((double) int0);
      assertEquals(7.037028386859918, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.copySign(double2, double1);
      assertEquals((-7.037028386859918), double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
  }

  @Test
  public void test007()  throws Throwable  {
      double double0 = (-267.83643);
      double double1 = FastMath.copySign(double0, double0);
      assertEquals((-267.83643), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test008()  throws Throwable  {
      long long0 = 31L;
      double double0 = 0.0;
      double double1 = FastMath.hypot(double0, (double) long0);
      assertEquals(31.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test009()  throws Throwable  {
      double double0 = (-99.69169206642);
      long long0 = (-3183605296591799669L);
      double double1 = FastMath.hypot((double) long0, double0);
      assertEquals(3.1836052965917998E18, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test010()  throws Throwable  {
      double double0 = (-1.3890028312254422E-8);
      double double1 = FastMath.expm1(double0);
      //  // Unstable assertion: assertEquals((-1.3890028215787979E-8), double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      float float0 = (-1.0F);
      long long0 = (-1L);
      double double2 = FastMath.log((double) long0, (double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.hypot(double1, double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
  }

  @Test
  public void test011()  throws Throwable  {
      float float0 = 274.6F;
      float float1 = FastMath.ulp(float0);
      //  // Unstable assertion: assertEquals(3.0517578E-5F, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      
      double double0 = FastMath.cosh((double) float0);
      //  // Unstable assertion: assertEquals(9.041435442251341E118, double0, 0.01D);
      //  // Unstable assertion: assertFalse(float0 == float1);
      
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(float0 == float1);
      
      double double2 = FastMath.hypot(double1, (double) float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(float0 == float1);
  }

  @Test
  public void test012()  throws Throwable  {
      double double0 = (-1131.28135389);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = (-2061);
      long long0 = FastMath.abs((long) int0);
      assertEquals(2061L, long0);
      
      double double2 = FastMath.hypot((double) long0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test013()  throws Throwable  {
      double double0 = 0.4158278703689575;
      float float0 = Float.NEGATIVE_INFINITY;
      double double1 = FastMath.ceil((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.hypot(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test014()  throws Throwable  {
      float float0 = 1772.8219F;
      int int0 = 429;
      double double0 = FastMath.max((double) int0, (double) float0);
      assertEquals(1772.8218994140625, double0, 0.01D);
  }

  @Test
  public void test015()  throws Throwable  {
      double double0 = 2515.5751487;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = 745.74F;
      double double2 = FastMath.max(double1, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test016()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      float float2 = FastMath.max(float0, float1);
      assertEquals(-0.0F, float2, 0.01F);
      assertTrue(float1 == float2);
      assertTrue(float1 == float0);
      assertTrue(float2 == float0);
      assertTrue(float2 == float1);
      assertTrue(float0 == float2);
      assertTrue(float0 == float1);
  }

  @Test
  public void test017()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = 137.6831F;
      int int0 = FastMath.round(float1);
      assertEquals(138, int0);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.max(float0, (float) int0);
      assertEquals(138.0F, float2, 0.01F);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
  }

  @Test
  public void test018()  throws Throwable  {
      int int0 = 2585;
      int int1 = FastMath.min(int0, int0);
      assertEquals(2585, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      long long0 = 319L;
      long long1 = FastMath.max((long) int1, long0);
      assertEquals(2585L, long1);
      assertFalse(long1 == long0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(long0 == long1);
  }

  @Test
  public void test019()  throws Throwable  {
      int int0 = 429;
      int int1 = 0;
      int int2 = FastMath.max(int0, int1);
      assertEquals(429, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test
  public void test020()  throws Throwable  {
      int int0 = (-3905);
      double double0 = FastMath.IEEEremainder((double) int0, (double) int0);
      assertEquals(-0.0, double0, 0.01D);
      
      double double1 = FastMath.min(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test021()  throws Throwable  {
      long long0 = (-3183605296591799669L);
      int int0 = FastMath.round((float) long0);
      assertEquals(Integer.MIN_VALUE, int0);
      
      double double0 = FastMath.min((double) long0, (double) int0);
      assertEquals((-3.1836052965917998E18), double0, 0.01D);
  }

  @Test
  public void test022()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      int int0 = 1024;
      int int1 = FastMath.abs(int0);
      assertEquals(1024, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float2 = FastMath.min(float1, (float) int1);
      assertEquals((-1.0F), float2, 0.01F);
      assertTrue(float2 == float1);
      assertTrue(float2 == float0);
      assertTrue(int1 == int0);
      assertTrue(float1 == float0);
      assertTrue(float1 == float2);
      assertTrue(int0 == int1);
      assertTrue(float0 == float1);
      assertTrue(float0 == float2);
  }

  @Test
  public void test023()  throws Throwable  {
      double double0 = 5.874989409410614E-8;
      double double1 = FastMath.sinh(double0);
      assertEquals(5.8749894094106174E-8, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      long long0 = FastMath.round(double1);
      assertEquals(0L, long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = (-2283.422F);
      float float1 = FastMath.min((float) long0, float0);
      assertEquals((-2283.422F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(float0 == float1);
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = 1449;
      float float0 = FastMath.min((float) int0, (float) int0);
      assertEquals(1449.0F, float0, 0.01F);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = (-2061);
      long long0 = FastMath.abs((long) int0);
      assertEquals(2061L, long0);
      
      long long1 = FastMath.min((long) int0, long0);
      assertEquals((-2061L), long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 1024;
      long long0 = 0L;
      long long1 = FastMath.min((long) int0, long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test027()  throws Throwable  {
      double double0 = 1.5;
      double double1 = FastMath.rint(double0);
      assertEquals(2.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test028()  throws Throwable  {
      double double0 = 2850.5;
      double double1 = FastMath.rint(double0);
      assertEquals(2850.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test029()  throws Throwable  {
      float float0 = 2713.0452F;
      float float1 = FastMath.signum(float0);
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.asin((double) float1);
      assertEquals(1.5707963267948966, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double1 = FastMath.rint(double0);
      assertEquals(2.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test030()  throws Throwable  {
      float float0 = (-0.3234344F);
      double double0 = FastMath.ceil((double) float0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test031()  throws Throwable  {
      double double0 = (-1131.28135389);
      double double1 = FastMath.tanh(double0);
      //  // Unstable assertion: assertEquals((-1.0), double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.log(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double3 = FastMath.atanh(double2);
      //  // Unstable assertion: assertEquals(355.09408900074607, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double4 = FastMath.ceil(double3);
      //  // Unstable assertion: assertEquals(356.0, double4, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double4);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = 0.40741634368896484;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-2), int0);
      
      double double1 = FastMath.ceil((double) int0);
      assertEquals((-2.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test033()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.rint(double0);
      assertEquals(1.7976931348623157E308, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test034()  throws Throwable  {
      long long0 = (-3183605296591799669L);
      int int0 = FastMath.round((float) long0);
      assertEquals(Integer.MIN_VALUE, int0);
      
      float float0 = FastMath.nextAfter((float) long0, (double) int0);
      assertEquals((-3.18360513E18F), float0, 0.01F);
  }

  @Test
  public void test035()  throws Throwable  {
      float float0 = (-2283.422F);
      float float1 = (-2357.5F);
      float float2 = FastMath.nextAfter(float0, (double) float1);
      assertEquals((-2283.4224F), float2, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test
  public void test036()  throws Throwable  {
      double double0 = 5.874989409410614E-8;
      double double1 = FastMath.sinh(double0);
      assertEquals(5.8749894094106174E-8, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      assertFalse(double0 == double1);
      
      float float0 = FastMath.nextAfter((float) long0, double1);
      assertEquals(1.4E-45F, float0, 0.01F);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test037()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = 141.1;
      float float1 = FastMath.nextAfter(float0, double0);
      assertEquals(3.4028235E38F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test038()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.nextAfter(float0, (double) float1);
      assertEquals((-3.4028235E38F), float2, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test039()  throws Throwable  {
      float float0 = (-1.0F);
      long long0 = (-1L);
      long long1 = FastMath.max(long0, long0);
      assertEquals((-1L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.log((double) long0, (double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
      assertTrue(long0 == long1);
      
      float float1 = FastMath.nextAfter((float) long1, double0);
      assertEquals(Float.NaN, float1, 0.01F);
      assertFalse(float0 == float1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test040()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test041()  throws Throwable  {
      double double0 = 5.874989409410614E-8;
      double double1 = FastMath.sinh(double0);
      assertEquals(5.8749894094106174E-8, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.nextAfter(double1, (double) long0);
      assertEquals(5.874989409410617E-8, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.nextUp(double1);
      assertEquals((-1.7976931348623157E308), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test043()  throws Throwable  {
      double double0 = 2515.5751487;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double1, double0);
      assertEquals(1.7976931348623157E308, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      float float0 = 0.0F;
      double double1 = FastMath.nextAfter((double) float0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test045()  throws Throwable  {
      double double0 = 0.19999998807907104;
      double double1 = FastMath.min(double0, double0);
      //  // Unstable assertion: assertEquals(0.19999998807907104, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      
      double double2 = (-3117.337);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.atanh(double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      
      double double4 = FastMath.nextAfter(double1, double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double4, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertTrue(double3 == double4);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertTrue(double4 == double3);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double4);
  }

  @Test
  public void test046()  throws Throwable  {
      float float0 = 2713.0452F;
      double double0 = FastMath.asin((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.nextAfter(double0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test
  public void test047()  throws Throwable  {
      float float0 = 137.6831F;
      int int0 = FastMath.round(float0);
      assertEquals(138, int0);
      
      float float1 = (-1.0F);
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float2, 0.01F);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = (-214);
      float float0 = 1.0F;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test049()  throws Throwable  {
      float float0 = 1836.0F;
      int int0 = (-137);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(1.0538123E-38F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test050()  throws Throwable  {
      float float0 = 1264.7416F;
      int int0 = (-137);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(7.259261E-39F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test051()  throws Throwable  {
      float float0 = (-1525.1F);
      int int0 = (-256);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test052()  throws Throwable  {
      int int0 = 1402;
      int int1 = 162;
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test053()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ceil(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      int int0 = FastMath.getExponent(double1);
      assertEquals((-1023), int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      long long0 = FastMath.abs((long) int0);
      assertEquals(1023L, long0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      float float0 = FastMath.scalb((float) long0, int0);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test054()  throws Throwable  {
      long long0 = 0L;
      int int0 = (-349);
      float float0 = FastMath.scalb((float) long0, int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test055()  throws Throwable  {
      float float0 = (-56.65223F);
      float float1 = FastMath.max(float0, float0);
      assertEquals((-56.65223F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      int int0 = 2772;
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float2, 0.01F);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertTrue(float1 == float0);
      
      float float3 = FastMath.scalb(float2, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float3, 0.01F);
      assertFalse(float0 == float3);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertTrue(float2 == float3);
      assertFalse(float2 == float1);
      assertFalse(float3 == float1);
      assertFalse(float3 == float0);
      assertTrue(float3 == float2);
      assertFalse(float1 == float2);
      assertFalse(float1 == float3);
      assertTrue(float1 == float0);
  }

  @Test
  public void test056()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = (-1757);
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test057()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.max(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      int int0 = 0;
      float float0 = FastMath.scalb((float) long1, int0);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test058()  throws Throwable  {
      double double0 = (-2587.04610873);
      int int0 = 1207;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test059()  throws Throwable  {
      int int0 = 1024;
      int int1 = FastMath.abs(int0);
      assertEquals(1024, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = (-1.9841269659586505E-4);
      double double1 = FastMath.scalb(double0, int1);
      assertEquals((-3.566851425399062E304), double1, 0.01D);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test060()  throws Throwable  {
      double double0 = (-4.9E-324);
      int int0 = 1231;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals((-1.8268770466636286E47), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test061()  throws Throwable  {
      int int0 = 341;
      int int1 = FastMath.min(int0, int0);
      assertEquals(341, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      int int2 = (-1564);
      assertFalse(int2 == int1);
      
      double double0 = FastMath.scalb((double) int1, int2);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test
  public void test062()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-3141.6896253);
      double double2 = FastMath.nextAfter(double0, double1);
      assertEquals((-4.9E-324), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.hypot(double2, double0);
      assertEquals(4.9E-324, double3, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
  }

  @Test
  public void test063()  throws Throwable  {
      int int0 = 2049;
      int int1 = (-1023);
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(2.279588168040628E-305, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = (-1131.28135389);
      int int0 = (-2061);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test065()  throws Throwable  {
      double double0 = (-267.83643);
      int int0 = 4180;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test066()  throws Throwable  {
      float float0 = 703.67F;
      int int0 = 3085;
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test067()  throws Throwable  {
      double double0 = (-510.782);
      int int0 = (-4403);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test068()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 1377;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = 0.99;
      int int0 = 1449;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test070()  throws Throwable  {
      double double0 = (-243.66812407);
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      int int0 = 3084;
      double double2 = FastMath.scalb(double1, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
  }

  @Test
  public void test071()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test072()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.abs(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test073()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.ulp(float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test074()  throws Throwable  {
      float float0 = (-2283.422F);
      float float1 = FastMath.abs(float0);
      assertEquals(2283.422F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test075()  throws Throwable  {
      long long0 = 1023L;
      long long1 = FastMath.abs(long0);
      assertEquals(1023L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test076()  throws Throwable  {
      int int0 = (-349);
      int int1 = FastMath.abs(int0);
      assertEquals(349, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test077()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.toDegrees((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test078()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.toDegrees((double) float0);
      assertEquals((-57.29577951308232), double0, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toRadians(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test080()  throws Throwable  {
      int int0 = 2585;
      int int1 = FastMath.min(int0, int0);
      assertEquals(2585, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.expm1((double) int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double1 = FastMath.toRadians(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = (-5075.08115769321);
      double double1 = FastMath.log(double0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.cbrt(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-3141.6896253);
      double double2 = FastMath.nextAfter(double0, double1);
      assertEquals((-4.9E-324), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.cbrt(double2);
      assertEquals((-1.7031839360032603E-108), double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
  }

  @Test
  public void test083()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test084()  throws Throwable  {
      int int0 = 1377;
      double double0 = FastMath.cbrt((double) int0);
      assertEquals(11.12528930779857, double0, 0.01D);
  }

  @Test
  public void test085()  throws Throwable  {
      double double0 = 0.99;
      double double1 = FastMath.acos(double0);
      assertEquals(0.1415394733244273, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test086()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-3141.6896253);
      double double2 = FastMath.nextAfter(double0, double1);
      assertEquals((-4.9E-324), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.acos(double2);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = 429;
      int int1 = FastMath.max(int0, int0);
      assertEquals(429, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = (-3766);
      assertFalse(int2 == int1);
      
      double double0 = FastMath.scalb((double) int1, int2);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(double1 == double0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test
  public void test088()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.acos((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test089()  throws Throwable  {
      long long0 = (-1L);
      long long1 = FastMath.max(long0, long0);
      assertEquals((-1L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.acos((double) long1);
      assertEquals(3.141592653589793, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test090()  throws Throwable  {
      float float0 = (-1441.539F);
      double double0 = FastMath.acos((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = 2.864122672853628E-291;
      double double1 = FastMath.asin(double0);
      assertEquals(2.864122672853628E-291, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test092()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.asin((double) float1);
      assertEquals((-1.5707963267948966), double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test093()  throws Throwable  {
      double double0 = 1357.211728396;
      double double1 = FastMath.signum(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test094()  throws Throwable  {
      double double0 = 2367.508279861435;
      double double1 = (-4.9E-324);
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test095()  throws Throwable  {
      long long0 = (-2210L);
      long long1 = FastMath.max(long0, long0);
      assertEquals((-2210L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.abs((double) long1);
      assertEquals(2210.0, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double1 = 0.0;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(long1 == long0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(long0 == long1);
  }

  @Test
  public void test096()  throws Throwable  {
      double double0 = (-5075.08115769321);
      double double1 = 0.0;
      double double2 = FastMath.atan2(double0, double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test097()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      int int0 = (-1472);
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.atan2((double) int0, (double) float1);
      assertEquals((-3.141592653589793), double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test098()  throws Throwable  {
      float float0 = 1439.0F;
      float float1 = FastMath.abs(float0);
      assertEquals(1439.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      int int0 = FastMath.round(float0);
      assertEquals(1439, int0);
      assertTrue(float0 == float1);
      
      double double0 = 0.0;
      double double1 = FastMath.log((double) float1, double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2((double) int0, double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test099()  throws Throwable  {
      int int0 = 1402;
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.expm1((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double0);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1550.859149499123);
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test101()  throws Throwable  {
      float float0 = (-3532.7725F);
      int int0 = (-2233);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.atan2((double) float1, (double) int0);
      assertEquals((-3.141592653589793), double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = 2515.5751487;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.expm1(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.atan2(double0, double2);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertTrue(double0 == double3);
      assertFalse(double0 == double1);
      assertTrue(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
  }

  @Test
  public void test104()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = (-99.69169206642);
      long long0 = (-3183605296591799669L);
      int int0 = FastMath.round((float) long0);
      assertEquals(Integer.MIN_VALUE, int0);
      
      float float0 = 0.0F;
      float float1 = FastMath.nextAfter(float0, double0);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double1 = FastMath.atan2((double) float1, (double) int0);
      assertEquals((-3.141592653589793), double1, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test106()  throws Throwable  {
      double double0 = (-0.39788034405979494);
      double double1 = FastMath.atan(double0);
      assertEquals((-0.3786777529751277), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test107()  throws Throwable  {
      long long0 = (-3183605296591799669L);
      double double0 = FastMath.atan((double) long0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      double double0 = (-3.940510424527919E-20);
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = (-1769.86723);
      double double1 = 3492.34694091;
      double double2 = FastMath.IEEEremainder(double1, double0);
      assertEquals((-47.387519090000296), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = 0.0;
      assertFalse(double3 == double2);
      
      double double4 = FastMath.nextUp(double3);
      assertEquals(4.9E-324, double4, 0.01D);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      
      double double5 = FastMath.atan2(double4, double2);
      assertEquals(3.141592653589793, double5, 0.01D);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double5);
      assertFalse(double1 == double0);
      assertFalse(double1 == double5);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double5);
      assertFalse(double2 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double5);
      assertFalse(double3 == double1);
      assertFalse(double5 == double4);
      assertFalse(double5 == double0);
      assertFalse(double5 == double2);
      assertFalse(double5 == double1);
      assertFalse(double5 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double5);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
  }

  @Test
  public void test110()  throws Throwable  {
      int int0 = 1402;
      double double0 = FastMath.expm1((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.tan(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test111()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.tan((double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = 118.210785385017;
      double double1 = FastMath.sqrt(double0);
      assertEquals(10.872478346035784, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      assertEquals((-0.12278530615282937), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test114()  throws Throwable  {
      double double0 = (-99.69169206642);
      double double1 = FastMath.atan2(double0, double0);
      assertEquals((-2.356194490192345), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      assertEquals((-0.7071067811865475), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test115()  throws Throwable  {
      double double0 = 0.99;
      int int0 = 1449;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cos(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = 142.71208277505;
      int int0 = 1133;
      int int1 = FastMath.max(int0, int0);
      assertEquals(1133, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double1 = FastMath.scalb(double0, int1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sin(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test117()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.sin((double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = (-2.4090696463777446E241);
      double double1 = FastMath.sin(double0);
      assertEquals((-0.2792728003371339), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test119()  throws Throwable  {
      float float0 = 633.8F;
      double double0 = FastMath.nextUp((double) float0);
      assertEquals(633.7999877929689, double0, 0.01D);
      
      double double1 = FastMath.expm1(double0);
      assertEquals(1.8023425214259703E275, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tan(double1);
      assertEquals((-0.042904042142229135), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test120()  throws Throwable  {
      float float0 = 274.6F;
      double double0 = FastMath.cosh((double) float0);
      assertEquals(9.041435442251341E118, double0, 0.01D);
      
      double double1 = FastMath.cos(double0);
      assertEquals((-0.06879161961325135), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = (-4.0353723442917463E83);
      double double1 = FastMath.sin(double0);
      assertEquals((-0.40278986772030284), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = 1.2424707839848734E210;
      double double1 = FastMath.tan(double0);
      assertEquals(0.26121117246295056, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      double double1 = FastMath.sin(double0);
      assertEquals((-0.004961954789184062), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test124()  throws Throwable  {
      long long0 = (-3183605296591799669L);
      int int0 = FastMath.round((float) long0);
      assertEquals(Integer.MIN_VALUE, int0);
      
      double double0 = FastMath.cos((double) int0);
      assertEquals(0.23781619457280337, double0, 0.01D);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = 6.591143677421159E-251;
      double double1 = FastMath.tan(double0);
      assertEquals(6.591143677421159E-251, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test126()  throws Throwable  {
      int int0 = 1377;
      double double0 = FastMath.tan((double) int0);
      assertEquals(1.4987787031212894, double0, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.exp((double) int0);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = FastMath.sin(double0);
      assertEquals(0.8414709848078965, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test128()  throws Throwable  {
      float float0 = 274.6F;
      float float1 = FastMath.ulp(float0);
      assertEquals(3.0517578E-5F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      int int0 = (-2098);
      double double0 = FastMath.pow((double) float1, int0);
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test129()  throws Throwable  {
      int int0 = 1133;
      int int1 = FastMath.max(int0, int0);
      assertEquals(1133, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      double double0 = FastMath.pow((double) int1, int2);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test
  public void test130()  throws Throwable  {
      double double0 = (-6.032174644509064E-23);
      int int0 = 1402;
      double double1 = FastMath.pow(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test131()  throws Throwable  {
      double double0 = 2367.508279861435;
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test132()  throws Throwable  {
      double double0 = (-1586.0);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test133()  throws Throwable  {
      double double0 = (-1545.47282389334);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test134()  throws Throwable  {
      int int0 = 1133;
      int int1 = FastMath.max(int0, int0);
      assertEquals(1133, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = (-1545.47282389334);
      double double1 = FastMath.pow(double0, (double) int1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertTrue(int1 == int0);
      assertFalse(double1 == double0);
  }

  @Test
  public void test135()  throws Throwable  {
      float float0 = 274.6F;
      double double0 = FastMath.cosh((double) float0);
      assertEquals(9.041435442251341E118, double0, 0.01D);
      
      double double1 = (-1.0129027912496858E-9);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test136()  throws Throwable  {
      double double0 = 0.39433568716049194;
      long long0 = 0L;
      double double1 = FastMath.log10((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test137()  throws Throwable  {
      double double0 = 6424.45143;
      double double1 = FastMath.abs(double0);
      assertEquals(6424.45143, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      long long0 = 0L;
      double double2 = FastMath.log10((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test
  public void test138()  throws Throwable  {
      float float0 = (-1.0F);
      long long0 = 0L;
      double double0 = FastMath.log10((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow((double) float0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test139()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = 0.2;
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test140()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test141()  throws Throwable  {
      long long0 = 1023L;
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.pow(double0, (double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test142()  throws Throwable  {
      double double0 = (-1131.28135389);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-2061);
      double double2 = FastMath.pow(double1, (double) int0);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test143()  throws Throwable  {
      float float0 = (-1135.562F);
      int int0 = FastMath.getExponent(float0);
      assertEquals(10, int0);
      
      float float1 = FastMath.max(float0, float0);
      assertEquals((-1135.562F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      int int1 = 2772;
      assertFalse(int1 == int0);
      
      float float2 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(int0 == int1);
      assertFalse(float0 == float2);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.pow((double) float2, (double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertTrue(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(int0 == int1);
      assertFalse(float0 == float2);
      assertTrue(float0 == float1);
  }

  @Test
  public void test144()  throws Throwable  {
      float float0 = 617.7739F;
      int int0 = 2772;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.pow((double) float1, (double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test145()  throws Throwable  {
      float float0 = -0.0F;
      int int0 = 298;
      double double0 = FastMath.pow((double) float0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test146()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = (-18.64420348128417);
      double double1 = FastMath.pow((double) float0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test147()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = 1.5;
      double double1 = FastMath.pow((double) float0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test148()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.asin(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      float float0 = 0.0F;
      float float1 = 1340.5676F;
      float float2 = FastMath.max(float1, float0);
      assertEquals(1340.5676F, float2, 0.01F);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      
      double double2 = FastMath.pow(double1, (double) float2);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
  }

  @Test
  public void test149()  throws Throwable  {
      double double0 = 682.248307;
      double double1 = 0.0;
      double double2 = FastMath.pow(double0, double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test150()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test
  public void test151()  throws Throwable  {
      double double0 = 6424.45143;
      double double1 = FastMath.log1p(double0);
      assertEquals(8.768022168773797, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test152()  throws Throwable  {
      double double0 = (-1773.1473);
      double double1 = FastMath.signum(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test153()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.exp(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log10(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
  }

  @Test
  public void test154()  throws Throwable  {
      double double0 = (-1.2362653723769037E-8);
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963391575503, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log(double0, double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test155()  throws Throwable  {
      double double0 = (-1.2362653723769037E-8);
      double double1 = FastMath.rint(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.exp(double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.log(double2, double2);
      assertEquals(Double.NaN, double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
  }

  @Test
  public void test156()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.cos((double) float1);
      assertEquals(0.5403023058681398, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double1 = FastMath.log(double0, (double) float1);
      assertEquals(Double.NaN, double1, 0.01D);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
  }

  @Test
  public void test157()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      double double1 = FastMath.ulp((double) int0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test158()  throws Throwable  {
      double double0 = 2515.5751487;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log10(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test159()  throws Throwable  {
      long long0 = (-3183605296591799669L);
      double double0 = FastMath.atan2((double) long0, (double) long0);
      assertEquals((-2.356194490192345), double0, 0.01D);
      
      double double1 = FastMath.log1p(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test160()  throws Throwable  {
      double double0 = (-1.974465323891493E143);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.expm1(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test161()  throws Throwable  {
      double double0 = 1.1178574689680927E-7;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(0.9999982106827237, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test162()  throws Throwable  {
      double double0 = (-746.3128);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test163()  throws Throwable  {
      double double0 = (-975.52661763576);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test164()  throws Throwable  {
      int int0 = 3493;
      int int1 = FastMath.min(int0, int0);
      assertEquals(3493, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      int int3 = FastMath.min(int1, int2);
      assertEquals(0, int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertTrue(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      
      double double0 = FastMath.signum((double) int3);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertTrue(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
  }

  @Test
  public void test165()  throws Throwable  {
      double double0 = (-3.5997360512765566E-9);
      double double1 = (-243.66812407);
      double double2 = FastMath.min(double0, double1);
      //  // Unstable assertion: assertEquals((-243.66812407), double2, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      
      double double3 = FastMath.asin(double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      
      double double4 = FastMath.signum(double3);
      //  // Unstable assertion: assertEquals(1.0, double4, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
  }

  @Test
  public void test166()  throws Throwable  {
      double double0 = 0.01745329052209854;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.017455063037776063, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test167()  throws Throwable  {
      double double0 = 0.087;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.08722050326312049, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test168()  throws Throwable  {
      double double0 = (-3.5997360512765566E-9);
      double double1 = FastMath.max(double0, double0);
      assertEquals((-3.5997360512765566E-9), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.atanh(double1);
      assertEquals((-3.5997360512765566E-9), double2, 0.01D);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
  }

  @Test
  public void test169()  throws Throwable  {
      double double0 = (-1131.28135389);
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atanh(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test170()  throws Throwable  {
      double double0 = 5.874989409410614E-8;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.asinh((double) long0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test171()  throws Throwable  {
      double double0 = (-0.16666666666666666);
      double double1 = FastMath.asinh(double0);
      assertEquals((-0.16590455026930118), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test172()  throws Throwable  {
      double double0 = 5.245823134132673E-293;
      double double1 = FastMath.tanh(double0);
      assertEquals(5.245823134132673E-293, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test173()  throws Throwable  {
      double double0 = (-1394.76422);
      double double1 = FastMath.atan(double0);
      assertEquals((-1.570079359859329), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      assertEquals((-0.9170383837550464), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test174()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sin(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
  }

  @Test
  public void test175()  throws Throwable  {
      double double0 = 456.91899916420743;
      double double1 = FastMath.tanh(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test176()  throws Throwable  {
      long long0 = (-3183605296591799669L);
      double double0 = FastMath.atan2((double) long0, (double) long0);
      assertEquals((-2.356194490192345), double0, 0.01D);
      
      double double1 = FastMath.sinh(double0);
      assertEquals((-5.227971924677803), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test177()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sinh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test178()  throws Throwable  {
      double double0 = (-309.2675784525716);
      double double1 = FastMath.sinh(double0);
      assertEquals((-1.0284253137604615E134), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test179()  throws Throwable  {
      double double0 = (-99.69169206642);
      double double1 = FastMath.tan(double0);
      assertEquals(1.1140014810864554, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.sinh(double1);
      assertEquals(1.3591408877040718, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test180()  throws Throwable  {
      double double0 = 115.6;
      double double1 = FastMath.sinh(double0);
      assertEquals(8.005935969560451E49, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test181()  throws Throwable  {
      int int0 = 1377;
      double double0 = FastMath.sinh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test182()  throws Throwable  {
      double double0 = 0.06703783571720123;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.06698772485510902, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(1.002244516781033, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test183()  throws Throwable  {
      double double0 = (-157.2);
      double double1 = FastMath.cosh(double0);
      assertEquals(9.333887444878857E67, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test184()  throws Throwable  {
      double double0 = 0.06703783571720123;
      double double1 = FastMath.log10(double0);
      assertEquals((-1.1736800151303053), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(1.771549174567426, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test185()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test186()  throws Throwable  {
      double double0 = (-1131.28135389);
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test187()  throws Throwable  {
      double double0 = (-1769.86723);
      int int0 = FastMath.getExponent(double0);
      assertEquals(10, int0);
      
      double double1 = 0.0;
      double double2 = FastMath.nextUp(double1);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, (double) int0);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double3);
      assertTrue(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
  }

  @Test
  public void test188()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.toRadians(double0);
      assertEquals(3.137566414384587E306, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test189()  throws Throwable  {
      double double0 = 1555.0;
      double double1 = FastMath.sin(double0);
      assertEquals(0.08824857976716365, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test190()  throws Throwable  {
      double double0 = (-1.2362653723769037E-8);
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.exp(double1);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
  }

  @Test
  public void test191()  throws Throwable  {
      double double0 = (-3.5997360512765566E-9);
      double double1 = FastMath.min(double0, double0);
      assertEquals((-3.5997360512765566E-9), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.nextUp(double1);
      assertEquals((-3.599736051276556E-9), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test
  public void test192()  throws Throwable  {
      float float0 = 703.67F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(703.67004F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }
}
