/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:23:32 GMT 2014
 */

package org.apache.commons.math.complex;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.apache.commons.math.exception.NotPositiveException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class ComplexEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-1489.0);
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      
      double double1 = complex0.abs();
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      
      Complex complex1 = Complex.valueOf(double0, double1);
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      
      int int0 = 1737;
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      
      Complex complex1 = Complex.valueOf(double0, (double) int0);
      assertNotNull(complex1);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      int int0 = 479;
      List<Complex> list0 = complex0.nthRoot(int0);
      assertNotNull(list0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      int int0 = 1737;
      List<Complex> list0 = complex0.nthRoot(int0);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = (-2558.91655566);
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-2558.91655566), complex0.getReal(), 0.01D);
      assertEquals(2558.91655566, complex0.abs(), 0.01D);
      
      int int0 = (-980);
      // Undeclared exception!
      try {
        List<Complex> list0 = complex0.nthRoot(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -980
         //
      }
  }

  //@Test
  public void test06()  throws Throwable  {
      double double0 = (-3612.220657);
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(3612.220657, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-3612.220657), complex0.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex0.isNaN());
      assertEquals(3612.220657, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-3612.220657), complex0.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals((-1.0), complex1.getReal(), 0.01D);
  }

  //@Test
  public void test07()  throws Throwable  {
      double double0 = 612.6429904;
      Complex complex0 = Complex.valueOf(double0, double0);
      assertNotNull(complex0);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(866.4080259164899, complex0.abs(), 0.01D);
      assertEquals(612.6429904, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(612.6429904, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(866.4080259164899, complex0.abs(), 0.01D);
      assertEquals(612.6429904, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(612.6429904, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-2671.95332);
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals((-2671.95332), complex0.getImaginary(), 0.01D);
      assertEquals((-2671.95332), complex0.getReal(), 0.01D);
      assertEquals(3778.712623171819, complex0.abs(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      
      double double1 = 1.719974302355042E61;
      Complex complex1 = complex0.pow(double1);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-2671.95332), complex0.getImaginary(), 0.01D);
      assertEquals((-2671.95332), complex0.getReal(), 0.01D);
      assertEquals(3778.712623171819, complex0.abs(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      
      Complex complex2 = complex1.tanh();
      assertNotNull(complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertEquals((-2671.95332), complex0.getImaginary(), 0.01D);
      assertEquals((-2671.95332), complex0.getReal(), 0.01D);
      assertEquals(3778.712623171819, complex0.abs(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.557407724654902, complex1.getImaginary(), 0.01D);
      assertEquals(1.557407724654902, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
  }

  @Test
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 3.221340469489223E-27;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(3.221340469489223E-27, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.221340469489223E-27, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.reciprocal();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(3.104297758872288E26, complex1.abs(), 0.01D);
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(3.104297758872288E26, complex1.getReal(), 0.01D);
      assertEquals(3.221340469489223E-27, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.221340469489223E-27, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      Complex complex2 = complex1.asin();
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(3.104297758872288E26, complex1.abs(), 0.01D);
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(3.104297758872288E26, complex1.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals((-1.5453403873460247), complex2.getArgument(), 0.01D);
      assertEquals((-61.6931471235971), complex2.getImaginary(), 0.01D);
      assertEquals(61.71314125139045, complex2.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01D);
      assertEquals(3.221340469489223E-27, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.221340469489223E-27, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      Complex complex3 = complex2.tan();
      assertNotNull(complex3);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(3.104297758872288E26, complex1.abs(), 0.01D);
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(3.104297758872288E26, complex1.getReal(), 0.01D);
      assertEquals((-1.0), complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(false, complex3.isNaN());
      assertEquals((-1.5707963267948966), complex3.getArgument(), 0.01D);
      assertEquals(1.0, complex3.abs(), 0.01D);
      assertEquals(0.0, complex3.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals((-1.5453403873460247), complex2.getArgument(), 0.01D);
      assertEquals((-61.6931471235971), complex2.getImaginary(), 0.01D);
      assertEquals(61.71314125139045, complex2.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01D);
      assertEquals(3.221340469489223E-27, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.221340469489223E-27, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = (-903.8019281641104);
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals((-903.8019281641104), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(903.8019281641104, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.sqrt();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-903.8019281641104), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(903.8019281641104, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(30.06329869066451, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(30.06329869066451, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      
      Complex complex2 = complex1.tan();
      assertNotNull(complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex2.isNaN());
      assertEquals(1.0, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getArgument(), 0.01D);
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(1.0, complex2.abs(), 0.01D);
      assertEquals((-903.8019281641104), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(903.8019281641104, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(30.06329869066451, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(30.06329869066451, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.tan();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.557407724654902, complex1.abs(), 0.01D);
      assertEquals(1.557407724654902, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.tan();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
  }

  @Test
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.reciprocal();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      
      Complex complex2 = complex1.tan();
      assertNotNull(complex2);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = (-3.00901028043488E-38);
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(4.2553831479110773E-38, complex0.abs(), 0.01D);
      assertEquals((-3.00901028043488E-38), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-3.00901028043488E-38), complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.cosh();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(9.054142867762794E-76, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(9.054142867762794E-76, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(4.2553831479110773E-38, complex0.abs(), 0.01D);
      assertEquals((-3.00901028043488E-38), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-3.00901028043488E-38), complex0.getReal(), 0.01D);
      
      Complex complex2 = complex1.sqrt1z();
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals((-0.7853981633974483), complex2.getArgument(), 0.01D);
      assertEquals((-3.00901028043488E-38), complex2.getImaginary(), 0.01D);
      assertEquals(3.00901028043488E-38, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(4.2553831479110773E-38, complex2.abs(), 0.01D);
      assertEquals(9.054142867762794E-76, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(9.054142867762794E-76, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(4.2553831479110773E-38, complex0.abs(), 0.01D);
      assertEquals((-3.00901028043488E-38), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-3.00901028043488E-38), complex0.getReal(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      double double0 = 5.3582093498119173E163;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.sqrt1z();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      
      Complex complex2 = complex1.multiply(double0);
      assertNotNull(complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      
      Complex complex3 = complex2.sinh();
      assertNotNull(complex3);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex2);
      assertSame(complex3, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.sinh();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01D);
      assertEquals(0.8414709848078965, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      double double0 = Double.NaN;
      Complex complex1 = complex0.add(double0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      
      Complex complex2 = complex1.acos();
      assertNotNull(complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      
      Complex complex3 = complex2.sin();
      assertNotNull(complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex2);
      assertSame(complex2, complex3);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      double double0 = 8.0E-10;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(8.0E-10, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(8.0E-10, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = complex0.sin();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(8.0E-10, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(8.0E-10, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(8.0E-10, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(8.0E-10, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
  }

  @Test
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.sqrt1z();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      
      Complex complex2 = complex1.cosh();
      assertNotNull(complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      double double0 = Double.NaN;
      Complex complex1 = complex0.add(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      Complex complex2 = complex1.cos();
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      
      Complex complex1 = complex0.atan();
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      double double0 = 5.3582093498119173E163;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.sqrt1z();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      
      Complex complex2 = complex1.asin();
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
  }

  @Test
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.acos();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      
      double double0 = 0.0;
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.createComplex(double0, double1);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      
      Complex complex2 = complex1.asin();
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      
      double double2 = complex2.getReal();
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertEquals(Double.NaN, double2, 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      
      Complex complex3 = complex0.subtract(double2);
      assertNotNull(complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      int int0 = complex0.hashCode();
      assertEquals(414187520, int0);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.subtract((double) int0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-4.1418752E8), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3.141592651175428, complex1.getArgument(), 0.01D);
      assertEquals(4.1418752E8, complex1.abs(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
  }

  @Test
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      
      double double0 = complex0.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.sqrt1z();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      
      Complex complex2 = complex1.subtract(double0);
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = complex0.subtract(complex0);
      assertNotNull(complex1);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
  }

  @Test
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.sqrt1z();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      Complex complex2 = complex1.negate();
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
  }

  @Test
  public void test31()  throws Throwable  {
      double double0 = 5.3582093498119173E163;
      double double1 = (-1534.325554);
      Complex complex0 = new Complex(double0, double1);
      assertNotNull(complex0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1534.325554), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.abs(), 0.01D);
      assertEquals((-2.8635043049481775E-161), complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.sqrt1z();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1534.325554), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.abs(), 0.01D);
      assertEquals((-2.8635043049481775E-161), complex0.getArgument(), 0.01D);
      
      Complex complex2 = complex1.multiply(double0);
      assertNotNull(complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1534.325554), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.abs(), 0.01D);
      assertEquals((-2.8635043049481775E-161), complex0.getArgument(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      double double0 = Double.NaN;
      Complex complex1 = complex0.pow(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 1201;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.log();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      
      Complex complex2 = complex1.sqrt();
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex2.getArgument(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      
      Complex complex3 = complex2.multiply(int0);
      assertNotNull(complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(true, complex3.isInfinite());
      assertEquals(0.7853981633974483, complex3.getArgument(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 242;
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      
      Complex complex1 = complex0.multiply(int0);
      assertNotNull(complex1);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
  }

  @Test
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      
      int int0 = 1737;
      Complex complex1 = complex0.multiply(int0);
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
  }

  @Test
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      int int0 = complex0.hashCode();
      assertEquals(414187520, int0);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.multiply(int0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isNaN());
      assertEquals(4.1418752E8, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(4.1418752E8, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
  }

  @Test
  public void test37()  throws Throwable  {
      double double0 = 5.3582093498119173E163;
      double double1 = (-1534.325554);
      Complex complex0 = new Complex(double0, double1);
      assertNotNull(complex0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(5.3582093498119173E163, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1534.325554), complex0.getImaginary(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.8635043049481775E-161), complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.sqrt1z();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertEquals(5.3582093498119173E163, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1534.325554), complex0.getImaginary(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.8635043049481775E-161), complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      
      Complex complex2 = complex0.multiply(complex1);
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(double0 == double1);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(5.3582093498119173E163, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1534.325554), complex0.getImaginary(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.8635043049481775E-161), complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
  }

  @Test
  public void test38()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = Complex.INF;
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      
      Complex complex2 = complex0.multiply(complex1);
      assertNotNull(complex2);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      double double0 = 5.3582093498119173E163;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = complex0.sqrt1z();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex2 = complex0.multiply(complex1);
      assertNotNull(complex2);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
  }

  @Test
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      
      int int0 = complex0.hashCode();
      assertEquals(7, int0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
  }

  @Test
  public void test41()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-866.8867043270818);
      Complex complex0 = Complex.valueOf(double0, double1);
      assertNotNull(complex0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-866.8867043270818), complex0.getImaginary(), 0.01D);
      assertEquals((-1.5707963267948966), complex0.getArgument(), 0.01D);
      assertEquals(866.8867043270818, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.multiply(double1);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(751492.5581390694, complex1.abs(), 0.01D);
      assertEquals(751492.5581390694, complex1.getImaginary(), 0.01D);
      assertEquals(-0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-866.8867043270818), complex0.getImaginary(), 0.01D);
      assertEquals((-1.5707963267948966), complex0.getArgument(), 0.01D);
      assertEquals(866.8867043270818, complex0.abs(), 0.01D);
      
      boolean boolean0 = complex1.equals((Object) complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(boolean0);
      assertEquals(751492.5581390694, complex1.abs(), 0.01D);
      assertEquals(751492.5581390694, complex1.getImaginary(), 0.01D);
      assertEquals(-0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-866.8867043270818), complex0.getImaginary(), 0.01D);
      assertEquals((-1.5707963267948966), complex0.getArgument(), 0.01D);
      assertEquals(866.8867043270818, complex0.abs(), 0.01D);
  }

  @Test
  public void test42()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.atan();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      
      boolean boolean0 = complex1.equals((Object) complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(boolean0);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
  }

  @Test
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      double double0 = (-523.543115288815);
      Complex complex1 = complex0.pow(double0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      
      boolean boolean0 = complex0.equals((Object) complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
  }

  @Test
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.reciprocal();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      
      boolean boolean0 = complex1.equals((Object) complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
  }

  @Test
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.reciprocal();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      double double0 = 8.0E-10;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(8.0E-10, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(8.0E-10, complex0.abs(), 0.01D);
      
      double double1 = 0.0;
      Complex complex1 = complex0.createComplex(double1, double0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(8.0E-10, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(8.0E-10, complex0.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(8.0E-10, complex1.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(8.0E-10, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      
      Complex complex2 = complex1.reciprocal();
      assertNotNull(complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(double0 == double1);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(8.0E-10, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(8.0E-10, complex0.abs(), 0.01D);
      assertEquals((-1.5707963267948966), complex2.getArgument(), 0.01D);
      assertEquals(1.25E9, complex2.abs(), 0.01D);
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals((-1.25E9), complex2.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(8.0E-10, complex1.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(8.0E-10, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
  }

  @Test
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.cos();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex2 = complex1.reciprocal();
      assertNotNull(complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
  }

  @Test
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      double double0 = complex0.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = Complex.ZERO;
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      
      Complex complex2 = complex1.divide(double0);
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      double double0 = complex0.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test51()  throws Throwable  {
      double double0 = 5.3582093498119173E163;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.4142135623730951, complex1.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
  }

  @Test
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      
      double double0 = Double.NaN;
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
  }

  @Test
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      
      double double0 = 0.0;
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      
      int int0 = 1737;
      Complex complex1 = complex0.divide((double) int0);
      assertNotNull(complex1);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
  }

  @Test
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.atan();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
  }

  @Test
  public void test56()  throws Throwable  {
      double double0 = 5.3582093498119173E163;
      double double1 = (-1534.325554);
      Complex complex0 = new Complex(double0, double1);
      assertNotNull(complex0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.8635043049481775E-161), complex0.getArgument(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.abs(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals((-1534.325554), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = complex0.multiply(complex0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.8635043049481775E-161), complex0.getArgument(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.abs(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals((-1534.325554), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals((-1.64424750581963E167), complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      
      Complex complex2 = complex0.divide(complex1);
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, complex2.abs(), 0.01D);
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.8635043049481775E-161), complex0.getArgument(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.abs(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals((-1534.325554), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals((-1.64424750581963E167), complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
  }

  @Test
  public void test57()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = complex0.divide(complex0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
  }

  @Test
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.cosh();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      Complex complex2 = complex0.divide(complex1);
      assertNotNull(complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
  }

  @Test
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      
      Complex complex1 = complex0.sqrt1z();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      
      Complex complex2 = complex1.divide(complex1);
      assertNotNull(complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
  }

  @Test
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      
      Complex complex1 = complex0.conjugate();
      assertNotNull(complex1);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
  }

  @Test
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      
      Complex complex1 = complex0.conjugate();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals((-0.7853981633974483), complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
  }

  @Test
  public void test62()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.add(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      
      double double0 = (-1432.226846629726);
      Complex complex1 = complex0.add(double0);
      assertNotNull(complex1);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
  }

  @Test
  public void test64()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.multiply(double0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      
      Complex complex2 = complex1.cosh();
      assertNotNull(complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      
      Complex complex3 = complex0.add(complex2);
      assertNotNull(complex3);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
  }

  @Test
  public void test65()  throws Throwable  {
      double double0 = 5.3582093498119173E163;
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(5.3582093498119173E163, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.exp();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(5.3582093498119173E163, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
  }

  @Test
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
  }

  @Test
  public void test67()  throws Throwable  {
      double double0 = 8.0E-10;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(8.0E-10, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(8.0E-10, complex0.getReal(), 0.01D);
      
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(8.0E-10, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(8.0E-10, complex0.getReal(), 0.01D);
  }

  @Test
  public void test68()  throws Throwable  {
      int int0 = 248;
      Complex complex0 = Complex.valueOf((double) int0);
      assertNotNull(complex0);
      assertEquals(248.0, complex0.abs(), 0.01D);
      assertEquals(248.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      List<Complex> list0 = complex0.nthRoot(int0);
      assertNotNull(list0);
      assertEquals(248, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(248.0, complex0.abs(), 0.01D);
      assertEquals(248.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      
      String string0 = complex0.toString();
      assertNotNull(string0);
      assertEquals("(0.0, 1.0)", string0);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
  }

  @Test
  public void test70()  throws Throwable  {
      double double0 = 5.3582093498119173E163;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.pow(complex0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex0.isNaN());
      assertEquals(7.577652332538337E163, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(5.3582093498119173E163, complex0.getImaginary(), 0.01D);
      assertEquals(5.3582093498119173E163, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(2.356194490192345, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isInfinite());
  }

  @Test
  public void test71()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = (Complex)complex0.readResolve();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
  }
}
