/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:24:11 GMT 2014
 */

package org.apache.commons.math3.optimization.direct;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.SimplePointChecker;
import org.apache.commons.math3.optimization.SimpleValueChecker;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

 
public class CMAESOptimizerEvoSuite_branch_Test   {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       int int0 = 921;
//       double[] doubleArray0 = new double[4];
//       doubleArray0[0] = (double) int0;
//       doubleArray0[1] = (double) int0;
//       CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
//       assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       assertEquals(0, cMAESOptimizer0.getEvaluations());
//       assertNull(cMAESOptimizer0.getGoalType());
//       assertArrayEquals(new double[] {921.0, 921.0, 0.0, 0.0}, doubleArray0, 0.01);
//       assertNotNull(cMAESOptimizer0);
//       
//       GoalType goalType0 = cMAESOptimizer0.getGoalType();
//       assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       assertEquals(0, cMAESOptimizer0.getEvaluations());
//       assertNull(cMAESOptimizer0.getGoalType());
//       assertArrayEquals(new double[] {921.0, 921.0, 0.0, 0.0}, doubleArray0, 0.01);
//       
//       CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer();
//       assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
//       assertEquals(0, cMAESOptimizer1.getEvaluations());
//       assertNull(cMAESOptimizer1.getGoalType());
//       assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
//       assertNotNull(cMAESOptimizer1);
//       assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
//       
//       int int1 = 714;
//       Random.setNextRandom(int1);
//       assertFalse(int1 == int0);
//       
//       int int2 = 51;
//       double[][] doubleArray1 = new double[1][9];
//       double[] doubleArray2 = new double[1];
//       assertNotSame(doubleArray2, doubleArray0);
//       assertFalse(doubleArray2.equals((Object)doubleArray0));
//       
//       double double0 = 796.0;
//       double[] doubleArray3 = new double[1];
//       assertNotSame(doubleArray3, doubleArray2);
//       assertNotSame(doubleArray3, doubleArray0);
//       assertFalse(doubleArray3.equals((Object)doubleArray2));
//       assertFalse(doubleArray3.equals((Object)doubleArray0));
//       
//       doubleArray3[0] = (double) int1;
//       int int3 = 30000;
//       List<Double> list0 = cMAESOptimizer1.getStatisticsFitnessHistory();
//       assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
//       assertEquals(0, cMAESOptimizer1.getEvaluations());
//       assertNull(cMAESOptimizer1.getGoalType());
//       assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
//       assertEquals(0, list0.size());
//       assertEquals(true, list0.isEmpty());
//       assertNotNull(list0);
//       assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
//       
//       boolean boolean0 = false;
//       int int4 = (-269);
//       MersenneTwister mersenneTwister0 = new MersenneTwister((long) int1);
//       assertNotNull(mersenneTwister0);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int4);
//       
//       double double1 = mersenneTwister0.nextDouble();
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int4);
//       assertFalse(double1 == double0);
//       assertEquals(0.3025148292938231, double1, 0.01D);
//       
//       float float0 = mersenneTwister0.nextFloat();
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int4);
//       assertEquals(0.37817848F, float0, 0.01F);
//       
//       boolean boolean1 = true;
//       doubleArray2[0] = double0;
//       doubleArray1[0] = doubleArray2;
//       assertNotNull(doubleArray1[0]);
//       
//       int int5 = 0;
//       int int6 = 1;
//       Well19937a well19937a0 = new Well19937a(int6);
//       assertNotNull(well19937a0);
//       assertFalse(int6 == int5);
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int3);
//       assertFalse(int6 == int4);
//       assertFalse(int6 == int0);
//       
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int5, (RandomGenerator) well19937a0);
//       assertNotNull(unitSphereRandomVectorGenerator0);
//       assertFalse(int6 == int5);
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int3);
//       assertFalse(int6 == int4);
//       assertFalse(int6 == int0);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int1);
//       
//       MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray2, int2, int1, unitSphereRandomVectorGenerator0);
//       assertNotSame(doubleArray2, doubleArray3);
//       assertNotSame(doubleArray2, doubleArray0);
//       assertArrayEquals(new double[] {796.0}, doubleArray2, 0.01);
//       assertNotNull(microsphereInterpolatingFunction0);
//       assertFalse(int6 == int5);
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int3);
//       assertFalse(int6 == int4);
//       assertFalse(int6 == int0);
//       assertFalse(int2 == int6);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int5);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int4);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int6);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int4);
//       assertFalse(int1 == int5);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int1);
//       assertFalse(doubleArray2.equals((Object)doubleArray3));
//       assertFalse(doubleArray2.equals((Object)doubleArray0));
//       
//       GoalType goalType1 = GoalType.MINIMIZE;
//       PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(int2, (MultivariateFunction) microsphereInterpolatingFunction0, goalType1, doubleArray2, doubleArray2, doubleArray1[0]);
//       assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
//       assertNotSame(doubleArray2, doubleArray3);
//       assertNotSame(doubleArray2, doubleArray0);
//       assertEquals(GoalType.MINIMIZE, cMAESOptimizer1.getGoalType());
//       assertEquals(5, cMAESOptimizer1.getEvaluations());
//       assertEquals(51, cMAESOptimizer1.getMaxEvaluations());
//       assertArrayEquals(new double[] {796.0}, doubleArray2, 0.01);
//       assertNotNull(pointValuePair0);
//       assertFalse(int6 == int5);
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int3);
//       assertFalse(int6 == int4);
//       assertFalse(int6 == int0);
//       assertFalse(int2 == int6);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int5);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int4);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int6);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int4);
//       assertFalse(int1 == int5);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int1);
//       assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
//       assertFalse(doubleArray2.equals((Object)doubleArray3));
//       assertFalse(doubleArray2.equals((Object)doubleArray0));
//   }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 537;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      double double0 = (-1.0618198288078573);
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) int0;
      double double1 = 0.0;
      boolean boolean0 = true;
      int int1 = 0;
      int int2 = (-2592);
      int int3 = 0;
      long long0 = 1443L;
      MersenneTwister mersenneTwister0 = new MersenneTwister(long0);
      assertNotNull(mersenneTwister0);
      
      double double2 = 0.0;
      double double3 = (-1097.7);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(double2, double3);
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals((-1097.7), simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertNotNull(simpleValueChecker0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int0, double1, boolean0, int2, int3, (RandomGenerator) mersenneTwister0, boolean0, (ConvergenceChecker<PointValuePair>) simpleValueChecker0);
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals((-1097.7), simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertArrayEquals(new double[] {0.0, 537.0, 537.0, (-1.0618198288078573), 537.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      
      int int4 = 565;
      double[][] doubleArray1 = new double[5][6];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray1[1];
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      int int5 = 2;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int5, (RandomGenerator) mersenneTwister0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[1], int3, int5, unitSphereRandomVectorGenerator0);
      assertNotNull(microsphereInterpolatingFunction0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int2);
      assertFalse(int3 == int5);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int4, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1.062 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test2() {}
//   @Test
//   public void test2()  throws Throwable  {
//       double[] doubleArray0 = new double[2];
//       CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
//       assertEquals(0, cMAESOptimizer0.getEvaluations());
//       assertNull(cMAESOptimizer0.getGoalType());
//       assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       assertNotNull(cMAESOptimizer0);
//       
//       int int0 = 0;
//       double[][] doubleArray1 = new double[2][4];
//       doubleArray1[0] = doubleArray0;
//       assertNotNull(doubleArray1[0]);
//       
//       doubleArray1[1] = doubleArray0;
//       assertNotNull(doubleArray1[1]);
//       
//       int int1 = 30000;
//       Well19937a well19937a0 = new Well19937a(int0);
//       assertNotNull(well19937a0);
//       assertFalse(int0 == int1);
//       
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0, (RandomGenerator) well19937a0);
//       assertNotNull(unitSphereRandomVectorGenerator0);
//       assertFalse(int0 == int1);
//       
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator1 = null;
//       MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, int0, unitSphereRandomVectorGenerator1);
//       assertNotNull(microsphereInterpolatingFunction0);
//       assertFalse(int0 == int1);
//       
//       GoalType goalType0 = GoalType.MAXIMIZE;
//       PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[1]);
//       assertEquals(30000, cMAESOptimizer0.getMaxEvaluations());
//       assertEquals(7603, cMAESOptimizer0.getEvaluations());
//       assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
//       assertNotNull(pointValuePair0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       
//       int int2 = (-487);
//       int int3 = 0;
//       doubleArray0[0] = (double) int0;
//       doubleArray0[1] = (double) int2;
//       int int4 = 9;
//       int int5 = 0;
//       int int6 = 0;
//       doubleArray1[0] = doubleArray0;
//       assertNotNull(doubleArray1[0]);
//       
//       doubleArray1[0] = doubleArray0;
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator2 = new UnitSphereRandomVectorGenerator(int6);
//       assertNotSame(unitSphereRandomVectorGenerator2, unitSphereRandomVectorGenerator0);
//       assertNotNull(unitSphereRandomVectorGenerator2);
//       assertFalse(unitSphereRandomVectorGenerator2.equals((Object)unitSphereRandomVectorGenerator0));
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int4);
//       
//       MicrosphereInterpolatingFunction microsphereInterpolatingFunction1 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int5, int6, unitSphereRandomVectorGenerator2);
//       assertNotSame(microsphereInterpolatingFunction1, microsphereInterpolatingFunction0);
//       assertNotSame(unitSphereRandomVectorGenerator2, unitSphereRandomVectorGenerator0);
//       assertNotNull(microsphereInterpolatingFunction1);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int2);
//       assertFalse(microsphereInterpolatingFunction1.equals((Object)microsphereInterpolatingFunction0));
//       assertFalse(unitSphereRandomVectorGenerator2.equals((Object)unitSphereRandomVectorGenerator0));
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int4);
//       
//       GoalType goalType1 = GoalType.MINIMIZE;
//       assertNotSame(goalType1, goalType0);
//       
//       // Undeclared exception!
//       try {
//         PointValuePair pointValuePair1 = cMAESOptimizer0.optimize(int4, (MultivariateFunction) microsphereInterpolatingFunction1, goalType1, doubleArray1[0], doubleArray1[0], doubleArray1[0]);
//         fail("Expecting exception: IllegalStateException");
//       
//       } catch(IllegalStateException e) {
//          //
//          // illegal state: convergence failed
//          //
//       }
//   }

  @Test
  public void test3() {}
//   @Test
//   public void test3()  throws Throwable  {
//       double[] doubleArray0 = new double[2];
//       CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
//       assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       assertEquals(0, cMAESOptimizer0.getEvaluations());
//       assertNull(cMAESOptimizer0.getGoalType());
//       assertNotNull(cMAESOptimizer0);
//       
//       int int0 = 0;
//       double[][] doubleArray1 = new double[2][4];
//       doubleArray1[0] = doubleArray0;
//       assertNotNull(doubleArray1[0]);
//       
//       doubleArray1[1] = doubleArray0;
//       assertNotNull(doubleArray1[1]);
//       
//       int int1 = 5824;
//       int int2 = 950;
//       Well19937a well19937a0 = new Well19937a(int0);
//       assertNotNull(well19937a0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int2, (RandomGenerator) well19937a0);
//       assertNotNull(unitSphereRandomVectorGenerator0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       
//       MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, int0, unitSphereRandomVectorGenerator0);
//       assertNotNull(microsphereInterpolatingFunction0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       
//       GoalType goalType0 = GoalType.MAXIMIZE;
//       PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[1]);
//       assertEquals(5825, cMAESOptimizer0.getEvaluations());
//       assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
//       assertEquals(5824, cMAESOptimizer0.getMaxEvaluations());
//       assertNotNull(pointValuePair0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       
//       int int3 = (-16);
//       doubleArray0[0] = (double) int0;
//       doubleArray0[1] = (double) int0;
//       int int4 = 8;
//       int int5 = 0;
//       int int6 = 0;
//       doubleArray1[1] = doubleArray0;
//       assertNotNull(doubleArray1[1]);
//       
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator1 = new UnitSphereRandomVectorGenerator(int6);
//       assertNotSame(unitSphereRandomVectorGenerator1, unitSphereRandomVectorGenerator0);
//       assertNotNull(unitSphereRandomVectorGenerator1);
//       assertFalse(unitSphereRandomVectorGenerator1.equals((Object)unitSphereRandomVectorGenerator0));
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int3);
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int4);
//       
//       MicrosphereInterpolatingFunction microsphereInterpolatingFunction1 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int5, int6, unitSphereRandomVectorGenerator1);
//       assertNotSame(microsphereInterpolatingFunction1, microsphereInterpolatingFunction0);
//       assertNotSame(unitSphereRandomVectorGenerator1, unitSphereRandomVectorGenerator0);
//       assertNotNull(microsphereInterpolatingFunction1);
//       assertFalse(microsphereInterpolatingFunction1.equals((Object)microsphereInterpolatingFunction0));
//       assertFalse(unitSphereRandomVectorGenerator1.equals((Object)unitSphereRandomVectorGenerator0));
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int2);
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int3);
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int4);
//       
//       GoalType goalType1 = GoalType.MAXIMIZE;
//       assertSame(goalType1, goalType0);
//       
//       // Undeclared exception!
//       try {
//         PointValuePair pointValuePair1 = cMAESOptimizer0.optimize(int4, (MultivariateFunction) microsphereInterpolatingFunction1, goalType1, doubleArray1[0], doubleArray1[0], doubleArray1[0]);
//         fail("Expecting exception: IllegalStateException");
//       
//       } catch(IllegalStateException e) {
//          //
//          // illegal state: convergence failed
//          //
//       }
//   }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 2386;
      int int1 = (-2215);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      int int2 = 0;
      boolean boolean0 = false;
      int int3 = 10;
      int int4 = 1;
      double[] doubleArray1 = new double[7];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = 0.731409150019173;
      doubleArray1[1] = double0;
      doubleArray1[0] = (double) int2;
      double double1 = 100000.0;
      doubleArray1[2] = double1;
      doubleArray1[3] = double0;
      doubleArray1[2] = double1;
      doubleArray1[5] = double0;
      doubleArray1[5] = (double) int0;
      int int5 = 3465;
      boolean boolean1 = true;
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      double double2 = 3143.339741530561;
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((double) int5, double2);
      assertEquals(3465.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(3143.339741530561, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertNotNull(simplePointChecker0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray1, int5, (double) int0, boolean1, int5, int3, (RandomGenerator) well44497b0, boolean1, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3465.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(3143.339741530561, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertArrayEquals(new double[] {0.0, 0.731409150019173, 100000.0, 0.731409150019173, 0.0, 2386.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(cMAESOptimizer0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int5);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int5);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      double[][] doubleArray2 = new double[7][7];
      doubleArray2[0] = doubleArray1;
      assertNotNull(doubleArray2[0]);
      
      doubleArray2[1] = doubleArray1;
      assertNotNull(doubleArray2[1]);
      
      doubleArray2[2] = doubleArray1;
      assertNotNull(doubleArray2[2]);
      
      doubleArray2[3] = doubleArray2[1];
      assertNotNull(doubleArray2[3]);
      
      doubleArray2[3] = doubleArray2[0];
      doubleArray2[6] = doubleArray1;
      assertNotNull(doubleArray2[6]);
      
      int int6 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int6);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int0, doubleArray2[5], int5, doubleArray1[6], boolean1, int5, int5, (RandomGenerator) well44497b0, boolean1, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3465.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(3143.339741530561, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(0, cMAESOptimizer1.getEvaluations());
      assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      assertNull(cMAESOptimizer1.getGoalType());
      assertArrayEquals(new double[] {0.0, 0.731409150019173, 100000.0, 0.731409150019173, 0.0, 2386.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(cMAESOptimizer1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int5);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int6);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int6);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray2, doubleArray1, int5, int5, unitSphereRandomVectorGenerator0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.731409150019173, 100000.0, 0.731409150019173, 0.0, 2386.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int6);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray2[6], doubleArray1, doubleArray2[6]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0.731 out of [0, 0] range
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 2343;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      double double0 = 5101.971262753576;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = (double) int0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertArrayEquals(new double[] {2343.0, 2343.0, 2343.0, 5101.971262753576, 5101.971262753576, 5101.971262753576, 5101.971262753576}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      doubleArray0[3] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[6] = (double) int0;
      boolean boolean0 = false;
      int int1 = 1;
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      boolean boolean1 = true;
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((double) int0, doubleArray0[0]);
      assertEquals(2343.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(2343.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertArrayEquals(new double[] {2343.0, 2343.0, 2343.0, 2343.0, 5101.971262753576, 5101.971262753576, 2343.0}, doubleArray0, 0.01);
      assertNotNull(simplePointChecker0);
      assertFalse(int0 == int1);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int0, doubleArray0, int0, (double) int0, boolean0, int0, int1, (RandomGenerator) well44497b0, boolean1, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer1.getEvaluations());
      assertNull(cMAESOptimizer1.getGoalType());
      assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      assertEquals(2343.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(2343.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertArrayEquals(new double[] {2343.0, 2343.0, 2343.0, 2343.0, 5101.971262753576, 5101.971262753576, 2343.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      int int2 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int2);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = 30000;
      int int4 = 0;
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[2], int2, int4, unitSphereRandomVectorGenerator0);
      assertNotNull(microsphereInterpolatingFunction0);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(int3, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[2]);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertEquals(30000, cMAESOptimizer1.getMaxEvaluations());
      assertEquals(4687, cMAESOptimizer1.getEvaluations());
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer1.getGoalType());
      assertEquals(2343.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(2343.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertArrayEquals(new double[] {2343.0, 2343.0, 2343.0, 2343.0, 5101.971262753576, 5101.971262753576, 2343.0}, doubleArray0, 0.01);
      assertNotNull(pointValuePair0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int4);
      assertFalse(int3 == int2);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction1 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int2, int0, unitSphereRandomVectorGenerator0);
      assertNotSame(microsphereInterpolatingFunction1, microsphereInterpolatingFunction0);
      assertNotNull(microsphereInterpolatingFunction1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertFalse(microsphereInterpolatingFunction1.equals((Object)microsphereInterpolatingFunction0));
      
      GoalType goalType1 = GoalType.MAXIMIZE;
      assertNotSame(goalType1, goalType0);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair1 = cMAESOptimizer1.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction1, goalType1, doubleArray1[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 488;
      double[] doubleArray0 = new double[16];
      doubleArray0[1] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[6] = (double) int0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertArrayEquals(new double[] {0.0, 488.0, 0.0, 488.0, 0.0, 0.0, 488.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      ConvergenceChecker<PointValuePair> convergenceChecker0 = cMAESOptimizer0.getConvergenceChecker();
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertArrayEquals(new double[] {0.0, 488.0, 0.0, 488.0, 0.0, 0.0, 488.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(convergenceChecker0);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertArrayEquals(new double[] {0.0, 488.0, 0.0, 488.0, 0.0, 0.0, 488.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(list0);
      
      List<RealMatrix> list1 = cMAESOptimizer0.getStatisticsDHistory();
      assertNotSame(list1, list0);
      assertEquals(0, list1.size());
      assertEquals(true, list1.isEmpty());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertArrayEquals(new double[] {0.0, 488.0, 0.0, 488.0, 0.0, 0.0, 488.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      
      List<Double> list2 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertEquals(true, list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertArrayEquals(new double[] {0.0, 488.0, 0.0, 488.0, 0.0, 0.0, 488.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(list2);
      
      Well19937c well19937c0 = new Well19937c((long) int0);
      assertNotNull(well19937c0);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int0, doubleArray0);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer1.getEvaluations());
      assertNull(cMAESOptimizer1.getGoalType());
      assertArrayEquals(new double[] {0.0, 488.0, 0.0, 488.0, 0.0, 0.0, 488.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 10;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertArrayEquals(new double[] {10.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertArrayEquals(new double[] {10.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(list0);
  }
}
