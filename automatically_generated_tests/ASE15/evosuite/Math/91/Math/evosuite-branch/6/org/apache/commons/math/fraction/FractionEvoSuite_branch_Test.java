/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:09:51 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.fraction.Fraction;
import org.apache.commons.math.fraction.FractionConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.junit.runner.RunWith;

 
public class FractionEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-507);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-507, cannot negate
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-955);
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -955/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      int int1 = 908;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertNotNull(fraction0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      
      int int0 = fraction0.hashCode();
      assertEquals(23348, int0);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 23,348/0
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = (-3076.830285);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(218, fraction0.getDenominator());
      assertEquals(-670749, fraction0.getNumerator());
      assertEquals((-3076.830275229358), fraction0.doubleValue(), 0.01D);
      assertEquals(-3076, fraction0.shortValue());
      assertEquals(-3076, fraction0.intValue());
      assertEquals((-3076L), fraction0.longValue());
      assertEquals(-4, fraction0.byteValue());
      assertEquals((-3076.8303F), fraction0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.multiply(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      
      double double0 = (-4763.556777808414);
      Fraction fraction1 = new Fraction(double0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(101, fraction1.byteValue());
      assertEquals(-4763, fraction1.shortValue());
      assertEquals((-4763.5566F), fraction1.floatValue(), 0.01F);
      assertEquals((-4763.556776556777), fraction1.doubleValue(), 0.01D);
      assertEquals(273, fraction1.getDenominator());
      assertEquals(-4763, fraction1.intValue());
      assertEquals(-1300451, fraction1.getNumerator());
      assertEquals((-4763L), fraction1.longValue());
      
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(101, fraction1.byteValue());
      assertEquals(-4763, fraction1.shortValue());
      assertEquals((-4763.5566F), fraction1.floatValue(), 0.01F);
      assertEquals((-4763.556776556777), fraction1.doubleValue(), 0.01D);
      assertEquals(273, fraction1.getDenominator());
      assertEquals(-4763, fraction1.intValue());
      assertEquals(-1300451, fraction1.getNumerator());
      assertEquals((-4763L), fraction1.longValue());
  }

  @Test
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-3076.830285);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-3076, fraction0.shortValue());
      assertEquals(-670749, fraction0.getNumerator());
      assertEquals(-4, fraction0.byteValue());
      assertEquals((-3076.8303F), fraction0.floatValue(), 0.01F);
      assertEquals(-3076, fraction0.intValue());
      assertEquals((-3076.830275229358), fraction0.doubleValue(), 0.01D);
      assertEquals(218, fraction0.getDenominator());
      assertEquals((-3076L), fraction0.longValue());
      
      Fraction fraction1 = fraction0.reciprocal();
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals((-3.250098E-4F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(-218, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals((-3.250098024745471E-4), fraction1.doubleValue(), 0.01D);
      assertEquals(670749, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(-3076, fraction0.shortValue());
      assertEquals(-670749, fraction0.getNumerator());
      assertEquals(-4, fraction0.byteValue());
      assertEquals((-3076.8303F), fraction0.floatValue(), 0.01F);
      assertEquals(-3076, fraction0.intValue());
      assertEquals((-3076.830275229358), fraction0.doubleValue(), 0.01D);
      assertEquals(218, fraction0.getDenominator());
      assertEquals((-3076L), fraction0.longValue());
      
      double double1 = 3043.72869537033;
      Fraction fraction2 = new Fraction(double1);
      assertNotNull(fraction2);
      assertFalse(double1 == double0);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertEquals(3043, fraction2.intValue());
      assertEquals(3043L, fraction2.longValue());
      assertEquals(-29, fraction2.byteValue());
      assertEquals(3043.7288F, fraction2.floatValue(), 0.01F);
      assertEquals(3043, fraction2.shortValue());
      assertEquals(1750144, fraction2.getNumerator());
      assertEquals(575, fraction2.getDenominator());
      assertEquals(3043.728695652174, fraction2.doubleValue(), 0.01D);
      
      // Undeclared exception!
      try {
        Fraction fraction3 = fraction2.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 51,039,454,922
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-536.237181);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-83653, fraction0.getNumerator());
      assertEquals((-536.2371794871794), fraction0.doubleValue(), 0.01D);
      assertEquals((-536L), fraction0.longValue());
      assertEquals(-24, fraction0.byteValue());
      assertEquals(156, fraction0.getDenominator());
      assertEquals((-536.2372F), fraction0.floatValue(), 0.01F);
      assertEquals(-536, fraction0.shortValue());
      assertEquals(-536, fraction0.intValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(-83653, fraction0.getNumerator());
      assertEquals((-536.2371794871794), fraction0.doubleValue(), 0.01D);
      assertEquals((-536L), fraction0.longValue());
      assertEquals(-24, fraction0.byteValue());
      assertEquals(156, fraction0.getDenominator());
      assertEquals((-536.2372F), fraction0.floatValue(), 0.01F);
      assertEquals(-536, fraction0.shortValue());
      assertEquals(-536, fraction0.intValue());
      assertEquals(-48, fraction1.byteValue());
      assertEquals(78, fraction1.getDenominator());
      assertEquals((-1072.4744F), fraction1.floatValue(), 0.01F);
      assertEquals(-1072, fraction1.shortValue());
      assertEquals(-1072, fraction1.intValue());
      assertEquals((-1072L), fraction1.longValue());
      assertEquals((-1072.474358974359), fraction1.doubleValue(), 0.01D);
      assertEquals(-83653, fraction1.getNumerator());
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = (-4763.556777808414);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(101, fraction0.byteValue());
      assertEquals(-4763, fraction0.shortValue());
      assertEquals((-4763L), fraction0.longValue());
      assertEquals(-1300451, fraction0.getNumerator());
      assertEquals(273, fraction0.getDenominator());
      assertEquals((-4763.556776556777), fraction0.doubleValue(), 0.01D);
      assertEquals((-4763.5566F), fraction0.floatValue(), 0.01F);
      assertEquals(-4763, fraction0.intValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(101, fraction0.byteValue());
      assertEquals(-4763, fraction0.shortValue());
      assertEquals((-4763L), fraction0.longValue());
      assertEquals(-1300451, fraction0.getNumerator());
      assertEquals(273, fraction0.getDenominator());
      assertEquals((-4763.556776556777), fraction0.doubleValue(), 0.01D);
      assertEquals((-4763.5566F), fraction0.floatValue(), 0.01F);
      assertEquals(-4763, fraction0.intValue());
  }

  @Test
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2L, fraction2.longValue());
      assertEquals(2, fraction2.byteValue());
      assertEquals(2, fraction2.shortValue());
      assertEquals(2.0, fraction2.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(2, fraction2.intValue());
      assertEquals(2, fraction2.getNumerator());
  }

  @Test
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
  }

  @Test
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
  }

  @Test
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.subtract(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.ONE;
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      
      Fraction fraction2 = fraction0.negate();
      assertNotNull(fraction2);
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.byteValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      
      boolean boolean0 = fraction1.equals((Object) fraction2);
      assertTrue(boolean0);
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.byteValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
  }

  @Test
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.TWO;
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.shortValue());
      assertEquals(2, fraction1.byteValue());
      assertEquals(2, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.shortValue());
      assertEquals(2, fraction1.byteValue());
      assertEquals(2, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      
      Object object0 = null;
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
  }

  @Test
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      
      short short0 = fraction0.shortValue();
      assertEquals((short)1, short0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      
      int int0 = 2927;
      Fraction fraction1 = Fraction.getReducedFraction(int0, (int) short0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(111, fraction1.byteValue());
      assertEquals(2927.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2927, fraction1.shortValue());
      assertEquals(2927L, fraction1.longValue());
      assertEquals(2927.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2927, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2927, fraction1.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      
      Fraction fraction2 = fraction1.reciprocal();
      assertNotNull(fraction2);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertEquals(111, fraction1.byteValue());
      assertEquals(2927.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2927, fraction1.shortValue());
      assertEquals(2927L, fraction1.longValue());
      assertEquals(2927.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2927, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2927, fraction1.intValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(3.4164675E-4F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(3.4164673727365904E-4, fraction2.doubleValue(), 0.01D);
      assertEquals(2927, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      
      boolean boolean0 = fraction0.equals((Object) fraction2);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertEquals(111, fraction1.byteValue());
      assertEquals(2927.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2927, fraction1.shortValue());
      assertEquals(2927L, fraction1.longValue());
      assertEquals(2927.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2927, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2927, fraction1.intValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(3.4164675E-4F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(3.4164673727365904E-4, fraction2.doubleValue(), 0.01D);
      assertEquals(2927, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
  }

  @Test
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      
      Fraction fraction1 = Fraction.MINUS_ONE;
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.byteValue());
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.byteValue());
  }

  @Test
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      
      double double0 = (-4763.556777808414);
      Fraction fraction1 = new Fraction(double0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals((-4763.556776556777), fraction1.doubleValue(), 0.01D);
      assertEquals((-4763.5566F), fraction1.floatValue(), 0.01F);
      assertEquals(-4763, fraction1.shortValue());
      assertEquals(101, fraction1.byteValue());
      assertEquals(-4763, fraction1.intValue());
      assertEquals((-4763L), fraction1.longValue());
      assertEquals(273, fraction1.getDenominator());
      assertEquals(-1300451, fraction1.getNumerator());
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals((-4763.556776556777), fraction1.doubleValue(), 0.01D);
      assertEquals((-4763.5566F), fraction1.floatValue(), 0.01F);
      assertEquals(-4763, fraction1.shortValue());
      assertEquals(101, fraction1.byteValue());
      assertEquals(-4763, fraction1.intValue());
      assertEquals((-4763L), fraction1.longValue());
      assertEquals(273, fraction1.getDenominator());
      assertEquals(-1300451, fraction1.getNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
  }

  @Test
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.shortValue());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.byteValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      int int1 = (-2070);
      Fraction fraction0 = new Fraction(int0, int1);
      assertNotNull(fraction0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1037431.71352657), fraction0.doubleValue(), 0.01D);
      assertEquals((-1037431L), fraction0.longValue());
      assertEquals(2070, fraction0.getDenominator());
      assertEquals(11145, fraction0.shortValue());
      assertEquals(-119, fraction0.byteValue());
      assertEquals((-1037431.7F), fraction0.floatValue(), 0.01F);
      assertEquals(-1037431, fraction0.intValue());
      assertEquals(-2147483647, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-1037431.71352657), fraction0.doubleValue(), 0.01D);
      assertEquals((-1037431L), fraction0.longValue());
      assertEquals(2070, fraction0.getDenominator());
      assertEquals(11145, fraction0.shortValue());
      assertEquals(-119, fraction0.byteValue());
      assertEquals((-1037431.7F), fraction0.floatValue(), 0.01F);
      assertEquals(-1037431, fraction0.intValue());
      assertEquals(-2147483647, fraction0.getNumerator());
      assertEquals(1037431L, fraction1.longValue());
      assertEquals(-11145, fraction1.shortValue());
      assertEquals(1037431.71352657, fraction1.doubleValue(), 0.01D);
      assertEquals(2070, fraction1.getDenominator());
      assertEquals(1037431, fraction1.intValue());
      assertEquals(1037431.7F, fraction1.floatValue(), 0.01F);
      assertEquals(119, fraction1.byteValue());
      assertEquals(2147483647, fraction1.getNumerator());
  }

  @Test
  public void test26()  throws Throwable  {
      double double0 = (-536.237181);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(156, fraction0.getDenominator());
      assertEquals((-536L), fraction0.longValue());
      assertEquals((-536.2371794871794), fraction0.doubleValue(), 0.01D);
      assertEquals(-24, fraction0.byteValue());
      assertEquals((-536.2372F), fraction0.floatValue(), 0.01F);
      assertEquals(-536, fraction0.intValue());
      assertEquals(-536, fraction0.shortValue());
      assertEquals(-83653, fraction0.getNumerator());
      
      int int0 = fraction0.intValue();
      assertEquals((-536), int0);
      assertEquals(156, fraction0.getDenominator());
      assertEquals((-536L), fraction0.longValue());
      assertEquals((-536.2371794871794), fraction0.doubleValue(), 0.01D);
      assertEquals(-24, fraction0.byteValue());
      assertEquals((-536.2372F), fraction0.floatValue(), 0.01F);
      assertEquals(-536, fraction0.intValue());
      assertEquals(-536, fraction0.shortValue());
      assertEquals(-83653, fraction0.getNumerator());
      
      Fraction fraction1 = new Fraction(int0, int0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(156, fraction0.getDenominator());
      assertEquals((-536L), fraction0.longValue());
      assertEquals((-536.2371794871794), fraction0.doubleValue(), 0.01D);
      assertEquals(-24, fraction0.byteValue());
      assertEquals((-536.2372F), fraction0.floatValue(), 0.01F);
      assertEquals(-536, fraction0.intValue());
      assertEquals(-536, fraction0.shortValue());
      assertEquals(-83653, fraction0.getNumerator());
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 2331;
      int int1 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2,331/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      
      double double0 = (-4763.556777808414);
      Fraction fraction1 = new Fraction(double0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(101, fraction1.byteValue());
      assertEquals(-4763, fraction1.shortValue());
      assertEquals((-4763L), fraction1.longValue());
      assertEquals(273, fraction1.getDenominator());
      assertEquals((-4763.556776556777), fraction1.doubleValue(), 0.01D);
      assertEquals(-1300451, fraction1.getNumerator());
      assertEquals((-4763.5566F), fraction1.floatValue(), 0.01F);
      assertEquals(-4763, fraction1.intValue());
      
      Fraction fraction2 = fraction0.divide(fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(101, fraction1.byteValue());
      assertEquals(-4763, fraction1.shortValue());
      assertEquals((-4763L), fraction1.longValue());
      assertEquals(273, fraction1.getDenominator());
      assertEquals((-4763.556776556777), fraction1.doubleValue(), 0.01D);
      assertEquals(-1300451, fraction1.getNumerator());
      assertEquals((-4763.5566F), fraction1.floatValue(), 0.01F);
      assertEquals(-4763, fraction1.intValue());
  }

  @Test
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      double double0 = (-954.9191414296938);
      int int0 = (-16);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to convert -954.919 to fraction after -16 iterations
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = (-2433.9078990955445);
      int int0 = 309;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert -2,433.908 to fraction (-6,120,129,401,059/2,514,527,934)
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      
      int int0 = fraction0.hashCode();
      assertEquals(23237, int0);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) int0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert 23,237 to fraction (9,223,372,036,854,752,572/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      double double0 = 0.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert \u221E to fraction (9,223,372,036,854,775,807/1)
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.shortValue());
      
      long long0 = fraction0.longValue();
      assertEquals(2L, long0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.shortValue());
  }

  @Test
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      
      float float0 = fraction0.floatValue();
      assertEquals(2.0F, float0, 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
  }

  @Test
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(4, fraction1.intValue());
      assertEquals(4.0, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.shortValue());
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(4, fraction1.byteValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.shortValue());
  }

  @Test
  public void test39()  throws Throwable  {
      double double0 = 552.63733450953;
      int int0 = 2;
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals(41, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(553, fraction0.shortValue());
      assertEquals(553, fraction0.getNumerator());
      assertEquals(553.0F, fraction0.floatValue(), 0.01F);
      assertEquals(553, fraction0.intValue());
      assertEquals(553.0, fraction0.doubleValue(), 0.01D);
      assertEquals(553L, fraction0.longValue());
  }
}
