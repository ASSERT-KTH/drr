/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:38:50 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.fraction.Fraction;
import org.apache.commons.math.fraction.FractionConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.junit.runner.RunWith;

 
public class FractionEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      
      int int0 = fraction0.getNumerator();
      assertEquals((-1), int0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      
      int int1 = Integer.MIN_VALUE;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getReducedFraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1, cannot negate
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-2147483645);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,645/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      
      int int0 = fraction0.getNumerator();
      assertEquals(2, int0);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      Fraction fraction1 = Fraction.getReducedFraction(int1, int0);
      assertNotNull(fraction1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 2517;
      int int1 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 2,517/0
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.byteValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = (-38.4064977759);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(123, fraction0.getDenominator());
      assertEquals(-38, fraction0.shortValue());
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38L), fraction0.longValue());
      assertEquals(-38, fraction0.intValue());
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(38.40650406504065, fraction1.doubleValue(), 0.01D);
      assertEquals(38.406506F, fraction1.floatValue(), 0.01F);
      assertEquals(123, fraction1.getDenominator());
      assertEquals(38, fraction1.shortValue());
      assertEquals(4724, fraction1.getNumerator());
      assertEquals(38, fraction1.byteValue());
      assertEquals(38, fraction1.intValue());
      assertEquals(38L, fraction1.longValue());
      assertEquals(123, fraction0.getDenominator());
      assertEquals(-38, fraction0.shortValue());
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38L), fraction0.longValue());
      assertEquals(-38, fraction0.intValue());
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertEquals(38.40650406504065, fraction1.doubleValue(), 0.01D);
      assertEquals(38.406506F, fraction1.floatValue(), 0.01F);
      assertEquals(123, fraction1.getDenominator());
      assertEquals(38, fraction1.shortValue());
      assertEquals(4724, fraction1.getNumerator());
      assertEquals(38, fraction1.byteValue());
      assertEquals(38, fraction1.intValue());
      assertEquals(38L, fraction1.longValue());
      assertEquals(123, fraction0.getDenominator());
      assertEquals(-38, fraction0.shortValue());
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38L), fraction0.longValue());
      assertEquals(-38, fraction0.intValue());
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      
      Fraction fraction3 = fraction1.multiply(fraction2);
      assertNotNull(fraction3);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction2));
      assertTrue(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertEquals(38.40650406504065, fraction1.doubleValue(), 0.01D);
      assertEquals(38.406506F, fraction1.floatValue(), 0.01F);
      assertEquals(123, fraction1.getDenominator());
      assertEquals(38, fraction1.shortValue());
      assertEquals(4724, fraction1.getNumerator());
      assertEquals(38, fraction1.byteValue());
      assertEquals(38, fraction1.intValue());
      assertEquals(38L, fraction1.longValue());
      assertEquals(0, fraction3.byteValue());
      assertEquals(0L, fraction3.longValue());
      assertEquals(0, fraction3.intValue());
      assertEquals(0, fraction3.shortValue());
      assertEquals(0, fraction3.getNumerator());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(0.0, fraction3.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction3.floatValue(), 0.01F);
      assertEquals(123, fraction0.getDenominator());
      assertEquals(-38, fraction0.shortValue());
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38L), fraction0.longValue());
      assertEquals(-38, fraction0.intValue());
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.shortValue());
      
      double double0 = 0.0;
      Fraction fraction1 = new Fraction(double0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      
      Fraction fraction2 = fraction1.divide(fraction0);
      assertNotNull(fraction2);
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 643.1325083350712;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(643L, fraction0.longValue());
      assertEquals(643, fraction0.intValue());
      assertEquals(-125, fraction0.byteValue());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(643, fraction0.shortValue());
      assertEquals(310633, fraction0.getNumerator());
      assertEquals(483, fraction0.getDenominator());
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.multiply(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-1868.84051896);
      double double1 = 0.0;
      int int0 = 18;
      Fraction fraction0 = new Fraction(double0, double1, int0);
      assertNotNull(fraction0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-1868504591, fraction0.getNumerator());
      assertEquals((-183.31943F), fraction0.floatValue(), 0.01F);
      assertEquals(-183, fraction0.intValue());
      assertEquals((-183L), fraction0.longValue());
      assertEquals(73, fraction0.byteValue());
      assertEquals(10192616, fraction0.getDenominator());
      assertEquals(-183, fraction0.shortValue());
      assertEquals((-183.31943349970214), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = new Fraction(double0);
      assertNotNull(fraction1);
      assertFalse(double0 == double1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(-1868, fraction1.shortValue());
      assertEquals((-1868L), fraction1.longValue());
      assertEquals((-1868.8405172413793), fraction1.doubleValue(), 0.01D);
      assertEquals(-1868, fraction1.intValue());
      assertEquals((-1868.8406F), fraction1.floatValue(), 0.01F);
      assertEquals(-433571, fraction1.getNumerator());
      assertEquals(232, fraction1.getDenominator());
      assertEquals(-76, fraction1.byteValue());
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 124,554,051,457
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals(-1, fraction2.intValue());
      assertEquals(-1, fraction2.byteValue());
      assertEquals((-1L), fraction2.longValue());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = (-38.4064977759);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals(-38, fraction0.intValue());
      assertEquals((-38L), fraction0.longValue());
      assertEquals(123, fraction0.getDenominator());
      assertEquals(-38, fraction0.shortValue());
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals(-38, fraction0.intValue());
      assertEquals((-38L), fraction0.longValue());
      assertEquals(123, fraction0.getDenominator());
      assertEquals(-38, fraction0.shortValue());
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      assertEquals(38.406506F, fraction1.floatValue(), 0.01F);
      assertEquals(123, fraction1.getDenominator());
      assertEquals(38, fraction1.intValue());
      assertEquals(38, fraction1.shortValue());
      assertEquals(4724, fraction1.getNumerator());
      assertEquals(38.40650406504065, fraction1.doubleValue(), 0.01D);
      assertEquals(38L, fraction1.longValue());
      assertEquals(38, fraction1.byteValue());
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals(-38, fraction0.intValue());
      assertEquals((-38L), fraction0.longValue());
      assertEquals(123, fraction0.getDenominator());
      assertEquals(-38, fraction0.shortValue());
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(38.406506F, fraction1.floatValue(), 0.01F);
      assertEquals(123, fraction1.getDenominator());
      assertEquals(38, fraction1.intValue());
      assertEquals(38, fraction1.shortValue());
      assertEquals(4724, fraction1.getNumerator());
      assertEquals(38.40650406504065, fraction1.doubleValue(), 0.01D);
      assertEquals(38L, fraction1.longValue());
      assertEquals(38, fraction1.byteValue());
      
      Fraction fraction3 = fraction2.add(fraction2);
      assertNotNull(fraction3);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertSame(fraction3, fraction2);
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals(-38, fraction0.intValue());
      assertEquals((-38L), fraction0.longValue());
      assertEquals(123, fraction0.getDenominator());
      assertEquals(-38, fraction0.shortValue());
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(38.406506F, fraction1.floatValue(), 0.01F);
      assertEquals(123, fraction1.getDenominator());
      assertEquals(38, fraction1.intValue());
      assertEquals(38, fraction1.shortValue());
      assertEquals(4724, fraction1.getNumerator());
      assertEquals(38.40650406504065, fraction1.doubleValue(), 0.01D);
      assertEquals(38L, fraction1.longValue());
      assertEquals(38, fraction1.byteValue());
      assertEquals(0, fraction3.getNumerator());
      assertEquals(0.0, fraction3.doubleValue(), 0.01D);
      assertEquals(0, fraction3.byteValue());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(0, fraction3.shortValue());
      assertEquals(0.0F, fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.intValue());
      assertEquals(0L, fraction3.longValue());
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-38.4064977759);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-38, fraction0.intValue());
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals(-38, fraction0.shortValue());
      assertEquals((-38L), fraction0.longValue());
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals(123, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(-38, fraction0.intValue());
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals(-38, fraction0.shortValue());
      assertEquals((-38L), fraction0.longValue());
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals(123, fraction0.getDenominator());
      assertEquals(123, fraction1.getDenominator());
      assertEquals(38.40650406504065, fraction1.doubleValue(), 0.01D);
      assertEquals(38, fraction1.intValue());
      assertEquals(38.406506F, fraction1.floatValue(), 0.01F);
      assertEquals(38, fraction1.shortValue());
      assertEquals(38L, fraction1.longValue());
      assertEquals(38, fraction1.byteValue());
      assertEquals(4724, fraction1.getNumerator());
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(-38, fraction0.intValue());
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals(-38, fraction0.shortValue());
      assertEquals((-38L), fraction0.longValue());
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals(123, fraction0.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.byteValue());
      assertEquals(123, fraction1.getDenominator());
      assertEquals(38.40650406504065, fraction1.doubleValue(), 0.01D);
      assertEquals(38, fraction1.intValue());
      assertEquals(38.406506F, fraction1.floatValue(), 0.01F);
      assertEquals(38, fraction1.shortValue());
      assertEquals(38L, fraction1.longValue());
      assertEquals(38, fraction1.byteValue());
      assertEquals(4724, fraction1.getNumerator());
      
      Fraction fraction3 = fraction2.subtract(fraction2);
      assertNotNull(fraction3);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertEquals(-38, fraction0.intValue());
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals(-38, fraction0.shortValue());
      assertEquals((-38L), fraction0.longValue());
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals(123, fraction0.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.byteValue());
      assertEquals(123, fraction1.getDenominator());
      assertEquals(38.40650406504065, fraction1.doubleValue(), 0.01D);
      assertEquals(38, fraction1.intValue());
      assertEquals(38.406506F, fraction1.floatValue(), 0.01F);
      assertEquals(38, fraction1.shortValue());
      assertEquals(38L, fraction1.longValue());
      assertEquals(38, fraction1.byteValue());
      assertEquals(4724, fraction1.getNumerator());
      assertEquals(0, fraction3.getNumerator());
      assertEquals(0, fraction3.byteValue());
      assertEquals(0L, fraction3.longValue());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(0, fraction3.intValue());
      assertEquals(0.0, fraction3.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.shortValue());
  }

  @Test
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.add(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = new Fraction((double) int0);
      assertNotNull(fraction0);
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-2147483648, fraction0.intValue());
      assertEquals(-2147483648, fraction0.getNumerator());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.reciprocal();
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.intValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(boolean0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.intValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
  }

  @Test
  public void test17()  throws Throwable  {
      double double0 = 643.1325083350712;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(643L, fraction0.longValue());
      assertEquals(643, fraction0.shortValue());
      assertEquals(483, fraction0.getDenominator());
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      assertEquals(310633, fraction0.getNumerator());
      assertEquals(643, fraction0.intValue());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(-125, fraction0.byteValue());
      
      int int0 = fraction0.getNumerator();
      assertEquals(310633, int0);
      assertEquals(643L, fraction0.longValue());
      assertEquals(643, fraction0.shortValue());
      assertEquals(483, fraction0.getDenominator());
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      assertEquals(310633, fraction0.getNumerator());
      assertEquals(643, fraction0.intValue());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(-125, fraction0.byteValue());
      
      double double1 = 0.5;
      Fraction fraction1 = new Fraction(double1, int0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(643L, fraction0.longValue());
      assertEquals(643, fraction0.shortValue());
      assertEquals(483, fraction0.getDenominator());
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      assertEquals(310633, fraction0.getNumerator());
      assertEquals(643, fraction0.intValue());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(-125, fraction0.byteValue());
      
      Fraction fraction2 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction2);
      assertFalse(double0 == double1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertEquals(643L, fraction0.longValue());
      assertEquals(643, fraction0.shortValue());
      assertEquals(483, fraction0.getDenominator());
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      assertEquals(310633, fraction0.getNumerator());
      assertEquals(643, fraction0.intValue());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(-125, fraction0.byteValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      
      boolean boolean0 = fraction1.equals((Object) fraction2);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(boolean0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(643L, fraction0.longValue());
      assertEquals(643, fraction0.shortValue());
      assertEquals(483, fraction0.getDenominator());
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      assertEquals(310633, fraction0.getNumerator());
      assertEquals(643, fraction0.intValue());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(-125, fraction0.byteValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.intValue());
      
      Object object0 = null;
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.intValue());
  }

  @Test
  public void test19()  throws Throwable  {
      double double0 = 643.1325083350712;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-125, fraction0.byteValue());
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      assertEquals(483, fraction0.getDenominator());
      assertEquals(643, fraction0.intValue());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(310633, fraction0.getNumerator());
      assertEquals(643, fraction0.shortValue());
      assertEquals(643L, fraction0.longValue());
      
      int int0 = fraction0.getNumerator();
      assertEquals(310633, int0);
      assertEquals(-125, fraction0.byteValue());
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      assertEquals(483, fraction0.getDenominator());
      assertEquals(643, fraction0.intValue());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(310633, fraction0.getNumerator());
      assertEquals(643, fraction0.shortValue());
      assertEquals(643L, fraction0.longValue());
      
      double double1 = 0.5;
      Fraction fraction1 = new Fraction(double1, int0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(-125, fraction0.byteValue());
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      assertEquals(483, fraction0.getDenominator());
      assertEquals(643, fraction0.intValue());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(310633, fraction0.getNumerator());
      assertEquals(643, fraction0.shortValue());
      assertEquals(643L, fraction0.longValue());
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(boolean0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(-125, fraction0.byteValue());
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      assertEquals(483, fraction0.getDenominator());
      assertEquals(643, fraction0.intValue());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(310633, fraction0.getNumerator());
      assertEquals(643, fraction0.shortValue());
      assertEquals(643L, fraction0.longValue());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = (-1720);
      Fraction fraction0 = new Fraction((double) int0);
      assertNotNull(fraction0);
      assertEquals((-1720L), fraction0.longValue());
      assertEquals(-1720, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1720, fraction0.getNumerator());
      assertEquals(72, fraction0.byteValue());
      assertEquals(-1720, fraction0.intValue());
      assertEquals((-1720.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1720.0), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = Fraction.ONE;
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      
      int int1 = fraction1.compareTo(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((-1720L), fraction0.longValue());
      assertEquals(-1720, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1720, fraction0.getNumerator());
      assertEquals(72, fraction0.byteValue());
      assertEquals(-1720, fraction0.intValue());
      assertEquals((-1720.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1720.0), fraction0.doubleValue(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      
      int int0 = fraction1.compareTo(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1), int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test
  public void test22()  throws Throwable  {
      double double0 = 643.1325083350712;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(643, fraction0.shortValue());
      assertEquals(643, fraction0.intValue());
      assertEquals(643L, fraction0.longValue());
      assertEquals(-125, fraction0.byteValue());
      assertEquals(483, fraction0.getDenominator());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      assertEquals(310633, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertEquals(643.1325051759834, fraction1.doubleValue(), 0.01D);
      assertEquals(-125, fraction1.byteValue());
      assertEquals(643, fraction1.shortValue());
      assertEquals(483, fraction1.getDenominator());
      assertEquals(643, fraction1.intValue());
      assertEquals(643L, fraction1.longValue());
      assertEquals(643.1325F, fraction1.floatValue(), 0.01F);
      assertEquals(310633, fraction1.getNumerator());
      assertEquals(643, fraction0.shortValue());
      assertEquals(643, fraction0.intValue());
      assertEquals(643L, fraction0.longValue());
      assertEquals(-125, fraction0.byteValue());
      assertEquals(483, fraction0.getDenominator());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      assertEquals(310633, fraction0.getNumerator());
  }

  @Test
  public void test23()  throws Throwable  {
      double double0 = 643.1325083350712;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(643L, fraction0.longValue());
      assertEquals(643, fraction0.intValue());
      assertEquals(483, fraction0.getDenominator());
      assertEquals(310633, fraction0.getNumerator());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(643, fraction0.shortValue());
      assertEquals(-125, fraction0.byteValue());
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      
      int int0 = fraction0.getNumerator();
      assertEquals(310633, int0);
      assertEquals(643L, fraction0.longValue());
      assertEquals(643, fraction0.intValue());
      assertEquals(483, fraction0.getDenominator());
      assertEquals(310633, fraction0.getNumerator());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(643, fraction0.shortValue());
      assertEquals(-125, fraction0.byteValue());
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = new Fraction(int0, int0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(643L, fraction0.longValue());
      assertEquals(643, fraction0.intValue());
      assertEquals(483, fraction0.getDenominator());
      assertEquals(310633, fraction0.getNumerator());
      assertEquals(643.1325051759834, fraction0.doubleValue(), 0.01D);
      assertEquals(643, fraction0.shortValue());
      assertEquals(-125, fraction0.byteValue());
      assertEquals(643.1325F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
  }

  @Test
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      
      int int0 = fraction0.hashCode();
      assertEquals(23348, int0);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      
      int int1 = Integer.MIN_VALUE;
      assertFalse(int1 == int0);
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 23,348/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      double double0 = 0.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      double double0 = (-3395.3986168001534);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-3395, fraction0.intValue());
      assertEquals(-1473603, fraction0.getNumerator());
      assertEquals((-3395.3986175115206), fraction0.doubleValue(), 0.01D);
      assertEquals(-67, fraction0.byteValue());
      assertEquals(-3395, fraction0.shortValue());
      assertEquals((-3395L), fraction0.longValue());
      assertEquals((-3395.3987F), fraction0.floatValue(), 0.01F);
      assertEquals(434, fraction0.getDenominator());
      
      int int0 = fraction0.intValue();
      assertEquals((-3395), int0);
      assertEquals(-3395, fraction0.intValue());
      assertEquals(-1473603, fraction0.getNumerator());
      assertEquals((-3395.3986175115206), fraction0.doubleValue(), 0.01D);
      assertEquals(-67, fraction0.byteValue());
      assertEquals(-3395, fraction0.shortValue());
      assertEquals((-3395L), fraction0.longValue());
      assertEquals((-3395.3987F), fraction0.floatValue(), 0.01F);
      assertEquals(434, fraction0.getDenominator());
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(double0, (double) int0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to convert -3,395.399 to fraction after -3,395 iterations
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      double double0 = (-38.4064977759);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(123, fraction0.getDenominator());
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals(-38, fraction0.intValue());
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals((-38L), fraction0.longValue());
      assertEquals(-38, fraction0.shortValue());
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      
      double double1 = 0.0;
      int int0 = fraction0.compareTo(fraction0);
      assertFalse(double0 == double1);
      assertEquals(0, int0);
      assertEquals(123, fraction0.getDenominator());
      assertEquals(-38, fraction0.byteValue());
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals(-38, fraction0.intValue());
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals((-38L), fraction0.longValue());
      assertEquals(-38, fraction0.shortValue());
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(double1, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      
      int int1 = fraction0.getNumerator();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) int1, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert -\u221E to fraction (-9,223,372,036,854,775,808/1)
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      
      long long0 = fraction0.longValue();
      assertEquals((-1L), long0);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = (-38.4064977759);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-38, fraction0.shortValue());
      assertEquals(-38, fraction0.byteValue());
      assertEquals(-38, fraction0.intValue());
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      assertEquals((-38L), fraction0.longValue());
      assertEquals(123, fraction0.getDenominator());
      
      float float0 = fraction0.floatValue();
      assertEquals((-38.406506F), float0, 0.01F);
      assertEquals(-38, fraction0.shortValue());
      assertEquals(-38, fraction0.byteValue());
      assertEquals(-38, fraction0.intValue());
      assertEquals(-4724, fraction0.getNumerator());
      assertEquals((-38.406506F), fraction0.floatValue(), 0.01F);
      assertEquals((-38.40650406504065), fraction0.doubleValue(), 0.01D);
      assertEquals((-38L), fraction0.longValue());
      assertEquals(123, fraction0.getDenominator());
  }

  @Test
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(-2, fraction1.getNumerator());
      assertEquals((-2.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-2L), fraction1.longValue());
      assertEquals((-2.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-2, fraction1.shortValue());
      assertEquals(-2, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-2, fraction1.byteValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
  }

  @Test
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
  }

  @Test
  public void test35()  throws Throwable  {
      double double0 = (-3395.3986168001534);
      int int0 = 2235;
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals(-1473603, fraction0.getNumerator());
      assertEquals(-3395, fraction0.intValue());
      assertEquals((-3395L), fraction0.longValue());
      assertEquals(-67, fraction0.byteValue());
      assertEquals(434, fraction0.getDenominator());
      assertEquals((-3395.3986175115206), fraction0.doubleValue(), 0.01D);
      assertEquals((-3395.3987F), fraction0.floatValue(), 0.01F);
      assertEquals(-3395, fraction0.shortValue());
  }
}
