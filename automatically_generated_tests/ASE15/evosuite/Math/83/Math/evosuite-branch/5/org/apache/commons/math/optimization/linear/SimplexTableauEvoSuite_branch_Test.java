/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:58:48 GMT 2014
 */

package org.apache.commons.math.optimization.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.LinkedList;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class SimplexTableauEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      double double0 = 0.0;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      GoalType goalType1 = GoalType.MAXIMIZE;
      assertNotSame(goalType1, goalType0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, boolean0, doubleArray0[5]);
      assertFalse(goalType1.equals((Object)goalType0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(goalType1, goalType0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotNull(simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(goalType1.equals((Object)goalType0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertFalse(goalType0.equals((Object)goalType1));
      assertFalse(boolean0 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(goalType1, goalType0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(goalType0, goalType1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1.0E-12;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[5]);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotNull(simplexTableau1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean0 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = false;
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      int int0 = simplexTableau0.getNumSlackVariables();
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(simplexTableau0.equals((Object)simplexTableau1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotNull(simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      int int1 = (-722);
      assertFalse(int1 == int0);
      
      simplexTableau1.numArtificialVariables = int1;
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      boolean boolean1 = simplexTableau1.equals((Object) simplexTableau0);
      assertFalse(boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean0 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 620;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(620, arrayRealVector0.getDimension());
      
      double[] doubleArray0 = new double[14];
      boolean boolean0 = false;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, (double) int0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(620.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(620, arrayRealVector0.getDimension());
      
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, (double) int0);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotNull(linearObjectiveFunction1);
      assertEquals(620.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, boolean0, int0);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(620.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotNull(simplexTableau1);
      assertEquals(620.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(620, arrayRealVector0.getDimension());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertTrue(boolean0 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean1 == boolean0);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertEquals(620.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(620, arrayRealVector0.getDimension());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(620.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = false;
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      int int0 = simplexTableau0.getNumSlackVariables();
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(simplexTableau0.equals((Object)simplexTableau1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotNull(simplexTableau1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      boolean boolean1 = simplexTableau1.equals((Object) simplexTableau0);
      assertTrue(boolean1);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(simplexTableau0.equals((Object)simplexTableau1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 25.961800388062386;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean1 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, double0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertFalse(boolean0 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotNull(simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean2);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      double double0 = 201.0;
      Double double1 = new Double(double0);
      assertEquals(201.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = doubleArray0[3];
      doubleArray0[7] = double1;
      doubleArray0[8] = doubleArray0[7];
      doubleArray0[9] = doubleArray0[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(635.6178096938443, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2010.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(102912.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, (double) doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(635.6178096938443, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2010.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(102912.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(201.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, (double) doubleArray0[4]);
      assertNotNull(simplexTableau0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(635.6178096938443, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2010.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(102912.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(201.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Object object0 = null;
      boolean boolean1 = simplexTableau0.equals(object0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(635.6178096938443, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2010.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(102912.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(201.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-4.9E-324);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-4.9E-324), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      LinearConstraint linearConstraint0 = null;
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertTrue(boolean0);
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(linkedList1);
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, boolean0, double0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList0, linkedList1);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals((-4.9E-324), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      int int0 = 0;
      simplexTableau0.divideRow(int0, double0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList0, linkedList1);
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals((-4.9E-324), linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = false;
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      simplexTableau0.discardArtificialVariables();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1425.0);
      doubleArray0[0] = double0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1425.0), 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertEquals((-1425.0), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1425.0), 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertEquals((-1425.0), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 4;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) openMapRealVector0, (double) int0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) openMapRealVector0, relationship0, (double) int0);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      
      linkedList0.push(linearConstraint0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(realPointValuePair0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4.0, realPointValuePair0.getValue(), 0.01D);
      assertEquals(4.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double double0 = (-224.67491224376806);
      doubleArray0[9] = double0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-224.67491224376806), 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[3], relationship0, doubleArray0, doubleArray0[9]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-224.67491224376806), 0.0}, doubleArray0, 0.01);
      assertNotNull(linearConstraint0);
      assertEquals((-224.67491224376806), linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-224.67491224376806), 0.0}, doubleArray0, 0.01);
      assertEquals((-224.67491224376806), linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[3], relationship0, doubleArray0, doubleArray0[9]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[3]);
      assertFalse(boolean0 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 620;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(620, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      boolean boolean0 = false;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, (double) int0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(620.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(620, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(620.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(620, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      int int1 = simplexTableau0.getNumArtificialVariables();
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(620.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(620, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  //@Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = false;
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      int int0 = simplexTableau0.hashCode();
      assertEquals(1244, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 354.4913557205862;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = (-1636);
      // Undeclared exception!
      try {
        simplexTableau0.setEntry(int0, int0, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (-1,636, -1,636) in a 1x11 matrix
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double double0 = (-224.67491224376806);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      double[][] doubleArray1 = simplexTableau0.getData();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = false;
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertEquals(13, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[3], relationship0, doubleArray0, doubleArray0[9]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[9]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      simplexTableau0.discardArtificialVariables();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }
}
