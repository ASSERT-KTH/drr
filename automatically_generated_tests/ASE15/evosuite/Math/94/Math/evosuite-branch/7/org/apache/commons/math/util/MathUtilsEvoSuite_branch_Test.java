/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:23:10 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.junit.runner.RunWith;

 
public class MathUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 4;
      long long0 = MathUtils.sign((long) int0);
      assertEquals(1L, long0);
      
      long long1 = (-9223372036854775808L);
      assertFalse(long1 == long0);
      
      // Undeclared exception!
      try {
        long long2 = MathUtils.subAndCheck(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-229);
      long long0 = (-9223372036854775808L);
      long long1 = MathUtils.subAndCheck((long) int0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(9223372036854775579L, long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-229);
      int int1 = MathUtils.subAndCheck(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.sign((long) int0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-1);
      long long0 = MathUtils.sign((long) int0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1022;
      int int1 = MathUtils.sign(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-1692);
      float float0 = MathUtils.sign((float) int0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.sign((float) int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 4;
      float float0 = MathUtils.sign((float) int0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = MathUtils.sign(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.sign((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(int0, int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(0, int1);
      
      double double0 = MathUtils.log((double) int1, (double) int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = MathUtils.sign(double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 2490.6474405;
      double double1 = MathUtils.sign(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte byte0 = (byte)91;
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-1647);
      int int1 = MathUtils.indicator(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte byte0 = (byte) (-1);
      byte byte1 = MathUtils.sign(byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      int int2 = 2;
      assertFalse(int2 == int1);
      
      float float0 = MathUtils.round((float) int1, (int) byte1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(byte0 == byte1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(byte1 == byte0);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float float0 = (-1148.0F);
      int int0 = (-2128);
      // Undeclared exception!
      try {
        float float1 = MathUtils.round(float0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 6;
      float float0 = MathUtils.round((float) int0, int0, int0);
      assertEquals(6.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
      
      int int0 = 2;
      float float0 = MathUtils.round((float) short1, (int) short1, int0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      int int1 = 91;
      int int2 = MathUtils.lcm(int0, int1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(0, int2);
      
      int int3 = 1;
      assertFalse(int3 == int2);
      
      float float0 = MathUtils.round((float) int0, int2, int3);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int3);
      assertTrue(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      int int0 = (-1);
      double double1 = MathUtils.round(double0, int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 2;
      int int1 = MathUtils.mulAndCheck(int0, int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(4, int1);
      
      double double0 = (-2522.04155);
      double double1 = MathUtils.log(double0, (double) int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = MathUtils.round(double1, int1, int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 936.5542581798;
      int int0 = (-1);
      double double1 = MathUtils.scalb(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(468.2771290899, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 936.5542581798;
      int int0 = (-1);
      double double1 = MathUtils.round(double0, int0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(940.0, double1, 0.01D);
      
      double double2 = MathUtils.log((double) int0, double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = MathUtils.scalb(double2, int0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 2490.6474405;
      double double1 = MathUtils.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      int int0 = 4;
      double double2 = MathUtils.scalb(double1, int0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte byte0 = (byte)23;
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      double double0 = MathUtils.scalb((double) int1, (int) byte1);
      assertFalse(byte0 == byte1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(byte1 == byte0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-441);
      short short0 = (short) (-1691);
      short short1 = MathUtils.sign(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short) (-1), short1);
      
      int int1 = 5;
      float float0 = MathUtils.round((float) int0, (int) short1, int1);
      assertFalse(short1 == short0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(short0 == short1);
      assertEquals((-440.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 1;
      float float0 = MathUtils.round((float) int0, int0);
      assertEquals(1.0F, float0, 0.01F);
      
      int int1 = (-1);
      double double0 = MathUtils.nextAfter((double) float0, (double) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.9999999999999999, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      short short0 = (short) (-1719);
      short short1 = MathUtils.sign(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
      
      int int1 = 3;
      float float0 = MathUtils.round((float) int0, (int) short1, int1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-10.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float float0 = (-1148.0F);
      int int0 = (-2128);
      int int1 = 0;
      float float1 = MathUtils.round(float0, int0, int1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      int int1 = 1401;
      float float0 = MathUtils.round((float) int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = 1L;
      long long1 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long2 = MathUtils.mulAndCheck(long0, long1);
       //  fail("Expecting exception: ArithmeticException");
       // Unstable assertion
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      long long0 = MathUtils.mulAndCheck((long) int1, (long) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      short short0 = (short) (-1095);
      short short1 = MathUtils.sign(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short) (-1), short1);
      
      long long0 = 1L;
      long long1 = MathUtils.mulAndCheck(long0, (long) short1);
      assertFalse(short1 == short0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(short0 == short1);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 2;
      long long0 = (-9218868437227405313L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.mulAndCheck(long0, (long) int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = (-9218868437227405313L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.mulAndCheck(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = (-1L);
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      long long0 = (-2461L);
      long long1 = MathUtils.mulAndCheck((long) int0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = 3478L;
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(12096484L, long1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-1082);
      double double0 = 1.0;
      int int1 = MathUtils.hash(double0);
      assertFalse(int1 == int0);
      assertEquals(1072693248, int1);
      
      // Undeclared exception!
      try {
        int int2 = MathUtils.mulAndCheck(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte byte0 = (byte)108;
      short short0 = MathUtils.indicator((short) byte0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte byte0 = (byte) (-1);
      byte byte1 = MathUtils.sign(byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      short short0 = MathUtils.indicator((short) byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      short short0 = (short)0;
      int int0 = MathUtils.sign((int) short0);
      assertEquals(0, int0);
      
      long long0 = MathUtils.indicator((long) int0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float float0 = (-1420.7455F);
      int int0 = 4655;
      float float1 = MathUtils.round(float0, int0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      
      float float2 = MathUtils.indicator(float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(float1 == float2);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long long0 = (-3091L);
      long long1 = MathUtils.indicator(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      
      double double0 = MathUtils.indicator((double) long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = Double.NaN;
      double double1 = MathUtils.indicator(double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1;
      double double0 = MathUtils.indicator((double) int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte byte0 = (byte) (-95);
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 1692;
      int int1 = MathUtils.hash((double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1083863040, int1);
      
      // Undeclared exception!
      try {
        int int2 = MathUtils.lcm(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 4655;
      int int1 = MathUtils.gcd(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(4655, int1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      int int1 = 91;
      int int2 = MathUtils.lcm(int0, int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0, int2);
      
      int int3 = MathUtils.gcd(int1, int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int3);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertEquals(91, int3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-1);
      int int1 = MathUtils.sign(int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialLog(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-3561);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialDouble(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 1841;
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.factorial(int0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(int0);
      assertEquals(0.0, double0, 0.01D);
      
      float float0 = Float.NaN;
      boolean boolean0 = MathUtils.equals((double) float0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double double0 = 2490.6474405;
      double double1 = MathUtils.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = MathUtils.log(double1, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = double2;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short)0, short1);
      
      byte byte0 = (byte) (-1);
      byte byte1 = MathUtils.sign(byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      double double0 = MathUtils.binomialCoefficientDouble((int) short1, (int) byte1);
      assertTrue(byte0 == byte1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertTrue(byte1 == byte0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 801;
      int int1 = 1;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(801.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 391;
      int int1 = 0;
      int int2 = MathUtils.sign(int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals(0, int2);
      
      double double0 = MathUtils.binomialCoefficientDouble(int0, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = (-1860);
      int int1 = 0;
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 2115;
      int int1 = 895;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      short short0 = (short) (-1095);
      int int0 = 0;
      short short1 = MathUtils.sign(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short) (-1), short1);
      
      long long0 = MathUtils.binomialCoefficient(int0, (int) short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      short short0 = (short)4013;
      short short1 = MathUtils.sign(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)1, short1);
      
      long long0 = MathUtils.binomialCoefficient((int) short0, (int) short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals(4013L, long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 0;
      int int1 = 1022;
      long long0 = MathUtils.binomialCoefficient(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      short short0 = (short)0;
      long long0 = MathUtils.binomialCoefficient((int) short0, (int) short0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = (-1860);
      int int1 = 1022;
      long long0 = MathUtils.binomialCoefficient(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = (-1);
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-2), int1);
      
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = (-1860);
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      long long0 = 9218868437227405293L;
      // Undeclared exception!
      try {
        long long1 = MathUtils.addAndCheck(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = (-1261);
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try {
        long long1 = MathUtils.subAndCheck((long) int0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      long long0 = (-766L);
      long long1 = MathUtils.subAndCheck(long0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = (-1);
      long long0 = MathUtils.addAndCheck((long) int0, (long) int0);
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 1;
      byte byte0 = (byte)0;
      long long0 = MathUtils.addAndCheck((long) int0, (long) byte0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = MathUtils.hash(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = (-1860);
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.cosh((double) int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = (-1);
      int int1 = MathUtils.sign(int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1), int1);
      
      int int2 = MathUtils.lcm(int0, int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = (-441);
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(194481, int1);
      
      double double0 = MathUtils.normalizeAngle((double) int1, (double) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-442.25778463229653), double0, 0.01D);
  }
}
