/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:23:28 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.exception.NumberIsTooLargeException;
import org.apache.commons.math.exception.OutOfRangeException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class OpenMapRealMatrixEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 248;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(248, openMapRealMatrix0.getColumnDimension());
      assertEquals(248, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.multiply(openMapRealMatrix0);
      assertEquals(248, openMapRealMatrix0.getColumnDimension());
      assertEquals(248, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(248, openMapRealMatrix1.getRowDimension());
      assertEquals(248, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotNull(openMapRealMatrix1);
      
      int int1 = 0;
      int int2 = 0;
      double double0 = 1129.30348;
      OpenMapRealMatrix openMapRealMatrix2 = (OpenMapRealMatrix)openMapRealMatrix0.scalarMultiply(double0);
      assertEquals(true, openMapRealMatrix2.isSquare());
      assertEquals(248, openMapRealMatrix2.getRowDimension());
      assertEquals(248, openMapRealMatrix2.getColumnDimension());
      assertEquals(248, openMapRealMatrix0.getColumnDimension());
      assertEquals(248, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotSame(openMapRealMatrix2, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertTrue(openMapRealMatrix2.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix2.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(openMapRealMatrix2);
      
      openMapRealMatrix0.addToEntry(int1, int2, (double) int0);
      assertEquals(248, openMapRealMatrix0.getColumnDimension());
      assertEquals(248, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      double double1 = 2155.26312332167;
      OpenMapRealMatrix openMapRealMatrix3 = (OpenMapRealMatrix)openMapRealMatrix0.scalarAdd(double1);
      assertEquals(248, openMapRealMatrix3.getRowDimension());
      assertEquals(248, openMapRealMatrix3.getColumnDimension());
      assertEquals(true, openMapRealMatrix3.isSquare());
      assertEquals(248, openMapRealMatrix0.getColumnDimension());
      assertEquals(248, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotSame(openMapRealMatrix3, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix3, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix3, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertFalse(openMapRealMatrix3.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix3.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix3.equals((Object)openMapRealMatrix1));
      assertFalse(double1 == double0);
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(openMapRealMatrix3);
      
      int int3 = (-1672);
      double double2 = 4391.04809659;
      OpenMapRealMatrix openMapRealMatrix4 = new OpenMapRealMatrix(openMapRealMatrix0);
      assertEquals(248, openMapRealMatrix4.getRowDimension());
      assertEquals(248, openMapRealMatrix4.getColumnDimension());
      assertEquals(true, openMapRealMatrix4.isSquare());
      assertEquals(248, openMapRealMatrix0.getColumnDimension());
      assertEquals(248, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotSame(openMapRealMatrix4, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix4.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(openMapRealMatrix4);
      
      OpenMapRealMatrix openMapRealMatrix5 = openMapRealMatrix4.subtract(openMapRealMatrix0);
      assertEquals(248, openMapRealMatrix5.getColumnDimension());
      assertEquals(248, openMapRealMatrix5.getRowDimension());
      assertEquals(true, openMapRealMatrix5.isSquare());
      assertEquals(248, openMapRealMatrix4.getRowDimension());
      assertEquals(248, openMapRealMatrix4.getColumnDimension());
      assertEquals(true, openMapRealMatrix4.isSquare());
      assertEquals(248, openMapRealMatrix0.getColumnDimension());
      assertEquals(248, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotSame(openMapRealMatrix5, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix5.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix4));
      assertTrue(openMapRealMatrix5.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix4.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(openMapRealMatrix5);
      
      OpenMapRealMatrix openMapRealMatrix6 = openMapRealMatrix5.subtract((RealMatrix) openMapRealMatrix4);
      assertEquals(248, openMapRealMatrix5.getColumnDimension());
      assertEquals(248, openMapRealMatrix5.getRowDimension());
      assertEquals(true, openMapRealMatrix5.isSquare());
      assertEquals(248, openMapRealMatrix4.getRowDimension());
      assertEquals(248, openMapRealMatrix4.getColumnDimension());
      assertEquals(true, openMapRealMatrix4.isSquare());
      assertEquals(248, openMapRealMatrix0.getColumnDimension());
      assertEquals(248, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(true, openMapRealMatrix6.isSquare());
      assertEquals(248, openMapRealMatrix6.getColumnDimension());
      assertEquals(248, openMapRealMatrix6.getRowDimension());
      assertNotSame(openMapRealMatrix5, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix6, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix6, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix6, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix6, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix6, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix6, openMapRealMatrix1);
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix6));
      assertTrue(openMapRealMatrix5.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix4));
      assertTrue(openMapRealMatrix5.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix4.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix6));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix6));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(openMapRealMatrix6.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix6.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix6.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix6.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix6.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix6.equals((Object)openMapRealMatrix1));
      assertNotNull(openMapRealMatrix6);
      
      int int4 = 955;
      double double3 = 1.0;
      // Undeclared exception!
      try {
        openMapRealMatrix5.addToEntry(int0, int4, double3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (248)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 221;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(221, openMapRealMatrix0.getRowDimension());
      assertEquals(221, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(221, openMapRealMatrix1.getRowDimension());
      assertEquals(221, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(221, openMapRealMatrix0.getRowDimension());
      assertEquals(221, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertNotNull(openMapRealMatrix1);
      
      OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix0.multiply(openMapRealMatrix1);
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(221, openMapRealMatrix1.getRowDimension());
      assertEquals(221, openMapRealMatrix1.getColumnDimension());
      assertEquals(221, openMapRealMatrix2.getColumnDimension());
      assertEquals(221, openMapRealMatrix2.getRowDimension());
      assertEquals(true, openMapRealMatrix2.isSquare());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(221, openMapRealMatrix0.getRowDimension());
      assertEquals(221, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix2));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix2.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix2.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertNotNull(openMapRealMatrix2);
      
      int int1 = 16;
      int int2 = 2;
      openMapRealMatrix0.addToEntry(int1, int2, (double) int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(221, openMapRealMatrix0.getRowDimension());
      assertEquals(221, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double double0 = 2155.6243431470866;
      OpenMapRealMatrix openMapRealMatrix3 = (OpenMapRealMatrix)openMapRealMatrix1.scalarAdd(double0);
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(221, openMapRealMatrix1.getRowDimension());
      assertEquals(221, openMapRealMatrix1.getColumnDimension());
      assertEquals(221, openMapRealMatrix3.getRowDimension());
      assertEquals(221, openMapRealMatrix3.getColumnDimension());
      assertEquals(true, openMapRealMatrix3.isSquare());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(221, openMapRealMatrix0.getRowDimension());
      assertEquals(221, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix3, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix3, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix3, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix3.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix3.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix3.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotNull(openMapRealMatrix3);
      
      int int3 = (-1672);
      double double1 = 4391.04809659;
      OpenMapRealMatrix openMapRealMatrix4 = openMapRealMatrix0.subtract(openMapRealMatrix1);
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(221, openMapRealMatrix1.getRowDimension());
      assertEquals(221, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix4.isSquare());
      assertEquals(221, openMapRealMatrix4.getColumnDimension());
      assertEquals(221, openMapRealMatrix4.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(221, openMapRealMatrix0.getRowDimension());
      assertEquals(221, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix2));
      assertTrue(openMapRealMatrix4.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertNotNull(openMapRealMatrix4);
      
      OpenMapRealMatrix openMapRealMatrix5 = openMapRealMatrix4.subtract((RealMatrix) openMapRealMatrix2);
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(221, openMapRealMatrix1.getRowDimension());
      assertEquals(221, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix4.isSquare());
      assertEquals(221, openMapRealMatrix4.getColumnDimension());
      assertEquals(221, openMapRealMatrix4.getRowDimension());
      assertEquals(true, openMapRealMatrix5.isSquare());
      assertEquals(221, openMapRealMatrix5.getColumnDimension());
      assertEquals(221, openMapRealMatrix5.getRowDimension());
      assertEquals(221, openMapRealMatrix2.getColumnDimension());
      assertEquals(221, openMapRealMatrix2.getRowDimension());
      assertEquals(true, openMapRealMatrix2.isSquare());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(221, openMapRealMatrix0.getRowDimension());
      assertEquals(221, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix4.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix2));
      assertTrue(openMapRealMatrix4.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix5.equals((Object)openMapRealMatrix4));
      assertTrue(openMapRealMatrix5.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix4));
      assertTrue(openMapRealMatrix2.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix5));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertNotNull(openMapRealMatrix5);
      
      int int4 = 955;
      double double2 = 1.0;
      OpenMapRealMatrix openMapRealMatrix6 = (OpenMapRealMatrix)openMapRealMatrix0.preMultiply((RealMatrix) openMapRealMatrix5);
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(221, openMapRealMatrix1.getRowDimension());
      assertEquals(221, openMapRealMatrix1.getColumnDimension());
      assertEquals(221, openMapRealMatrix6.getRowDimension());
      assertEquals(true, openMapRealMatrix6.isSquare());
      assertEquals(221, openMapRealMatrix6.getColumnDimension());
      assertEquals(true, openMapRealMatrix4.isSquare());
      assertEquals(221, openMapRealMatrix4.getColumnDimension());
      assertEquals(221, openMapRealMatrix4.getRowDimension());
      assertEquals(true, openMapRealMatrix5.isSquare());
      assertEquals(221, openMapRealMatrix5.getColumnDimension());
      assertEquals(221, openMapRealMatrix5.getRowDimension());
      assertEquals(221, openMapRealMatrix2.getColumnDimension());
      assertEquals(221, openMapRealMatrix2.getRowDimension());
      assertEquals(true, openMapRealMatrix2.isSquare());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(221, openMapRealMatrix0.getRowDimension());
      assertEquals(221, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix6, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix6, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix6, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix6, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix6, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix6, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix6));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix4));
      assertTrue(openMapRealMatrix6.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix6.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix6.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix6.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix6.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix6.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix4.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix6));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix2));
      assertTrue(openMapRealMatrix4.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix6));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix5.equals((Object)openMapRealMatrix4));
      assertTrue(openMapRealMatrix5.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix4));
      assertTrue(openMapRealMatrix2.equals((Object)openMapRealMatrix6));
      assertTrue(openMapRealMatrix2.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix6));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix5));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertNotNull(openMapRealMatrix6);
      
      OpenMapRealMatrix openMapRealMatrix7 = openMapRealMatrix5.add(openMapRealMatrix0);
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(221, openMapRealMatrix1.getRowDimension());
      assertEquals(221, openMapRealMatrix1.getColumnDimension());
      assertEquals(221, openMapRealMatrix7.getRowDimension());
      assertEquals(true, openMapRealMatrix7.isSquare());
      assertEquals(221, openMapRealMatrix7.getColumnDimension());
      assertEquals(true, openMapRealMatrix4.isSquare());
      assertEquals(221, openMapRealMatrix4.getColumnDimension());
      assertEquals(221, openMapRealMatrix4.getRowDimension());
      assertEquals(true, openMapRealMatrix5.isSquare());
      assertEquals(221, openMapRealMatrix5.getColumnDimension());
      assertEquals(221, openMapRealMatrix5.getRowDimension());
      assertEquals(221, openMapRealMatrix2.getColumnDimension());
      assertEquals(221, openMapRealMatrix2.getRowDimension());
      assertEquals(true, openMapRealMatrix2.isSquare());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(221, openMapRealMatrix0.getRowDimension());
      assertEquals(221, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix7);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix7);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix7);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix7);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix7);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix7));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix6));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix6));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix4.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix6));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix7));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix2));
      assertTrue(openMapRealMatrix4.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix6));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix5.equals((Object)openMapRealMatrix4));
      assertTrue(openMapRealMatrix5.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix7));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix4));
      assertTrue(openMapRealMatrix2.equals((Object)openMapRealMatrix6));
      assertTrue(openMapRealMatrix2.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix7));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix6));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix7));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertNotNull(openMapRealMatrix7);
      
      OpenMapRealMatrix openMapRealMatrix8 = (OpenMapRealMatrix)openMapRealMatrix7.transpose();
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(221, openMapRealMatrix1.getRowDimension());
      assertEquals(221, openMapRealMatrix1.getColumnDimension());
      assertEquals(221, openMapRealMatrix7.getRowDimension());
      assertEquals(true, openMapRealMatrix7.isSquare());
      assertEquals(221, openMapRealMatrix7.getColumnDimension());
      assertEquals(true, openMapRealMatrix4.isSquare());
      assertEquals(221, openMapRealMatrix4.getColumnDimension());
      assertEquals(221, openMapRealMatrix4.getRowDimension());
      assertEquals(true, openMapRealMatrix5.isSquare());
      assertEquals(221, openMapRealMatrix5.getColumnDimension());
      assertEquals(221, openMapRealMatrix5.getRowDimension());
      assertEquals(221, openMapRealMatrix2.getColumnDimension());
      assertEquals(221, openMapRealMatrix2.getRowDimension());
      assertEquals(true, openMapRealMatrix2.isSquare());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(221, openMapRealMatrix0.getRowDimension());
      assertEquals(221, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix8.isSquare());
      assertEquals(221, openMapRealMatrix8.getColumnDimension());
      assertEquals(221, openMapRealMatrix8.getRowDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix7);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix8);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix8);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix7, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix7);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix4, openMapRealMatrix8);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix8);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix5, openMapRealMatrix7);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix8);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix7);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix6);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix7);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix8);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix8, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix8, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix8, openMapRealMatrix7);
      assertNotSame(openMapRealMatrix8, openMapRealMatrix4);
      assertNotSame(openMapRealMatrix8, openMapRealMatrix5);
      assertNotSame(openMapRealMatrix8, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix8, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix8, openMapRealMatrix6);
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix7));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix6));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix8));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix8));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix6));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix7.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix4.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix6));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix7));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix4.equals((Object)openMapRealMatrix8));
      assertTrue(openMapRealMatrix4.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix6));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix8));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix3));
      assertTrue(openMapRealMatrix5.equals((Object)openMapRealMatrix4));
      assertTrue(openMapRealMatrix5.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix5.equals((Object)openMapRealMatrix7));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix8));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix4));
      assertTrue(openMapRealMatrix2.equals((Object)openMapRealMatrix6));
      assertTrue(openMapRealMatrix2.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix7));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix6));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix7));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix8));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(openMapRealMatrix8.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix8.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix8.equals((Object)openMapRealMatrix7));
      assertFalse(openMapRealMatrix8.equals((Object)openMapRealMatrix4));
      assertFalse(openMapRealMatrix8.equals((Object)openMapRealMatrix5));
      assertFalse(openMapRealMatrix8.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix8.equals((Object)openMapRealMatrix3));
      assertFalse(openMapRealMatrix8.equals((Object)openMapRealMatrix6));
      assertNotNull(openMapRealMatrix8);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 103;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(103, openMapRealMatrix0.getColumnDimension());
      assertEquals(103, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.multiply(openMapRealMatrix0);
      assertEquals(103, openMapRealMatrix0.getColumnDimension());
      assertEquals(103, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(103, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(103, openMapRealMatrix1.getRowDimension());
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotNull(openMapRealMatrix1);
      
      // Undeclared exception!
      try {
        openMapRealMatrix1.multiplyEntry(int0, int0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (103)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 98;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(98, openMapRealMatrix0.getRowDimension());
      assertEquals(98, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = (OpenMapRealMatrix)openMapRealMatrix0.preMultiply((RealMatrix) openMapRealMatrix0);
      assertEquals(98, openMapRealMatrix1.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(98, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(98, openMapRealMatrix0.getRowDimension());
      assertEquals(98, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertNotNull(openMapRealMatrix1);
      
      OpenMapRealMatrix openMapRealMatrix2 = (OpenMapRealMatrix)openMapRealMatrix0.transpose();
      assertEquals(98, openMapRealMatrix2.getRowDimension());
      assertEquals(true, openMapRealMatrix2.isSquare());
      assertEquals(98, openMapRealMatrix2.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(98, openMapRealMatrix0.getRowDimension());
      assertEquals(98, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix2, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertTrue(openMapRealMatrix2.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix2.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertNotNull(openMapRealMatrix2);
      
      OpenMapRealMatrix openMapRealMatrix3 = openMapRealMatrix0.copy();
      assertEquals(98, openMapRealMatrix3.getRowDimension());
      assertEquals(98, openMapRealMatrix3.getColumnDimension());
      assertEquals(true, openMapRealMatrix3.isSquare());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(98, openMapRealMatrix0.getRowDimension());
      assertEquals(98, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix3, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix3, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix3, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertTrue(openMapRealMatrix3.equals((Object)openMapRealMatrix2));
      assertTrue(openMapRealMatrix3.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix3.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix3));
      assertNotNull(openMapRealMatrix3);
      
      double double0 = openMapRealMatrix3.getNorm();
      assertEquals(98, openMapRealMatrix3.getRowDimension());
      assertEquals(98, openMapRealMatrix3.getColumnDimension());
      assertEquals(true, openMapRealMatrix3.isSquare());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(98, openMapRealMatrix0.getRowDimension());
      assertEquals(98, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix3, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix3, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix3, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix3);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(openMapRealMatrix3.equals((Object)openMapRealMatrix2));
      assertTrue(openMapRealMatrix3.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix3.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix3));
  }

  //@Test
  public void test4()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,611,686,014,132,420,609 is larger than, or equal to, the maximum (2,147,483,647)
         //
      }
  }
}
