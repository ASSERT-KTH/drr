/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:51:11 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.exception.NumberIsTooLargeException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class OpenMapRealMatrixEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 218;
      int int1 = 349;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(openMapRealMatrix0);
      assertEquals(349, openMapRealMatrix0.getRowDimension());
      assertEquals(false, openMapRealMatrix0.isSquare());
      assertEquals(218, openMapRealMatrix0.getColumnDimension());
      
      int int2 = 187;
      openMapRealMatrix0.multiplyEntry(int0, int2, (double) int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(349, openMapRealMatrix0.getRowDimension());
      assertEquals(false, openMapRealMatrix0.isSquare());
      assertEquals(218, openMapRealMatrix0.getColumnDimension());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 165;
      int int1 = 193;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int1, int1);
      assertFalse(int1 == int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(193, openMapRealMatrix0.getColumnDimension());
      assertEquals(193, openMapRealMatrix0.getRowDimension());
      
      openMapRealMatrix0.addToEntry(int0, int0, (double) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(193, openMapRealMatrix0.getColumnDimension());
      assertEquals(193, openMapRealMatrix0.getRowDimension());
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.multiply(openMapRealMatrix0);
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertFalse(int1 == int0);
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotNull(openMapRealMatrix1);
      assertEquals(193, openMapRealMatrix1.getColumnDimension());
      assertEquals(193, openMapRealMatrix1.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(193, openMapRealMatrix0.getColumnDimension());
      assertEquals(193, openMapRealMatrix0.getRowDimension());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 230;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(230, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(230, openMapRealMatrix0.getRowDimension());
      
      int int1 = 0;
      openMapRealMatrix0.setEntry(int1, int1, (double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(230, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(230, openMapRealMatrix0.getRowDimension());
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract(openMapRealMatrix0);
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertFalse(int0 == int1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotNull(openMapRealMatrix1);
      assertEquals(230, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(230, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(230, openMapRealMatrix1.getColumnDimension());
      assertEquals(230, openMapRealMatrix1.getRowDimension());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 165;
      int int1 = 228;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int1, int1);
      assertFalse(int1 == int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(228, openMapRealMatrix0.getColumnDimension());
      assertEquals(228, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      
      openMapRealMatrix0.addToEntry(int0, int0, (double) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(228, openMapRealMatrix0.getColumnDimension());
      assertEquals(228, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertFalse(int1 == int0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotNull(openMapRealMatrix1);
      assertEquals(228, openMapRealMatrix0.getColumnDimension());
      assertEquals(228, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(228, openMapRealMatrix1.getRowDimension());
      assertEquals(228, openMapRealMatrix1.getColumnDimension());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 2147483643;
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,611,685,996,952,551,449 is larger than, or equal to, the maximum (2,147,483,647)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 230;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(230, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(230, openMapRealMatrix0.getColumnDimension());
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract((RealMatrix) openMapRealMatrix0);
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotNull(openMapRealMatrix1);
      assertEquals(230, openMapRealMatrix1.getRowDimension());
      assertEquals(230, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(230, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(230, openMapRealMatrix0.getColumnDimension());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 230;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(230, openMapRealMatrix0.getRowDimension());
      assertEquals(230, openMapRealMatrix0.getColumnDimension());
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.copy();
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotNull(openMapRealMatrix1);
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(230, openMapRealMatrix1.getRowDimension());
      assertEquals(230, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(230, openMapRealMatrix0.getRowDimension());
      assertEquals(230, openMapRealMatrix0.getColumnDimension());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 230;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(230, openMapRealMatrix0.getColumnDimension());
      assertEquals(230, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.createMatrix(int0, int0);
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotNull(openMapRealMatrix1);
      assertEquals(230, openMapRealMatrix0.getColumnDimension());
      assertEquals(230, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(230, openMapRealMatrix1.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(230, openMapRealMatrix1.getColumnDimension());
  }
}
