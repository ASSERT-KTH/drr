/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:56:23 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Floor;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.NoBracketingException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseSecantSolverEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 924.7966944685287;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(924.7966944685287, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      double double1 = (-1.717);
      int int0 = 1062;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) atan0, double1, double0, allowedSolution0);
      assertEquals(368.2361225587997, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(924.7966944685287, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1.717), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(461.53984723426436, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1062, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(924.7966944685287, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 926.5060474153427;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(926.5060474153427, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertNotNull(regulaFalsiSolver0);
      
      double double1 = (-0.99405674);
      int int0 = 1729;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) atan0, double1, double0, allowedSolution0);
      assertEquals((-0.99405674), double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(926.5060474153427, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(926.5060474153427, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(462.7559953376713, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-0.99405674), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1729, regulaFalsiSolver0.getMaxEvaluations());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 192;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int1 = illinoisSolver0.getMaxEvaluations();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-174.16505261873013);
      double double1 = 1.0;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, double1, (double) int1, allowedSolution0);
      assertEquals((-3.203986585023199E-7), double2, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-174.16505261873013), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(23, illinoisSolver0.getEvaluations());
      assertEquals(1.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(192, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 114.26990876101983;
      double double1 = (-132.29543906);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double1, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-132.29543906), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-132.29543906), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(114.26990876101983, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 54;
      double double2 = (-383.95076161);
      Logit logit0 = new Logit(double2, (double) int0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertNotNull(logit0);
      
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertNotNull(univariateRealFunction0);
      
      double double3 = 2282.65738416;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double1, double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertEquals((-132.29543906), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-132.29543906), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2282.65738416, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      double double4 = illinoisSolver0.solve(int0, univariateRealFunction0, double2, double3, double0);
      assertEquals(2282.65738416, double4, 0.01D);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertTrue(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertTrue(double4 == double3);
      assertEquals((-132.29543906), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(54, illinoisSolver0.getMaxEvaluations());
      assertEquals(2282.65738416, illinoisSolver0.getMax(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-383.95076161), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-132.29543906), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2282.65738416, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double5 = pegasusSolver0.solve(int0, univariateRealFunction0, (double) int0, double4, double4, allowedSolution0);
      assertEquals(2282.65738416, double5, 0.01D);
      assertFalse(double1 == double4);
      assertFalse(double1 == double5);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double0 == double5);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double5 == double3);
      assertFalse(double5 == double1);
      assertTrue(double5 == double4);
      assertFalse(double5 == double0);
      assertFalse(double5 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double5);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertTrue(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(double3 == double5);
      assertFalse(double3 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertTrue(double4 == double3);
      assertTrue(double4 == double5);
      assertEquals((-132.29543906), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(54, illinoisSolver0.getMaxEvaluations());
      assertEquals(2282.65738416, illinoisSolver0.getMax(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-383.95076161), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-132.29543906), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2282.65738416, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(54, pegasusSolver0.getMaxEvaluations());
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-132.29543906), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-132.29543906), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2282.65738416, pegasusSolver0.getMax(), 0.01D);
      assertEquals(54.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(114.26990876101983, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2282.65738416, pegasusSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 924.7966944685287;
      int int0 = 1062;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertNotNull(illinoisSolver0);
      
      double double1 = (-1255.7733958671936);
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) atan0, double1, double0, (double) int0, allowedSolution0);
      assertEquals(1.1938203126971542E-17, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(18, illinoisSolver0.getEvaluations());
      assertEquals(1062, illinoisSolver0.getMaxEvaluations());
      assertEquals(924.7966944685287, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1062.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-1255.7733958671936), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 114.26990876101983;
      int int0 = 54;
      double double1 = (-383.95076161);
      Logit logit0 = new Logit(double1, (double) int0);
      assertFalse(double1 == double0);
      assertNotNull(logit0);
      
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      assertFalse(double1 == double0);
      assertNotNull(univariateRealFunction0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertNotNull(illinoisSolver0);
      
      double double2 = illinoisSolver0.solve(int0, univariateRealFunction0, double1, double0, double0);
      assertEquals(114.26990876101983, double2, 0.01D);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(114.26990876101983, illinoisSolver0.getMax(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(114.26990876101983, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(54, illinoisSolver0.getMaxEvaluations());
      assertEquals(114.26990876101983, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-383.95076161), illinoisSolver0.getMin(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = illinoisSolver0.solve(int0, univariateRealFunction0, double1, double2, allowedSolution0);
      assertEquals(114.26990876101983, double3, 0.01D);
      assertTrue(double3 == double2);
      assertTrue(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertEquals(114.26990876101983, illinoisSolver0.getMax(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(114.26990876101983, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-134.84042642449006), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(54, illinoisSolver0.getMaxEvaluations());
      assertEquals(114.26990876101983, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-383.95076161), illinoisSolver0.getMin(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 104.43517934027125;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(104.43517934027125, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(104.43517934027125, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(104.43517934027125, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 25;
      double double1 = (-396.8055480299443);
      Logit logit0 = new Logit(double1, (double) int0);
      assertFalse(double1 == double0);
      assertNotNull(logit0);
      
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      assertFalse(double1 == double0);
      assertNotNull(univariateRealFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, univariateRealFunction0, (double) int0, double0, double0, allowedSolution0);
      assertEquals(25.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(104.43517934027125, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(104.43517934027125, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(104.43517934027125, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(25, pegasusSolver0.getMaxEvaluations());
      assertEquals(104.43517934027125, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(104.43517934027125, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(25.0, pegasusSolver0.getMin(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 924.7966944685287;
      double double1 = (-1.717);
      int int0 = 1062;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertNotNull(illinoisSolver0);
      
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) atan0, double1, double0, (double) int0, allowedSolution0);
      assertEquals(1.1390677322669967E-9, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1062, illinoisSolver0.getMaxEvaluations());
      assertEquals((-1.717), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(13, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1062.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(924.7966944685287, illinoisSolver0.getMax(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 1.2393345855018391E-8;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.2393345855018391E-8, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.2393345855018391E-8, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.2393345855018391E-8, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 1989;
      int int1 = (-2077);
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sin0, (double) int1, (double) int0, (double) int0, allowedSolution0);
      assertEquals(40.84070449666493, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertEquals((-2077.0), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1989.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.2393345855018391E-8, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.2393345855018391E-8, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1989.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.2393345855018391E-8, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1989, illinoisSolver0.getMaxEvaluations());
      assertEquals(14, illinoisSolver0.getEvaluations());
  }

  //@Test
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 1220;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double0 = (-2106.1834445276754);
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, (double) int0, double0);
      assertEquals((-389.5574890451344), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1220.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1220, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-2106.1834445276754), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(18, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2106.1834445276754), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 924.1119271616241;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(924.1119271616241, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      double double1 = (-1.4);
      int int0 = 1731;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) atan0, double1, double0, allowedSolution0);
      assertEquals(347.66798213851234, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(461.35596358081204, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(924.1119271616241, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1.4), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1731, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(924.1119271616241, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 924.1119271616241;
      double double1 = (-1.4);
      int int0 = 1731;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) atan0, double1, double0, (double) int0, allowedSolution0);
      assertEquals(8.810373059974235E-12, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(924.1119271616241, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1731.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-1.4), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(13, illinoisSolver0.getEvaluations());
      assertEquals(1731, illinoisSolver0.getMaxEvaluations());
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 114.26990876101983;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(114.26990876101983, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertNotNull(illinoisSolver0);
      
      int int0 = 1916;
      double double1 = (-136.5325213423602);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      Sinh sinh0 = new Sinh();
      assertNotNull(sinh0);
      
      double double2 = 7.549789948768648E-8;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sinh0, double1, double2, allowedSolution0);
      assertEquals((-2.0880974297595278E-53), double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(198, illinoisSolver0.getEvaluations());
      assertEquals(114.26990876101983, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(7.549789948768648E-8, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1916, illinoisSolver0.getMaxEvaluations());
      assertEquals(114.26990876101983, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-136.5325213423602), illinoisSolver0.getMin(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-68.26626063343116), illinoisSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = 1507.560422054105;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1507.560422054105, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 879;
      Floor floor0 = new Floor();
      assertNotNull(floor0);
      
      double double1 = (-2703.715004);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) floor0, double1, (double) int0, allowedSolution0);
      assertEquals(0.06991668545913399, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-2703.715004), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-912.3575020000001), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(879, pegasusSolver0.getMaxEvaluations());
      assertEquals(1507.560422054105, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(879.0, pegasusSolver0.getMax(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = 926.5060474153427;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 40;
      Sigmoid sigmoid0 = new Sigmoid();
      assertNotNull(sigmoid0);
      
      UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
      assertNotNull(univariateRealFunction0);
      
      double double1 = illinoisSolver0.solve(int0, univariateRealFunction0, (double) int0, double0, double0);
      assertEquals(926.5060474153427, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(926.5060474153427, illinoisSolver0.getMax(), 0.01D);
      assertEquals(40.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(926.5060474153427, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(40, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 192;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, (double) int0);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(192.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(192.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertNotNull(illinoisSolver0);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = 114.26990876101983;
      int int0 = 54;
      Logit logit0 = new Logit((double) int0, (double) int0);
      assertNotNull(logit0);
      
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      assertNotNull(univariateRealFunction0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, (double) int0);
      assertEquals(54.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      double double1 = illinoisSolver0.solve(int0, univariateRealFunction0, double0, double0, double0);
      assertEquals(114.26990876101983, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(54.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(114.26990876101983, illinoisSolver0.getMax(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(114.26990876101983, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(54, illinoisSolver0.getMaxEvaluations());
      assertEquals(114.26990876101983, illinoisSolver0.getMin(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      Sinh sinh0 = new Sinh();
      assertNotNull(sinh0);
      
      // Undeclared exception!
      try {
        double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sinh0, (double) int0, double1, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [54, 114.27], values: [141,537,665,163,734,700,000,000, 21,171,948,398,604,940,000,000,000,000,000,000,000,000,000,000,000]
         //
      }
  }
}
