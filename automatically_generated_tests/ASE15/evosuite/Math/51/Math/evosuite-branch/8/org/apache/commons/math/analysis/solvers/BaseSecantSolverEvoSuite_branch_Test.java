/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:09:00 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.TooManyEvaluationsException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseSecantSolverEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = (-4227.535161517493);
      double double1 = 0.6122377281856918;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double1);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-4227.535161517493), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.6122377281856918, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 185;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(185.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-2021.2675807587466), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(11, regulaFalsiSolver0.getEvaluations());
      assertEquals((-4227.535161517493), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-4227.535161517493), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.6122377281856918, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(185, regulaFalsiSolver0.getMaxEvaluations());
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.49917823703187736, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 2172.4411566816066;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(2172.4411566816066, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(2172.4411566816066, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 6190;
      double[] doubleArray0 = new double[16];
      double double1 = (-2470.739970138263);
      doubleArray0[8] = double1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(8, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-2470.739970138263), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = (PolynomialFunction)polynomialFunction0.derivative();
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotNull(polynomialFunction1);
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(8, polynomialFunction0.degree());
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-2470.739970138263), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction1, doubleArray0[8], double0, allowedSolution0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(2172.4411566816066, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2172.4411566816066, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(6190, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals((-2470.739970138263), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(2172.4411566816066, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-149.14940672832836), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(8, polynomialFunction0.degree());
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-2470.739970138263), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(830.9602308486701, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 2888.0;
      double double1 = (-530.9541562514131);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double1);
      assertNotNull(regulaFalsiSolver0);
      assertEquals((-530.9541562514131), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2888.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 6200;
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = double1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(8, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-530.9541562514131)}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = (PolynomialFunction)polynomialFunction0.derivative();
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotNull(polynomialFunction1);
      assertEquals(8, polynomialFunction0.degree());
      assertEquals(7, polynomialFunction1.degree());
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-530.9541562514131)}, doubleArray0, 0.01);
      
      double double2 = 234.91354;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction1, doubleArray0[8], double2, allowedSolution0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertEquals(8, polynomialFunction0.degree());
      assertEquals((-530.9541562514131), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(234.91354, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(6200, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-148.02030812570655), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2888.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-530.9541562514131), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(7, polynomialFunction1.degree());
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-530.9541562514131)}, doubleArray0, 0.01);
      assertEquals(232.38032498443368, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 17.33340619959326;
      double double1 = 0.696357311683801;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, double1);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(17.33340619959326, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.696357311683801, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(17.33340619959326, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-103);
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      int int1 = 725;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) cbrt0, (double) int0, double1, allowedSolution0);
      assertEquals((-103.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.696357311683801, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(17.33340619959326, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.696357311683801, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(17.33340619959326, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(725, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-51.1518213441581), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(int0 == int1);
      assertEquals((-15.793401992929372), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = (-1.5429837132713715);
      double double1 = 1697.7911420058158;
      double double2 = 363.0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double1, double2);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1697.7911420058158, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(363.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      int int0 = (-694);
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      int int1 = 699;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) cbrt0, (double) int0, double2, double0, allowedSolution0);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(699, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1697.7911420058158, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(363.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(363.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-694.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(int0 == int1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertEquals(363.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = (-9.870585331259676);
      double double1 = 1655.2243385596817;
      double double2 = 362.54;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double1, double2);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-9.870585331259676), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(362.54, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1655.2243385596817, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      int int0 = 709;
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, double2, double0, allowedSolution0);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(709, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(362.54, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-9.870585331259676), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(362.54, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-9.870585331259676), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-9.870585331259676), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1655.2243385596817, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertTrue(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertTrue(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-9.870585331259676), double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-4.2537350534);
      double double1 = 1676.31695;
      double double2 = 342.8612016064414;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double1, double2);
      assertNotNull(regulaFalsiSolver0);
      assertEquals((-4.2537350534), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(342.8612016064414, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1676.31695, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      int int0 = (-675);
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      int int1 = 671;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) cbrt0, (double) int0, double2, allowedSolution0);
      assertEquals((-4.2537350534), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(671, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-675.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(342.8612016064414, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(342.8612016064414, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(1676.31695, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-166.06939919677927), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(342.8612016064414, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 744.212;
      double[] doubleArray0 = new double[10];
      double double1 = (-1182.94);
      doubleArray0[3] = double1;
      doubleArray0[1] = double0;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(doubleArray0[4]);
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertArrayEquals(new double[] {0.0, 744.212, 0.0, (-1182.94), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 5687;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(3, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 744.212, 0.0, (-1182.94), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[3], double0);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-219.36400000000003), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-1182.94), illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(744.212, illinoisSolver0.getMax(), 0.01D);
      assertEquals(5687, illinoisSolver0.getMaxEvaluations());
      assertEquals(30, illinoisSolver0.getEvaluations());
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertArrayEquals(new double[] {0.0, 744.212, 0.0, (-1182.94), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.7931712712022745, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = (-4.2537350534);
      double double1 = 342.8612016064414;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, double1);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-4.2537350534), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-4.2537350534), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(342.8612016064414, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = (-675);
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      int int1 = 671;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) cbrt0, (double) int0, double1, allowedSolution0);
      assertEquals((-4.2537350534), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(342.8612016064414, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-166.06939919677927), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(4, regulaFalsiSolver0.getEvaluations());
      assertEquals(671, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-675.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-4.2537350534), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(342.8612016064414, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(int0 == int1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(74.33369599169097, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = (-1.5429837132713715);
      double double1 = 363.0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, double1);
      assertNotNull(regulaFalsiSolver0);
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(363.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = (-694);
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      int int1 = 699;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) cbrt0, (double) int0, double1, allowedSolution0);
      assertEquals(699, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-165.5), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(363.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(363.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-694.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(int0 == int1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-108.63687035229106), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-9.870585331259676);
      double double1 = 362.54;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, double1);
      assertNotNull(regulaFalsiSolver0);
      assertEquals((-9.870585331259676), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-9.870585331259676), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(362.54, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      int int0 = 709;
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, double1, double0, allowedSolution0);
      assertEquals((-9.870585331259676), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-9.870585331259676), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-9.870585331259676), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(362.54, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(362.54, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(6, regulaFalsiSolver0.getEvaluations());
      assertEquals((-9.870585331259676), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(709, regulaFalsiSolver0.getMaxEvaluations());
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-2.1706645992560176), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-1.5429837132713715);
      double double1 = 1697.7911420058158;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double1, double1);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1697.7911420058158, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1697.7911420058158, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-694);
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      int int1 = 699;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) cbrt0, (double) int0, double1, allowedSolution0);
      assertEquals(699, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1697.7911420058158, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(1697.7911420058158, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-694.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(501.8955710029079, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1697.7911420058158, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-694.0), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 2888.0;
      double double1 = (-541.15479);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double1);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(2888.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-541.15479), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 6225;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = double1;
      double double2 = (-2470.23);
      doubleArray0[3] = double2;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = double1;
      double double3 = 150.7718759385;
      doubleArray0[6] = double3;
      doubleArray0[7] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(7, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, (-541.15479), 0.0, (-2470.23), 6225.0, (-541.15479), 150.7718759385, 6225.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.multiply(polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotNull(polynomialFunction1);
      assertEquals(7, polynomialFunction0.degree());
      assertEquals(14, polynomialFunction1.degree());
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertArrayEquals(new double[] {0.0, (-541.15479), 0.0, (-2470.23), 6225.0, (-541.15479), 150.7718759385, 6225.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction2 = polynomialFunction1.polynomialDerivative();
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotNull(polynomialFunction2);
      assertEquals(13, polynomialFunction2.degree());
      assertEquals(7, polynomialFunction0.degree());
      assertEquals(14, polynomialFunction1.degree());
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertArrayEquals(new double[] {0.0, (-541.15479), 0.0, (-2470.23), 6225.0, (-541.15479), 150.7718759385, 6225.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction3 = polynomialFunction2.subtract(polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotNull(polynomialFunction3);
      assertEquals(13, polynomialFunction2.degree());
      assertEquals(7, polynomialFunction0.degree());
      assertEquals(14, polynomialFunction3.degree());
      assertEquals(14, polynomialFunction1.degree());
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertArrayEquals(new double[] {0.0, (-541.15479), 0.0, (-2470.23), 6225.0, (-541.15479), 150.7718759385, 6225.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction4 = (PolynomialFunction)polynomialFunction3.derivative();
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction4);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction4);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction4);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction4, polynomialFunction2);
      assertNotSame(polynomialFunction4, polynomialFunction3);
      assertNotSame(polynomialFunction4, polynomialFunction1);
      assertNotSame(polynomialFunction4, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction4);
      assertNotNull(polynomialFunction4);
      assertEquals(13, polynomialFunction2.degree());
      assertEquals(7, polynomialFunction0.degree());
      assertEquals(14, polynomialFunction3.degree());
      assertEquals(13, polynomialFunction4.degree());
      assertEquals(14, polynomialFunction1.degree());
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction4));
      assertArrayEquals(new double[] {0.0, (-541.15479), 0.0, (-2470.23), 6225.0, (-541.15479), 150.7718759385, 6225.0, 0.0}, doubleArray0, 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try {
        double double4 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction4, doubleArray0[8], doubleArray0[4], allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (6,225) exceeded: evaluations
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 0.1075317248;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.1075317248, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.1075317248, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.1075317248, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      
      int int0 = 2229;
      double[] doubleArray0 = new double[10];
      doubleArray0[9] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(9, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2229.0}, doubleArray0, 0.01);
      
      double double1 = (-1207.9715);
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, (double) int0);
      assertEquals(0.1075317248, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(510.51424999999995, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-1207.9715), pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.1075317248, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.1075317248, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(147, pegasusSolver0.getEvaluations());
      assertEquals(2229.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2229, pegasusSolver0.getMaxEvaluations());
      assertEquals(9, polynomialFunction0.degree());
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2229.0}, doubleArray0, 0.01);
      assertEquals((-0.33033165179614205), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-1.5429837132713715);
      double double1 = 363.0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, double1);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(363.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-694);
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      int int1 = 699;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) cbrt0, (double) int0, double1, double0, allowedSolution0);
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.5429837132713715), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(363.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(699, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(4, regulaFalsiSolver0.getEvaluations());
      assertEquals(363.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-694.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertEquals(80.39543907669923, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 2172.4411566816066;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(2172.4411566816066, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2172.4411566816066, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      
      int int0 = 6190;
      double double1 = (-2470.739970138263);
      Identity identity0 = new Identity();
      assertNotNull(identity0);
      
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) identity0, double1, double0);
      assertEquals((-149.14940672832836), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-2470.739970138263), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(2172.4411566816066, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(6190, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(2172.4411566816066, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2172.4411566816066, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = (-1.0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      double double1 = 0.0;
      int int0 = (-642);
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      int int1 = 709;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) cbrt0, (double) int0, double1, allowedSolution0);
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertEquals(709, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-321.0), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-642.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(int1 == int0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 0.0;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 125;
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) expm1_0, double0, double0, allowedSolution0);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(125, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }
}
