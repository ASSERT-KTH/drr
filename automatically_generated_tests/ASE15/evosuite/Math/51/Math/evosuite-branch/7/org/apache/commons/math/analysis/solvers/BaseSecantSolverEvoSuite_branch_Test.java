/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:58:38 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.TooManyEvaluationsException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseSecantSolverEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double double0 = (-2051.552579441193);
      double double1 = 650.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double1, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(650.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(650.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2051.552579441193), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      int int0 = 1126;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {1126.0, 1126.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(1, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.negate();
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {1126.0, 1126.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction1);
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(1, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction2 = polynomialFunction0.multiply(polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertArrayEquals(new double[] {1126.0, 1126.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2);
      assertEquals(2, polynomialFunction2.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(1, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction3 = polynomialFunction2.polynomialDerivative();
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertArrayEquals(new double[] {1126.0, 1126.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction3);
      assertEquals(2, polynomialFunction2.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(1, polynomialFunction3.degree());
      assertEquals(1, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction4 = polynomialFunction2.subtract(polynomialFunction3);
      assertNotSame(polynomialFunction4, polynomialFunction0);
      assertNotSame(polynomialFunction4, polynomialFunction3);
      assertNotSame(polynomialFunction4, polynomialFunction1);
      assertNotSame(polynomialFunction4, polynomialFunction2);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction4);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction4);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction3, polynomialFunction4);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction4);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertArrayEquals(new double[] {1126.0, 1126.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction4);
      assertEquals(2, polynomialFunction4.degree());
      assertEquals(2, polynomialFunction2.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(1, polynomialFunction3.degree());
      assertEquals(1, polynomialFunction0.degree());
      
      double double2 = 0.5;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction4, double2, doubleArray0[0], allowedSolution0);
      assertNotSame(polynomialFunction4, polynomialFunction0);
      assertNotSame(polynomialFunction4, polynomialFunction3);
      assertNotSame(polynomialFunction4, polynomialFunction1);
      assertNotSame(polynomialFunction4, polynomialFunction2);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction4);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction4);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction3, polynomialFunction4);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction4);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction2));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction4));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertArrayEquals(new double[] {1126.0, 1126.0}, doubleArray0, 0.01);
      assertEquals(0.993813093618712, double3, 0.01D);
      assertEquals(2, polynomialFunction4.degree());
      assertEquals(2, polynomialFunction2.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(1126, pegasusSolver0.getMaxEvaluations());
      assertEquals(650.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(650.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2051.552579441193), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(15, pegasusSolver0.getEvaluations());
      assertEquals(563.25, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.5, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1126.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1, polynomialFunction3.degree());
      assertEquals(1, polynomialFunction0.degree());
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 44.97401180789197;
      double double1 = (-295.0);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertFalse(double0 == double1);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(44.97401180789197, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(44.97401180789197, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = 194;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = double1;
      doubleArray0[3] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {(-295.0), 0.0, 0.0, 44.97401180789197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(3, polynomialFunction0.degree());
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[1], (double) int0, doubleArray0[2], allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertArrayEquals(new double[] {(-295.0), 0.0, 0.0, 44.97401180789197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.3604744919140566, double2, 0.01D);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(194.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(44.97401180789197, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(17, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(44.97401180789197, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(194, pegasusSolver0.getMaxEvaluations());
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 869.48380696623;
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 1723;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      double double1 = (-0.18387794);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) signum0, double1, double0, double0, allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.4190137006763215E-7, double2, 0.01D);
      assertEquals(1723, pegasusSolver0.getMaxEvaluations());
      assertEquals(869.48380696623, pegasusSolver0.getMax(), 0.01D);
      assertEquals(25, pegasusSolver0.getEvaluations());
      assertEquals((-0.18387794), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(869.48380696623, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-2118.045);
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      int int0 = 1707;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) signum0, double0, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.2695987313609631E-7), double1, 0.01D);
      assertEquals(1707, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1707.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(37, pegasusSolver0.getEvaluations());
      assertEquals((-2118.045), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-205.52250000000004), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-2051.552579441193);
      double double1 = 650.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double1, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(pegasusSolver0);
      assertEquals((-2051.552579441193), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(650.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(650.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      
      int int0 = 1126;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {1126.0, 1126.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(1, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.multiply(polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {1126.0, 1126.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction1);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(1, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction2 = polynomialFunction1.polynomialDerivative();
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {1126.0, 1126.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(1, polynomialFunction0.degree());
      assertEquals(1, polynomialFunction2.degree());
      
      PolynomialFunction polynomialFunction3 = polynomialFunction1.subtract(polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {1126.0, 1126.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction3);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(1, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction3.degree());
      assertEquals(1, polynomialFunction2.degree());
      
      double double2 = 0.5;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction3, double2, doubleArray0[0], allowedSolution0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {1126.0, 1126.0}, doubleArray0, 0.01);
      assertEquals(1.00026766776987, double3, 0.01D);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(1, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction3.degree());
      assertEquals((-2051.552579441193), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1126, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.5, pegasusSolver0.getMin(), 0.01D);
      assertEquals(563.25, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(15, pegasusSolver0.getEvaluations());
      assertEquals(650.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1126.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(650.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1, polynomialFunction2.degree());
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 1.986821492305628E-8;
      double double1 = (-286.6634350617215);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(pegasusSolver0);
      assertEquals((-286.6634350617215), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.986821492305628E-8, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      
      int int0 = 240;
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) int0;
      doubleArray0[4] = double1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 240.0, 0.0, (-286.6634350617215)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(4, polynomialFunction0.degree());
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, doubleArray0[2], doubleArray0[4], allowedSolution0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertArrayEquals(new double[] {0.0, 0.0, 240.0, 0.0, (-286.6634350617215)}, doubleArray0, 0.01);
      assertEquals(0.9149965794069145, double2, 0.01D);
      assertEquals(4, polynomialFunction0.degree());
      assertEquals((-286.6634350617215), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.986821492305628E-8, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.986821492305628E-8, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(240.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(149, pegasusSolver0.getEvaluations());
      assertEquals((-286.6634350617215), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(240, pegasusSolver0.getMaxEvaluations());
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = (-2051.341124);
      double double1 = 650.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double1, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(pegasusSolver0);
      assertEquals((-2051.341124), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(650.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(650.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      int int0 = 1126;
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) int0;
      doubleArray0[3] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {1126.0, 0.0, 0.0, 1126.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(3, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertArrayEquals(new double[] {1126.0, 0.0, 0.0, 1126.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction1);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction1.degree());
      
      PolynomialFunction polynomialFunction2 = polynomialFunction0.subtract(polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertArrayEquals(new double[] {1126.0, 0.0, 0.0, 1126.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(3, polynomialFunction2.degree());
      assertEquals(2, polynomialFunction1.degree());
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction2, double0, doubleArray0[0], allowedSolution0);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertArrayEquals(new double[] {1126.0, 0.0, 0.0, 1126.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2.8793852415718164, double2, 0.01D);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(3, polynomialFunction2.degree());
      assertEquals(2, polynomialFunction1.degree());
      assertEquals((-2051.341124), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(44, pegasusSolver0.getEvaluations());
      assertEquals(650.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-2051.341124), pegasusSolver0.getMin(), 0.01D);
      assertEquals(650.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1126, pegasusSolver0.getMaxEvaluations());
      assertEquals(1126.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-462.670562), pegasusSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = (-2757.334424424575);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-2757.334424424575), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      int int0 = 398;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double1 = 1172.1833107061932;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sinc0, (double) int0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(543.4955290710342, double2, 0.01D);
      assertEquals(398.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1172.1833107061932, pegasusSolver0.getMax(), 0.01D);
      assertEquals(398, pegasusSolver0.getMaxEvaluations());
      assertEquals(16, pegasusSolver0.getEvaluations());
      assertEquals((-2757.334424424575), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(785.0916553530966, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sinc0, double0, double2, allowedSolution0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertEquals((-1988.628149722339), double3, 0.01D);
      assertEquals((-2757.334424424575), pegasusSolver0.getMin(), 0.01D);
      assertEquals(543.4955290710342, pegasusSolver0.getMax(), 0.01D);
      assertEquals(398, pegasusSolver0.getMaxEvaluations());
      assertEquals(22, pegasusSolver0.getEvaluations());
      assertEquals((-2757.334424424575), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1106.9194476767705), pegasusSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-2757.334424424575);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-2757.334424424575), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      int int0 = 398;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sinc0, double0, (double) int0, allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-2755.176757198249), double1, 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-2757.334424424575), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1179.6672122122875), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(398, pegasusSolver0.getMaxEvaluations());
      assertEquals(19, pegasusSolver0.getEvaluations());
      assertEquals(398.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-2757.334424424575), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-2051.4250601856174);
      double double1 = 653.6415627503429;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double1, double1, double1);
      assertFalse(double1 == double0);
      assertNotNull(pegasusSolver0);
      assertEquals(653.6415627503429, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(653.6415627503429, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(653.6415627503429, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = 1134;
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = double0;
      doubleArray0[3] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {1134.0, (-2051.4250601856174), 0.0, 1134.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(3, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = (PolynomialFunction)polynomialFunction0.derivative();
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {1134.0, (-2051.4250601856174), 0.0, 1134.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction1);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(3, polynomialFunction0.degree());
      
      double double2 = 0.5;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction1, double2, doubleArray0[0], allowedSolution0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertArrayEquals(new double[] {1134.0, (-2051.4250601856174), 0.0, 1134.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.7766162815691892, double3, 0.01D);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(15, pegasusSolver0.getEvaluations());
      assertEquals(653.6415627503429, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(567.25, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1134, pegasusSolver0.getMaxEvaluations());
      assertEquals(653.6415627503429, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.5, pegasusSolver0.getMin(), 0.01D);
      assertEquals(653.6415627503429, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1134.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, polynomialFunction0.degree());
  }

  @Test
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 985;
      double double0 = (-1612.2124744300947);
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-3.3243788499103975E-8), double1, 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(18, pegasusSolver0.getEvaluations());
      assertEquals((-1612.2124744300947), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-313.6062372150475), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(985.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(985, pegasusSolver0.getMaxEvaluations());
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 19.2;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(19.2, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      
      int int0 = 1000;
      Sinh sinh0 = new Sinh();
      assertNotNull(sinh0);
      
      double double1 = (-1698.7257911248166);
      // Undeclared exception!
      try {
        double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sinh0, double1, double0, double1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,000) exceeded: evaluations
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = (-7.53390230037611);
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      
      double double1 = pegasusSolver0.getRelativeAccuracy();
      assertFalse(double1 == double0);
      assertEquals(1.0E-14, double1, 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      int int0 = 1137;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) tan0, double1, (double) int0, double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.5707962005409262, double2, 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(51, illinoisSolver0.getEvaluations());
      assertEquals(1137, illinoisSolver0.getMaxEvaluations());
      assertEquals((-7.53390230037611), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1137.0, illinoisSolver0.getMax(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-2118.045);
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      
      int int0 = 1707;
      double[] doubleArray0 = new double[18];
      doubleArray0[5] = (double) int0;
      doubleArray0[0] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {1707.0, 0.0, 0.0, 0.0, 0.0, 1707.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(5, polynomialFunction0.degree());
      
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, doubleArray0[0]);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {1707.0, 0.0, 0.0, 0.0, 0.0, 1707.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1.0), double1, 0.01D);
      assertEquals(1707, pegasusSolver0.getMaxEvaluations());
      assertEquals(1707.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(78, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2118.045), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-205.52250000000004), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(5, polynomialFunction0.degree());
  }

  @Test
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 286;
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double0 = (-2140.3853062);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) inverse0, double0, (double) int0, allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.2487627040884265E-7), double1, 0.01D);
      assertEquals(68, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2140.3853062), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-927.1926530999999), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(286.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(286, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = 0.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      int int0 = 136;
      Sinh sinh0 = new Sinh();
      assertNotNull(sinh0);
      
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sinh0, (double) int0, double0, (double) int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(136.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(136.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(136, pegasusSolver0.getMaxEvaluations());
      assertEquals(2, pegasusSolver0.getEvaluations());
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = (-2118.045);
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = 1707;
      double[] doubleArray0 = new double[18];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(0, polynomialFunction0.degree());
      
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, doubleArray0[0]);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-2118.045), double1, 0.01D);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(2, pegasusSolver0.getEvaluations());
      assertEquals(1707, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-2118.045), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1059.0225), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
  }
}
