/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:19:19 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseSecantSolverEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double double0 = (-118.85526401);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-118.85526401), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      int int0 = 2259;
      double double1 = (-638.016645921424);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, (double) int0, double1);
      assertNotNull(harmonicOscillator0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = (-871.2671153082301);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double2, double0, (double) int0, allowedSolution0);
      assertEquals(2259.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2259, illinoisSolver0.getMaxEvaluations());
      assertEquals((-118.85526401), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-871.2671153082301), illinoisSolver0.getMin(), 0.01D);
      assertEquals(29, illinoisSolver0.getEvaluations());
      assertEquals((-118.85526401), illinoisSolver0.getMax(), 0.01D);
      assertEquals((-187.69230862012824), double3, 0.01D);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-118.9);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-118.9), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      
      int int0 = 1875;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, (double) int0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      double double1 = 0.27670244010437;
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, (double) int0, allowedSolution0);
      assertEquals(0.27670244010437, illinoisSolver0.getMin(), 0.01D);
      assertEquals(26, illinoisSolver0.getEvaluations());
      assertEquals(937.6383512200522, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-118.9), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1875, illinoisSolver0.getMaxEvaluations());
      assertEquals(1875.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1347.9085698249928, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = (-118.85526401);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-118.85526401), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 1886;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, (double) int0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, allowedSolution0);
      assertEquals((-118.85526401), illinoisSolver0.getMin(), 0.01D);
      assertEquals(883.5723679949999, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1886.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(31, illinoisSolver0.getEvaluations());
      assertEquals(1886, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-118.85526401), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1600.3668883935218, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-118.855);
      double double2 = 1708.2;
      double double3 = (-638.016645921424);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double1, double2, double3);
      assertNotNull(harmonicOscillator0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      int int0 = 535;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double2, (double) int0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(535.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1708.2, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double4 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, (double) int0, double3, allowedSolution0);
      assertEquals(535.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-118.855), pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(1708.2, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-638.016645921424), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(535, pegasusSolver0.getMaxEvaluations());
      assertEquals(535.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-118.855), double4, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertTrue(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertTrue(double4 == double1);
      assertFalse(double4 == double3);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-118.85526401);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals((-118.85526401), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      
      int int0 = 2259;
      double double1 = (-638.016645921424);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, (double) int0, double1);
      assertNotNull(harmonicOscillator0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, (double) int0, allowedSolution0);
      assertEquals(25, illinoisSolver0.getEvaluations());
      assertEquals(2259, illinoisSolver0.getMaxEvaluations());
      assertEquals((-118.85526401), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(810.4916770392881, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-638.016645921424), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2259.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(205.98860770163017, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 2309.2371871127875;
      double double1 = (-104.53586745916094);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double1);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2309.2371871127875, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-104.53586745916094), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 679;
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) expm1_0, double1, (double) int0, allowedSolution0);
      assertEquals((-104.53586745916094), illinoisSolver0.getMin(), 0.01D);
      assertEquals(287.2320662704195, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2309.2371871127875, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-104.53586745916094), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(679, illinoisSolver0.getMaxEvaluations());
      assertEquals(679.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-104.53586745916095), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-129.12201994306352);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double1);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals((-129.12201994306352), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      int int0 = 44;
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) tanh0, double1, (double) int0, double1, allowedSolution0);
      assertEquals((-129.12201994306352), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-129.12201994306352), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-129.12201994306352), illinoisSolver0.getMin(), 0.01D);
      assertEquals(44.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(13, illinoisSolver0.getEvaluations());
      assertEquals(44, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-6.058451752097371E-26), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 3248.1592269;
      double double1 = (-0.2499999701976776);
      double double2 = (-1.9063647584792298);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double1, double2, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(3248.1592269, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.9063647584792298), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-0.2499999701976776), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      int int0 = 186;
      double double3 = 0.166666650502;
      Sigmoid sigmoid0 = new Sigmoid(double3, double1);
      assertNotNull(sigmoid0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double4 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sigmoid0, double2, double0, allowedSolution0);
      assertEquals(3248.1592269, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.9063647584792298), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3248.1592269, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-1.9063647584792298), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1623.1264310707604, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(186, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-0.2499999701976776), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(9, regulaFalsiSolver0.getEvaluations());
      assertEquals((-0.5985190283459574), double4, 0.01D);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
  }

  @Test
  public void test08()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      double double0 = pegasusSolver0.getRelativeAccuracy();
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, double0, 0.01D);
      
      double double1 = (-104.0475303955219);
      assertFalse(double1 == double0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double1);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-104.0475303955219), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      int int0 = 2147483626;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) tanh0, double1, (double) int0, double1, allowedSolution0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(23, illinoisSolver0.getEvaluations());
      assertEquals((-104.0475303955219), illinoisSolver0.getMin(), 0.01D);
      assertEquals(2.147483626E9, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2147483626, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-104.0475303955219), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-104.0475303955219), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.035379938102578E-30, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-1.2087480745948513);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.2087480745948513), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      int int0 = 58;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, (double) int0);
      assertEquals(58.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(13, illinoisSolver0.getEvaluations());
      assertEquals((-1.2087480745948513), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(58, illinoisSolver0.getMaxEvaluations());
      assertEquals(28.395625962702574, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.2087480745948513), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(12.566370614359172, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  //@Test
  public void test10()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-118.855);
      double double2 = 1708.2;
      double double3 = (-638.016645921424);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double1, double2, double3);
      assertNotNull(harmonicOscillator0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 535;
      double double4 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, double2);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(854.1, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1708.2, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(535, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(23, regulaFalsiSolver0.getEvaluations());
      assertEquals(1202.1117746661826, double4, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 3248.1592269;
      double double1 = (-0.2499999701976776);
      double double2 = (-1.9063647584792298);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double1, double2, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(3248.1592269, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-1.9063647584792298), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-0.2499999701976776), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      int int0 = 186;
      double double3 = 0.166666650502;
      Sigmoid sigmoid0 = new Sigmoid(double3, double1);
      assertNotNull(sigmoid0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double4 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sigmoid0, double2, (double) int0, double0, allowedSolution0);
      assertEquals((-1.9063647584792298), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(186.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(3248.1592269, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.9063647584792298), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(186, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-0.2499999701976776), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(7, regulaFalsiSolver0.getEvaluations());
      assertEquals(3248.1592269, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-0.4910803665353507), double4, 0.01D);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 3069.522638025121;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(3069.522638025121, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3069.522638025121, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      int int0 = 69;
      double double1 = (-235.97649857068532);
      Sigmoid sigmoid0 = new Sigmoid(double0, double1);
      assertNotNull(sigmoid0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sigmoid0, double1, (double) int0, allowedSolution0);
      assertEquals((-235.97649857068532), pegasusSolver0.getMin(), 0.01D);
      assertEquals(3069.522638025121, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3069.522638025121, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(69.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(69, pegasusSolver0.getMaxEvaluations());
      assertEquals((-83.48824928534268), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(47.22801238025009, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-25.06910084019279);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0);
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-25.06910084019279), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-25.06910084019279), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      int int0 = Integer.MAX_VALUE;
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, (double) int0, double0, allowedSolution0);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-25.06910084019279), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-25.06910084019279), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2147483647, illinoisSolver0.getMaxEvaluations());
      assertEquals((-25.06910084019279), illinoisSolver0.getMin(), 0.01D);
      assertEquals(2.147483647E9, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-25.06910084019279), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(24, illinoisSolver0.getEvaluations());
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-371.1164);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertFalse(double0 == double1);
      
      int int0 = 589;
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) expm1_0, double1, double0, allowedSolution0);
      assertEquals((-185.5582), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-371.1164), illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(589, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      
      double double0 = pegasusSolver0.getRelativeAccuracy();
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, double0, 0.01D);
      
      double double1 = 0.0;
      assertFalse(double1 == double0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double1);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 5;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) tanh0, double1, (double) int0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(5.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(5, illinoisSolver0.getMaxEvaluations());
      assertEquals(2.5, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = (-118.85526401);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals((-118.85526401), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      int int0 = 1886;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, (double) int0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, allowedSolution0);
      assertEquals(1886.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(883.5723679949999, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1886, illinoisSolver0.getMaxEvaluations());
      assertEquals((-118.85526401), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-118.85526401), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(31, illinoisSolver0.getEvaluations());
      assertEquals(1600.3668883935218, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }
}
