/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:03:10 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class LineEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 0.0;
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      Vector3D vector3D1 = new Vector3D(double0, vector3D0, double0, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Line line0 = new Line(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(line0);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotNull(vector3D2);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertTrue(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      
      Vector3D vector3D1 = line0.intersection(line0);
      assertNull(vector3D1);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.PLUS_J;
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Line line0 = new Line(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(line0);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      double double0 = line0.distance(line0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      
      double double0 = line0.distance(line0);
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-4266.61);
      Vector3D vector3D0 = new Vector3D(double1, double0);
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.9469535308924625, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.9469535308924625, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.2683240496559267, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-0.3213705187634641), vector3D0.getY(), 0.01D);
      assertEquals((-0.3271764250604548), vector3D0.getAlpha(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Vector3D vector3D1 = new Vector3D(double0, vector3D0, double1, vector3D0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      assertEquals(1.820396089209999E7, vector3D1.getNormSq(), 0.01D);
      assertEquals(1371.1626690613834, vector3D1.getY(), 0.01D);
      assertEquals(2.8144162285293386, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(4266.609999999999, vector3D1.getNorm(), 0.01D);
      assertEquals(4040.281404441089, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-4040.281404441089), vector3D1.getX(), 0.01D);
      assertEquals(5411.444073502473, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.9469535308924625, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.9469535308924625, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.2683240496559267, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-0.3213705187634641), vector3D0.getY(), 0.01D);
      assertEquals((-0.3271764250604548), vector3D0.getAlpha(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(double0 == double1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double1 == double0);
      
      Line line0 = new Line(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(line0);
      assertEquals(1.820396089209999E7, vector3D1.getNormSq(), 0.01D);
      assertEquals(1371.1626690613834, vector3D1.getY(), 0.01D);
      assertEquals(2.8144162285293386, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(4266.609999999999, vector3D1.getNorm(), 0.01D);
      assertEquals(4040.281404441089, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-4040.281404441089), vector3D1.getX(), 0.01D);
      assertEquals(5411.444073502473, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.9469535308924625, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.9469535308924625, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.2683240496559267, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-0.3213705187634641), vector3D0.getY(), 0.01D);
      assertEquals((-0.3271764250604548), vector3D0.getAlpha(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(double0 == double1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double1 == double0);
      
      Vector3D vector3D2 = new Vector3D(double0, double1, double1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotNull(vector3D2);
      assertEquals(3.64079217842E7, vector3D2.getNormSq(), 0.01D);
      assertEquals((-0.7853981633974484), vector3D2.getDelta(), 0.01D);
      assertEquals(4266.61, vector3D2.getNormInf(), 0.01D);
      assertEquals((-4266.61), vector3D2.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D2.getAlpha(), 0.01D);
      assertEquals((-4266.61), vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals(6033.897727356671, vector3D2.getNorm(), 0.01D);
      assertEquals(8533.22, vector3D2.getNorm1(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(double1 == double0);
      
      Line line1 = new Line(vector3D2, vector3D0);
      assertNotSame(line1, line0);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotNull(line1);
      assertEquals(3.64079217842E7, vector3D2.getNormSq(), 0.01D);
      assertEquals((-0.7853981633974484), vector3D2.getDelta(), 0.01D);
      assertEquals(4266.61, vector3D2.getNormInf(), 0.01D);
      assertEquals((-4266.61), vector3D2.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D2.getAlpha(), 0.01D);
      assertEquals((-4266.61), vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals(6033.897727356671, vector3D2.getNorm(), 0.01D);
      assertEquals(8533.22, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.9469535308924625, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.9469535308924625, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.2683240496559267, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-0.3213705187634641), vector3D0.getY(), 0.01D);
      assertEquals((-0.3271764250604548), vector3D0.getAlpha(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(line1.equals((Object)line0));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(double1 == double0);
      
      boolean boolean0 = line0.isSimilarTo(line1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(line1, line0);
      assertNotSame(line0, line1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertFalse(boolean0);
      assertEquals(1.820396089209999E7, vector3D1.getNormSq(), 0.01D);
      assertEquals(1371.1626690613834, vector3D1.getY(), 0.01D);
      assertEquals(2.8144162285293386, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(4266.609999999999, vector3D1.getNorm(), 0.01D);
      assertEquals(4040.281404441089, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-4040.281404441089), vector3D1.getX(), 0.01D);
      assertEquals(5411.444073502473, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(3.64079217842E7, vector3D2.getNormSq(), 0.01D);
      assertEquals((-0.7853981633974484), vector3D2.getDelta(), 0.01D);
      assertEquals(4266.61, vector3D2.getNormInf(), 0.01D);
      assertEquals((-4266.61), vector3D2.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D2.getAlpha(), 0.01D);
      assertEquals((-4266.61), vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals(6033.897727356671, vector3D2.getNorm(), 0.01D);
      assertEquals(8533.22, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.9469535308924625, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.9469535308924625, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.2683240496559267, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-0.3213705187634641), vector3D0.getY(), 0.01D);
      assertEquals((-0.3271764250604548), vector3D0.getAlpha(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(double0 == double1);
      assertFalse(line1.equals((Object)line0));
      assertFalse(line0.equals((Object)line1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      
      boolean boolean0 = line0.isSimilarTo(line0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 0.0;
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      Vector3D vector3D1 = new Vector3D(double0, vector3D0, double0, vector3D0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Line line0 = new Line(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(line0);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      boolean boolean0 = line0.isSimilarTo(line0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertTrue(boolean0);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      
      Vector3D vector3D1 = line0.getOrigin();
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertTrue(vector3D0.equals((Object)vector3D1));
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      
      SubLine subLine0 = line0.wholeLine();
      assertNotNull(subLine0);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      Vector3D vector3D1 = line0.getDirection();
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertTrue(vector3D0.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      Vector1D vector1D0 = line0.toSubSpace((Vector<Euclidean3D>) vector3D0);
      assertNotNull(vector1D0);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector1D0.isInfinite());
      assertEquals(Double.NaN, vector1D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector1D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector1D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01D);
      assertEquals(true, vector1D0.isNaN());
      assertEquals(Double.NaN, vector1D0.getNorm(), 0.01D);
      
      Vector3D vector3D1 = line0.toSpace((Vector<Euclidean1D>) vector1D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector1D0.isInfinite());
      assertEquals(Double.NaN, vector1D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector1D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector1D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01D);
      assertEquals(true, vector1D0.isNaN());
      assertEquals(Double.NaN, vector1D0.getNorm(), 0.01D);
      assertTrue(vector3D0.equals((Object)vector3D1));
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      
      Line line1 = line0.revert();
      assertNotSame(line0, line1);
      assertNotSame(line1, line0);
      assertNotNull(line1);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertFalse(line0.equals((Object)line1));
      assertFalse(line1.equals((Object)line0));
  }
}
