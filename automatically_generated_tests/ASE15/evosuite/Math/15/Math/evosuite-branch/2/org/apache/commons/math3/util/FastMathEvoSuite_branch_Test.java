/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:47:12 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = 0.0F;
      float float2 = FastMath.copySign(float0, float1);
      assertEquals(1.0F, float2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.copySign(float0, float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = (-2732.044171117419);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.copySign(double1, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.abs((double) float0);
      assertEquals(0.0, double0, 0.01D);
      
      int int0 = (-1226);
      float float1 = FastMath.signum((float) int0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float1 == float0);
      
      double double1 = FastMath.hypot(double0, (double) float1);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.abs((double) float0);
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01D);
      
      float float1 = (-1.4E-45F);
      float float2 = FastMath.signum(float1);
      //  // Unstable assertion: assertEquals((-1.4E-45F), float2, 0.01F);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(float1 == float2);
      
      double double1 = FastMath.hypot((double) float2, double0);
      //  // Unstable assertion: assertEquals(1.401298464324817E-45, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(float1 == float2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = (-198.580954588);
      float float0 = (-1969.333F);
      float float1 = FastMath.nextAfter(float0, double0);
      //  // Unstable assertion: assertEquals((-1969.3329F), float1, 0.01F);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      
      double double2 = FastMath.log1p(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      
      double double3 = FastMath.hypot(double2, (double) float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.abs(long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      float float0 = 3.4028235E38F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.hypot((double) long1, (double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertTrue(long0 == long1);
      assertFalse(float0 == float1);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 7;
      int int1 = 1700;
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double1 = FastMath.hypot(double0, (double) int1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(int1 == int0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = 1.5874010519681994;
      double double1 = FastMath.max(double0, double0);
      assertEquals(1.5874010519681994, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.abs(long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      float float0 = 3.4028235E38F;
      double double0 = FastMath.max((double) float0, (double) long1);
      assertEquals(3.4028234663852886E38, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = 9154082963658192752L;
      int int0 = (-2098);
      double double0 = FastMath.max((double) int0, (double) long0);
      assertEquals(9.1540829636581929E18, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = (-3782.444);
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      float float0 = 0.0F;
      float float1 = FastMath.nextAfter(float0, double1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      float float2 = FastMath.max(float1, float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(float1 == float2);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float float0 = 565.1689F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(565.16895F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.max(float0, float1);
      assertEquals(565.16895F, float2, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float float0 = (-511.27487F);
      int int0 = (-3676);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      float float2 = FastMath.max(float1, float1);
      assertEquals(-0.0F, float2, 0.01F);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = (-3676);
      long long0 = (-4103L);
      long long1 = FastMath.round((double) long0);
      assertEquals((-4103L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      long long2 = FastMath.max((long) int0, long1);
      assertEquals((-3676L), long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = (-2098);
      int int1 = 0;
      int int2 = FastMath.max(int1, int0);
      assertEquals(0, int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = (-11.374964987658174);
      double double1 = FastMath.atan2(double0, double0);
      assertEquals((-2.356194490192345), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.min(double1, double1);
      assertEquals((-2.356194490192345), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = (-2445.9895302066);
      double double1 = FastMath.copySign(double0, double0);
      assertEquals((-2445.9895302066), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      float float0 = 1.0F;
      double double2 = FastMath.min((double) float0, double1);
      assertEquals((-2445.9895302066), double2, 0.01D);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 9154082963658192752L;
      int int0 = (-2098);
      float float0 = FastMath.signum((float) long0);
      assertEquals(1.0F, float0, 0.01F);
      
      double double0 = FastMath.min((double) int0, (double) float0);
      assertEquals((-2098.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      float float2 = FastMath.min(float0, float1);
      assertEquals(0.0F, float2, 0.01F);
      assertTrue(float1 == float2);
      assertTrue(float1 == float0);
      assertTrue(float2 == float0);
      assertTrue(float2 == float1);
      assertTrue(float0 == float2);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 104;
      float float1 = FastMath.min(float0, (float) int0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 1357;
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals(1357L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = (-3349);
      int int1 = 1700;
      int int2 = FastMath.min(int1, int0);
      assertEquals((-3349), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = 1.5;
      double double1 = FastMath.rint(double0);
      assertEquals(2.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = 216.94887250467;
      double double1 = FastMath.rint(double0);
      assertEquals(217.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = (-1.4E-45F);
      double double0 = FastMath.rint((double) float0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = (-3.9986783938944604E-8);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = (-3213.8749222848);
      double double1 = FastMath.atan(double0);
      assertEquals((-1.5704851759281362), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.ceil(double1);
      assertEquals((-1.0), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = 9223372036854775807L;
      int int0 = (-141);
      float float0 = FastMath.scalb((float) long0, int0);
      assertEquals(3.3087225E-24F, float0, 0.01F);
      
      long long1 = FastMath.round((double) float0);
      assertEquals(0L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      int int1 = FastMath.getExponent((double) long1);
      assertEquals((-1023), int1);
      assertFalse(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.rint((double) int1);
      assertEquals((-1023.0), double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = (-3.791840683760427E173);
      double double1 = FastMath.rint(double0);
      assertEquals((-3.791840683760427E173), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      int int1 = (-22);
      double double0 = FastMath.pow((double) int0, int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      double double1 = FastMath.ceil(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = (-3782.444);
      double double1 = 3.5127708120698784E48;
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      float float0 = 0.0F;
      float float1 = FastMath.nextAfter(float0, double2);
      assertEquals(1.4E-45F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(float1 == float0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = (-3782.444);
      float float0 = 0.0F;
      float float1 = FastMath.nextAfter(float0, double0);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextUp(float0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = 2501.0F;
      int int0 = 1623;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.nextAfter(float1, (double) int0);
      assertEquals(3.4028235E38F, float2, 0.01F);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = (-3557.1615725);
      int int0 = FastMath.getExponent(double0);
      assertEquals(11, int0);
      
      float float0 = FastMath.nextAfter((float) int0, (double) int0);
      assertEquals(11.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = (-3.7646381826067834E-8);
      double double1 = FastMath.sqrt(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = 1.0F;
      float float1 = FastMath.nextAfter(float0, double1);
      assertEquals(Float.NaN, float1, 0.01F);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = (-3557.1615725);
      double double1 = FastMath.ulp(double0);
      assertEquals(4.547473508864641E-13, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.nextUp(double1);
      assertEquals(4.547473508864642E-13, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = 490.25427F;
      float float1 = FastMath.ulp(float0);
      assertEquals(3.0517578E-5F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.nextAfter((double) float0, (double) float1);
      assertEquals(490.25427246093744, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = (-2022);
      int int1 = 0;
      double double0 = FastMath.nextAfter((double) int1, (double) int0);
      assertEquals((-4.9E-324), double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = (-1296L);
      double double0 = FastMath.ulp((double) long0);
      assertEquals(2.2737367544323206E-13, double0, 0.01D);
      
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.copySign(float0, (float) long0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double1 = FastMath.nextAfter((double) float1, double0);
      assertEquals((-1.7976931348623157E308), double1, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 7;
      int int1 = 1700;
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double1 = FastMath.nextAfter(double0, (double) int0);
      assertEquals(1.7976931348623157E308, double1, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = (-3349);
      double double0 = FastMath.asin((double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.nextAfter((double) int0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = (-3083.8);
      double double1 = FastMath.log1p(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.nextUp(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 7;
      int int1 = 200;
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = (-0.29214388F);
      int int0 = 128;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals((-9.941141E37F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = (-436.1F);
      int int0 = (-240);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = 1972.36F;
      int int0 = (-145);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(4.4222E-41F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = (-1L);
      long long1 = FastMath.abs(long0);
      assertEquals(1L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      
      int int0 = (-145);
      float float0 = FastMath.scalb((float) long1, int0);
      assertEquals(2.24E-44F, float0, 0.01F);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 104;
      int int1 = FastMath.max(int0, int0);
      assertEquals(104, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = (-246);
      assertFalse(int2 == int1);
      
      float float0 = FastMath.scalb((float) int1, int2);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = 490.25427F;
      float float1 = (-4507.0F);
      float float2 = FastMath.ulp(float1);
      assertEquals(4.8828125E-4F, float2, 0.01F);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      
      float float3 = FastMath.nextAfter(float0, (double) float2);
      assertEquals(490.25424F, float3, 0.01F);
      assertFalse(float1 == float3);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float3);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float2 == float3);
      assertFalse(float3 == float2);
      assertFalse(float3 == float0);
      assertFalse(float3 == float1);
      
      int int0 = FastMath.round(float3);
      assertEquals(490, int0);
      assertFalse(float1 == float3);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float3);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float2 == float3);
      assertFalse(float3 == float2);
      assertFalse(float3 == float0);
      assertFalse(float3 == float1);
      
      float float4 = FastMath.scalb(float1, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float4, 0.01F);
      assertFalse(float1 == float3);
      assertFalse(float1 == float2);
      assertFalse(float1 == float4);
      assertFalse(float1 == float0);
      assertFalse(float0 == float3);
      assertFalse(float0 == float4);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float4 == float2);
      assertFalse(float4 == float1);
      assertFalse(float4 == float3);
      assertFalse(float4 == float0);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float2 == float4);
      assertFalse(float2 == float3);
      assertFalse(float3 == float2);
      assertFalse(float3 == float0);
      assertFalse(float3 == float1);
      assertFalse(float3 == float4);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = (-3349);
      int int1 = 200;
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 1127;
      float float0 = 0.0F;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      int int0 = (-515);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = (-3613);
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 1357;
      int int1 = FastMath.getExponent((float) int0);
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(1389568.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = 9.755392680573412E-9;
      int int0 = 1050;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(1.1769017341409347E308, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = (-21.329893892496518);
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-1469);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = (-1623.31832);
      int int0 = (-1059);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals((-2.6280782E-316), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = 6.123233995736766E-17;
      double double1 = FastMath.sinh(double0);
      assertEquals(6.123233995736766E-17, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      int int0 = (-1469);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = 1455.13;
      double double1 = FastMath.asinh(double0);
      assertEquals(7.975997821322488, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-1023);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(8.87359212386753E-308, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = (-1398.3782347955996);
      int int0 = Integer.MAX_VALUE;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = 5.33839690397E-312;
      int int0 = Integer.MAX_VALUE;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = (-3349);
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = (-3349);
      float float0 = FastMath.abs((float) int0);
      assertEquals(3349.0F, float0, 0.01F);
      
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = (-3349);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = 0.0;
      double double1 = FastMath.hypot(double0, (double) float1);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = 5.744446753652847E185;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-2702);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.abs(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      int int0 = Integer.MIN_VALUE;
      double double0 = FastMath.scalb((double) float1, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = (-1023);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(1.7475689218952297E-308, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = 3.102559332875688E297;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.ulp(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.ulp(float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.toDegrees(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.toDegrees((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.toRadians(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.toRadians((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = (-11.374964987658174);
      double double1 = FastMath.atan2(double0, double0);
      assertEquals((-2.356194490192345), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals((-0.041123351671205656), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.nextAfter((double) float0, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.toRadians(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float float0 = 2501.0F;
      int int0 = 1623;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.cbrt((double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      float float0 = 0.0F;
      double double2 = FastMath.nextAfter((double) float0, double1);
      //  // Unstable assertion: assertEquals(4.9E-324, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      
      double double3 = FastMath.cbrt(double2);
      //  // Unstable assertion: assertEquals(1.7031839360032603E-108, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = 705L;
      long long1 = FastMath.abs(long0);
      assertEquals(705L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int0 = (-2098);
      double double0 = FastMath.pow((double) long1, int0);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double1 = FastMath.cbrt(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(long1 == long0);
      assertTrue(double1 == double0);
      assertTrue(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.cbrt(double0);
      assertEquals((-0.0029570803237889275), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = 0.14285714285714285;
      double double1 = FastMath.acos(double0);
      assertEquals(1.4274487578895312, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.nextUp((double) float0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = (-3.7646381826067834E-8);
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963644412783, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = 3.5127708120698784E48;
      double double1 = (-1.0);
      double double2 = FastMath.pow(double1, double0);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = FastMath.acos(double2);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float float0 = (-9.486687F);
      double double0 = FastMath.signum((double) float0);
      assertEquals((-1.0), double0, 0.01D);
      
      double double1 = FastMath.acos(double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-1361);
      int int1 = FastMath.abs(int0);
      assertEquals(1361, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = FastMath.acos((double) int1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = 0.9808930158615112;
      double double1 = FastMath.asin(double0);
      assertEquals(1.3749997884240173, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.asin((double) float0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.asin((double) float0);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = FastMath.max(long0, long0);
      assertEquals((-9223372036854775808L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.asin((double) long1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.asin((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = (-1969.333F);
      double double2 = FastMath.atan2((double) float0, double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = 5.0614674548127384E-8;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.log10((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      float float1 = 1560.5115F;
      double double1 = FastMath.atan2((double) float1, double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.log10((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      float float1 = (-2152.7834F);
      double double1 = FastMath.atan2((double) float1, double0);
      assertEquals((-3.141592653589793), double1, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = 1398.2248893498456;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = (-334.9583738535102);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals(-0.0, double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float float0 = 1.0F;
      long long0 = 705L;
      int int0 = 1148;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.atan2((double) long0, (double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.log10((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2(double0, double0);
      assertEquals((-2.356194490192345), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = 2204.45533;
      double double1 = FastMath.log(double0, (double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.ulp((double) float0);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double4 = FastMath.atan2(double1, double3);
      assertEquals((-0.7853981633974483), double4, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.tan((double) float0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.log10((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double1, double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      
      double double3 = FastMath.atan2(double2, double0);
      assertEquals((-1.5707963267948966), double3, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = 1812.94;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = (-2936.503F);
      double double2 = FastMath.atan2(double1, (double) float0);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = 1525.96578;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double1, double1);
      assertEquals(0.7853981633974483, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float float0 = 3.4028235E38F;
      float float1 = FastMath.signum(float0);
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      int int0 = (-2022);
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      
      double double0 = FastMath.atan2((double) float2, (double) int0);
      assertEquals(3.141592653589793, double0, 0.01D);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = 1460L;
      double double0 = FastMath.exp((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = 0.0;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = 0.0F;
      long long0 = (-9223372036854775808L);
      long long1 = FastMath.max(long0, long0);
      assertEquals((-9223372036854775808L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double0 = FastMath.acosh((double) long1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double1 = FastMath.atan2((double) float0, double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = FastMath.atan2((double) float0, (double) float0);
      assertEquals((-3.141592653589793), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = 5.33839690397E-312;
      double double1 = (-1398.3782347955996);
      double double2 = FastMath.atan2(double1, double0);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = 5.33839690397E-312;
      int int0 = Integer.MAX_VALUE;
      double double1 = FastMath.atan2((double) int0, double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = (-1805.371309188);
      double double1 = (-4.9E-324);
      double double2 = FastMath.atan2(double1, double0);
      assertEquals((-3.141592653589793), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = 9223372036854775807L;
      double double0 = FastMath.tan((double) long0);
      assertEquals(84.73931296875567, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.nextAfter((double) float0, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.tan(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float float0 = (-511.27487F);
      int int0 = (-3676);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.tan((double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float float0 = (-2542.2876F);
      double double0 = FastMath.cos((double) float0);
      assertEquals((-0.739047565469261), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float float0 = -0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      double double0 = FastMath.cos((double) int0);
      assertEquals(0.23235910202965793, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.cos((double) float0);
      assertEquals(0.5403023058681398, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.cos(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.sin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float float0 = (-511.27487F);
      int int0 = (-3676);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.sin((double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.sin((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = 3.102559332875688E297;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.23729312132483957), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = (-2.0406580894051073E243);
      double double1 = FastMath.sin(double0);
      assertEquals((-0.3841721246800964), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = 2.2860509143963117E-8;
      int int0 = (-22);
      double double1 = FastMath.pow(double0, int0);
      assertEquals(1.259244982845527E168, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      assertEquals(0.8576791741465373, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = (-4.768909872963015E232);
      double double1 = FastMath.cos(double0);
      assertEquals(0.8109757466738373, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      long long0 = FastMath.abs((long) int0);
      assertEquals(2147483647L, long0);
      
      double double0 = FastMath.sin((double) long0);
      assertEquals((-0.7249165551445564), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = 2.1836166619192508E256;
      double double1 = FastMath.sin(double0);
      assertEquals(0.38879206265120164, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      double double1 = FastMath.cos(double0);
      assertEquals((-0.9999876894265599), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = 1L;
      double double0 = FastMath.tan((double) long0);
      assertEquals(1.5574077246549023, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = (-411.04250159514);
      double double1 = FastMath.tan(double0);
      assertEquals(0.5542966875247372, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.sin((double) float0);
      assertEquals(0.8414709848078965, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 2510;
      double double0 = FastMath.pow((double) int0, int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = 0L;
      int int0 = 0;
      double double0 = FastMath.pow((double) long0, int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = 8.0E298;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = 1448.188425;
      double double1 = (-1871.1);
      double double2 = FastMath.rint(double0);
      assertEquals(1448.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = (-2445.9895302066);
      double double1 = FastMath.copySign(double0, double0);
      assertEquals((-2445.9895302066), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      int int0 = (-2098);
      double double2 = FastMath.pow((double) int0, double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = (-8.0E298);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = 705L;
      long long1 = FastMath.abs(long0);
      assertEquals(705L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int0 = (-2098);
      double double0 = FastMath.pow((double) int0, (double) long1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = 2204.45533;
      double double1 = FastMath.log(double0, (double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float float0 = 993.40234F;
      float float1 = FastMath.ulp(float0);
      assertEquals(6.1035156E-5F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow((double) float1, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = (-1962.526785390983);
      int int0 = 1700;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = (-1242.0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = (-1962.526785390983);
      int int0 = 1700;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int1 = (-7);
      double double2 = FastMath.pow(double1, (double) int1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = 2438.086744329;
      int int0 = FastMath.getExponent(double0);
      assertEquals(11, int0);
      
      double double1 = FastMath.log(double0, (double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, (double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = (-3349);
      int int1 = 1700;
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double1 = FastMath.pow(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = (-5.7618793749770706E-8);
      double double1 = 5.744446753652847E185;
      double double2 = FastMath.pow(double1, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      double double3 = FastMath.tanh(double0);
      assertEquals((-5.761879374977064E-8), double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      
      double double4 = FastMath.pow(double3, double2);
      assertEquals(0.0, double4, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = (-5.7618793749770706E-8);
      double double1 = 5.744446753652847E185;
      double double2 = FastMath.pow(double1, double1);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      
      double double3 = FastMath.sqrt(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      
      double double4 = FastMath.pow(double3, double2);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertTrue(double4 == double2);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertTrue(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = 5.744446753652847E185;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tanh(double0);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      assertEquals(Double.NaN, double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 7;
      int int1 = 1700;
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double1 = (-203.626967);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(int1 == int0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 7;
      int int1 = 1700;
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double1 = FastMath.pow(double0, (double) int1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 892;
      int int1 = FastMath.max(int0, int0);
      assertEquals(892, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      float float0 = -0.0F;
      double double0 = FastMath.pow((double) float0, (double) int1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = (-3349);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      int int1 = (-1884);
      int int2 = FastMath.min(int1, int1);
      assertEquals((-1884), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.pow((double) float1, (double) int2);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = (-3349);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.pow((double) float1, (double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = (-3349);
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(-0.0F, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      
      float float2 = 3614.6F;
      //  // Unstable assertion: assertFalse(float2 == float1);
      
      double double0 = FastMath.asin((double) float2);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      
      double double1 = FastMath.pow((double) float1, double0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = 0.0;
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = (-198.580954588);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float float0 = 1193.01F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(1193.0101F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = 0.0;
      double double1 = FastMath.pow((double) float1, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.log1p(double0);
      assertEquals((-2.5857668901789408E-8), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float float0 = 630.0F;
      double double0 = FastMath.sinh((double) float0);
      assertEquals(2.016014277073179E273, double0, 0.01D);
      
      double double1 = FastMath.pow((double) float0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long long0 = (-1L);
      long long1 = FastMath.abs(long0);
      assertEquals(1L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      
      long long2 = FastMath.min(long1, long0);
      assertEquals((-1L), long2);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long0 == long1);
      assertTrue(long0 == long2);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      
      double double0 = FastMath.log1p((double) long2);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long0 == long1);
      assertTrue(long0 == long2);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float float0 = 2838.98F;
      float float1 = 0.0F;
      float float2 = 1.0F;
      float float3 = FastMath.max(float2, float1);
      assertEquals(1.0F, float3, 0.01F);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertTrue(float2 == float3);
      assertFalse(float1 == float3);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float3 == float0);
      assertTrue(float3 == float2);
      assertFalse(float3 == float1);
      
      double double0 = FastMath.log((double) float0, (double) float3);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertTrue(float2 == float3);
      assertFalse(float1 == float3);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float3);
      assertFalse(float0 == float1);
      assertFalse(float3 == float0);
      assertTrue(float3 == float2);
      assertFalse(float3 == float1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = 1483.2829888146891;
      double double1 = FastMath.tan(double0);
      assertEquals(0.4846054801817878, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(0.39514906704690644, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float float0 = 2838.98F;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(2838.98F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      float float2 = 0.0F;
      assertFalse(float2 == float1);
      
      float float3 = FastMath.copySign(float2, float1);
      assertEquals(0.0F, float3, 0.01F);
      assertFalse(float0 == float3);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float3 == float1);
      assertTrue(float3 == float2);
      assertFalse(float3 == float0);
      assertFalse(float2 == float1);
      assertTrue(float2 == float3);
      assertFalse(float2 == float0);
      assertTrue(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float3);
      
      float float4 = 1.0F;
      assertFalse(float4 == float1);
      assertFalse(float4 == float3);
      
      float float5 = FastMath.max(float4, float3);
      assertEquals(1.0F, float5, 0.01F);
      assertFalse(float0 == float5);
      assertFalse(float0 == float3);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float4);
      assertFalse(float3 == float4);
      assertFalse(float3 == float1);
      assertFalse(float3 == float5);
      assertTrue(float3 == float2);
      assertFalse(float3 == float0);
      assertFalse(float2 == float1);
      assertFalse(float2 == float5);
      assertFalse(float2 == float4);
      assertTrue(float2 == float3);
      assertFalse(float2 == float0);
      assertFalse(float5 == float0);
      assertFalse(float5 == float3);
      assertFalse(float5 == float1);
      assertFalse(float5 == float2);
      assertTrue(float5 == float4);
      assertTrue(float1 == float0);
      assertFalse(float1 == float5);
      assertFalse(float1 == float2);
      assertFalse(float1 == float4);
      assertFalse(float1 == float3);
      assertFalse(float4 == float1);
      assertTrue(float4 == float5);
      assertFalse(float4 == float0);
      assertFalse(float4 == float3);
      assertFalse(float4 == float2);
      
      double double0 = FastMath.asinh((double) float5);
      assertEquals(0.8813735870195429, double0, 0.01D);
      assertFalse(float0 == float5);
      assertFalse(float0 == float3);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float4);
      assertFalse(float3 == float4);
      assertFalse(float3 == float1);
      assertFalse(float3 == float5);
      assertTrue(float3 == float2);
      assertFalse(float3 == float0);
      assertFalse(float2 == float1);
      assertFalse(float2 == float5);
      assertFalse(float2 == float4);
      assertTrue(float2 == float3);
      assertFalse(float2 == float0);
      assertFalse(float5 == float0);
      assertFalse(float5 == float3);
      assertFalse(float5 == float1);
      assertFalse(float5 == float2);
      assertTrue(float5 == float4);
      assertTrue(float1 == float0);
      assertFalse(float1 == float5);
      assertFalse(float1 == float2);
      assertFalse(float1 == float4);
      assertFalse(float1 == float3);
      assertFalse(float4 == float1);
      assertTrue(float4 == float5);
      assertFalse(float4 == float0);
      assertFalse(float4 == float3);
      assertFalse(float4 == float2);
      
      double double1 = FastMath.log((double) float0, double0);
      assertEquals((-0.015881086179949447), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(float0 == float5);
      assertFalse(float0 == float3);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float4);
      assertFalse(double0 == double1);
      assertFalse(float3 == float4);
      assertFalse(float3 == float1);
      assertFalse(float3 == float5);
      assertTrue(float3 == float2);
      assertFalse(float3 == float0);
      assertFalse(float2 == float1);
      assertFalse(float2 == float5);
      assertFalse(float2 == float4);
      assertTrue(float2 == float3);
      assertFalse(float2 == float0);
      assertFalse(float5 == float0);
      assertFalse(float5 == float3);
      assertFalse(float5 == float1);
      assertFalse(float5 == float2);
      assertTrue(float5 == float4);
      assertTrue(float1 == float0);
      assertFalse(float1 == float5);
      assertFalse(float1 == float2);
      assertFalse(float1 == float4);
      assertFalse(float1 == float3);
      assertFalse(float4 == float1);
      assertTrue(float4 == float5);
      assertFalse(float4 == float0);
      assertFalse(float4 == float3);
      assertFalse(float4 == float2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = 5.33839690397E-312;
      int int0 = Integer.MAX_VALUE;
      double double1 = FastMath.log((double) int0, double0);
      assertEquals((-33.35565029209679), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.nextAfter((double) float0, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.log10(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = (-5.071761314397018E-8);
      double double1 = FastMath.expm1(double0);
      assertEquals((-5.071761185783206E-8), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.expm1((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long long0 = 705L;
      long long1 = FastMath.abs(long0);
      assertEquals(705L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double0 = FastMath.toDegrees((double) long1);
      assertEquals(40393.52455672304, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(long0 == long1);
      assertFalse(double1 == double0);
      assertTrue(long1 == long0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = 2789.38;
      double double1 = FastMath.ulp(double0);
      assertEquals(4.547473508864641E-13, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 25.36589139;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(8.4788864474E-314, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float float0 = (-2936.503F);
      double double0 = FastMath.expm1((double) float0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = (-141);
      double double0 = FastMath.expm1((double) int0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.signum((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float float0 = (-0.64234626F);
      float float1 = FastMath.ulp(float0);
      assertEquals(5.9604645E-8F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.signum((double) float1);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = 0.008333333333329196;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.008333526242601714, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = 0.087;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.08722050326312049, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double double0 = 0.09090909090909091;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.09116077839697731, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double double0 = (-198.580954588);
      double double1 = FastMath.atanh(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.atanh(double0);
      assertEquals((-2.58576685674799E-8), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.035992228531467885, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double double0 = 0.087;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.08689062164014465, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double double0 = 0.14285714285714285;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.14237564316780438, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float float0 = 86.918F;
      float float1 = FastMath.ulp(float0);
      assertEquals(7.6293945E-6F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.asinh((double) float1);
      assertEquals(7.629394531175985E-6, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double double0 = (-1.3626004272355632);
      double double1 = FastMath.asinh(double0);
      assertEquals((-1.1160500282794084), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.tanh((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.tanh((double) float0);
      assertEquals(0.7615941559557649, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double double0 = (-6.456588023278983E-253);
      double double1 = FastMath.sinh(double0);
      assertEquals((-6.456588023278983E-253), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.sinh((double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double double0 = (-252.97603173521);
      double double1 = FastMath.sinh(double0);
      assertEquals((-3.673369711423941E109), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      float float0 = 1.0F;
      long long0 = 705L;
      long long1 = FastMath.abs(long0);
      assertEquals(705L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      float float1 = FastMath.min((float) long1, float0);
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.sinh((double) float1);
      assertEquals(1.1752011936438014, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      float float0 = 2501.0F;
      int int0 = 1623;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.sinh((double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.cosh((double) float0);
      assertEquals(1.5430806348152437, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double double0 = (-411.04250159514);
      double double1 = FastMath.cosh(double0);
      assertEquals(1.6310237116520355E178, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double double0 = (-3874.9697);
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      float float0 = 490.25427F;
      double double0 = FastMath.cosh((double) float0);
      assertEquals(4.108613261610913E212, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      float float0 = (-0.64234626F);
      float float1 = FastMath.signum(float0);
      //  // Unstable assertion: assertEquals((-1.0F), float1, 0.01F);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      
      double double0 = FastMath.log10((double) float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      
      double double1 = FastMath.cosh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double double0 = (-3557.1615725);
      int int0 = FastMath.getExponent(double0);
      assertEquals(11, int0);
      
      double double1 = FastMath.cosh((double) int0);
      assertEquals(29937.07086594976, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double double0 = 3.6637673548790206E194;
      double double1 = (-4.9E-324);
      double double2 = FastMath.atan2(double1, double0);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double double0 = (-3557.1615725);
      double double1 = FastMath.nextUp(double0);
      assertEquals((-3557.1615724999997), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.atan(double0);
      assertEquals((-2.5857668567479886E-8), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double double0 = (-3.791840683760427E173);
      double double1 = FastMath.acosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double double0 = (-11.374964987658174);
      long long0 = FastMath.round(double0);
      assertEquals((-11L), long0);
      
      double double1 = FastMath.sin((double) long0);
      assertEquals(0.9999902065507035, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }
}
