/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:34:29 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Atanh;
import org.apache.commons.math3.analysis.function.Floor;
import org.apache.commons.math3.analysis.function.Log1p;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BrentOptimizerEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 1518;
      double double0 = 0.479;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      
      double[] doubleArray0 = new double[21];
      doubleArray0[4] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.479, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(4, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.negate();
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.479, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertNotNull(polynomialFunction1);
      assertEquals(4, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      
      doubleArray0[6] = (double) int0;
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = (-5650.138361294268);
      doubleArray0[0] = double1;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) polynomialFunction1, goalType0, doubleArray0[0], (double) int0, doubleArray0[6]);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertArrayEquals(new double[] {(-5650.138361294268), 0.0, 0.0, 0.0, 0.479, 0.0, 1518.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double0 == double1);
      assertNotNull(univariatePointValuePair0);
      assertEquals(4, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertEquals((-5650.138361294268), brentOptimizer0.getMin(), 0.01D);
      assertEquals(1518, brentOptimizer0.getMaxEvaluations());
      assertEquals(13, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(1518.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1518.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0026459221509076425, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals((-2.347706280769023E-11), univariatePointValuePair0.getValue(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1518;
      double double0 = 0.479;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      
      double[] doubleArray0 = new double[21];
      doubleArray0[4] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.479, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(4, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.negate();
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.479, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertNotNull(polynomialFunction1);
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(4, polynomialFunction0.degree());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) polynomialFunction1, goalType0, doubleArray0[0], (double) int0, doubleArray0[6]);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.479, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertNotNull(univariatePointValuePair0);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1518.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(10, brentOptimizer0.getEvaluations());
      assertEquals(1518, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(-0.0, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(4, polynomialFunction0.degree());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1518;
      double double0 = 0.479;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      
      double[] doubleArray0 = new double[21];
      doubleArray0[6] = (double) int0;
      Log1p log1p0 = new Log1p();
      assertNotNull(log1p0);
      
      UnivariateFunction univariateFunction0 = log1p0.derivative();
      assertNotNull(univariateFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = (-5650.138361294268);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, univariateFunction0, goalType0, double1, doubleArray0[6], double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1518.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(univariatePointValuePair0);
      assertEquals(0.479, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1518.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1518, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(18, brentOptimizer0.getEvaluations());
      assertEquals((-5650.138361294268), brentOptimizer0.getMin(), 0.01D);
      assertEquals((-0.4989538820610945), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(1.9958242648672389, univariatePointValuePair0.getValue(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 43.11161;
      double double1 = 1.019759974606512;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double1, double1);
      assertFalse(double1 == double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      
      int int0 = 783;
      Floor floor0 = new Floor();
      assertNotNull(floor0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) floor0, goalType0, double0, (double) int0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(univariatePointValuePair0);
      assertEquals(43.11161, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(43.0, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(4, brentOptimizer0.getEvaluations());
      assertEquals(783.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(43.11161, brentOptimizer0.getMin(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(43.11161, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(783, brentOptimizer0.getMaxEvaluations());
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 43.11161;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = 783;
      Floor floor0 = new Floor();
      assertNotNull(floor0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) floor0, goalType0, double0, (double) int0, double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(43.11161, brentOptimizer0.getMin(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(783, brentOptimizer0.getMaxEvaluations());
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(43.11161, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(783.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(43.0, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(43.11161, univariatePointValuePair0.getPoint(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 248.11924632225;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = 345;
      Atanh atanh0 = new Atanh();
      assertNotNull(atanh0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) atanh0, goalType0, double0, double0, double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(345, brentOptimizer0.getMaxEvaluations());
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(248.11924632225, brentOptimizer0.getMin(), 0.01D);
      assertEquals(248.11924632225, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(248.11924632225, brentOptimizer0.getMax(), 0.01D);
      assertEquals(248.11924632225, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(Double.NaN, univariatePointValuePair0.getValue(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 1052.2621566332073;
      double double1 = 0.0;
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = 0.0;
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (0)
         //
      }
  }
}
