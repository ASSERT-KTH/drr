/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:43:50 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Atanh;
import org.apache.commons.math3.analysis.function.Exp;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BrentOptimizerEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 0.097;
      double double1 = (-922.7160861408751);
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertFalse(double0 == double1);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 2248;
      Exp exp0 = new Exp();
      assertNotNull(exp0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) exp0, goalType0, double1, (double) int0, (double) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(2248.0, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(2248.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals((-922.7160861408751), brentOptimizer0.getMin(), 0.01D);
      assertEquals(2248.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(2248, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(6, brentOptimizer0.getEvaluations());
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 5.0;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNotNull(brentOptimizer0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      int int0 = (-1);
      int int1 = 95;
      Atanh atanh0 = new Atanh();
      assertNotNull(atanh0);
      
      UnivariateFunction univariateFunction0 = atanh0.derivative();
      assertNotNull(univariateFunction0);
      
      double double1 = (-248.3560637536);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int1, univariateFunction0, goalType0, double1, (double) int1, (double) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(95.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals((-248.3560637536), brentOptimizer0.getMin(), 0.01D);
      assertEquals(95, brentOptimizer0.getMaxEvaluations());
      assertEquals(6, brentOptimizer0.getEvaluations());
      assertEquals((-1.0), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals((-1.0), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, univariatePointValuePair0.getValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 5.0;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      //  // Unstable assertion: assertNull(brentOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      //  // Unstable assertion: assertNotNull(brentOptimizer0);
      
      int int0 = 283;
      GoalType goalType0 = GoalType.MAXIMIZE;
      int int1 = (-1);
      Atanh atanh0 = new Atanh();
      //  // Unstable assertion: assertNotNull(atanh0);
      
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) atanh0, goalType0, double0, (double) int0, (double) int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(107.47834719502984, univariatePointValuePair0.getPoint(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, univariatePointValuePair0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(283.0, brentOptimizer0.getMax(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), brentOptimizer0.getStartValue(), 0.01D);
      //  // Unstable assertion: assertEquals(283, brentOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(5.0, brentOptimizer0.getMin(), 0.01D);
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(4, brentOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 5.0;
      double double1 = 1126.494;
      double double2 = 0.5;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double2, double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNotNull(brentOptimizer0);
      
      int int0 = 283;
      double[] doubleArray0 = new double[10];
      doubleArray0[2] = double1;
      doubleArray0[4] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1126.494, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {0.0, 0.0, 1126.494, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction1.degree());
      assertEquals(4, polynomialFunction0.degree());
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotNull(polynomialFunction1);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double3 = (-2017.0092569659753);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) polynomialFunction1, goalType0, doubleArray0[4], double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertArrayEquals(new double[] {0.0, 0.0, 1126.494, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(283, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(5.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(13, brentOptimizer0.getEvaluations());
      assertEquals((-2017.0092569659753), brentOptimizer0.getMax(), 0.01D);
      assertEquals((-1006.0046284829876), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(3, polynomialFunction1.degree());
      assertEquals(3.454444901725692, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(8607.273828303267, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(4, polynomialFunction0.degree());
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 0.097;
      double double1 = (-918.4899013560779);
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertNotNull(brentOptimizer0);
      
      int int0 = 528;
      Exp exp0 = new Exp();
      assertNotNull(exp0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) exp0, goalType0, double1, double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-918.4899013560779), brentOptimizer0.getMin(), 0.01D);
      assertEquals(6, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.097, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(528, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.097, brentOptimizer0.getMax(), 0.01D);
      assertEquals((-773.1243761184915), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(0.0, univariatePointValuePair0.getValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 0.097;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 528;
      Exp exp0 = new Exp();
      assertNotNull(exp0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) exp0, goalType0, double0, double0, double0);
      assertEquals(1.1018603736210106, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(0.097, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(528, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.097, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.097, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.097, brentOptimizer0.getMin(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 5.0;
      int int0 = (-1);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = 0.097;
      double double1 = (-918.4899013560779);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double1, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -918.49 is smaller than the minimum (0)
         //
      }
  }
}
