/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:00:08 GMT 2014
 */

package org.apache.commons.math3.exception.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class LocalizedFormatsEvoSuite_branch_Test   {

  //@Test
  public void test0()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.LCM_OVERFLOW_32_BITS;
      assertEquals(LocalizedFormats.LCM_OVERFLOW_32_BITS, localizedFormats0);
      assertEquals("overflow: lcm({0}, {1}) is 2^31", localizedFormats0.getSourceString());
      assertEquals("LCM_OVERFLOW_32_BITS", localizedFormats0.toString());
      assertEquals("LCM_OVERFLOW_32_BITS", localizedFormats0.name());
      assertEquals(106, localizedFormats0.ordinal());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = localizedFormats0.getLocalizedString(locale0);
      assertEquals("d\u00E9passement de capacit\u00E9 : le MCM de {0} et {1} vaut 2^31", string0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("overflow: lcm({0}, {1}) is 2^31", localizedFormats0.getSourceString());
      assertEquals("LCM_OVERFLOW_32_BITS", localizedFormats0.toString());
      assertEquals("LCM_OVERFLOW_32_BITS", localizedFormats0.name());
      assertEquals(106, localizedFormats0.ordinal());
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.POLYNOMIAL;
      assertEquals(LocalizedFormats.POLYNOMIAL, localizedFormats0);
      assertEquals(246, localizedFormats0.ordinal());
      assertEquals("polynomial", localizedFormats0.getSourceString());
      assertEquals("POLYNOMIAL", localizedFormats0.toString());
      assertEquals("POLYNOMIAL", localizedFormats0.name());
      
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = localizedFormats0.getLocalizedString(locale0);
      assertEquals("polynomial", string0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals(246, localizedFormats0.ordinal());
      assertEquals("polynomial", localizedFormats0.getSourceString());
      assertEquals("POLYNOMIAL", localizedFormats0.toString());
      assertEquals("POLYNOMIAL", localizedFormats0.name());
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.LCM_OVERFLOW_32_BITS;
      assertEquals(LocalizedFormats.LCM_OVERFLOW_32_BITS, localizedFormats0);
      assertEquals("LCM_OVERFLOW_32_BITS", localizedFormats0.toString());
      assertEquals("overflow: lcm({0}, {1}) is 2^31", localizedFormats0.getSourceString());
      assertEquals(106, localizedFormats0.ordinal());
      assertEquals("LCM_OVERFLOW_32_BITS", localizedFormats0.name());
      
      String string0 = localizedFormats0.getSourceString();
      assertEquals("overflow: lcm({0}, {1}) is 2^31", string0);
      assertEquals("LCM_OVERFLOW_32_BITS", localizedFormats0.toString());
      assertEquals("overflow: lcm({0}, {1}) is 2^31", localizedFormats0.getSourceString());
      assertEquals(106, localizedFormats0.ordinal());
      assertEquals("LCM_OVERFLOW_32_BITS", localizedFormats0.name());
      assertNotNull(string0);
  }
}
