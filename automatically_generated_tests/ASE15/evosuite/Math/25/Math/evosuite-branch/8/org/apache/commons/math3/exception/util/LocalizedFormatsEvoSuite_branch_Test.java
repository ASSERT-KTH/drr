/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:54:27 GMT 2014
 */

package org.apache.commons.math3.exception.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class LocalizedFormatsEvoSuite_branch_Test   {

  //@Test
  public void test0()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.SIMPLE_MESSAGE;
      assertEquals(LocalizedFormats.SIMPLE_MESSAGE, localizedFormats0);
      assertEquals("SIMPLE_MESSAGE", localizedFormats0.name());
      assertEquals("{0}", localizedFormats0.getSourceString());
      assertEquals("SIMPLE_MESSAGE", localizedFormats0.toString());
      assertEquals(260, localizedFormats0.ordinal());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      String string0 = localizedFormats0.getLocalizedString(locale0);
      assertNotNull(string0);
      assertEquals("{0}", string0);
      assertEquals("SIMPLE_MESSAGE", localizedFormats0.name());
      assertEquals("{0}", localizedFormats0.getSourceString());
      assertEquals("SIMPLE_MESSAGE", localizedFormats0.toString());
      assertEquals(260, localizedFormats0.ordinal());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
  }

  @Test
  public void test1()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE;
      assertEquals(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE, localizedFormats0);
      assertEquals("LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE", localizedFormats0.toString());
      assertEquals(108, localizedFormats0.ordinal());
      assertEquals("LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE", localizedFormats0.name());
      assertEquals("list of chromosomes bigger than maxPopulationSize", localizedFormats0.getSourceString());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      
      String string0 = localizedFormats0.getLocalizedString(locale0);
      assertNotNull(string0);
      assertEquals("list of chromosomes bigger than maxPopulationSize", string0);
      assertEquals("LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE", localizedFormats0.toString());
      assertEquals(108, localizedFormats0.ordinal());
      assertEquals("LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE", localizedFormats0.name());
      assertEquals("list of chromosomes bigger than maxPopulationSize", localizedFormats0.getSourceString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
  }

  @Test
  public void test2()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.SIMPLE_MESSAGE;
      assertEquals(LocalizedFormats.SIMPLE_MESSAGE, localizedFormats0);
      assertEquals("SIMPLE_MESSAGE", localizedFormats0.toString());
      assertEquals("SIMPLE_MESSAGE", localizedFormats0.name());
      assertEquals("{0}", localizedFormats0.getSourceString());
      assertEquals(260, localizedFormats0.ordinal());
      
      String string0 = localizedFormats0.getSourceString();
      assertNotNull(string0);
      assertEquals("{0}", string0);
      assertEquals("SIMPLE_MESSAGE", localizedFormats0.toString());
      assertEquals("SIMPLE_MESSAGE", localizedFormats0.name());
      assertEquals("{0}", localizedFormats0.getSourceString());
      assertEquals(260, localizedFormats0.ordinal());
  }
}
