/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:26:50 GMT 2014
 */

package org.apache.commons.math3.optimization.fitting;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.MathIllegalStateException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;
import org.apache.commons.math3.optimization.fitting.HarmonicFitter;
import org.apache.commons.math3.optimization.fitting.WeightedObservedPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class HarmonicFitterEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[7];
      double double0 = 20.209640871960488;
      double double1 = 0.0;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double1, double0);
      assertEquals(20.209640871960488, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(20.209640871960488, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(0.0, weightedObservedPoint0.getX(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals(20.209640871960488, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(20.209640871960488, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(0.0, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(20.209640871960488, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(20.209640871960488, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      double double2 = (-2065.2890842038096);
      double double3 = (-1.1349246400274207E46);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double2, double3, double3);
      assertEquals((-1.1349246400274207E46), weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-1.1349246400274207E46), weightedObservedPoint1.getY(), 0.01D);
      assertEquals((-2065.2890842038096), weightedObservedPoint1.getWeight(), 0.01D);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      assertEquals((-1.1349246400274207E46), weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-1.1349246400274207E46), weightedObservedPoint1.getY(), 0.01D);
      assertEquals((-2065.2890842038096), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals((-1.1349246400274207E46), weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals((-2065.2890842038096), weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals((-1.1349246400274207E46), weightedObservedPointArray0[1].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[1]);
      
      double double4 = 1.1921056801463227E-8;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(double3, double0, double4);
      assertEquals((-1.1349246400274207E46), weightedObservedPoint2.getWeight(), 0.01D);
      assertEquals(1.1921056801463227E-8, weightedObservedPoint2.getY(), 0.01D);
      assertEquals(20.209640871960488, weightedObservedPoint2.getX(), 0.01D);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint1);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      assertEquals(20.209640871960488, weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals(1.1921056801463227E-8, weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals((-1.1349246400274207E46), weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals((-1.1349246400274207E46), weightedObservedPoint2.getWeight(), 0.01D);
      assertEquals(1.1921056801463227E-8, weightedObservedPoint2.getY(), 0.01D);
      assertEquals(20.209640871960488, weightedObservedPoint2.getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[2]);
      
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(double2, double2, double4);
      assertEquals((-2065.2890842038096), weightedObservedPoint3.getWeight(), 0.01D);
      assertEquals((-2065.2890842038096), weightedObservedPoint3.getX(), 0.01D);
      assertEquals(1.1921056801463227E-8, weightedObservedPoint3.getY(), 0.01D);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint1);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint2);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint3);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      assertEquals((-2065.2890842038096), weightedObservedPoint3.getWeight(), 0.01D);
      assertEquals((-2065.2890842038096), weightedObservedPoint3.getX(), 0.01D);
      assertEquals(1.1921056801463227E-8, weightedObservedPoint3.getY(), 0.01D);
      assertEquals((-2065.2890842038096), weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals((-2065.2890842038096), weightedObservedPointArray0[3].getX(), 0.01D);
      assertEquals(1.1921056801463227E-8, weightedObservedPointArray0[3].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[3]);
      
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(double2, double4, double2);
      assertEquals(1.1921056801463227E-8, weightedObservedPoint4.getX(), 0.01D);
      assertEquals((-2065.2890842038096), weightedObservedPoint4.getY(), 0.01D);
      assertEquals((-2065.2890842038096), weightedObservedPoint4.getWeight(), 0.01D);
      assertNotSame(weightedObservedPoint4, weightedObservedPoint1);
      assertNotSame(weightedObservedPoint4, weightedObservedPoint3);
      assertNotSame(weightedObservedPoint4, weightedObservedPoint0);
      assertNotSame(weightedObservedPoint4, weightedObservedPoint2);
      assertNotNull(weightedObservedPoint4);
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint2));
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      assertEquals(1.1921056801463227E-8, weightedObservedPoint4.getX(), 0.01D);
      assertEquals((-2065.2890842038096), weightedObservedPoint4.getY(), 0.01D);
      assertEquals((-2065.2890842038096), weightedObservedPoint4.getWeight(), 0.01D);
      assertEquals((-2065.2890842038096), weightedObservedPointArray0[4].getWeight(), 0.01D);
      assertEquals(1.1921056801463227E-8, weightedObservedPointArray0[4].getX(), 0.01D);
      assertEquals((-2065.2890842038096), weightedObservedPointArray0[4].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[4]);
      
      double double5 = (-686.08022640707);
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint(double3, double5, double1);
      assertEquals((-686.08022640707), weightedObservedPoint5.getX(), 0.01D);
      assertEquals(0.0, weightedObservedPoint5.getY(), 0.01D);
      assertEquals((-1.1349246400274207E46), weightedObservedPoint5.getWeight(), 0.01D);
      assertNotSame(weightedObservedPoint5, weightedObservedPoint3);
      assertNotSame(weightedObservedPoint5, weightedObservedPoint4);
      assertNotSame(weightedObservedPoint5, weightedObservedPoint2);
      assertNotSame(weightedObservedPoint5, weightedObservedPoint1);
      assertNotSame(weightedObservedPoint5, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint5);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double5);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint0));
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double5);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double5 == double3);
      assertFalse(double5 == double2);
      assertFalse(double5 == double4);
      assertFalse(double5 == double0);
      assertFalse(double5 == double1);
      
      weightedObservedPointArray0[5] = weightedObservedPoint5;
      assertEquals((-1.1349246400274207E46), weightedObservedPointArray0[5].getWeight(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[5].getY(), 0.01D);
      assertEquals((-686.08022640707), weightedObservedPointArray0[5].getX(), 0.01D);
      assertEquals((-686.08022640707), weightedObservedPoint5.getX(), 0.01D);
      assertEquals(0.0, weightedObservedPoint5.getY(), 0.01D);
      assertEquals((-1.1349246400274207E46), weightedObservedPoint5.getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[5]);
      
      double double6 = 1.0;
      WeightedObservedPoint weightedObservedPoint6 = new WeightedObservedPoint(double5, double6, double0);
      assertEquals((-686.08022640707), weightedObservedPoint6.getWeight(), 0.01D);
      assertEquals(20.209640871960488, weightedObservedPoint6.getY(), 0.01D);
      assertEquals(1.0, weightedObservedPoint6.getX(), 0.01D);
      assertNotSame(weightedObservedPoint6, weightedObservedPoint5);
      assertNotSame(weightedObservedPoint6, weightedObservedPoint4);
      assertNotSame(weightedObservedPoint6, weightedObservedPoint3);
      assertNotSame(weightedObservedPoint6, weightedObservedPoint2);
      assertNotSame(weightedObservedPoint6, weightedObservedPoint0);
      assertNotSame(weightedObservedPoint6, weightedObservedPoint1);
      assertNotNull(weightedObservedPoint6);
      assertFalse(double0 == double5);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double6);
      assertFalse(double0 == double3);
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint5));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint1));
      assertFalse(double6 == double0);
      assertFalse(double6 == double5);
      assertFalse(double6 == double4);
      assertFalse(double6 == double3);
      assertFalse(double6 == double2);
      assertFalse(double6 == double1);
      assertFalse(double5 == double3);
      assertFalse(double5 == double2);
      assertFalse(double5 == double4);
      assertFalse(double5 == double6);
      assertFalse(double5 == double0);
      assertFalse(double5 == double1);
      
      weightedObservedPointArray0[6] = weightedObservedPoint6;
      assertEquals((-686.08022640707), weightedObservedPointArray0[6].getWeight(), 0.01D);
      assertEquals(1.0, weightedObservedPointArray0[6].getX(), 0.01D);
      assertEquals(20.209640871960488, weightedObservedPointArray0[6].getY(), 0.01D);
      assertEquals((-686.08022640707), weightedObservedPoint6.getWeight(), 0.01D);
      assertEquals(20.209640871960488, weightedObservedPoint6.getY(), 0.01D);
      assertEquals(1.0, weightedObservedPoint6.getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[6]);
      
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(harmonicFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[5];
      double double0 = 2.6242659204736487;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals(2.6242659204736487, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPoint0.getX(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals(2.6242659204736487, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPoint0.getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      double double1 = 2.6625526095366823;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double0, double1, double1);
      assertEquals(2.6242659204736487, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(2.6625526095366823, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(2.6625526095366823, weightedObservedPoint1.getX(), 0.01D);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint1);
      assertFalse(double1 == double0);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double0 == double1);
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      assertEquals(2.6625526095366823, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals(2.6625526095366823, weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(2.6625526095366823, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(2.6625526095366823, weightedObservedPoint1.getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[1]);
      
      double double2 = 2.8550835575680167;
      double double3 = 2.498160347197504;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(double2, double3, double2);
      assertEquals(2.8550835575680167, weightedObservedPoint2.getY(), 0.01D);
      assertEquals(2.498160347197504, weightedObservedPoint2.getX(), 0.01D);
      assertEquals(2.8550835575680167, weightedObservedPoint2.getWeight(), 0.01D);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint0);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint1);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      assertEquals(2.8550835575680167, weightedObservedPoint2.getY(), 0.01D);
      assertEquals(2.498160347197504, weightedObservedPoint2.getX(), 0.01D);
      assertEquals(2.8550835575680167, weightedObservedPoint2.getWeight(), 0.01D);
      assertEquals(2.8550835575680167, weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals(2.498160347197504, weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals(2.8550835575680167, weightedObservedPointArray0[2].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[2]);
      
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(double0, double2, double3);
      assertEquals(2.498160347197504, weightedObservedPoint3.getY(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPoint3.getWeight(), 0.01D);
      assertEquals(2.8550835575680167, weightedObservedPoint3.getX(), 0.01D);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint1);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint2);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint3);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      assertEquals(2.498160347197504, weightedObservedPoint3.getY(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPoint3.getWeight(), 0.01D);
      assertEquals(2.8550835575680167, weightedObservedPoint3.getX(), 0.01D);
      assertEquals(2.8550835575680167, weightedObservedPointArray0[3].getX(), 0.01D);
      assertEquals(2.498160347197504, weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[3]);
      
      double double4 = 3.0;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(double0, double4, double1);
      assertEquals(2.6625526095366823, weightedObservedPoint4.getY(), 0.01D);
      assertEquals(3.0, weightedObservedPoint4.getX(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPoint4.getWeight(), 0.01D);
      assertNotSame(weightedObservedPoint4, weightedObservedPoint3);
      assertNotSame(weightedObservedPoint4, weightedObservedPoint1);
      assertNotSame(weightedObservedPoint4, weightedObservedPoint2);
      assertNotSame(weightedObservedPoint4, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint0));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      assertEquals(2.6242659204736487, weightedObservedPointArray0[4].getWeight(), 0.01D);
      assertEquals(3.0, weightedObservedPointArray0[4].getX(), 0.01D);
      assertEquals(2.6625526095366823, weightedObservedPointArray0[4].getY(), 0.01D);
      assertEquals(2.6625526095366823, weightedObservedPoint4.getY(), 0.01D);
      assertEquals(3.0, weightedObservedPoint4.getX(), 0.01D);
      assertEquals(2.6242659204736487, weightedObservedPoint4.getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[4]);
      
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(harmonicFitter_ParameterGuesser0);
      
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {0.08219613116958913, 12.520304587514126, (-1.136167667625315)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[5];
      double double0 = 1.0;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals(1.0, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(1.0, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(1.0, weightedObservedPoint0.getX(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals(1.0, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(1.0, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(1.0, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(1.0, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals(1.0, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(1.0, weightedObservedPointArray0[0].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      double double1 = 778.0460116845154;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double0, double1, double0);
      assertEquals(778.0460116845154, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(1.0, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(1.0, weightedObservedPoint1.getY(), 0.01D);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint1);
      assertFalse(double0 == double1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double1 == double0);
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      assertEquals(1.0, weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals(778.0460116845154, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(1.0, weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals(778.0460116845154, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(1.0, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(1.0, weightedObservedPoint1.getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[1]);
      
      double double2 = (-295.76080609);
      double double3 = 0.0;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(double2, double3, double2);
      assertEquals((-295.76080609), weightedObservedPoint2.getY(), 0.01D);
      assertEquals((-295.76080609), weightedObservedPoint2.getWeight(), 0.01D);
      assertEquals(0.0, weightedObservedPoint2.getX(), 0.01D);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint0);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint1);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      assertEquals((-295.76080609), weightedObservedPoint2.getY(), 0.01D);
      assertEquals((-295.76080609), weightedObservedPoint2.getWeight(), 0.01D);
      assertEquals(0.0, weightedObservedPoint2.getX(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals((-295.76080609), weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals((-295.76080609), weightedObservedPointArray0[2].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[2]);
      
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(double0, double2, double3);
      assertEquals((-295.76080609), weightedObservedPoint3.getX(), 0.01D);
      assertEquals(1.0, weightedObservedPoint3.getWeight(), 0.01D);
      assertEquals(0.0, weightedObservedPoint3.getY(), 0.01D);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint1);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint0);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint2);
      assertNotNull(weightedObservedPoint3);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      assertEquals((-295.76080609), weightedObservedPoint3.getX(), 0.01D);
      assertEquals(1.0, weightedObservedPoint3.getWeight(), 0.01D);
      assertEquals(0.0, weightedObservedPoint3.getY(), 0.01D);
      assertEquals((-295.76080609), weightedObservedPointArray0[3].getX(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals(1.0, weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[3]);
      
      double double4 = (-8.321643933473872);
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(double1, double4, double4);
      assertEquals(778.0460116845154, weightedObservedPoint4.getWeight(), 0.01D);
      assertEquals((-8.321643933473872), weightedObservedPoint4.getX(), 0.01D);
      assertEquals((-8.321643933473872), weightedObservedPoint4.getY(), 0.01D);
      assertNotSame(weightedObservedPoint4, weightedObservedPoint1);
      assertNotSame(weightedObservedPoint4, weightedObservedPoint3);
      assertNotSame(weightedObservedPoint4, weightedObservedPoint2);
      assertNotSame(weightedObservedPoint4, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint4);
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint0));
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      assertEquals(778.0460116845154, weightedObservedPoint4.getWeight(), 0.01D);
      assertEquals((-8.321643933473872), weightedObservedPoint4.getX(), 0.01D);
      assertEquals((-8.321643933473872), weightedObservedPoint4.getY(), 0.01D);
      assertEquals((-8.321643933473872), weightedObservedPointArray0[4].getX(), 0.01D);
      assertEquals((-8.321643933473872), weightedObservedPointArray0[4].getY(), 0.01D);
      assertEquals(778.0460116845154, weightedObservedPointArray0[4].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[4]);
      
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(harmonicFitter_ParameterGuesser0);
      
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {148.380403045, 0.005851318135790574, (-1.5841913443499056)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      double double0 = (-765.0683528208949);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals((-765.0683528208949), weightedObservedPoint0.getY(), 0.01D);
      assertEquals((-765.0683528208949), weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-765.0683528208949), weightedObservedPoint0.getWeight(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals((-765.0683528208949), weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals((-765.0683528208949), weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals((-765.0683528208949), weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals((-765.0683528208949), weightedObservedPoint0.getY(), 0.01D);
      assertEquals((-765.0683528208949), weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-765.0683528208949), weightedObservedPoint0.getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      weightedObservedPointArray0[1] = weightedObservedPointArray0[0];
      assertEquals((-765.0683528208949), weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals((-765.0683528208949), weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals((-765.0683528208949), weightedObservedPointArray0[1].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[1]);
      
      weightedObservedPointArray0[2] = weightedObservedPointArray0[1];
      assertEquals((-765.0683528208949), weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals((-765.0683528208949), weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals((-765.0683528208949), weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[2]);
      
      weightedObservedPointArray0[3] = weightedObservedPointArray0[2];
      assertEquals((-765.0683528208949), weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals((-765.0683528208949), weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals((-765.0683528208949), weightedObservedPointArray0[3].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[3]);
      
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(harmonicFitter_ParameterGuesser0);
      
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorOptimizer0);
      assertNotNull(harmonicFitter0);
      
      // Undeclared exception!
      try {
        double[] doubleArray1 = harmonicFitter0.fit(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorOptimizer0);
      assertNotNull(harmonicFitter0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = harmonicFitter0.fit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample contains 0 observed points, at least 4 are required
         //
      }
  }
}
