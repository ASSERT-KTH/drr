/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:27:04 GMT 2014
 */

package org.apache.commons.math3.exception.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class LocalizedFormatsEvoSuite_branch_Test   {

  //@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT;
      assertEquals(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, localizedFormats0);
      assertEquals("LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT", localizedFormats0.name());
      assertEquals(111, localizedFormats0.ordinal());
      assertEquals("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})", localizedFormats0.getSourceString());
      assertEquals("LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT", localizedFormats0.toString());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      
      String string0 = localizedFormats0.getLocalizedString(locale0);
      assertEquals("la borne inf\u00E9rieure ({0}) devrait \u00EAtre inf\u00E9rieure  ou \u00E9gale \u00E0 la borne sup\u00E9rieure ({1})", string0);
      assertNotNull(string0);
      assertEquals("LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT", localizedFormats0.name());
      assertEquals(111, localizedFormats0.ordinal());
      assertEquals("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})", localizedFormats0.getSourceString());
      assertEquals("LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT", localizedFormats0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
      assertEquals(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT, localizedFormats0);
      assertEquals("NO_CONVERGENCE_WITH_ANY_START_POINT", localizedFormats0.name());
      assertEquals(195, localizedFormats0.ordinal());
      assertEquals("none of the {0} start points lead to convergence", localizedFormats0.getSourceString());
      assertEquals("NO_CONVERGENCE_WITH_ANY_START_POINT", localizedFormats0.toString());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      String string0 = localizedFormats0.getLocalizedString(locale0);
      assertEquals("none of the {0} start points lead to convergence", string0);
      assertNotNull(string0);
      assertEquals("NO_CONVERGENCE_WITH_ANY_START_POINT", localizedFormats0.name());
      assertEquals(195, localizedFormats0.ordinal());
      assertEquals("none of the {0} start points lead to convergence", localizedFormats0.getSourceString());
      assertEquals("NO_CONVERGENCE_WITH_ANY_START_POINT", localizedFormats0.toString());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT;
      assertEquals(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, localizedFormats0);
      assertEquals("LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT", localizedFormats0.toString());
      assertEquals(111, localizedFormats0.ordinal());
      assertEquals("LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT", localizedFormats0.name());
      assertEquals("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})", localizedFormats0.getSourceString());
      
      String string0 = localizedFormats0.getSourceString();
      assertEquals("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})", string0);
      assertNotNull(string0);
      assertEquals("LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT", localizedFormats0.toString());
      assertEquals(111, localizedFormats0.ordinal());
      assertEquals("LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT", localizedFormats0.name());
      assertEquals("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})", localizedFormats0.getSourceString());
  }
}
