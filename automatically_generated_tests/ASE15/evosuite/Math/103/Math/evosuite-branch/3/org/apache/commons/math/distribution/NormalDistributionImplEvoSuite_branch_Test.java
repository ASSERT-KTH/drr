/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:26:03 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NormalDistributionImplEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 943.426326403416;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(double0, double0);
      assertNotNull(normalDistributionImpl0);
      assertEquals(943.426326403416, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(943.426326403416, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      
      double double1 = 0.5;
      double double2 = normalDistributionImpl0.getInitialDomain(double1);
      assertEquals(943.426326403416, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(943.426326403416, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(943.426326403416, normalDistributionImpl0.getStandardDeviation(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertNotNull(normalDistributionImpl0);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      
      double double0 = 14.519713090954951;
      double double1 = normalDistributionImpl0.getDomainUpperBound(double0);
      assertEquals(1.7976931348623157E308, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertNotNull(normalDistributionImpl0);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      
      double double0 = 3.6899182659531625E-6;
      double double1 = normalDistributionImpl0.inverseCumulativeProbability(double0);
      assertEquals((-4.482428277068993), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = 943.426326403416;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(double0, double0);
      assertNotNull(normalDistributionImpl0);
      assertEquals(943.426326403416, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(943.426326403416, normalDistributionImpl0.getMean(), 0.01D);
      
      double double1 = normalDistributionImpl0.getDomainLowerBound(double0);
      assertEquals(943.426326403416, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(943.426326403416, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(943.426326403416, normalDistributionImpl0.getMean(), 0.01D);
  }

  //@Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertNotNull(normalDistributionImpl0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      
      double double0 = 1.7976931348623157E308;
      double double1 = normalDistributionImpl0.cumulativeProbability(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      
      double double2 = normalDistributionImpl0.inverseCumulativeProbability(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      
      // Undeclared exception!
      try {
        double double3 = normalDistributionImpl0.inverseCumulativeProbability(double2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // p must be between 0.0 and 1.0, inclusive.
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = 943.426326403416;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(double0, double0);
      assertNotNull(normalDistributionImpl0);
      assertEquals(943.426326403416, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(943.426326403416, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      
      double double1 = 0.0;
      double double2 = normalDistributionImpl0.inverseCumulativeProbability(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(943.426326403416, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(943.426326403416, normalDistributionImpl0.getStandardDeviation(), 0.01D);
  }

  //@Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertNotNull(normalDistributionImpl0);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      
      double double0 = (-449.45752561892436);
      double double1 = normalDistributionImpl0.cumulativeProbability(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double double0 = (-9.837447530487956E-5);
      NormalDistributionImpl normalDistributionImpl0 = null;
      try {
        normalDistributionImpl0 = new NormalDistributionImpl(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Standard deviation must be positive.
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertNotNull(normalDistributionImpl0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      
      double double0 = 1.7976931348623157E308;
      double double1 = normalDistributionImpl0.getInitialDomain(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
  }
}
