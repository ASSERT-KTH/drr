/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:24:13 GMT 2014
 */

package org.apache.commons.math.complex;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ComplexFormatEvoSuite_branch_Test   {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       NumberFormat numberFormat0 = null;
//       DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(true, decimalFormat0.isParseIntegerOnly());
//       assertEquals("#.##0", decimalFormat0.toLocalizedPattern());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals("#,##0", decimalFormat0.toPattern());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertNotNull(decimalFormat0);
//       
//       ComplexFormat complexFormat0 = null;
//       try {
//         complexFormat0 = new ComplexFormat(numberFormat0, (NumberFormat) decimalFormat0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // realFormat can not be null.
//          //
//       }
//   }

  @Test
  public void test01()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryFormat can not be null.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "";
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       double double0 = 570.0;
//       Complex complex0 = new Complex(double0, double0);
//       assertEquals(false, complex0.isNaN());
//       assertEquals(806.1017305526642, complex0.abs(), 0.01D);
//       assertEquals(570.0, complex0.getImaginary(), 0.01D);
//       assertEquals(570.0, complex0.getReal(), 0.01D);
//       assertEquals(false, complex0.isInfinite());
//       assertNotNull(complex0);
//       
//       double double1 = (-1217.6315147996606);
//       Complex complex1 = complex0.createComplex(double0, double1);
//       assertEquals(1344.442823564214, complex1.abs(), 0.01D);
//       assertEquals(570.0, complex1.getReal(), 0.01D);
//       assertEquals((-1217.6315147996606), complex1.getImaginary(), 0.01D);
//       assertEquals(false, complex1.isInfinite());
//       assertEquals(false, complex1.isNaN());
//       assertEquals(false, complex0.isNaN());
//       assertEquals(806.1017305526642, complex0.abs(), 0.01D);
//       assertEquals(570.0, complex0.getImaginary(), 0.01D);
//       assertEquals(570.0, complex0.getReal(), 0.01D);
//       assertEquals(false, complex0.isInfinite());
//       assertNotSame(complex1, complex0);
//       assertNotSame(complex0, complex1);
//       assertNotNull(complex1);
//       assertFalse(double1 == double0);
//       assertFalse(complex1.equals((Object)complex0));
//       assertFalse(double0 == double1);
//       assertFalse(complex0.equals((Object)complex1));
//       
//       String string0 = ComplexFormat.formatComplex(complex1);
//       assertEquals("570 - 1.217,63i", string0);
//       assertEquals(1344.442823564214, complex1.abs(), 0.01D);
//       assertEquals(570.0, complex1.getReal(), 0.01D);
//       assertEquals((-1217.6315147996606), complex1.getImaginary(), 0.01D);
//       assertEquals(false, complex1.isInfinite());
//       assertEquals(false, complex1.isNaN());
//       assertEquals(false, complex0.isNaN());
//       assertEquals(806.1017305526642, complex0.abs(), 0.01D);
//       assertEquals(570.0, complex0.getImaginary(), 0.01D);
//       assertEquals(570.0, complex0.getReal(), 0.01D);
//       assertEquals(false, complex0.isInfinite());
//       assertNotSame(complex1, complex0);
//       assertNotSame(complex0, complex1);
//       assertNotNull(string0);
//       assertFalse(double1 == double0);
//       assertFalse(complex1.equals((Object)complex0));
//       assertFalse(double0 == double1);
//       assertFalse(complex0.equals((Object)complex1));
//       
//       Locale locale0 = Locale.TAIWAN;
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertNotNull(locale0);
//       
//       DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals(true, decimalFormat0.isParseIntegerOnly());
//       assertEquals("#,##0", decimalFormat0.toPattern());
//       assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertNotNull(decimalFormat0);
//       
//       ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("i", complexFormat0.getImaginaryCharacter());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals(true, decimalFormat0.isParseIntegerOnly());
//       assertEquals("#,##0", decimalFormat0.toPattern());
//       assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertNotNull(complexFormat0);
//       
//       try {
//         Complex complex2 = complexFormat0.parse(string0);
//         fail("Expecting exception: ParseException");
//       
//       } catch(ParseException e) {
//          //
//          // Unparseable complex number: \"570 - 1.217,63i\"
//          //
//       }
//   }

  //@Test
  public void test05()  throws Throwable  {
      double double0 = 570.0;
      Complex complex0 = new Complex(double0, double0);
      assertEquals(570.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(570.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(806.1017305526642, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      String string0 = ComplexFormat.formatComplex(complex0);
      assertEquals("570 + 570i", string0);
      assertEquals(570.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(570.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(806.1017305526642, complex0.abs(), 0.01D);
      assertNotNull(string0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertNotNull(decimalFormat0);
      
      ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertNotNull(complexFormat0);
      
      complexFormat0.setImaginaryCharacter(string0);
      assertEquals("570 + 570i", complexFormat0.getImaginaryCharacter());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(570.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(570.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(806.1017305526642, complex0.abs(), 0.01D);
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      try {
        Complex complex1 = complexFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"570 + 570i\"
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "4V7?0Y_f";
      ComplexFormat complexFormat0 = new ComplexFormat(string0);
      assertEquals("4V7?0Y_f", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      try {
        Complex complex0 = complexFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"4V7?0Y_f\"
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      String string0 = "995";
      Complex complex0 = complexFormat0.parse(string0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(995.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(995.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotNull(complex0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "7+/rn ;k1HG_N4@";
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      try {
        Complex complex0 = complexFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"7+/rn ;k1HG_N4@\"
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      //  // Unstable assertion: assertEquals((-436.90814), complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals((-3170.955430457), complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(3200.9134734858108, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertNotNull(complex0);
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals("-3.170,96 - 436,91i", string0);
      //  // Unstable assertion: assertEquals((-436.90814), complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals((-3170.955430457), complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(3200.9134734858108, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertNotNull(string0);
      
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertNotNull(complexFormat0);
      
      Complex complex1 = complexFormat0.parse(string0);
      //  // Unstable assertion: assertEquals((-436.90814), complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals((-3170.955430457), complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(3200.9134734858108, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertEquals((-436.91), complex1.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex1.isInfinite());
      //  // Unstable assertion: assertEquals((-3170.96), complex1.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex1.isNaN());
      //  // Unstable assertion: assertEquals(3200.9182541420832, complex1.abs(), 0.01D);
      //  // Unstable assertion: assertNotSame(complex0, complex1);
      //  // Unstable assertion: assertNotSame(complex1, complex0);
      //  // Unstable assertion: assertNotNull(complex1);
      //  // Unstable assertion: assertFalse(complex0.equals((Object)complex1));
      //  // Unstable assertion: assertFalse(complex1.equals((Object)complex0));
  }

  @Test
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      //  // Unstable assertion: assertEquals(4.9E-324, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(true, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertNotNull(complex0);
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals("(-Infinity) + 0i", string0);
      //  // Unstable assertion: assertEquals(4.9E-324, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(true, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      //  // Unstable assertion: assertEquals(Double.NaN, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(true, complex0.isNaN());
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertNotNull(complex0);
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals("(NaN)", string0);
      //  // Unstable assertion: assertEquals(Double.NaN, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(true, complex0.isNaN());
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      // Undeclared exception!
      try {
        String string0 = complexFormat0.format((Object) complexFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
      }
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       ComplexFormat complexFormat0 = ComplexFormat.getInstance();
//       assertEquals("i", complexFormat0.getImaginaryCharacter());
//       assertNotNull(complexFormat0);
//       
//       int int0 = (-1052);
//       Long long0 = new Long((long) int0);
//       assertEquals((-1052L), (long)long0);
//       
//       String string0 = complexFormat0.format((Object) long0);
//       assertEquals("-1.052", string0);
//       assertEquals("i", complexFormat0.getImaginaryCharacter());
//       assertNotNull(string0);
//   }

  @Test
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      ComplexFormat complexFormat0 = ComplexFormat.getInstance(locale0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertNotNull(complexFormat0);
      
      String string0 = " + ";
      int int0 = 2;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      Object object0 = complexFormat0.parseObject(string0, parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals(2, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=2]", parsePosition0.toString());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertNull(object0);
  }
}
