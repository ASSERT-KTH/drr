/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:34:28 GMT 2014
 */

package org.apache.commons.math.complex;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.AttributedCharacterIterator;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ComplexFormatEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      String[] stringArray0 = new String[10];
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertNotNull(choiceFormat0);
      
      ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) choiceFormat0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertNotNull(complexFormat0);
      
      NumberFormat numberFormat0 = null;
      // Undeclared exception!
      try {
        complexFormat0.setRealFormat(numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // realFormat can not be null.
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryFormat can not be null.
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = "";
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertNotNull(decimalFormat0);
      
      ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) decimalFormat0);
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      String string0 = " 6- ";
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      Complex complex0 = complexFormat0.parse(string0, parsePosition0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(3, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=3]", parsePosition0.toString());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNull(complex0);
  }

  //@Test
  public void test4()  throws Throwable  {
      double double0 = 66.9615908;
      Complex complex0 = new Complex(double0, double0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(94.69798986743747, complex0.abs(), 0.01D);
      assertEquals(66.9615908, complex0.getReal(), 0.01D);
      assertEquals(66.9615908, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotNull(complex0);
      
      String string0 = ComplexFormat.formatComplex(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(94.69798986743747, complex0.abs(), 0.01D);
      assertEquals(66.9615908, complex0.getReal(), 0.01D);
      assertEquals(66.9615908, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals("66.96 + 66.96i", string0);
      assertNotNull(string0);
      
      ComplexFormat complexFormat0 = new ComplexFormat(string0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(94.69798986743747, complex0.abs(), 0.01D);
      assertEquals(66.9615908, complex0.getReal(), 0.01D);
      assertEquals(66.9615908, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals("66.96 + 66.96i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      try {
        Object object0 = complexFormat0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      String string0 = "";
      try {
        Complex complex0 = complexFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"\"
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      String[] stringArray0 = new String[10];
      String string0 = "+5Q@";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertNotNull(choiceFormat0);
      
      ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) choiceFormat0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      Complex complex0 = complexFormat0.parse(stringArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complex0);
  }

  @Test
  public void test7()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(decimalFormat0);
      
      ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) decimalFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(complexFormat0);
      
      double double0 = Double.NaN;
      Double double1 = new Double(double0);
      assertEquals(Double.NaN, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      AttributedCharacterIterator attributedCharacterIterator0 = complexFormat0.formatToCharacterIterator((Object) double1);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(5, attributedCharacterIterator0.getRunLimit());
      assertEquals(5, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertTrue(double1.equals((Object)double0));
      assertNotNull(attributedCharacterIterator0);
  }

  @Test
  public void test8()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      // Undeclared exception!
      try {
        String string0 = complexFormat0.format((Object) complexFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Complex complex0 = Complex.INF;
      //  // Unstable assertion: assertEquals(4646.70320747128, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(4883.751927946914, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(1503.057615463, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertNotNull(complex0);
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals(4646.70320747128, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(4883.751927946914, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(1503.057615463, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals("1,503.06 + 4,646.7i", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getNegativeSuffix());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals("#,##0", decimalFormat0.toPattern());
      //  // Unstable assertion: assertNotNull(decimalFormat0);
      
      ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) decimalFormat0);
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getNegativeSuffix());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals("#,##0", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertNotNull(complexFormat0);
      
      try {
        Object object0 = complexFormat0.parseObject(string0);
       //  fail("Expecting exception: ParseException");
       // Unstable assertion
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }
}
