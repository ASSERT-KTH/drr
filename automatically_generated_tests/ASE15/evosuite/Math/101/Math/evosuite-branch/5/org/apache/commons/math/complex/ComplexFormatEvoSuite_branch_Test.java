/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:13:57 GMT 2014
 */

package org.apache.commons.math.complex;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.AttributedCharacterIterator;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ComplexFormatEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      // Undeclared exception!
      try {
        complexFormat0.setRealFormat(numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // realFormat can not be null.
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryFormat can not be null.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "";
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = " - ";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
      assertNotNull(choiceFormat0);
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      
      ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) choiceFormat0);
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      
      int int0 = 2;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
      
      Complex complex0 = complexFormat0.parse(string0, parsePosition0);
      assertNull(complex0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals(2, parsePosition0.getErrorIndex());
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=2]", parsePosition0.toString());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
  }

  @Test
  public void test05()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      String string0 = complexFormat0.format((Object) double1);
      assertEquals("0", string0);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(string0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      Complex complex0 = complexFormat0.parse(string0);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(complex0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      //  // Unstable assertion: assertNotNull(complex0);
      //  // Unstable assertion: assertEquals(0.0, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(10.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(10.0, complex0.abs(), 0.01D);
      
      String string0 = "B #,Vz[i)aaLkEU";
      ComplexFormat complexFormat0 = new ComplexFormat(string0);
      //  // Unstable assertion: assertNotNull(complexFormat0);
      //  // Unstable assertion: assertEquals("B #,Vz[i)aaLkEU", complexFormat0.getImaginaryCharacter());
      
      Locale locale0 = Locale.CHINESE;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zh", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      //  // Unstable assertion: assertNotNull(decimalFormat0);
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getNegativeSuffix());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zh", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      
      complexFormat0.setRealFormat((NumberFormat) decimalFormat0);
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getNegativeSuffix());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals("B #,Vz[i)aaLkEU", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zh", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      
      String string1 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals("0 + 10i", string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals(0.0, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(10.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(10.0, complex0.abs(), 0.01D);
      
      try {
        Object object0 = complexFormat0.parseObject(string1);
       //  fail("Expecting exception: ParseException");
       // Unstable assertion
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "5Sk@8B?46m@9";
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      try {
        Complex complex0 = complexFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"5Sk@8B?46m@9\"
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      //  // Unstable assertion: assertNotNull(complex0);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(10.0, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(10.0, complex0.getImaginary(), 0.01D);
      
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      //  // Unstable assertion: assertNotNull(complexFormat0);
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals("0 + 10i", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(10.0, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(10.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complexFormat0.parse(string0);
      //  // Unstable assertion: assertNotSame(complex0, complex1);
      //  // Unstable assertion: assertNotSame(complex1, complex0);
      //  // Unstable assertion: assertTrue(complex0.equals((Object)complex1));
      //  // Unstable assertion: assertTrue(complex1.equals((Object)complex0));
      //  // Unstable assertion: assertNotNull(complex1);
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(10.0, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(10.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(10.0, complex1.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex1.isInfinite());
      //  // Unstable assertion: assertEquals(false, complex1.isNaN());
      //  // Unstable assertion: assertEquals(0.0, complex1.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(10.0, complex1.getImaginary(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      String string0 = complexFormat0.format((Object) double1);
      assertEquals("0", string0);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(string0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = complexFormat0.formatToCharacterIterator((Object) string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      //  // Unstable assertion: assertNotNull(complex0);
      //  // Unstable assertion: assertEquals(10.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(10.0, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      
      String string0 = "B #,Vz[i)aaLkEU";
      ComplexFormat complexFormat0 = new ComplexFormat(string0);
      //  // Unstable assertion: assertNotNull(complexFormat0);
      //  // Unstable assertion: assertEquals("B #,Vz[i)aaLkEU", complexFormat0.getImaginaryCharacter());
      
      String string1 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals("0 + 10i", string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals(10.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(10.0, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      
      try {
        Object object0 = complexFormat0.parseObject(string1);
       //  fail("Expecting exception: ParseException");
       // Unstable assertion
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }
}
