/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:22:37 GMT 2014
 */

package org.apache.commons.math.complex;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ComplexFormatEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      NumberFormat numberFormat0 = null;
      // Undeclared exception!
      try {
        complexFormat0.setRealFormat(numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // realFormat can not be null.
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryFormat can not be null.
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = "";
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      //  // Unstable assertion: assertNotNull(decimalFormat0);
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals("#,##0%", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(100, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getNegativeSuffix());
      
      ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
      //  // Unstable assertion: assertNotNull(complexFormat0);
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals("#,##0%", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(100, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getNegativeSuffix());
      
      int int0 = 5;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      //  // Unstable assertion: assertNotNull(parsePosition0);
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=5,errorIndex=-1]", parsePosition0.toString());
      //  // Unstable assertion: assertEquals(-1, parsePosition0.getErrorIndex());
      //  // Unstable assertion: assertEquals(5, parsePosition0.getIndex());
      
      Complex complex0 = Complex.INF;
      //  // Unstable assertion: assertNotNull(complex0);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, complex0.abs(), 0.01D);
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals("0", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, complex0.abs(), 0.01D);
      
      Object object0 = complexFormat0.parseObject(string0, parsePosition0);
      //  // Unstable assertion: assertNull(object0);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertEquals(5, parsePosition0.getIndex());
      //  // Unstable assertion: assertEquals(4, parsePosition0.getErrorIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=5,errorIndex=4]", parsePosition0.toString());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals("#,##0%", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(100, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getNegativeSuffix());
  }

  @Test
  public void test5() {}
//   @Test
//   public void test5()  throws Throwable  {
//       String string0 = "1  ";
//       DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
//       assertNotNull(decimalFormat0);
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals("#.##0,###", decimalFormat0.toLocalizedPattern());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals("#,##0.###", decimalFormat0.toPattern());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(3, decimalFormat0.getMaximumFractionDigits());
//       
//       ComplexFormat complexFormat0 = new ComplexFormat(string0, (NumberFormat) decimalFormat0);
//       assertNotNull(complexFormat0);
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals("#.##0,###", decimalFormat0.toLocalizedPattern());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals("#,##0.###", decimalFormat0.toPattern());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(3, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("1  ", complexFormat0.getImaginaryCharacter());
//       
//       Complex complex0 = complexFormat0.parse(string0);
//       assertNotNull(complex0);
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals("#.##0,###", decimalFormat0.toLocalizedPattern());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals("#,##0.###", decimalFormat0.toPattern());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(3, decimalFormat0.getMaximumFractionDigits());
//       assertEquals(1.0, complex0.abs(), 0.01D);
//       assertEquals(0.0, complex0.getImaginary(), 0.01D);
//       assertEquals(false, complex0.isNaN());
//       assertEquals(false, complex0.isInfinite());
//       assertEquals(1.0, complex0.getReal(), 0.01D);
//       assertEquals("1  ", complexFormat0.getImaginaryCharacter());
//   }

  @Test
  public void test6()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      String string0 = "5bPagZO>,p6Fl#D";
      try {
        Complex complex0 = complexFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"5bPagZO>,p6Fl#D\"
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      //  // Unstable assertion: assertNotNull(complex0);
      //  // Unstable assertion: assertEquals((-3451.0), complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(3597.903661856443, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals((-1017.6), complex0.getReal(), 0.01D);
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals("-1,017.6 - 3,451i", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals((-3451.0), complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(3597.903661856443, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals((-1017.6), complex0.getReal(), 0.01D);
      
      Locale locale0 = Locale.PRC;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      //  // Unstable assertion: assertNotNull(decimalFormat0);
      //  // Unstable assertion: assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals("-\uFFE5", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals("\uFFE5", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getNegativeSuffix());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      
      ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) decimalFormat0);
      //  // Unstable assertion: assertNotNull(complexFormat0);
      //  // Unstable assertion: assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals("-\uFFE5", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals("\uFFE5", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getNegativeSuffix());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      
      try {
        Complex complex1 = complexFormat0.parse(string0);
       //  fail("Expecting exception: ParseException");
       // Unstable assertion
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"-1,017.6 - 3,451i\"
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      ComplexFormat complexFormat0 = ComplexFormat.getInstance(locale0);
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      short short0 = (short) (-16);
      Short short1 = new Short(short0);
      assertEquals((short) (-16), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      AttributedCharacterIterator attributedCharacterIterator0 = complexFormat0.formatToCharacterIterator((Object) short1);
      assertNotNull(attributedCharacterIterator0);
      assertTrue(short1.equals((Object)short0));
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(3, attributedCharacterIterator0.getEndIndex());
      assertEquals(3, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
  }

  @Test
  public void test9() {}
//   @Test
//   public void test9()  throws Throwable  {
//       DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
//       assertNotNull(decimalFormat0);
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals("%", decimalFormat0.getPositiveSuffix());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("#,##0%", decimalFormat0.toPattern());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(100, decimalFormat0.getMultiplier());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals("%", decimalFormat0.getNegativeSuffix());
//       
//       ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
//       assertNotNull(complexFormat0);
//       assertEquals("i", complexFormat0.getImaginaryCharacter());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals("%", decimalFormat0.getPositiveSuffix());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("#,##0%", decimalFormat0.toPattern());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(100, decimalFormat0.getMultiplier());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals("%", decimalFormat0.getNegativeSuffix());
//       
//       // Undeclared exception!
//       try {
//         String string0 = complexFormat0.format((Object) decimalFormat0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Cannot format given Object as a Date
//          //
//       }
//   }
}
