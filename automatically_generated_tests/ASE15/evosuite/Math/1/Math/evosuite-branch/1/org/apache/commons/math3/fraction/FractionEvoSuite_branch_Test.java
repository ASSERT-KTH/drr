/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:46:49 GMT 2014
 */

package org.apache.commons.math3.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FractionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals("1", string0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals("2 / 3", string0);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals((short) (-1), short0);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getReducedFraction(int0, (int) short0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-2147483637);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,637/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 211;
      int int1 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 211/0
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.MINUS_ONE;
      assertEquals(-1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(-1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      
      // Undeclared exception!
      try {
        Fraction fraction3 = fraction0.divide(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.MINUS_ONE;
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      
      Fraction fraction3 = fraction1.multiply(fraction2);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction3.shortValue());
      assertEquals(0.0, fraction3.doubleValue(), 0.01D);
      assertEquals(0, fraction3.byteValue());
      assertEquals(0.0F, fraction3.floatValue(), 0.01F);
      assertEquals(0.0, fraction3.percentageValue(), 0.01D);
      assertEquals(0, fraction3.getNumerator());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(0, fraction3.intValue());
      assertEquals(0L, fraction3.longValue());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertNotNull(fraction3);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction0));
      assertTrue(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 807.176870708021;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(39, fraction0.byteValue());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
      assertEquals(807, fraction0.shortValue());
      assertEquals(147, fraction0.getDenominator());
      assertEquals(807L, fraction0.longValue());
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(807, fraction0.intValue());
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_FIFTH;
      assertEquals(0, fraction1.intValue());
      assertEquals(20.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.2, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals(20.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.2, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(-61, fraction2.byteValue());
      assertEquals(4035, fraction2.intValue());
      assertEquals(147, fraction2.getDenominator());
      assertEquals(593275, fraction2.getNumerator());
      assertEquals(4035.8843537414964, fraction2.doubleValue(), 0.01D);
      assertEquals(4035L, fraction2.longValue());
      assertEquals(403588.43537414965, fraction2.percentageValue(), 0.01D);
      assertEquals(4035.8843F, fraction2.floatValue(), 0.01F);
      assertEquals(4035, fraction2.shortValue());
      assertEquals(39, fraction0.byteValue());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
      assertEquals(807, fraction0.shortValue());
      assertEquals(147, fraction0.getDenominator());
      assertEquals(807L, fraction0.longValue());
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(807, fraction0.intValue());
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      
      short short0 = fraction2.shortValue();
      assertEquals((short)4035, short0);
      assertEquals(0, fraction1.intValue());
      assertEquals(20.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.2, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(-61, fraction2.byteValue());
      assertEquals(4035, fraction2.intValue());
      assertEquals(147, fraction2.getDenominator());
      assertEquals(593275, fraction2.getNumerator());
      assertEquals(4035.8843537414964, fraction2.doubleValue(), 0.01D);
      assertEquals(4035L, fraction2.longValue());
      assertEquals(403588.43537414965, fraction2.percentageValue(), 0.01D);
      assertEquals(4035.8843F, fraction2.floatValue(), 0.01F);
      assertEquals(4035, fraction2.shortValue());
      assertEquals(39, fraction0.byteValue());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
      assertEquals(807, fraction0.shortValue());
      assertEquals(147, fraction0.getDenominator());
      assertEquals(807L, fraction0.longValue());
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(807, fraction0.intValue());
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      
      Fraction fraction3 = fraction1.divide((int) short0);
      assertEquals(0, fraction1.intValue());
      assertEquals(20.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.2, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(-61, fraction2.byteValue());
      assertEquals(4035, fraction2.intValue());
      assertEquals(147, fraction2.getDenominator());
      assertEquals(593275, fraction2.getNumerator());
      assertEquals(4035.8843537414964, fraction2.doubleValue(), 0.01D);
      assertEquals(4035L, fraction2.longValue());
      assertEquals(403588.43537414965, fraction2.percentageValue(), 0.01D);
      assertEquals(4035.8843F, fraction2.floatValue(), 0.01F);
      assertEquals(4035, fraction2.shortValue());
      assertEquals(39, fraction0.byteValue());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
      assertEquals(807, fraction0.shortValue());
      assertEquals(147, fraction0.getDenominator());
      assertEquals(807L, fraction0.longValue());
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(807, fraction0.intValue());
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertEquals(4.9566293E-5F, fraction3.floatValue(), 0.01F);
      assertEquals(4.956629491945477E-5, fraction3.doubleValue(), 0.01D);
      assertEquals(0.004956629491945477, fraction3.percentageValue(), 0.01D);
      assertEquals(0, fraction3.intValue());
      assertEquals(1, fraction3.getNumerator());
      assertEquals(0L, fraction3.longValue());
      assertEquals(0, fraction3.byteValue());
      assertEquals(20175, fraction3.getDenominator());
      assertEquals(0, fraction3.shortValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertNotNull(fraction3);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      
      Fraction fraction4 = fraction1.multiply(fraction3);
      assertEquals(0, fraction1.intValue());
      assertEquals(20.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.2, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(-61, fraction2.byteValue());
      assertEquals(4035, fraction2.intValue());
      assertEquals(147, fraction2.getDenominator());
      assertEquals(593275, fraction2.getNumerator());
      assertEquals(4035.8843537414964, fraction2.doubleValue(), 0.01D);
      assertEquals(4035L, fraction2.longValue());
      assertEquals(403588.43537414965, fraction2.percentageValue(), 0.01D);
      assertEquals(4035.8843F, fraction2.floatValue(), 0.01F);
      assertEquals(4035, fraction2.shortValue());
      assertEquals(39, fraction0.byteValue());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
      assertEquals(807, fraction0.shortValue());
      assertEquals(147, fraction0.getDenominator());
      assertEquals(807L, fraction0.longValue());
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(807, fraction0.intValue());
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertEquals(4.9566293E-5F, fraction3.floatValue(), 0.01F);
      assertEquals(4.956629491945477E-5, fraction3.doubleValue(), 0.01D);
      assertEquals(0.004956629491945477, fraction3.percentageValue(), 0.01D);
      assertEquals(0, fraction3.intValue());
      assertEquals(1, fraction3.getNumerator());
      assertEquals(0L, fraction3.longValue());
      assertEquals(0, fraction3.byteValue());
      assertEquals(20175, fraction3.getDenominator());
      assertEquals(0, fraction3.shortValue());
      assertEquals(0, fraction4.intValue());
      assertEquals(9.913258983890955E-4, fraction4.percentageValue(), 0.01D);
      assertEquals(0, fraction4.shortValue());
      assertEquals(1, fraction4.getNumerator());
      assertEquals(0L, fraction4.longValue());
      assertEquals(100875, fraction4.getDenominator());
      assertEquals(9.913259E-6F, fraction4.floatValue(), 0.01F);
      assertEquals(0, fraction4.byteValue());
      assertEquals(9.913258983890955E-6, fraction4.doubleValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction4);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction4);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction4);
      assertNotSame(fraction3, fraction4);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction4, fraction3);
      assertNotSame(fraction4, fraction1);
      assertNotSame(fraction4, fraction0);
      assertNotSame(fraction4, fraction2);
      assertNotNull(fraction4);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction4));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction4));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction4));
      assertFalse(fraction3.equals((Object)fraction4));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction4.equals((Object)fraction3));
      assertFalse(fraction4.equals((Object)fraction1));
      assertFalse(fraction4.equals((Object)fraction0));
      assertFalse(fraction4.equals((Object)fraction2));
      
      // Undeclared exception!
      try {
        Fraction fraction5 = fraction4.add(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 19,948,871,924
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 807.176870708021;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(39, fraction0.byteValue());
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(147, fraction0.getDenominator());
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertEquals(807L, fraction0.longValue());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(807, fraction0.shortValue());
      assertEquals(807, fraction0.intValue());
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(1614.3538F, fraction1.floatValue(), 0.01F);
      assertEquals(78, fraction1.byteValue());
      assertEquals(1614, fraction1.intValue());
      assertEquals(1614L, fraction1.longValue());
      assertEquals(1614.3537414965986, fraction1.doubleValue(), 0.01D);
      assertEquals(1614, fraction1.shortValue());
      assertEquals(147, fraction1.getDenominator());
      assertEquals(237310, fraction1.getNumerator());
      assertEquals(161435.37414965985, fraction1.percentageValue(), 0.01D);
      assertEquals(39, fraction0.byteValue());
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(147, fraction0.getDenominator());
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertEquals(807L, fraction0.longValue());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(807, fraction0.shortValue());
      assertEquals(807, fraction0.intValue());
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO;
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.byteValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(200.0, fraction1.percentageValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(-1, fraction2.byteValue());
      assertEquals(-1, fraction2.shortValue());
      assertEquals(3, fraction2.getDenominator());
      assertEquals((-1.3333334F), fraction2.floatValue(), 0.01F);
      assertEquals(-1, fraction2.intValue());
      assertEquals((-1.3333333333333333), fraction2.doubleValue(), 0.01D);
      assertEquals(-4, fraction2.getNumerator());
      assertEquals((-1L), fraction2.longValue());
      assertEquals((-133.33333333333331), fraction2.percentageValue(), 0.01D);
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.byteValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(200.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 2007.4884086925633;
      int int0 = 134217718;
      Fraction fraction0 = new Fraction(double0, int0);
      assertEquals(-2051215569, fraction0.getNumerator());
      assertEquals(-1835, fraction0.intValue());
      assertEquals((-1835.2259873256562), fraction0.doubleValue(), 0.01D);
      assertEquals((-183522.59873256562), fraction0.percentageValue(), 0.01D);
      assertEquals(-1835, fraction0.shortValue());
      assertEquals(-43, fraction0.byteValue());
      assertEquals((-1835.226F), fraction0.floatValue(), 0.01F);
      assertEquals(1117691, fraction0.getDenominator());
      assertEquals((-1835L), fraction0.longValue());
      assertNotNull(fraction0);
      
      int int1 = 0;
      Fraction fraction1 = Fraction.getReducedFraction(int1, int0);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(-2051215569, fraction0.getNumerator());
      assertEquals(-1835, fraction0.intValue());
      assertEquals((-1835.2259873256562), fraction0.doubleValue(), 0.01D);
      assertEquals((-183522.59873256562), fraction0.percentageValue(), 0.01D);
      assertEquals(-1835, fraction0.shortValue());
      assertEquals(-43, fraction0.byteValue());
      assertEquals((-1835.226F), fraction0.floatValue(), 0.01F);
      assertEquals(1117691, fraction0.getDenominator());
      assertEquals((-1835L), fraction0.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((-183522.59873256562), fraction2.percentageValue(), 0.01D);
      assertEquals(-1835, fraction2.shortValue());
      assertEquals(-43, fraction2.byteValue());
      assertEquals((-1835.226F), fraction2.floatValue(), 0.01F);
      assertEquals(1117691, fraction2.getDenominator());
      assertEquals((-1835.2259873256562), fraction2.doubleValue(), 0.01D);
      assertEquals(-2051215569, fraction2.getNumerator());
      assertEquals(-1835, fraction2.intValue());
      assertEquals((-1835L), fraction2.longValue());
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.add(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = Integer.MIN_VALUE;
      Fraction fraction1 = fraction0.subtract(int0);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483648L), fraction1.longValue());
      assertEquals(-2147483648, fraction1.intValue());
      assertEquals((-2.147483648E11), fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals((-2.147483648E9), fraction1.doubleValue(), 0.01D);
      assertEquals((-2.14748365E9F), fraction1.floatValue(), 0.01F);
      assertEquals(-2147483648, fraction1.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertTrue(boolean0);
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_THIRDS;
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(66.66666666666666, fraction1.percentageValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertFalse(boolean0);
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(66.66666666666666, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      
      boolean boolean0 = fraction0.equals((Object) int0);
      assertFalse(boolean0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO;
      assertEquals(2, fraction1.byteValue());
      assertEquals(2, fraction1.shortValue());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(200.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertFalse(boolean0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction1.byteValue());
      assertEquals(2, fraction1.shortValue());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(200.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.intValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = Integer.MIN_VALUE;
      Fraction fraction1 = fraction0.add(int0);
      assertEquals((-2147483648L), fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(-2147483648, fraction1.intValue());
      assertEquals((-2.147483648E9), fraction1.doubleValue(), 0.01D);
      assertEquals((-2.14748365E9F), fraction1.floatValue(), 0.01F);
      assertEquals((-2.147483648E11), fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-2147483648, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      int int1 = fraction1.compareTo(fraction0);
      assertEquals((-1), int1);
      assertEquals((-2147483648L), fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(-2147483648, fraction1.intValue());
      assertEquals((-2.147483648E9), fraction1.doubleValue(), 0.01D);
      assertEquals((-2.14748365E9F), fraction1.floatValue(), 0.01F);
      assertEquals((-2.147483648E11), fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-2147483648, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals((byte)0, byte0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((int) byte0, (int) byte0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-0.09088450866185192);
      int int0 = (-6);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -0.091 to fraction after -6 iterations
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 0.0;
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals((short)0, short0);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      
      double double0 = (-2251.6);
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) short0, double0, (int) short0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-6);
      Fraction fraction0 = new Fraction((double) int0);
      assertEquals((-6.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-6.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-6, fraction0.shortValue());
      assertEquals(-6, fraction0.getNumerator());
      assertEquals((-600.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-6, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-6L), fraction0.longValue());
      assertEquals(-6, fraction0.intValue());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) int0, (double) int0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals(23274, int0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      
      double double0 = 1590.357;
      Fraction fraction1 = new Fraction(double0, int0);
      assertEquals(159000.0, fraction1.percentageValue(), 0.01D);
      assertEquals(54, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1590.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1590, fraction1.getNumerator());
      assertEquals(1590.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1590, fraction1.intValue());
      assertEquals(1590, fraction1.shortValue());
      assertEquals(1590L, fraction1.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals(3, int0);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = 807.176870708021;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(807L, fraction0.longValue());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertEquals(807, fraction0.shortValue());
      assertEquals(39, fraction0.byteValue());
      assertEquals(147, fraction0.getDenominator());
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
      assertEquals(807, fraction0.intValue());
      assertNotNull(fraction0);
      
      FractionField fractionField0 = fraction0.getField();
      assertEquals(807L, fraction0.longValue());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertEquals(807, fraction0.shortValue());
      assertEquals(39, fraction0.byteValue());
      assertEquals(147, fraction0.getDenominator());
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
      assertEquals(807, fraction0.intValue());
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = 807.176870708021;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(807L, fraction0.longValue());
      assertEquals(39, fraction0.byteValue());
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertEquals(147, fraction0.getDenominator());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(807, fraction0.intValue());
      assertEquals(807, fraction0.shortValue());
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals((short)807, short0);
      assertEquals(807L, fraction0.longValue());
      assertEquals(39, fraction0.byteValue());
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertEquals(147, fraction0.getDenominator());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(807, fraction0.intValue());
      assertEquals(807, fraction0.shortValue());
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
      
      Fraction fraction1 = fraction0.multiply((int) short0);
      assertEquals(49, fraction1.getDenominator());
      assertEquals(651391L, fraction1.longValue());
      assertEquals(31918195, fraction1.getNumerator());
      assertEquals(651391.7346938775, fraction1.doubleValue(), 0.01D);
      assertEquals(651391, fraction1.intValue());
      assertEquals(6.5139173469387755E7, fraction1.percentageValue(), 0.01D);
      assertEquals(127, fraction1.byteValue());
      assertEquals(651391.75F, fraction1.floatValue(), 0.01F);
      assertEquals(-3969, fraction1.shortValue());
      assertEquals(807L, fraction0.longValue());
      assertEquals(39, fraction0.byteValue());
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertEquals(147, fraction0.getDenominator());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(807, fraction0.intValue());
      assertEquals(807, fraction0.shortValue());
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      
      Fraction fraction1 = new Fraction(int0);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(0.6666667F, float0, 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = 807.176870708021;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(39, fraction0.byteValue());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(807, fraction0.intValue());
      assertEquals(807L, fraction0.longValue());
      assertEquals(147, fraction0.getDenominator());
      assertEquals(807, fraction0.shortValue());
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(807L, long0);
      assertEquals(39, fraction0.byteValue());
      assertEquals(807.1768707482993, fraction0.doubleValue(), 0.01D);
      assertEquals(807, fraction0.intValue());
      assertEquals(807L, fraction0.longValue());
      assertEquals(147, fraction0.getDenominator());
      assertEquals(807, fraction0.shortValue());
      assertEquals(807.1769F, fraction0.floatValue(), 0.01F);
      assertEquals(118655, fraction0.getNumerator());
      assertEquals(80717.68707482993, fraction0.percentageValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2/-2,147,483,648, cannot negate
         //
      }
  }
}
