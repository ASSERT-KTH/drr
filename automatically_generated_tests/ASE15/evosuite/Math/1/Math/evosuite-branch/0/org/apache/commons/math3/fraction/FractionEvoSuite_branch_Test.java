/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:25:23 GMT 2014
 */

package org.apache.commons.math3.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FractionEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(string0);
      assertEquals("2", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(string0);
      assertEquals("1 / 5", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-131);
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-131, cannot negate
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 2147483633;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2,147,483,633/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, short0);
      
      int int0 = 276;
      Fraction fraction1 = Fraction.getReducedFraction((int) short0, int0);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(23314, int0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int1 = fraction1.getNumerator();
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, int1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction2 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 23,314/0
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Fraction fraction0 = null;
      int int0 = Integer.MIN_VALUE;
      Fraction fraction1 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1, fraction1.shortValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction1.divide(fraction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      double double0 = 0.0;
      Fraction fraction1 = new Fraction(double0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
  }

  @Test
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = 0;
      Fraction fraction1 = new Fraction(int0);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
  }

  @Test
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = (-750);
      Fraction fraction1 = fraction0.add(int0);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-74980.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-749, fraction1.shortValue());
      assertEquals(-749, fraction1.intValue());
      assertEquals(19, fraction1.byteValue());
      assertEquals((-749.8), fraction1.doubleValue(), 0.01D);
      assertEquals(-3749, fraction1.getNumerator());
      assertEquals((-749L), fraction1.longValue());
      assertEquals((-749.8F), fraction1.floatValue(), 0.01F);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      float float0 = fraction1.floatValue();
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-74980.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-749, fraction1.shortValue());
      assertEquals(-749, fraction1.intValue());
      assertEquals(19, fraction1.byteValue());
      assertEquals((-749.8), fraction1.doubleValue(), 0.01D);
      assertEquals(-3749, fraction1.getNumerator());
      assertEquals((-749L), fraction1.longValue());
      assertEquals((-749.8F), fraction1.floatValue(), 0.01F);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals((-749.8F), float0, 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      Fraction fraction2 = new Fraction((double) float0);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-74980.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-749, fraction1.shortValue());
      assertEquals(-749, fraction1.intValue());
      assertEquals(19, fraction1.byteValue());
      assertEquals((-749.8), fraction1.doubleValue(), 0.01D);
      assertEquals(-3749, fraction1.getNumerator());
      assertEquals((-749L), fraction1.longValue());
      assertEquals((-749.8F), fraction1.floatValue(), 0.01F);
      assertEquals((-749L), fraction2.longValue());
      assertEquals(-749, fraction2.shortValue());
      assertEquals(16384, fraction2.getDenominator());
      assertEquals(-12284723, fraction2.getNumerator());
      assertEquals(19, fraction2.byteValue());
      assertEquals(-749, fraction2.intValue());
      assertEquals((-74979.99877929688), fraction2.percentageValue(), 0.01D);
      assertEquals((-749.7999877929688), fraction2.doubleValue(), 0.01D);
      assertEquals((-749.8F), fraction2.floatValue(), 0.01F);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      
      Fraction fraction3 = fraction2.divide(fraction1);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-74980.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-749, fraction1.shortValue());
      assertEquals(-749, fraction1.intValue());
      assertEquals(19, fraction1.byteValue());
      assertEquals((-749.8), fraction1.doubleValue(), 0.01D);
      assertEquals(-3749, fraction1.getNumerator());
      assertEquals((-749L), fraction1.longValue());
      assertEquals((-749.8F), fraction1.floatValue(), 0.01F);
      assertEquals((-749L), fraction2.longValue());
      assertEquals(-749, fraction2.shortValue());
      assertEquals(16384, fraction2.getDenominator());
      assertEquals(-12284723, fraction2.getNumerator());
      assertEquals(19, fraction2.byteValue());
      assertEquals(-749, fraction2.intValue());
      assertEquals((-74979.99877929688), fraction2.percentageValue(), 0.01D);
      assertEquals((-749.7999877929688), fraction2.doubleValue(), 0.01D);
      assertEquals((-749.8F), fraction2.floatValue(), 0.01F);
      assertEquals(61423615, fraction3.getNumerator());
      assertEquals(0, fraction3.byteValue());
      assertEquals(0, fraction3.intValue());
      assertEquals(0.9999999837196168, fraction3.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction3.floatValue(), 0.01F);
      assertEquals(99.99999837196168, fraction3.percentageValue(), 0.01D);
      assertEquals(61423616, fraction3.getDenominator());
      assertEquals(0, fraction3.shortValue());
      assertEquals(0L, fraction3.longValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction2);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction2));
      
      // Undeclared exception!
      try {
        Fraction fraction4 = fraction2.subtract(fraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -23,058,425,071
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_HALF;
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(50.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(50.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(-3, fraction2.getNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals((-30.0), fraction2.percentageValue(), 0.01D);
      assertEquals(10, fraction2.getDenominator());
      assertEquals((-0.3), fraction2.doubleValue(), 0.01D);
      assertEquals((-0.3F), fraction2.floatValue(), 0.01F);
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      double double0 = (-3.35612E-7);
      int int0 = 1995;
      Fraction fraction1 = new Fraction(double0, int0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals((-0.6), fraction2.doubleValue(), 0.01D);
      assertEquals(-3, fraction2.getNumerator());
      assertEquals(5, fraction2.getDenominator());
      assertEquals((-0.6F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals((-60.0), fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertNotNull(fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      
      Fraction fraction3 = fraction2.add(fraction1);
      assertEquals((-0.6), fraction2.doubleValue(), 0.01D);
      assertEquals(-3, fraction2.getNumerator());
      assertEquals(5, fraction2.getDenominator());
      assertEquals((-0.6F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals((-60.0), fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction3.getDenominator());
      assertEquals(0, fraction3.byteValue());
      assertEquals((-60.0), fraction3.percentageValue(), 0.01D);
      assertEquals((-0.6F), fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.shortValue());
      assertEquals(0, fraction3.intValue());
      assertEquals(-3, fraction3.getNumerator());
      assertEquals(0L, fraction3.longValue());
      assertEquals((-0.6), fraction3.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertNotNull(fraction3);
      assertSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertSame(fraction3, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
  }

  @Test
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction1);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
  }

  @Test
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.add(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = 37;
      Fraction fraction1 = fraction0.multiply(int0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(27L, fraction1.longValue());
      assertEquals(27.75F, fraction1.floatValue(), 0.01F);
      assertEquals(27, fraction1.shortValue());
      assertEquals(111, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(27, fraction1.intValue());
      assertEquals(27, fraction1.byteValue());
      assertEquals(2775.0, fraction1.percentageValue(), 0.01D);
      assertEquals(27.75, fraction1.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.divide(int0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(27L, fraction1.longValue());
      assertEquals(27.75F, fraction1.floatValue(), 0.01F);
      assertEquals(27, fraction1.shortValue());
      assertEquals(111, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(27, fraction1.intValue());
      assertEquals(27, fraction1.byteValue());
      assertEquals(2775.0, fraction1.percentageValue(), 0.01D);
      assertEquals(27.75, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(75.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0.75F, fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(4, fraction2.getDenominator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.75, fraction2.doubleValue(), 0.01D);
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction0));
      
      boolean boolean0 = fraction0.equals((Object) fraction2);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(27L, fraction1.longValue());
      assertEquals(27.75F, fraction1.floatValue(), 0.01F);
      assertEquals(27, fraction1.shortValue());
      assertEquals(111, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(27, fraction1.intValue());
      assertEquals(27, fraction1.byteValue());
      assertEquals(2775.0, fraction1.percentageValue(), 0.01D);
      assertEquals(27.75, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(75.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0.75F, fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(4, fraction2.getDenominator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.75, fraction2.doubleValue(), 0.01D);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertTrue(boolean0);
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction0));
  }

  @Test
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO;
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.shortValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(200.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2L, fraction1.longValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(2L, fraction2.longValue());
      assertEquals(2, fraction2.intValue());
      assertEquals(225.0, fraction2.percentageValue(), 0.01D);
      assertEquals(2.25F, fraction2.floatValue(), 0.01F);
      assertEquals(2.25, fraction2.doubleValue(), 0.01D);
      assertEquals(2, fraction2.byteValue());
      assertEquals(2, fraction2.shortValue());
      assertEquals(4, fraction2.getDenominator());
      assertEquals(9, fraction2.getNumerator());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.shortValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(200.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2L, fraction1.longValue());
      assertNotNull(fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction2.equals((Object) fraction0);
      assertEquals(2L, fraction2.longValue());
      assertEquals(2, fraction2.intValue());
      assertEquals(225.0, fraction2.percentageValue(), 0.01D);
      assertEquals(2.25F, fraction2.floatValue(), 0.01F);
      assertEquals(2.25, fraction2.doubleValue(), 0.01D);
      assertEquals(2, fraction2.byteValue());
      assertEquals(2, fraction2.shortValue());
      assertEquals(4, fraction2.getDenominator());
      assertEquals(9, fraction2.getNumerator());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.shortValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(200.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2L, fraction1.longValue());
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertFalse(boolean0);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      FractionField fractionField0 = fraction0.getField();
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fractionField0);
      
      boolean boolean0 = fraction0.equals((Object) fractionField0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(50.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(50.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_FIFTH;
      assertEquals(20.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.2, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(20.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.2, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = 37;
      Fraction fraction1 = fraction0.multiply(int0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(27, fraction1.byteValue());
      assertEquals(27, fraction1.intValue());
      assertEquals(27.75F, fraction1.floatValue(), 0.01F);
      assertEquals(111, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(27.75, fraction1.doubleValue(), 0.01D);
      assertEquals(27L, fraction1.longValue());
      assertEquals(2775.0, fraction1.percentageValue(), 0.01D);
      assertEquals(27, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int1 = fraction0.compareTo(fraction1);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(27, fraction1.byteValue());
      assertEquals(27, fraction1.intValue());
      assertEquals(27.75F, fraction1.floatValue(), 0.01F);
      assertEquals(111, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(27.75, fraction1.doubleValue(), 0.01D);
      assertEquals(27L, fraction1.longValue());
      assertEquals(2775.0, fraction1.percentageValue(), 0.01D);
      assertEquals(27, fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
  }

  @Test
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(25.0, fraction1.percentageValue(), 0.01D);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 703;
      int int1 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int1, int0);
      assertEquals(106, fraction0.byteValue());
      assertEquals((-3.0547420312944525E8), fraction0.percentageValue(), 0.01D);
      assertEquals((-3054742.0312944525), fraction0.doubleValue(), 0.01D);
      assertEquals(-3054742, fraction0.intValue());
      assertEquals((-3054742L), fraction0.longValue());
      assertEquals(703, fraction0.getDenominator());
      assertEquals((-3054742.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-2147483648, fraction0.getNumerator());
      assertEquals(25450, fraction0.shortValue());
      assertNotNull(fraction0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/703, cannot negate
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      double double0 = (-3.35612E-7);
      int int0 = (-1342);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -0 to fraction after -1,342 iterations
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = (-349);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) int0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -349 to fraction (-9,223,372,036,854,775,458/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = (-230.67);
      int int0 = 69;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -230.67 to fraction (-184,119,308,278,289/798,193,559,103)
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      double double0 = 1.6331239353195374E16;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 16,331,239,353,195,374 to fraction (16,331,239,353,195,374/1)
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(23314, int0);
      
      short short0 = fraction0.shortValue();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, short0);
      
      Fraction fraction1 = new Fraction((double) short0, int0);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getDenominator();
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, int0);
  }

  @Test
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      double double0 = fraction0.percentageValue();
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(25.0, double0, 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = (-750);
      Fraction fraction1 = fraction0.subtract(int0);
      assertEquals(750L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(750, fraction1.intValue());
      assertEquals(-18, fraction1.byteValue());
      assertEquals(75020.0, fraction1.percentageValue(), 0.01D);
      assertEquals(750.2, fraction1.doubleValue(), 0.01D);
      assertEquals(750, fraction1.shortValue());
      assertEquals(3751, fraction1.getNumerator());
      assertEquals(750.2F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, long0);
  }
}
