/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:10:43 GMT 2014
 */

package org.apache.commons.math3.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FractionEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 3;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(3.0, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.byteValue());
      assertEquals(3, fraction0.shortValue());
      assertEquals(300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(3, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3L, fraction0.longValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(3.0, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.byteValue());
      assertEquals(3, fraction0.shortValue());
      assertEquals(300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(3, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3L, fraction0.longValue());
      assertNotNull(string0);
      assertEquals("3", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertNotNull(fraction0);
      
      int int1 = fraction0.getNumerator();
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1, cannot negate
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
  }

  @Test
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getDenominator();
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, int0);
      
      int int1 = Integer.MIN_VALUE;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 5/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = fraction0.getDenominator();
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, int0);
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      int int0 = 0;
      Fraction fraction1 = new Fraction(int0);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      int int0 = 0;
      Fraction fraction1 = new Fraction(int0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      double double0 = 996.6997082157658;
      Fraction fraction1 = new Fraction(double0);
      assertEquals(996L, fraction1.longValue());
      assertEquals(996, fraction1.intValue());
      assertEquals(99669.96996996997, fraction1.percentageValue(), 0.01D);
      assertEquals(-28, fraction1.byteValue());
      assertEquals(331901, fraction1.getNumerator());
      assertEquals(996.6996996996997, fraction1.doubleValue(), 0.01D);
      assertEquals(996.6997F, fraction1.floatValue(), 0.01F);
      assertEquals(333, fraction1.getDenominator());
      assertEquals(996, fraction1.shortValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = (-512);
      Fraction fraction2 = fraction0.divide(int0);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals((-0.0013020834F), fraction2.floatValue(), 0.01F);
      assertEquals(768, fraction2.getDenominator());
      assertEquals((-0.13020833333333331), fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals((-0.0013020833333333333), fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      
      Fraction fraction3 = fraction2.divide(int0);
      assertEquals(2.5431315104166665E-6, fraction3.doubleValue(), 0.01D);
      assertEquals(0, fraction3.shortValue());
      assertEquals(0, fraction3.intValue());
      assertEquals(1, fraction3.getNumerator());
      assertEquals(2.5431315104166663E-4, fraction3.percentageValue(), 0.01D);
      assertEquals(2.5431316E-6F, fraction3.floatValue(), 0.01F);
      assertEquals(0L, fraction3.longValue());
      assertEquals(0, fraction3.byteValue());
      assertEquals(393216, fraction3.getDenominator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals((-0.0013020834F), fraction2.floatValue(), 0.01F);
      assertEquals(768, fraction2.getDenominator());
      assertEquals((-0.13020833333333331), fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals((-0.0013020833333333333), fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction3);
      assertNotNull(fraction3);
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction3));
      
      // Undeclared exception!
      try {
        Fraction fraction4 = fraction1.add(fraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 43,502,927,983
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(2, fraction0.getNumerator());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(1.5, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(150.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction2.shortValue());
      assertEquals(13, fraction2.getNumerator());
      assertEquals(2.1666666666666665, fraction2.doubleValue(), 0.01D);
      assertEquals(2.1666667F, fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.intValue());
      assertEquals(216.66666666666666, fraction2.percentageValue(), 0.01D);
      assertEquals(2L, fraction2.longValue());
      assertEquals(6, fraction2.getDenominator());
      assertEquals(2, fraction2.byteValue());
      assertEquals(1.5, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(150.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 3;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(3L, fraction0.longValue());
      assertEquals(300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.byteValue());
      assertEquals(3.0, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.shortValue());
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(int0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(3L, fraction0.longValue());
      assertEquals(300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.byteValue());
      assertEquals(3.0, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.shortValue());
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(300.0, fraction2.percentageValue(), 0.01D);
      assertEquals(3.0F, fraction2.floatValue(), 0.01F);
      assertEquals(3, fraction2.intValue());
      assertEquals(3.0, fraction2.doubleValue(), 0.01D);
      assertEquals(3L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(3, fraction2.shortValue());
      assertEquals(3, fraction2.byteValue());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(3L, fraction0.longValue());
      assertEquals(300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.byteValue());
      assertEquals(3.0, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.shortValue());
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      int int1 = 977;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.add(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = 1.0E-5;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(1.00001E-5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1.000010000100001E-5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(99999, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.001000010000100001, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_HALF;
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(50.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertEquals(1.00001E-5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1.000010000100001E-5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(99999, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.001000010000100001, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(50.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = fraction0.getDenominator();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, int0);
      
      Fraction fraction1 = new Fraction((double) int0);
      assertEquals(1, fraction1.intValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertEquals(1, fraction1.intValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE;
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(100.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotNull(fraction2);
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      
      boolean boolean0 = fraction1.equals((Object) fraction2);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(100.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertTrue(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(string0);
      assertEquals("3 / 4", string0);
      
      boolean boolean0 = fraction0.equals((Object) string0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 3;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(3L, fraction0.longValue());
      assertEquals(300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.intValue());
      assertEquals(3.0, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(int0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(3L, fraction0.longValue());
      assertEquals(300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.intValue());
      assertEquals(3.0, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.byteValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      int int1 = fraction0.compareTo(fraction1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(3L, fraction0.longValue());
      assertEquals(300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.intValue());
      assertEquals(3.0, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.byteValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1, int1);
  }

  @Test
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertEquals((-66.66666666666666), fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-0.6666667F), fraction1.floatValue(), 0.01F);
      assertEquals(-2, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals((-0.6666666666666666), fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-66.66666666666666), fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-0.6666667F), fraction1.floatValue(), 0.01F);
      assertEquals(-2, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals((-0.6666666666666666), fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals((-1), int0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(0, fraction0.byteValue());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(-2147483648, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01D);
      assertEquals(-2147483648, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2.147483648E11), fraction0.percentageValue(), 0.01D);
      assertEquals((-2147483648L), fraction0.longValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-2477);
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      double double0 = fraction0.doubleValue();
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.5, double0, 0.01D);
      
      int int0 = (-1280);
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(double0, (double) int0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.5 to fraction after -1,280 iterations
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 1523;
      Fraction fraction0 = new Fraction((double) int0, int0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1523, fraction0.shortValue());
      assertEquals(1523, fraction0.intValue());
      assertEquals(1523, fraction0.getNumerator());
      assertEquals(152300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1523.0, fraction0.doubleValue(), 0.01D);
      assertEquals(-13, fraction0.byteValue());
      assertEquals(1523L, fraction0.longValue());
      assertEquals(1523.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals((byte)0, byte0);
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) int0, (int) byte0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(23311, int0);
      
      double double0 = (-2353.048);
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) int0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 23,311 to fraction (9,223,372,036,854,752,498/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      int int0 = 2096;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -\u221E to fraction (-9,223,372,036,854,775,808/1)
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 3;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3.0, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.intValue());
      assertEquals(300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.byteValue());
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.shortValue());
      assertEquals(3L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int1 = fraction0.compareTo(fraction0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3.0, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.intValue());
      assertEquals(300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.byteValue());
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.shortValue());
      assertEquals(3L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Fraction fraction1 = fraction0.add(int1);
      assertEquals(300.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(3.0, fraction1.doubleValue(), 0.01D);
      assertEquals(3.0F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(3, fraction1.intValue());
      assertEquals(3, fraction1.byteValue());
      assertEquals(3, fraction1.shortValue());
      assertEquals(3L, fraction1.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3.0, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.intValue());
      assertEquals(300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.byteValue());
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.shortValue());
      assertEquals(3L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(int0 == int1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertTrue(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test35()  throws Throwable  {
      double double0 = (-3041.70799624056);
      int int0 = 107;
      Fraction fraction0 = new Fraction(double0, int0);
      assertEquals(31, fraction0.byteValue());
      assertEquals((-3041L), fraction0.longValue());
      assertEquals(-73001, fraction0.getNumerator());
      assertEquals(24, fraction0.getDenominator());
      assertEquals((-3041.7083F), fraction0.floatValue(), 0.01F);
      assertEquals((-3041.7083333333335), fraction0.doubleValue(), 0.01D);
      assertEquals((-304170.8333333334), fraction0.percentageValue(), 0.01D);
      assertEquals(-3041, fraction0.intValue());
      assertEquals(-3041, fraction0.shortValue());
      assertNotNull(fraction0);
  }

  @Test
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      double double0 = fraction0.percentageValue();
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(66.66666666666666, double0, 0.01D);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      FractionField fractionField0 = fraction0.getField();
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fractionField0);
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, byte0);
      
      Fraction fraction1 = fraction0.multiply((int) byte0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 3;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(3.0, fraction0.doubleValue(), 0.01D);
      assertEquals(300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.shortValue());
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(3L, fraction0.longValue());
      assertEquals(3, fraction0.intValue());
      assertEquals(3, fraction0.byteValue());
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(3.0, fraction0.doubleValue(), 0.01D);
      assertEquals(300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.shortValue());
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(3L, fraction0.longValue());
      assertEquals(3, fraction0.intValue());
      assertEquals(3, fraction0.byteValue());
      assertEquals(3L, long0);
  }
}
