/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:15:46 GMT 2014
 */

package org.apache.commons.math3.random;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BitsStreamGeneratorEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1361;
      intArray0[0] = int0;
      intArray0[1] = intArray0[0];
      int int1 = 1040;
      Well44497b well44497b0 = new Well44497b(int1);
      assertFalse(int1 == int0);
      assertNotNull(well44497b0);
      
      byte[] byteArray0 = new byte[10];
      well44497b0.nextBytes(byteArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-97), (byte) (-120), (byte)68, (byte) (-56), (byte) (-18), (byte) (-108), (byte)113, (byte) (-102), (byte) (-12)}, byteArray0);
      
      int int2 = well44497b0.nextInt(intArray0[1]);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(1176, int2);
      assertArrayEquals(new int[] {1361, 1361}, intArray0);
      
      int int3 = well44497b0.next(byteArray0[1]);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(756526840, int3);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-97), (byte) (-120), (byte)68, (byte) (-56), (byte) (-18), (byte) (-108), (byte)113, (byte) (-102), (byte) (-12)}, byteArray0);
      
      Well19937a well19937a0 = new Well19937a((long) int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertNotNull(well19937a0);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-97), (byte) (-120), (byte)68, (byte) (-56), (byte) (-18), (byte) (-108), (byte)113, (byte) (-102), (byte) (-12)}, byteArray0);
      
      int int4 = well19937a0.nextInt(int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int4);
      assertEquals(444305676, int4);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-97), (byte) (-120), (byte)68, (byte) (-56), (byte) (-18), (byte) (-108), (byte)113, (byte) (-102), (byte) (-12)}, byteArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      int int0 = 16;
      int int1 = iSAACRandom0.nextInt(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(9, int1);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 749;
      Well44497a well44497a0 = new Well44497a(int0);
      assertNotNull(well44497a0);
      
      int int1 = 0;
      try {
        int int2 = well44497a0.nextInt(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      long long0 = 0L;
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      double double0 = well19937c0.nextGaussian();
      assertEquals((-0.043481143175376734), double0, 0.01D);
      
      double double1 = well19937c0.nextGaussian();
      assertFalse(double1 == double0);
      assertEquals((-1.0233409976508043), double1, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 2690;
      Well44497b well44497b0 = new Well44497b(int0);
      assertNotNull(well44497b0);
      
      byte[] byteArray0 = new byte[10];
      well44497b0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)117, (byte)14, (byte)31, (byte)61, (byte)46, (byte) (-104), (byte)57, (byte)111, (byte)26}, byteArray0);
      
      int int1 = well44497b0.nextInt((int) byteArray0[7]);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      assertArrayEquals(new byte[] {(byte)32, (byte)117, (byte)14, (byte)31, (byte)61, (byte)46, (byte) (-104), (byte)57, (byte)111, (byte)26}, byteArray0);
      
      boolean boolean0 = well44497b0.nextBoolean();
      assertFalse(int0 == int1);
      assertTrue(boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-9);
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      Well44497b well44497b0 = new Well44497b((long) int0);
      assertNotNull(well44497b0);
      
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      boolean boolean0 = well19937a0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      long long0 = 0L;
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      long long1 = well19937c0.nextLong();
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-4736355256857903122L), long1);
  }

  @Test
  public void test7()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      float float0 = iSAACRandom0.nextFloat();
      assertEquals(0.58670545F, float0, 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-937);
      Well44497a well44497a0 = new Well44497a(int0);
      assertNotNull(well44497a0);
      
      int int1 = well44497a0.nextInt();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1909739440), int1);
  }
}
