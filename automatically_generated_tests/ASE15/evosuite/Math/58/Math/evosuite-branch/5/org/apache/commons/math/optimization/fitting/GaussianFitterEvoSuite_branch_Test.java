/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:55:03 GMT 2014
 */

package org.apache.commons.math.optimization.fitting;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.exception.NullArgumentException;
import org.apache.commons.math.exception.NumberIsTooSmallException;
import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
import org.apache.commons.math.optimization.fitting.GaussianFitter;
import org.apache.commons.math.optimization.fitting.WeightedObservedPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class GaussianFitterEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[7];
      double double0 = 26.610152548114026;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals(26.610152548114026, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getWeight(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals(26.610152548114026, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[0].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      double double1 = 1443.5941992874627;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double1, double0, double0);
      assertEquals(26.610152548114026, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(1443.5941992874627, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint1.getY(), 0.01D);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint1);
      
      weightedObservedPointArray0[6] = weightedObservedPoint1;
      assertEquals(26.610152548114026, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(1443.5941992874627, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(1443.5941992874627, weightedObservedPointArray0[6].getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[6].getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[6].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[6]);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
      double double0 = 9.223372036854776E18;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getWeight(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      double double1 = (-10.078982639325545);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double1, double0, double0);
      assertEquals(9.223372036854776E18, weightedObservedPoint1.getY(), 0.01D);
      assertEquals((-10.078982639325545), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint1.getX(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint1);
      
      weightedObservedPointArray0[6] = weightedObservedPoint1;
      assertEquals((-10.078982639325545), weightedObservedPointArray0[6].getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[6].getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[6].getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint1.getY(), 0.01D);
      assertEquals((-10.078982639325545), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint1.getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[6]);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[7];
      double double0 = 26.610152548114026;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals(26.610152548114026, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getX(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals(26.610152548114026, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      double double1 = 1443.5941992874627;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double1, double1, double1);
      assertEquals(1443.5941992874627, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(1443.5941992874627, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(1443.5941992874627, weightedObservedPoint1.getWeight(), 0.01D);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double1 == double0);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint1);
      
      weightedObservedPointArray0[5] = weightedObservedPoint1;
      assertEquals(1443.5941992874627, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(1443.5941992874627, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(1443.5941992874627, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(1443.5941992874627, weightedObservedPointArray0[5].getY(), 0.01D);
      assertEquals(1443.5941992874627, weightedObservedPointArray0[5].getX(), 0.01D);
      assertEquals(1443.5941992874627, weightedObservedPointArray0[5].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[5]);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
      double double0 = 9.223372036854776E18;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getWeight(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      double double1 = (-10.078982639325545);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double1, double1, double1);
      assertEquals((-10.078982639325545), weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-10.078982639325545), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals((-10.078982639325545), weightedObservedPoint1.getY(), 0.01D);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double1 == double0);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint1);
      
      weightedObservedPointArray0[7] = weightedObservedPoint1;
      assertEquals((-10.078982639325545), weightedObservedPointArray0[7].getX(), 0.01D);
      assertEquals((-10.078982639325545), weightedObservedPointArray0[7].getWeight(), 0.01D);
      assertEquals((-10.078982639325545), weightedObservedPointArray0[7].getY(), 0.01D);
      assertEquals((-10.078982639325545), weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-10.078982639325545), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals((-10.078982639325545), weightedObservedPoint1.getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[7]);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = (-1.5804047969181667);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals((-1.5804047969181667), weightedObservedPoint0.getY(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPoint0.getX(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals((-1.5804047969181667), weightedObservedPoint0.getY(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      weightedObservedPointArray0[1] = weightedObservedPointArray0[0];
      assertEquals((-1.5804047969181667), weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[1]);
      
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      assertEquals((-1.5804047969181667), weightedObservedPoint0.getY(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPointArray0[2].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[2]);
      
      double double1 = Double.POSITIVE_INFINITY;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double0, double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, weightedObservedPoint1.getY(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPoint1.getWeight(), 0.01D);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint1);
      
      weightedObservedPointArray0[3] = weightedObservedPoint1;
      assertEquals(Double.POSITIVE_INFINITY, weightedObservedPoint1.getY(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals((-1.5804047969181667), weightedObservedPointArray0[3].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[3]);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-1.5804047969181667), 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[7];
      double double0 = 26.610152548114026;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals(26.610152548114026, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getWeight(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals(26.610152548114026, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      assertEquals(26.610152548114026, weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[1]);
      
      weightedObservedPointArray0[2] = weightedObservedPointArray0[0];
      assertEquals(26.610152548114026, weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[2].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[2]);
      
      weightedObservedPointArray0[3] = weightedObservedPointArray0[0];
      assertEquals(26.610152548114026, weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[3].getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[3].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[3]);
      
      weightedObservedPointArray0[4] = weightedObservedPointArray0[2];
      assertEquals(26.610152548114026, weightedObservedPointArray0[4].getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[4].getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[4].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[4]);
      
      double double1 = 1272.5626699339625;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double1, double0, double1);
      assertEquals(26.610152548114026, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(1272.5626699339625, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(1272.5626699339625, weightedObservedPoint1.getWeight(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double0 == double1);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint1);
      
      weightedObservedPointArray0[5] = weightedObservedPoint1;
      assertEquals(26.610152548114026, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(1272.5626699339625, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(1272.5626699339625, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[5].getX(), 0.01D);
      assertEquals(1272.5626699339625, weightedObservedPointArray0[5].getY(), 0.01D);
      assertEquals(1272.5626699339625, weightedObservedPointArray0[5].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[5]);
      
      weightedObservedPointArray0[6] = weightedObservedPoint1;
      assertEquals(26.610152548114026, weightedObservedPointArray0[6].getX(), 0.01D);
      assertEquals(1272.5626699339625, weightedObservedPointArray0[6].getWeight(), 0.01D);
      assertEquals(1272.5626699339625, weightedObservedPointArray0[6].getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(1272.5626699339625, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(1272.5626699339625, weightedObservedPoint1.getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[6]);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {1272.5626699339625, 26.610152548114026, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
      double double0 = 9.223372036854776E18;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getX(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[0].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      weightedObservedPointArray0[1] = weightedObservedPointArray0[0];
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[1].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[1]);
      
      double double1 = (-10.078982639325545);
      weightedObservedPointArray0[2] = weightedObservedPointArray0[1];
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[2].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[2]);
      
      weightedObservedPointArray0[3] = weightedObservedPoint0;
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[3].getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint0.getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[3]);
      
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double0, double0, double1);
      assertEquals(9.223372036854776E18, weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-10.078982639325545), weightedObservedPoint1.getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint1.getWeight(), 0.01D);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertNotNull(weightedObservedPoint1);
      
      weightedObservedPointArray0[4] = weightedObservedPoint1;
      assertEquals(9.223372036854776E18, weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-10.078982639325545), weightedObservedPoint1.getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[4].getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[4].getX(), 0.01D);
      assertEquals((-10.078982639325545), weightedObservedPointArray0[4].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[4]);
      
      weightedObservedPointArray0[5] = weightedObservedPointArray0[4];
      assertEquals((-10.078982639325545), weightedObservedPointArray0[5].getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[5].getWeight(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[5].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[5]);
      
      weightedObservedPointArray0[6] = weightedObservedPointArray0[4];
      assertEquals((-10.078982639325545), weightedObservedPointArray0[6].getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[6].getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[6].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[6]);
      
      weightedObservedPointArray0[7] = weightedObservedPointArray0[5];
      assertEquals((-10.078982639325545), weightedObservedPointArray0[7].getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[7].getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[7].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[7]);
      
      weightedObservedPointArray0[8] = weightedObservedPointArray0[6];
      assertEquals((-10.078982639325545), weightedObservedPointArray0[8].getY(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[8].getX(), 0.01D);
      assertEquals(9.223372036854776E18, weightedObservedPointArray0[8].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[8]);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {9.223372036854776E18, 9.223372036854776E18, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[7];
      double double0 = 26.610152548114026;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals(26.610152548114026, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getY(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals(26.610152548114026, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      assertEquals(26.610152548114026, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[1]);
      
      weightedObservedPointArray0[2] = weightedObservedPointArray0[0];
      assertEquals(26.610152548114026, weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[2].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[2]);
      
      weightedObservedPointArray0[3] = weightedObservedPointArray0[0];
      assertEquals(26.610152548114026, weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[3].getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[3]);
      
      weightedObservedPointArray0[4] = weightedObservedPointArray0[2];
      assertEquals(26.610152548114026, weightedObservedPointArray0[4].getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[4].getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[4].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[4]);
      
      weightedObservedPointArray0[5] = weightedObservedPoint0;
      assertEquals(26.610152548114026, weightedObservedPointArray0[5].getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[5].getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[5].getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPoint0.getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[5]);
      
      weightedObservedPointArray0[6] = weightedObservedPointArray0[1];
      assertEquals(26.610152548114026, weightedObservedPointArray0[6].getWeight(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[6].getY(), 0.01D);
      assertEquals(26.610152548114026, weightedObservedPointArray0[6].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[6]);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {26.610152548114026, 26.610152548114026, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {26.610152548114026, 26.610152548114026, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = null;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = null;
      try {
        gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null is not allowed: input array
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = null;
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);
      assertNotNull(gaussianFitter0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = gaussianFitter0.fit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (3)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = null;
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);
      assertNotNull(gaussianFitter0);
      
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try {
        double[] doubleArray1 = gaussianFitter0.fit(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
