/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:23:08 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.ExponentialDistribution;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FDistributionEvoSuite_branch_Test   {

 // @Test
  public void test0()  throws Throwable  {
      double double0 = 1.9575583661463974E-10;
      FDistribution fDistribution0 = new FDistribution(double0, double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(1.9575583661463974E-10, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1.9575583661463974E-10, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      
      int int0 = 306;
      double[] doubleArray0 = fDistribution0.sample(int0);
      assertNotNull(doubleArray0);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(1.9575583661463974E-10, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1.9575583661463974E-10, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertArrayEquals(new double[] {1.071310074972848E16, 1.0713100749728216E16, 1.071310074972824E16, 2.2552506516031754E-10, 2.2803556447343235E-10, 0.0, 1.0713100749728558E16, 1.071310074972829E16, 3.3567195781899473E-10, 3.5153002906925426E-10, 1.0713100749728222E16, 0.0, 0.0, 3.2615536938973943E-10, 1.071310074972856E16, 1.985602849151366E-10, 1.0713100749728402E16, 0.0, 0.0, 1.071310074972821E16, 2.448560958338841E-10, 1.0713100749728096E16, 1.0713100749728422E16, 2.2059860803524153E-10, 2.5639334529191694E-10, 1.0713100749728544E16, 3.2524857818999024E-10, 2.1488551799035358E-10, 0.0, 0.0, 2.1405536873309993E-10, 2.888308393218021E-10, 0.0, 3.4749479695137833E-10, 2.3226967429595573E-10, 0.0, 0.0, 0.0, 1.0713100749728332E16, 1.0713100749728504E16, 1.0713100749728266E16, 1.0713100749728442E16, 0.0, 1.0713100749728396E16, 1.0713100749728572E16, 1.0713100749728372E16, 1.0713100749728252E16, 1.07131007497282E16, 1.0713100749728412E16, 0.0, 1.0713100749728364E16, 1.071310074972802E16, 0.0, 1.07131007497283E16, 1.0713100749728532E16, 1.0713100749728258E16, 1.071310074972816E16, 1.0713100749728122E16, 0.0, 2.221826354029871E-10, 1.0713100749728618E16, 1.0713100749728524E16, 2.5654501125027627E-10, 2.514054701889906E-10, 1.0713100749728272E16, 0.0, 0.0, 0.0, 3.9133370428024114E-10, 2.1990711193206348E-10, 0.0, 1.07131007497282E16, 1.0713100749728392E16, 2.1031907720257103E-10, 1.0713100749728382E16, 3.5371237549142784E-10, 0.0, 0.0, 3.882779318927408E-10, 1.0713100749728468E16, 0.0, 0.0, 1.0713100749728292E16, 1.0713100749728484E16, 1.071310074972818E16, 1.0713100749728472E16, 2.42146410937755E-10, 1.0713100749728312E16, 1.0713100749728492E16, 0.0, 2.0385634613219184E-10, 0.0, 1.0713100749728152E16, 1.07131007497283E16, 1.0713100749728246E16, 1.0713100749728548E16, 1.0713100749728614E16, 0.0, 1.0713100749728008E16, 0.0, 3.7896056579838675E-10, 1.0713100749728372E16, 0.0, 1.0713100749727986E16, 1.0713100749728562E16, 1.07131007497284E16, 0.0, 1.071310074972845E16, 2.551545025060862E-10, 1.0713100749728024E16, 0.0, 1.0713100749728112E16, 1.0713100749728176E16, 1.0713100749728324E16, 2.0427093540462973E-10, 1.0713100749728196E16, 1.0713100749728512E16, 3.428403498050559E-10, 3.1023412994067447E-10, 1.0713100749728262E16, 1.071310074972846E16, 3.431813315159401E-10, 1.0713100749728318E16, 1.0713100749728532E16, 1.0713100749728152E16, 1.071310074972853E16, 0.0, 1.0713100749728228E16, 0.0, 1.0713100749728266E16, 1.0713100749728112E16, 1.0713100749728192E16, 2.963034718295177E-10, 1.9806557887846867E-10, 0.0, 1.0713100749728682E16, 0.0, 1.071310074972826E16, 1.0713100749728154E16, 3.389842901718292E-10, 1.0713100749728224E16, 0.0, 0.0, 2.411051748046654E-10, 1.0713100749728334E16, 2.9147238379501524E-10, 1.0713100749728268E16, 0.0, 0.0, 2.0912102413847385E-10, 1.0713100749728224E16, 1.0713100749728286E16, 0.0, 1.0713100749728694E16, 2.112474836004074E-10, 1.071310074972835E16, 1.0713100749728332E16, 0.0, 2.575352653589319E-10, 1.0713100749728044E16, 1.07131007497285E16, 3.315174858431633E-10, 1.0713100749728486E16, 0.0, 1.0713100749728492E16, 0.0, 0.0, 0.0, 1.0713100749728376E16, 1.0713100749728616E16, 0.0, 1.071310074972812E16, 1.071310074972839E16, 1.0713100749728676E16, 1.0713100749728324E16, 0.0, 3.622230851576993E-10, 1.0713100749728688E16, 2.2416545519671604E-10, 0.0, 1.071310074972821E16, 0.0, 1.0713100749728516E16, 3.7033147855677965E-10, 0.0, 0.0, 1.0713100749728268E16, 1.0713100749728068E16, 0.0, 3.8244431665444365E-10, 1.071310074972845E16, 2.3245676255797235E-10, 2.1056092625070818E-10, 3.653401556685658E-10, 1.07131007497284E16, 1.0713100749728646E16, 1.071310074972834E16, 1.071310074972832E16, 3.6034993478982563E-10, 1.0713100749728502E16, 0.0, 1.0713100749728496E16, 2.9235915159044E-10, 1.0713100749728428E16, 1.0713100749728224E16, 1.0713100749728566E16, 1.0713100749728584E16, 0.0, 1.071310074972844E16, 1.0713100749728262E16, 1.0713100749728216E16, 0.0, 3.798909024456416E-10, 3.4762666474025753E-10, 1.0713100749728346E16, 3.274955499345177E-10, 0.0, 0.0, 2.2089783864221903E-10, 0.0, 1.0713100749728306E16, 3.3241562294607283E-10, 0.0, 1.07131007497285E16, 1.0713100749728128E16, 1.071310074972858E16, 1.0713100749728116E16, 1.0713100749728372E16, 3.3289899823035074E-10, 0.0, 2.4945559621487604E-10, 1.0713100749728744E16, 2.0842005562883992E-10, 1.0713100749728104E16, 2.0841756173151311E-10, 3.1628817528075584E-10, 0.0, 1.0713100749728546E16, 0.0, 1.9957711660767628E-10, 0.0, 2.120988000195244E-10, 1.0713100749728192E16, 2.9934837665467763E-10, 0.0, 1.071310074972856E16, 3.6311606429935117E-10, 2.0861933023790124E-10, 2.2570335644119558E-10, 0.0, 2.3706418380030525E-10, 1.0713100749728198E16, 2.6437068920903424E-10, 1.0713100749728124E16, 1.0713100749728508E16, 1.071310074972829E16, 2.0985111154008132E-10, 3.913312291205809E-10, 0.0, 2.0023246926951572E-10, 0.0, 0.0, 1.0713100749728284E16, 1.0713100749728508E16, 1.0713100749728714E16, 2.1604750587864155E-10, 3.8848695766055567E-10, 2.701237977729242E-10, 1.0713100749728194E16, 3.374803335043407E-10, 1.0713100749728716E16, 1.0713100749728344E16, 0.0, 3.56600843713882E-10, 1.0713100749728284E16, 0.0, 0.0, 0.0, 1.0713100749728092E16, 1.0713100749728332E16, 1.0713100749728508E16, 1.0713100749728156E16, 0.0, 1.0713100749728464E16, 2.0980596579429865E-10, 3.713470317671662E-10, 1.0713100749728266E16, 0.0, 1.071310074972842E16, 1.0713100749728488E16, 2.3161964528501435E-10, 1.071310074972827E16, 1.0713100749728436E16, 1.0713100749728524E16, 2.257227779229746E-10, 1.0713100749728344E16, 1.0713100749728088E16, 2.364700165058097E-10, 0.0, 1.0713100749728136E16, 1.0713100749728514E16, 2.5886539458195643E-10, 0.0, 0.0, 1.0713100749728212E16, 1.0713100749728172E16}, doubleArray0, 0.01);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 5409.1846922;
      FDistribution fDistribution0 = new FDistribution(double0, double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(5409.1846922, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(5409.1846922, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0003698782478958, fDistribution0.getNumericalMean(), 0.01D);
      
      double double1 = 0.193811297416687;
      double double2 = fDistribution0.inverseCumulativeProbability(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(5409.1846922, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(5409.1846922, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0003698782478958, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.5068558690682426, double2, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 4314.1311;
      double double1 = (-777.7431);
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-777.743)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 1.9575583661463974E-10;
      double double1 = (-3379.9);
      FDistribution fDistribution0 = new FDistribution(double0, double0, double1);
      assertNotNull(fDistribution0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.9575583661463974E-10, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.9575583661463974E-10, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      
      double double2 = fDistribution0.getNumeratorDegreesOfFreedom();
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.9575583661463974E-10, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.9575583661463974E-10, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1.9575583661463974E-10, double2, 0.01D);
      
      FDistribution fDistribution1 = null;
      try {
        fDistribution1 = new FDistribution(double1, double2, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-3,379.9)
         //
      }
  }

  //@Test
  public void test4()  throws Throwable  {
      double double0 = 0.771896385675765;
      ExponentialDistribution exponentialDistribution0 = new ExponentialDistribution(double0, double0);
      assertNotNull(exponentialDistribution0);
      assertEquals(0.771896385675765, exponentialDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportConnected());
      assertEquals(false, exponentialDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, exponentialDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, exponentialDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.5958240302193094, exponentialDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.771896385675765, exponentialDistribution0.getMean(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportLowerBoundInclusive());
      
      Well19937c well19937c0 = (Well19937c)exponentialDistribution0.random;
      assertNotNull(well19937c0);
      assertEquals(0.771896385675765, exponentialDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportConnected());
      assertEquals(false, exponentialDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, exponentialDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, exponentialDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.5958240302193094, exponentialDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.771896385675765, exponentialDistribution0.getMean(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportLowerBoundInclusive());
      
      FDistribution fDistribution0 = new FDistribution((RandomGenerator) well19937c0, double0, double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(0.771896385675765, exponentialDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportConnected());
      assertEquals(false, exponentialDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, exponentialDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, exponentialDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.5958240302193094, exponentialDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.771896385675765, exponentialDistribution0.getMean(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.771896385675765, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.771896385675765, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      
      double double1 = fDistribution0.sample();
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.771896385675765, exponentialDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportConnected());
      assertEquals(false, exponentialDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, exponentialDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, exponentialDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.5958240302193094, exponentialDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.771896385675765, exponentialDistribution0.getMean(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.771896385675765, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.771896385675765, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(103.76556031192618, double1, 0.01D);
      
      double double2 = fDistribution0.density(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.771896385675765, exponentialDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportConnected());
      assertEquals(false, exponentialDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, exponentialDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, exponentialDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.5958240302193094, exponentialDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.771896385675765, exponentialDistribution0.getMean(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.771896385675765, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.771896385675765, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(3.605561702170768E-4, double2, 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 5409.1846922;
      FDistribution fDistribution0 = new FDistribution(double0, double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(5409.1846922, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(5409.1846922, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1.0003698782478958, fDistribution0.getNumericalMean(), 0.01D);
      
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(5409.1846922, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(5409.1846922, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1.0003698782478958, fDistribution0.getNumericalMean(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 0.771896385675765;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(0.771896385675765, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.771896385675765, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      FDistribution fDistribution0 = new FDistribution(double0, double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertFalse(boolean0);
  }
}
