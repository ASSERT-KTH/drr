/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:16:28 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.CauchyDistribution;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.exception.NoBracketingException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FDistributionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long long0 = 1664525L;
      FDistribution fDistribution0 = new FDistribution((double) long0, (double) long0);
      assertNotNull(fDistribution0);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(1.0000012015454278, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1664525.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1664525.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(2.403098074025773E-6, double0, 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(1.0000012015454278, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1664525.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1664525.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      
      double double1 = fDistribution0.getNumericalVariance();
      assertEquals(2.403098074025773E-6, double1, 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(1.0000012015454278, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1664525.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1664525.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertTrue(double1 == double0);
  }

  //@Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = 2.0;
      FDistribution fDistribution0 = new FDistribution(double0, double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      
      double double1 = fDistribution0.sample();
      assertEquals(10.10235431228486, double1, 0.01D);
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 3499;
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertNotNull(well19937a0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((RandomGenerator) well19937a0, (double) int0, (double) intArray0[3], (double) intArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = 0.0;
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(double0, double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = 793.6926070753025;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(793.6926070753025, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(793.6926070753025, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1.002526233012821, fDistribution0.getNumericalMean(), 0.01D);
      
      double double1 = fDistribution0.density(double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(793.6926070753025, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(793.6926070753025, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1.002526233012821, fDistribution0.getNumericalMean(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      long long0 = 1664525L;
      FDistribution fDistribution0 = new FDistribution((double) long0, (double) long0);
      assertNotNull(fDistribution0);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1664525.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1.0000012015454278, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1664525.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertFalse(boolean0);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1664525.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1.0000012015454278, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1664525.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = 793.6926070753025;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(793.6926070753025, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(793.6926070753025, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(1.002526233012821, fDistribution0.getNumericalMean(), 0.01D);
      
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertFalse(boolean0);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(793.6926070753025, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(793.6926070753025, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(1.002526233012821, fDistribution0.getNumericalMean(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double double0 = 0.0;
      CauchyDistribution cauchyDistribution0 = new CauchyDistribution();
      assertNotNull(cauchyDistribution0);
      assertEquals(true, cauchyDistribution0.isSupportConnected());
      assertEquals(1.0, cauchyDistribution0.getScale(), 0.01D);
      assertEquals(Double.NaN, cauchyDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, cauchyDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, cauchyDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(Double.NaN, cauchyDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(false, cauchyDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, cauchyDistribution0.getMedian(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, cauchyDistribution0.getSupportLowerBound(), 0.01D);
      
      Well19937c well19937c0 = (Well19937c)cauchyDistribution0.random;
      assertNotNull(well19937c0);
      assertEquals(true, cauchyDistribution0.isSupportConnected());
      assertEquals(1.0, cauchyDistribution0.getScale(), 0.01D);
      assertEquals(Double.NaN, cauchyDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, cauchyDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, cauchyDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(Double.NaN, cauchyDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(false, cauchyDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, cauchyDistribution0.getMedian(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, cauchyDistribution0.getSupportLowerBound(), 0.01D);
      
      double double1 = Double.NaN;
      FDistribution fDistribution0 = new FDistribution((RandomGenerator) well19937c0, double1, double1, double0);
      assertNotNull(fDistribution0);
      assertEquals(true, cauchyDistribution0.isSupportConnected());
      assertEquals(1.0, cauchyDistribution0.getScale(), 0.01D);
      assertEquals(Double.NaN, cauchyDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, cauchyDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, cauchyDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(Double.NaN, cauchyDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(false, cauchyDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, cauchyDistribution0.getMedian(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, cauchyDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      // Undeclared exception!
      try {
        double double2 = fDistribution0.sample();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 1], values: [-0.903, \uFFFD]
         //
      }
  }
}
