/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:36:02 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class PoissonDistributionImplEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      long long0 = 19L;
      int int0 = 32;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl((double) long0, int0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(19.0, poissonDistributionImpl0.getMean(), 0.01D);
      
      double double0 = 1.0;
      int int1 = poissonDistributionImpl0.inverseCumulativeProbability(double0);
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(19.0, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 206.69373;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(206.69373, poissonDistributionImpl0.getMean(), 0.01D);
      
      double double1 = 0.0;
      int int0 = poissonDistributionImpl0.inverseCumulativeProbability(double1);
      assertEquals((-1), int0);
      assertEquals(206.69373, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 2995.175552158843;
      int int0 = 2999;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(2995.175552158843, poissonDistributionImpl0.getMean(), 0.01D);
      
      int int1 = 0;
      double double1 = poissonDistributionImpl0.probability(int1);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(2995.175552158843, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 0.5;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
      
      int int0 = Integer.MAX_VALUE;
      double double1 = poissonDistributionImpl0.probability(int0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 2995.175552158843;
      int int0 = 2999;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(2995.175552158843, poissonDistributionImpl0.getMean(), 0.01D);
      
      double double1 = poissonDistributionImpl0.probability((double) int0);
      assertEquals(0.007266910588764389, double1, 0.01D);
      assertEquals(2995.175552158843, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 206.69373;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(206.69373, poissonDistributionImpl0.getMean(), 0.01D);
      
      int int0 = (-308);
      double double1 = poissonDistributionImpl0.probability(int0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(206.69373, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 0.0;
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0): mean (0)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 2995.175552158843;
      int int0 = 2999;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, (double) int0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(2995.175552158843, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 206.69373;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(206.69373, poissonDistributionImpl0.getMean(), 0.01D);
      
      double double1 = poissonDistributionImpl0.getMean();
      assertEquals(206.69373, double1, 0.01D);
      assertEquals(206.69373, poissonDistributionImpl0.getMean(), 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      double double1 = 621.0;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double1, double0, int0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(621.0, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = poissonDistributionImpl0.normalApproximateProbability(int0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(621.0, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      double double1 = 621.0;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double1, double0, int0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(621.0, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int1 = poissonDistributionImpl0.sample();
      assertEquals(626, int1);
      assertEquals(621.0, poissonDistributionImpl0.getMean(), 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }
}
