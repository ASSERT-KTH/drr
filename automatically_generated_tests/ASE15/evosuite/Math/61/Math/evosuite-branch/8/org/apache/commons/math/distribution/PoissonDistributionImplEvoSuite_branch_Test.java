/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:38:10 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class PoissonDistributionImplEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 0.5;
      int int0 = 1481;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
      
      int int1 = poissonDistributionImpl0.getDomainUpperBound(double0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      double double1 = poissonDistributionImpl0.cumulativeProbability(int2, int1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = 10.0;
      int int0 = 1383;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0, int0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(10.0, poissonDistributionImpl0.getMean(), 0.01D);
      
      int int1 = 0;
      double double1 = poissonDistributionImpl0.probability((double) int1);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertEquals(4.5399929762484854E-5, double1, 0.01D);
      assertEquals(10.0, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = 0.5;
      int int0 = 1481;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
      
      int int1 = poissonDistributionImpl0.getDomainUpperBound(double0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
      
      double double1 = poissonDistributionImpl0.probability(int1);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = 1.8014398509481984E16;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(1.8014398509481984E16, poissonDistributionImpl0.getMean(), 0.01D);
      
      int int0 = 2807;
      double double1 = poissonDistributionImpl0.probability(int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(1.8014398509481984E16, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = 1245.8;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(1245.8, poissonDistributionImpl0.getMean(), 0.01D);
      
      int int0 = (-396);
      double double1 = poissonDistributionImpl0.probability(int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(1245.8, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 143;
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0): mean (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = 1.8014398509481984E16;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(1.8014398509481984E16, poissonDistributionImpl0.getMean(), 0.01D);
      
      double double1 = 0.11113807559013367;
      int int0 = poissonDistributionImpl0.inverseCumulativeProbability(double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2147483646, int0);
      assertEquals(1.8014398509481984E16, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int int0 = 207;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl((double) int0, (double) int0, int0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(207.0, poissonDistributionImpl0.getMean(), 0.01D);
      
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(207.0, double0, 0.01D);
      assertEquals(207.0, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double double0 = 1245.8;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(1245.8, poissonDistributionImpl0.getMean(), 0.01D);
      
      int int0 = (-396);
      double double1 = poissonDistributionImpl0.normalApproximateProbability(int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(1245.8, poissonDistributionImpl0.getMean(), 0.01D);
  }

  //@Test(timeout = 4000)
  public void test9()  throws Throwable  {
      double double0 = 1.0;
      int int0 = 207;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl((double) int0, double0, int0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(207.0, poissonDistributionImpl0.getMean(), 0.01D);
      
      int[] intArray0 = poissonDistributionImpl0.sample(int0);
      assertNotNull(intArray0);
      assertEquals(207.0, poissonDistributionImpl0.getMean(), 0.01D);
      assertArrayEquals(new int[] {210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219, 210, 215, 219}, intArray0);
  }
}
