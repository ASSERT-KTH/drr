/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:23:48 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Acosh;
import org.apache.commons.math3.analysis.function.Power;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BrentOptimizerEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 0.7194743221949258;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(brentOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      //  // Unstable assertion: assertNotNull(brentOptimizer0);
      
      int int0 = 1378;
      Acosh acosh0 = new Acosh();
      //  // Unstable assertion: assertNotNull(acosh0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = (-1584.8611964);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) acosh0, goalType0, (double) int0, double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(1378.0, brentOptimizer0.getMin(), 0.01D);
      //  // Unstable assertion: assertEquals(1378, brentOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals((-1584.8611964), brentOptimizer0.getMax(), 0.01D);
      //  // Unstable assertion: assertEquals(3, brentOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals((-103.43059820000008), brentOptimizer0.getStartValue(), 0.01D);
      //  // Unstable assertion: assertEquals(812.1438634616886, univariatePointValuePair0.getPoint(), 0.01D);
      //  // Unstable assertion: assertEquals(7.392824297748768, univariatePointValuePair0.getValue(), 0.01D);
      //  // Unstable assertion: assertNotNull(univariatePointValuePair0);
  }

  //@Test
  public void test1()  throws Throwable  {
      double double0 = 0.7194743221949258;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertNotNull(brentOptimizer0);
      
      int int0 = 1378;
      Acosh acosh0 = new Acosh();
      assertNotNull(acosh0);
      
      UnivariateFunction univariateFunction0 = acosh0.derivative();
      assertNotNull(univariateFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = (-1584.8611964);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, univariateFunction0, goalType0, (double) int0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(0.6671849929715858, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(1378, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals((-103.43059820000008), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(11, brentOptimizer0.getEvaluations());
      assertEquals(1378.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals((-1584.8611964), brentOptimizer0.getMax(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 0.1926752;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(brentOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(brentOptimizer0);
      
      int int0 = 3189;
      double double1 = (-3003.724);
      Power power0 = new Power(double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertNotNull(power0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) power0, goalType0, (double) int0, double0, double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(0.0, univariatePointValuePair0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(2285.4937448416113, univariatePointValuePair0.getPoint(), 0.01D);
      //  // Unstable assertion: assertEquals((-3003.724), brentOptimizer0.getStartValue(), 0.01D);
      //  // Unstable assertion: assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(3189, brentOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(3189.0, brentOptimizer0.getMin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.1926752, brentOptimizer0.getMax(), 0.01D);
      //  // Unstable assertion: assertEquals(6, brentOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNotNull(univariatePointValuePair0);
  }

  //@Test
  public void test3()  throws Throwable  {
      double double0 = 1.29409623146057;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNotNull(brentOptimizer0);
      
      int int0 = 8388629;
      Acosh acosh0 = new Acosh();
      assertNotNull(acosh0);
      
      UnivariateFunction univariateFunction0 = acosh0.derivative();
      assertNotNull(univariateFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = 1723.0;
      double double2 = (-1312.6);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, univariateFunction0, goalType0, double1, double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.25225363153847946, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(4.088445837252372, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(205.20000000000005, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1723.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(8388629, brentOptimizer0.getMaxEvaluations());
      assertEquals(12, brentOptimizer0.getEvaluations());
      assertEquals((-1312.6), brentOptimizer0.getMax(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 0.1926752;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertNotNull(brentOptimizer0);
      
      double double1 = brentOptimizer0.getMin();
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = 3189;
      double double2 = (-3003.724);
      assertFalse(double2 == double1);
      
      Power power0 = new Power(double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertNotNull(power0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double3 = 5.618140891448326;
      assertFalse(double3 == double1);
      
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) power0, goalType0, double1, double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertEquals(2.263279822005888, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(0.0, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(4, brentOptimizer0.getEvaluations());
      assertEquals(3189, brentOptimizer0.getMaxEvaluations());
      assertEquals(5.618140891448326, brentOptimizer0.getMax(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(2.809070445724163, brentOptimizer0.getStartValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 0.1926752;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNotNull(brentOptimizer0);
      
      double double1 = brentOptimizer0.getMin();
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = 3189;
      Power power0 = new Power((double) int0);
      assertNotNull(power0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) power0, goalType0, double1, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(0.0, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(3189, brentOptimizer0.getMaxEvaluations());
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 5.0;
      double double1 = 0.0;
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = (-682.8431367582361);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -682.843 is smaller than the minimum (0)
         //
      }
  }
}
