/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 07:38:34 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Expm1;
import org.apache.commons.math3.analysis.function.Gaussian;
import org.apache.commons.math3.analysis.function.Log;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BrentOptimizerEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 5.20615E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      //  // Unstable assertion: assertNotNull(brentOptimizer0);
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      //  // Unstable assertion: assertNull(brentOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      
      int int0 = 73;
      Log log0 = new Log();
      //  // Unstable assertion: assertNotNull(log0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = (-1.0);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) log0, goalType0, (double) int0, double1, double1);
      //  // Unstable assertion: assertNotNull(univariatePointValuePair0);
      //  // Unstable assertion: assertEquals(1.0167362266688817E-7, univariatePointValuePair0.getPoint(), 0.01D);
      //  // Unstable assertion: assertEquals((-16.101497931673318), univariatePointValuePair0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(73.0, brentOptimizer0.getMin(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), brentOptimizer0.getMax(), 0.01D);
      //  // Unstable assertion: assertEquals(44, brentOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(73, brentOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals((-1.0), brentOptimizer0.getStartValue(), 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 5.206E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = 52;
      GoalType goalType0 = GoalType.MAXIMIZE;
      int int1 = 750;
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) expm1_0, goalType0, (double) int0, (double) int1, (double) int1);
      assertNotNull(univariatePointValuePair0);
      assertEquals(Double.POSITIVE_INFINITY, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(749.999911434762, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(52.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(33, brentOptimizer0.getEvaluations());
      assertEquals(750.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(750.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(52, brentOptimizer0.getMaxEvaluations());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 5.20615E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = 73;
      Log log0 = new Log();
      assertNotNull(log0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) log0, goalType0, (double) int0, double0, double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(1.0412300271039978E-7, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals((-16.077692918296197), univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(23, brentOptimizer0.getEvaluations());
      assertEquals(5.20615E-8, brentOptimizer0.getMax(), 0.01D);
      assertEquals(73.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(73, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(5.20615E-8, brentOptimizer0.getStartValue(), 0.01D);
  }

  //@Test
  public void test3()  throws Throwable  {
      double double0 = 0.06;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = 1205;
      Gaussian gaussian0 = new Gaussian((double) int0, (double) int0);
      assertNotNull(gaussian0);
      
      UnivariateFunction univariateFunction0 = gaussian0.derivative();
      assertNotNull(univariateFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = 4437.004862763284;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, univariateFunction0, goalType0, (double) int0, double1);
      assertNotNull(univariatePointValuePair0);
      assertEquals(2433.2419666520814, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals((-1.6658204404519175E-7), univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(2821.002431381642, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1205, brentOptimizer0.getMaxEvaluations());
      assertEquals(1205.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(4437.004862763284, brentOptimizer0.getMax(), 0.01D);
      assertEquals(5, brentOptimizer0.getEvaluations());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  //@Test
  public void test4()  throws Throwable  {
      double double0 = 0.05967306918808485;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = 18;
      double double1 = 2066.453;
      Gaussian gaussian0 = new Gaussian((double) int0, double1);
      assertNotNull(gaussian0);
      assertFalse(double1 == double0);
      
      UnivariateFunction univariateFunction0 = gaussian0.derivative();
      assertNotNull(univariateFunction0);
      assertFalse(double1 == double0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double2 = 4437.6;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, univariateFunction0, goalType0, (double) int0, double2);
      assertNotNull(univariatePointValuePair0);
      assertEquals((-5.666317285718079E-8), univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(2094.8006633935966, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(5, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(18.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(4437.6, brentOptimizer0.getMax(), 0.01D);
      assertEquals(18, brentOptimizer0.getMaxEvaluations());
      assertEquals(2227.8, brentOptimizer0.getStartValue(), 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 5.20615E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      
      int int0 = 73;
      Log log0 = new Log();
      assertNotNull(log0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) log0, goalType0, (double) int0, (double) int0, (double) int0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(4.290459441148391, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(73.0, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(73.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(73.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(73.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(73, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      
      int int1 = brentOptimizer0.getMaxEvaluations();
      assertEquals(73.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(73.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(73.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(73, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(73, int1);
      assertTrue(int1 == int0);
      
      GoalType goalType1 = GoalType.MAXIMIZE;
      assertNotSame(goalType1, goalType0);
      
      UnivariatePointValuePair univariatePointValuePair1 = brentOptimizer0.optimize(int1, (UnivariateFunction) log0, goalType1, (double) int1, double0);
      assertNotNull(univariatePointValuePair1);
      assertNotSame(goalType1, goalType0);
      assertNotSame(univariatePointValuePair1, univariatePointValuePair0);
      assertEquals(73.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(5.20615E-8, brentOptimizer0.getMax(), 0.01D);
      assertEquals(73, brentOptimizer0.getMaxEvaluations());
      assertEquals(36.50000002603075, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(34, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(72.99999250643677, univariatePointValuePair1.getPoint(), 0.01D);
      assertEquals(4.290459338496834, univariatePointValuePair1.getValue(), 0.01D);
      assertTrue(int1 == int0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertFalse(univariatePointValuePair1.equals((Object)univariatePointValuePair0));
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 5.206E-8;
      double double1 = (-21.043965533665393);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -21.044 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = (-0.679046941069765);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0.679 is smaller than the minimum (0)
         //
      }
  }
}
