/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:37:18 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Acosh;
import org.apache.commons.math3.analysis.function.Constant;
import org.apache.commons.math3.analysis.function.Expm1;
import org.apache.commons.math3.analysis.function.Logistic;
import org.apache.commons.math3.analysis.function.Tan;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BrentOptimizerEvoSuite_branch_Test   {

  //@Test
  public void test0()  throws Throwable  {
      double double0 = 0.1;
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = null;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0, convergenceChecker0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertNotNull(brentOptimizer0);
      
      int int0 = 3556;
      double double1 = 1457.4499546572613;
      Logistic logistic0 = new Logistic((double) int0, double1, (double) int0, (double) int0, double0, double0);
      assertNotNull(logistic0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) logistic0, goalType0, (double) int0, (double) int0, double0);
      assertEquals(0.1, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(0.4077102895907764, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(3556.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(3556, brentOptimizer0.getMaxEvaluations());
      assertEquals(21, brentOptimizer0.getEvaluations());
      assertEquals(0.1, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(3556.0, brentOptimizer0.getMin(), 0.01D);
      assertNotNull(univariatePointValuePair0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 0.6;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 592;
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      int int1 = brentOptimizer0.getEvaluations();
      assertEquals(0, int1);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertFalse(int1 == int0);
      
      double double1 = (-7.338095870355314);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) expm1_0, goalType0, (double) int0, double1, (double) int1);
      assertEquals((-7.338095870355314), brentOptimizer0.getMax(), 0.01D);
      assertEquals(12, brentOptimizer0.getEvaluations());
      assertEquals(592, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(592.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals((-0.97687951440652), univariatePointValuePair0.getValue(), 0.01D);
      assertEquals((-3.7670362322203235), univariatePointValuePair0.getPoint(), 0.01D);
      assertNotNull(univariatePointValuePair0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 0.1;
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = null;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0, convergenceChecker0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertNotNull(brentOptimizer0);
      
      int int0 = 3556;
      GoalType goalType0 = GoalType.MINIMIZE;
      Acosh acosh0 = new Acosh();
      assertNotNull(acosh0);
      
      UnivariateFunction univariateFunction0 = acosh0.derivative();
      assertNotNull(univariateFunction0);
      
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, univariateFunction0, goalType0, (double) int0, double0);
      assertEquals(1778.05, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(3556, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(5, brentOptimizer0.getEvaluations());
      assertEquals(0.1, brentOptimizer0.getMax(), 0.01D);
      assertEquals(3556.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(3.301630626982339E-4, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(3028.8065731260003, univariatePointValuePair0.getPoint(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 6.314045819087497;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = (-33);
      GoalType goalType0 = GoalType.MAXIMIZE;
      int int1 = 521;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      double double1 = 7.77677492833005E251;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int1, (UnivariateFunction) tan0, goalType0, double1, double1, (double) int0);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(521, brentOptimizer0.getMaxEvaluations());
      assertEquals((-33.0), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(7.77677492833005E251, brentOptimizer0.getMin(), 0.01D);
      assertEquals(7.77677492833005E251, brentOptimizer0.getMax(), 0.01D);
      assertEquals(40, brentOptimizer0.getEvaluations());
      assertEquals(4.512024675192025, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(3.8883342473413483E235, univariatePointValuePair0.getPoint(), 0.01D);
      assertNotNull(univariatePointValuePair0);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
  }

  //@Test
  public void test4()  throws Throwable  {
      double double0 = 1.0;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertNotNull(brentOptimizer0);
      
      int int0 = 1274;
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) constant0, goalType0, double0, (double) int0, double0);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(1.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1274.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1274, brentOptimizer0.getMaxEvaluations());
      assertEquals(2, brentOptimizer0.getEvaluations());
      assertEquals(1.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1.0, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(1.0, univariatePointValuePair0.getPoint(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 0.6;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 592;
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      int int1 = brentOptimizer0.getEvaluations();
      assertEquals(0, int1);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertFalse(int1 == int0);
      
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) expm1_0, goalType0, (double) int0, (double) int1, (double) int1);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(592, brentOptimizer0.getMaxEvaluations());
      assertEquals(592.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(9, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.8221188003905089, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(0.6, univariatePointValuePair0.getPoint(), 0.01D);
      assertNotNull(univariatePointValuePair0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 1.0;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 1274;
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) constant0, goalType0, (double) int0, double0);
      assertEquals(637.5, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(1.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1274.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1274, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(637.5, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(1.0, univariatePointValuePair0.getValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = 175.182;
      double double1 = (-812.134812297316);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -812.135 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      double double0 = (-3409.5986337);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,409.599 is smaller than the minimum (0)
         //
      }
  }
}
