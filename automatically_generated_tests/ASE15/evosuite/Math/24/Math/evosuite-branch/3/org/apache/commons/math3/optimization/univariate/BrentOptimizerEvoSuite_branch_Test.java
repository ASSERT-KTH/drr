/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:58:10 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Atan;
import org.apache.commons.math3.analysis.function.Cos;
import org.apache.commons.math3.analysis.function.Cosh;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BrentOptimizerEvoSuite_branch_Test   {

  //@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 0.84147096;
      double double1 = 2.0;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = 921;
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double2 = (-805.65465732);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) cos0, goalType0, double2, (double) int0, double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals((-17.930216913249154), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(0.6063459103363394, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals((-805.65465732), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(6, brentOptimizer0.getEvaluations());
      assertEquals(921.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(921, brentOptimizer0.getMaxEvaluations());
      assertEquals((-805.65465732), brentOptimizer0.getMin(), 0.01D);
  }

  //@Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = 3.241;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      
      int int0 = 3020;
      Cosh cosh0 = new Cosh();
      assertNotNull(cosh0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) cosh0, goalType0, (double) int0, (double) int0, double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(3020.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(3020.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(6, brentOptimizer0.getEvaluations());
      assertEquals(3020, brentOptimizer0.getMaxEvaluations());
      assertEquals(3.241, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(5.740429903366324E11, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(27.769117307078204, univariatePointValuePair0.getPoint(), 0.01D);
      
      GoalType goalType1 = brentOptimizer0.getGoalType();
      assertEquals(3020.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(3020.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(6, brentOptimizer0.getEvaluations());
      assertEquals(3020, brentOptimizer0.getMaxEvaluations());
      assertEquals(3.241, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals("MINIMIZE", goalType1.name());
      assertEquals(1, goalType1.ordinal());
      assertEquals("MINIMIZE", goalType1.toString());
      assertEquals(GoalType.MINIMIZE, goalType1);
      assertSame(goalType1, goalType0);
      
      double double1 = (-4511.60226126602);
      UnivariatePointValuePair univariatePointValuePair1 = brentOptimizer0.optimize(int0, (UnivariateFunction) cosh0, goalType1, double1, (double) int0, double0);
      assertFalse(double1 == double0);
      assertFalse(univariatePointValuePair1.equals((Object)univariatePointValuePair0));
      assertFalse(double0 == double1);
      assertNotNull(univariatePointValuePair1);
      assertEquals((-4511.60226126602), brentOptimizer0.getMin(), 0.01D);
      assertEquals(3020.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(3020, brentOptimizer0.getMaxEvaluations());
      assertEquals(3.241, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(11, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals("MINIMIZE", goalType1.name());
      assertEquals(1, goalType1.ordinal());
      assertEquals("MINIMIZE", goalType1.toString());
      assertEquals((-10.504081000000001), univariatePointValuePair1.getPoint(), 0.01D);
      assertEquals(18232.004544629726, univariatePointValuePair1.getValue(), 0.01D);
      assertSame(goalType1, goalType0);
      assertNotSame(univariatePointValuePair1, univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = 0.84147096;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      
      int int0 = 921;
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = 0.0;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) cos0, goalType0, (double) int0, double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(0.84147096, brentOptimizer0.getMax(), 0.01D);
      assertEquals(921, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(8, brentOptimizer0.getEvaluations());
      assertEquals(921.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.4602422963974577, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(1.09252822776049, univariatePointValuePair0.getPoint(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = 0.84147096;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      
      int int0 = 921;
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = (-805.65465732);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) cos0, goalType0, double1, (double) int0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(univariatePointValuePair0);
      assertEquals(0.03455963798080775, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(48.72925265181367, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(8, brentOptimizer0.getEvaluations());
      assertEquals(921.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(921, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals((-805.65465732), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals((-805.65465732), brentOptimizer0.getMin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = (-2043.0);
      double double1 = 0.04;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double1, double1);
      assertFalse(double1 == double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = 44;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) atan0, goalType0, double0, (double) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals((-1966.4256178528076), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals((-1.5702877899325216), univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(44, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals((-999.5), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals((-2043.0), brentOptimizer0.getMin(), 0.01D);
      assertEquals(6, brentOptimizer0.getEvaluations());
      assertEquals(44.0, brentOptimizer0.getMax(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = 0.84147096;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      
      int int0 = 921;
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) cos0, goalType0, (double) int0, (double) int0, (double) int0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(921.0, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals((-0.8711029928849144), univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(921.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(921.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(921.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(921, brentOptimizer0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = 2.215364674788;
      double double1 = (-0.5000407970132557);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0.5 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double double0 = (-2043.0);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,043 is smaller than the minimum (0)
         //
      }
  }
}
