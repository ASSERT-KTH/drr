/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:41:51 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigInteger;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.NonMonotonousSequenceException;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.junit.runner.RunWith;

 
public class MathUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 2.2250738585072014E-308;
      doubleArray0[6] = double0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      assertEquals(2.2250738585072014E-308, double1, 0.01D);
      assertTrue(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2250738585072014E-308, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 179;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = double0;
      doubleArray0[4] = double0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY, 0.0, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      short short0 = (short)167;
      double double1 = MathUtils.log(double0, (double) short0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = double1;
      double double2 = MathUtils.safeNorm(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = 0.008333333333329196;
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = double0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      assertEquals(0.008333333333329196, double1, 0.01D);
      assertTrue(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.008333333333329196, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = 6722166367014452318L;
      double[] doubleArray0 = new double[10];
      doubleArray0[8] = (double) long0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 7 and 8 are not decreasing (0 < 6,722,166,367,014,452,200)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = false;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = (-2365.556594);
      double double1 = (-319.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(double0, double1);
      assertFalse(boolean0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-1796);
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) int0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (0 > -1,796)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = (-1056.5);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = double0;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = 1.304E19;
      int int0 = 1992;
      double double1 = MathUtils.round(double0, int0);
      assertEquals(1.304E19, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = true;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
      assertArrayEquals(new double[] {1.304E19, 1992.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[18];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[9];
      double double0 = MathUtils.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)6;
      byteArray0[1] = byte0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)6}, byteArray0);
      assertEquals(6, bigInteger0.byteValue());
      assertEquals(6, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertArrayEquals(new byte[] {(byte)0, (byte)6}, byteArray0);
      assertEquals(64, bigInteger1.byteValue());
      assertEquals(-18880, bigInteger1.shortValue());
      assertEquals(6, bigInteger0.byteValue());
      assertEquals(6, bigInteger0.shortValue());
      assertNotNull(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-89);
      byteArray0[0] = byte0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray0);
      assertEquals(-22784, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-22,784^-22,784)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)16;
      byteArray0[0] = byte0;
      byteArray0[1] = byteArray0[0];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)16}, byteArray0);
      assertEquals(16, bigInteger0.byteValue());
      assertEquals(4112, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) byteArray0[1]);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)16, (byte)16}, byteArray0);
      assertEquals(16, bigInteger0.byteValue());
      assertEquals(4112, bigInteger0.shortValue());
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-46);
      byteArray0[0] = byte0;
      byteArray0[2] = byteArray0[0];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-46), (byte)0, (byte) (-46), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) byteArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-12,946,946,985,558,016^-46)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      int int0 = (-1244);
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,244)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = MathUtils.indicator((int) byte0);
      assertEquals(1, int0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, int0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[18];
      int int0 = 3091;
      intArray0[0] = int0;
      intArray0[1] = intArray0[0];
      long long0 = MathUtils.pow((long) int0, (long) intArray0[1]);
      assertEquals((-4352583991103447157L), long0);
      assertArrayEquals(new int[] {3091, 3091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = (-1179);
      try {
        long long0 = MathUtils.pow((long) int0, (long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,179^-1,179)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.hash(double0);
      assertEquals(0, int0);
      
      long long0 = MathUtils.pow((long) int0, (long) int0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = 1408L;
      int int0 = 2019;
      long long1 = MathUtils.pow(long0, int0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = 0L;
      int int0 = (-4);
      try {
        long long1 = MathUtils.pow(long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-4)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      
      long long0 = 9218868437227405312L;
      int int0 = MathUtils.pow((int) byte1, long0);
      assertEquals(0, int0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      short short0 = (short)1922;
      short short1 = MathUtils.indicator(short0);
      assertEquals((short)1, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      
      long long0 = (-774L);
      try {
        int int0 = MathUtils.pow((int) short1, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-774)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = (-404);
      try {
        int int1 = MathUtils.pow(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-404^-404)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      short short0 = (short)2634;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)1, short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.subAndCheck((long) short1, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(1742810335, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = MathUtils.subAndCheck(int0, int0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)0, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = (-2149.8839995);
      double double1 = (-441.2);
      int int0 = MathUtils.compareTo(double0, double1, double0);
      assertEquals((-1), int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      long long0 = MathUtils.sign((long) int0);
      assertEquals((-1L), long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = (byte)0;
      long long0 = MathUtils.sign((long) byte0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[18];
      int int0 = 3091;
      intArray0[0] = int0;
      long long0 = MathUtils.sign((long) intArray0[0]);
      assertEquals(1L, long0);
      assertArrayEquals(new int[] {3091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = (-2846);
      int int1 = MathUtils.sign(int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.hash(double0);
      assertEquals(0, int0);
      
      int int1 = MathUtils.sign(int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = (-1873);
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertEquals(3508129, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = MathUtils.sign(int1);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = MathUtils.sign(float0);
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.sign(float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = (-3059.719504313);
      double double1 = MathUtils.sign(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 0;
      int int1 = 9;
      int int2 = MathUtils.pow(int0, int1);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      double double0 = MathUtils.sign((double) int2);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = Float.NaN;
      double double0 = MathUtils.sign((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte byte0 = (byte)61;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      
      double double0 = MathUtils.sign((double) byte1);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte byte0 = (byte) (-111);
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 131;
      // Undeclared exception!
      try {
        float float0 = MathUtils.round((float) int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 131, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 6;
      float float0 = MathUtils.round((float) intArray0[3], intArray0[6], int0);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 16;
      int int1 = 3;
      float float0 = MathUtils.round((float) int1, int0, int1);
      assertEquals(3.0F, float0, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = 15;
      int int1 = 1;
      float float1 = MathUtils.round(float0, int0, int1);
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = MathUtils.indicator((int) byte0);
      assertEquals(1, int0);
      
      float float0 = MathUtils.round((float) int0, (int) byte0, (int) byte0);
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.round(double0, int0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 0;
      double double0 = MathUtils.round((double) float0, int0, int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = (-404);
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = (double) int0;
      doubleArray0[3] = (double) float0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, doubleArray0[9]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0, Double.NaN, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-404.0), 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = Float.NaN;
      double[] doubleArray0 = new double[10];
      doubleArray0[3] = (double) float0;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, doubleArray0[5]);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = double0;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, doubleArray0[7]);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 8
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = Double.NaN;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = Double.POSITIVE_INFINITY;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)16;
      long long0 = MathUtils.lcm((long) byte0, (long) byte0);
      assertEquals(16L, long0);
      
      double double0 = MathUtils.scalb((double) long0, (int) byteArray0[0]);
      assertEquals(16.0, double0, 0.01D);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-2506);
      double double1 = MathUtils.scalb(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = 4294967295L;
      // Undeclared exception!
      try {
        long long1 = MathUtils.mulAndCheck(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      short short0 = (short)1922;
      int int0 = 0;
      long long0 = MathUtils.mulAndCheck((long) int0, (long) short0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = 120L;
      long long1 = (-3183605296591799669L);
      // Undeclared exception!
      try {
        long long2 = MathUtils.lcm(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1841);
      long long0 = MathUtils.mulAndCheck((long) int0, (long) int1);
      assertEquals(0L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = (-2283L);
      long long1 = (-3183605296591799669L);
      // Undeclared exception!
      try {
        long long2 = MathUtils.lcm(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = (-1873);
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertEquals(3508129, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      long long0 = MathUtils.lcm((long) int0, (long) int1);
      assertEquals(3508129L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = (-632);
      int int1 = MathUtils.hash((double) int0);
      assertEquals((-1065107456), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        int int2 = MathUtils.mulAndCheck(int1, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = (-797L);
      long long1 = 0L;
      long long2 = MathUtils.lcm(long0, long1);
      assertEquals(0L, long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte byte0 = (byte)61;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      
      int int0 = 0;
      long long0 = MathUtils.lcm((long) int0, (long) byte1);
      assertEquals(0L, long0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = (-632);
      int int1 = 0;
      int int2 = MathUtils.lcm(int0, int1);
      assertEquals(0, int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte byte0 = (byte)61;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      
      int int0 = 0;
      int int1 = MathUtils.lcm(int0, (int) byte1);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = 9193070505571053912L;
      long long1 = MathUtils.indicator(long0);
      assertEquals(1L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-1095);
      long long0 = MathUtils.indicator((long) int0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-252);
      int int1 = MathUtils.indicator(int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-1640);
      float float0 = Float.NaN;
      float float1 = MathUtils.round(float0, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      short short0 = (short) (-317);
      short short1 = MathUtils.sign(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      double double0 = MathUtils.indicator((double) short1);
      assertEquals((-1.0), double0, 0.01D);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathUtils.indicator(doubleArray0[0]);
      assertEquals(1.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte byte0 = (byte) (-23);
      byte byte1 = MathUtils.indicator(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-1873);
      long long0 = (-1332L);
      long long1 = MathUtils.lcm(long0, (long) int0);
      assertEquals(2494836L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd(int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      int int2 = MathUtils.pow(int1, (long) int1);
      assertEquals(1, int2);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      long long0 = MathUtils.gcd((long) int2, (long) int0);
      assertEquals(1L, long0);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = 0L;
      int int0 = 16;
      long long1 = MathUtils.gcd(long0, (long) int0);
      assertEquals(16L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = (-2149.8839995);
      double double1 = (-441.2);
      int int0 = MathUtils.compareTo(double0, double1, double1);
      assertEquals((-1), int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = (-236);
      int int1 = 0;
      int int2 = MathUtils.gcd(int0, int1);
      assertEquals(236, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 5;
      double double0 = MathUtils.factorialLog(int0);
      assertEquals(4.787491742782046, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-99);
      byteArray0[0] = byte0;
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialLog((int) byteArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -99
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = (-1841);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialDouble(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,841
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 3482;
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = (-1567);
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,567
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1100.68968096131;
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1100.68968096131, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = 5;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0[3], doubleArray0[2], int0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[18];
      double double0 = 0.0;
      int int0 = MathUtils.hash(double0);
      assertEquals(0, int0);
      
      int int1 = 3091;
      assertFalse(int1 == int0);
      
      intArray0[0] = int1;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) intArray0[0], (double) int0, intArray0[0]);
      assertFalse(boolean0);
      assertFalse(int0 == int1);
      assertArrayEquals(new int[] {3091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 0;
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equalsIncludingNaN((double) float0, (double) int0, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) float0, (double) float0, int0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 8;
      double double0 = MathUtils.binomialCoefficientLog(int0, int0);
      assertEquals(0.0, double0, 0.01D);
      
      int int1 = MathUtils.pow(int0, int0);
      assertEquals(16777216, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equalsIncludingNaN(double0, double0, int1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = 169.323206;
      assertFalse(double1 == double0);
      
      double double2 = 10.0;
      assertFalse(double2 == double0);
      
      int int1 = MathUtils.compareTo(double1, double2, double0);
      assertEquals(1, int1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(int1 == int0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(int0 == int1);
      
      int int2 = MathUtils.pow(int0, int1);
      assertEquals(0, int2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equalsIncludingNaN((double) int1, (double) int0, int2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1100.68968096131;
      doubleArray0[0] = double0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0[5], doubleArray0[0], double0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1100.68968096131, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = 0.3;
      double double1 = 2.2250738585072014E-308;
      int int0 = MathUtils.compareTo(double0, double1, double0);
      assertEquals(0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = (-1640);
      float float0 = MathUtils.sign((float) int0);
      assertEquals((-1.0F), float0, 0.01F);
      
      float float1 = MathUtils.round((float) int0, int0);
      assertEquals(Float.NaN, float1, 0.01F);
      assertFalse(float1 == float0);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) float1, (double) float0, (double) float0);
      assertFalse(boolean0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float float0 = Float.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) float0, (double) float0, (double) float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = (-1640);
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,640
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = (-2149.8839995);
      int int0 = MathUtils.compareTo(double0, double0, double0);
      assertEquals(0, int0);
      
      int int1 = 133;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        double double1 = MathUtils.binomialCoefficientDouble(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 133
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 3208;
      int int1 = 1958;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(2140.6044419010445, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      int int1 = (-507);
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 5;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 2;
      int int1 = 141;
      double double0 = MathUtils.binomialCoefficientLog(int1, int0);
      assertEquals(9.197255132427527, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[18];
      double double0 = 0.0;
      int int0 = MathUtils.hash(double0);
      assertEquals(0, int0);
      
      int int1 = 3091;
      assertFalse(int1 == int0);
      
      intArray0[0] = int1;
      double double1 = MathUtils.binomialCoefficientDouble(intArray0[0], int0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertArrayEquals(new int[] {3091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte byte0 = (byte)61;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      
      double double0 = MathUtils.binomialCoefficientDouble((int) byte1, (int) byte1);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 13;
      intArray0[4] = int0;
      int int1 = 167;
      intArray0[7] = int1;
      long long0 = MathUtils.binomialCoefficient(intArray0[7], intArray0[4]);
      assertEquals(7815030420963585780L, long0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 13, 0, 0, 167, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 14;
      int int1 = 18;
      double double0 = MathUtils.binomialCoefficientDouble(int1, int0);
      assertEquals(3060.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 14;
      int int1 = 0;
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertEquals(1L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(int0, int0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte byte0 = (byte)126;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      
      long long0 = (-1822L);
      long long1 = MathUtils.subAndCheck(long0, (long) byte1);
      assertEquals((-1823L), long1);
      assertFalse(long0 == long1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 2585;
      long long0 = MathUtils.subAndCheck((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      short short0 = (short) (-1042);
      short short1 = MathUtils.indicator(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      byte byte0 = (byte) (-111);
      int int0 = MathUtils.addAndCheck((int) byte0, (int) short1);
      assertEquals((-112), int0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte byte0 = (byte)61;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      
      double double0 = MathUtils.cosh((double) byte1);
      assertEquals(1.5430806348152437, double0, 0.01D);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte byte0 = (byte)61;
      double double0 = MathUtils.sinh((double) byte0);
      assertEquals(1.55214896785096E26, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float float0 = (-4288.1357F);
      int int0 = 2585;
      float float1 = MathUtils.round(float0, int0);
      assertEquals(Float.NaN, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = MathUtils.normalizeAngle((double) float1, (double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = MathUtils.indicator((int) byte0);
      assertEquals(1, int0);
      
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      long long0 = MathUtils.addAndCheck((long) byte1, (long) int0);
      assertEquals(1L, long0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
  }
}
