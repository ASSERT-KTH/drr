/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:35:56 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class EigenDecompositionImplEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1.5;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.5, 1.5}, doubleArray0, 0.01);
      assertEquals(2.25, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.5, 1.5}, doubleArray0, 0.01);
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(2.25, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 975.9004462;
      Double double1 = new Double(double0);
      assertEquals(975.9004462, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      double double2 = (-5.41132969020717);
      Double double3 = new Double(double2);
      assertEquals((-5.41132969020717), (double)double3, 0.01D);
      assertNotSame(double3, double1);
      assertFalse(double2 == double0);
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      assertTrue(double3.equals((Object)double2));
      
      doubleArray0[1] = double3;
      double double4 = 100.0;
      Double double5 = new Double(double4);
      assertEquals(100.0, (double)double5, 0.01D);
      assertNotSame(double5, double1);
      assertNotSame(double5, double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double5.equals((Object)double1));
      assertFalse(double5.equals((Object)double3));
      assertFalse(double5.equals((Object)double2));
      assertTrue(double5.equals((Object)double4));
      assertFalse(double5.equals((Object)double0));
      
      doubleArray0[2] = double5;
      double double6 = (-1.0);
      Double double7 = new Double(double6);
      assertEquals((-1.0), (double)double7, 0.01D);
      assertNotSame(double7, double3);
      assertNotSame(double7, double1);
      assertNotSame(double7, double5);
      assertFalse(double7.equals((Object)double3));
      assertFalse(double7.equals((Object)double1));
      assertFalse(double7.equals((Object)double5));
      assertFalse(double7.equals((Object)double4));
      assertFalse(double7.equals((Object)double0));
      assertTrue(double7.equals((Object)double6));
      assertFalse(double7.equals((Object)double2));
      assertFalse(double6 == double2);
      assertFalse(double6 == double0);
      assertFalse(double6 == double4);
      
      doubleArray0[3] = doubleArray0[0];
      Double double8 = new Double(double6);
      assertEquals((-1.0), (double)double8, 0.01D);
      assertNotSame(double8, double3);
      assertNotSame(double8, double5);
      assertNotSame(double8, double7);
      assertNotSame(double8, double1);
      assertFalse(double6 == double2);
      assertFalse(double6 == double0);
      assertFalse(double6 == double4);
      assertFalse(double8.equals((Object)double0));
      assertFalse(double8.equals((Object)double4));
      assertFalse(double8.equals((Object)double3));
      assertFalse(double8.equals((Object)double5));
      assertTrue(double8.equals((Object)double6));
      assertTrue(double8.equals((Object)double7));
      assertFalse(double8.equals((Object)double2));
      assertFalse(double8.equals((Object)double1));
      
      doubleArray0[4] = double8;
      double double9 = 794.479325;
      Double double10 = new Double(double9);
      assertEquals(794.479325, (double)double10, 0.01D);
      assertNotSame(double10, double5);
      assertNotSame(double10, double3);
      assertNotSame(double10, double7);
      assertNotSame(double10, double8);
      assertNotSame(double10, double1);
      assertFalse(double10.equals((Object)double5));
      assertFalse(double10.equals((Object)double3));
      assertFalse(double10.equals((Object)double6));
      assertFalse(double10.equals((Object)double2));
      assertFalse(double10.equals((Object)double7));
      assertFalse(double10.equals((Object)double8));
      assertFalse(double10.equals((Object)double1));
      assertFalse(double10.equals((Object)double0));
      assertTrue(double10.equals((Object)double9));
      assertFalse(double10.equals((Object)double4));
      assertFalse(double9 == double6);
      assertFalse(double9 == double2);
      assertFalse(double9 == double0);
      assertFalse(double9 == double4);
      
      doubleArray0[5] = double10;
      doubleArray0[6] = doubleArray0[5];
      doubleArray0[7] = doubleArray0[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapDivide((double) double3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(double3, double5);
      assertNotSame(double3, double10);
      assertNotSame(double3, double1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double8);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double6);
      assertFalse(double2 == double9);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double3.equals((Object)double5));
      assertFalse(double3.equals((Object)double6));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double10));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double9));
      assertFalse(double3.equals((Object)double7));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double8));
      assertFalse(double3.equals((Object)double4));
      assertNotNull(openMapRealVector1);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(double3, double5);
      assertNotSame(double3, double10);
      assertNotSame(double3, double1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double8);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double6);
      assertFalse(double2 == double9);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double3.equals((Object)double5));
      assertFalse(double3.equals((Object)double6));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double10));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double9));
      assertFalse(double3.equals((Object)double7));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double8));
      assertFalse(double3.equals((Object)double4));
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = (OpenMapRealMatrix)openMapRealMatrix0.preMultiply((RealMatrix) openMapRealMatrix0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(double3, double5);
      assertNotSame(double3, double10);
      assertNotSame(double3, double1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double8);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealMatrix1.getColumnDimension());
      assertEquals(8, openMapRealMatrix1.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double6);
      assertFalse(double2 == double9);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double3.equals((Object)double5));
      assertFalse(double3.equals((Object)double6));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double10));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double9));
      assertFalse(double3.equals((Object)double7));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double8));
      assertFalse(double3.equals((Object)double4));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotNull(openMapRealMatrix1);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix1, (double) double7);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(double7, double3);
      assertNotSame(double7, double1);
      assertNotSame(double7, double5);
      assertNotSame(double7, double8);
      assertNotSame(double7, double10);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(double3, double5);
      assertNotSame(double3, double10);
      assertNotSame(double3, double1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double8);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals((-2.0588433152919356E-36), eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(8, openMapRealMatrix1.getColumnDimension());
      assertEquals(8, openMapRealMatrix1.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double6);
      assertFalse(double2 == double9);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(double7.equals((Object)double3));
      assertFalse(double7.equals((Object)double1));
      assertFalse(double7.equals((Object)double5));
      assertFalse(double7.equals((Object)double9));
      assertFalse(double7.equals((Object)double10));
      assertFalse(double7.equals((Object)double4));
      assertFalse(double7.equals((Object)double0));
      assertTrue(double7.equals((Object)double8));
      assertTrue(double7.equals((Object)double6));
      assertFalse(double7.equals((Object)double2));
      assertFalse(double6 == double2);
      assertFalse(double6 == double0);
      assertFalse(double6 == double9);
      assertFalse(double6 == double4);
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double3.equals((Object)double5));
      assertFalse(double3.equals((Object)double6));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double10));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double9));
      assertFalse(double3.equals((Object)double7));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double8));
      assertFalse(double3.equals((Object)double4));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-1126.634);
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      double double1 = (-7.771647569447526);
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) double1;
      doubleArray1[1] = (Double) double1;
      doubleArray1[2] = (Double) double1;
      doubleArray1[3] = (Double) double1;
      doubleArray1[4] = (Double) double1;
      doubleArray1[5] = (Double) double1;
      doubleArray1[6] = (Double) double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      assertEquals(54.40153298613268, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(20.56184674599773, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(497.3854444446417, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1126.634), (-1126.634)}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(11, arrayRealVector1.getDimension());
      assertEquals(2307.6695329861327, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1593.4337543348345, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(7958.167111114267, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(54.40153298613268, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(20.56184674599773, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(497.3854444446417, arrayRealVector0.getLInfNorm(), 0.01D);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector1);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector1.outerProduct((RealVector) arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1126.634), (-1126.634)}, doubleArray0, 0.01);
      assertEquals(11, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(11, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(11, arrayRealVector1.getDimension());
      assertEquals(2307.6695329861327, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1593.4337543348345, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(7958.167111114267, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(54.40153298613268, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(20.56184674599773, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(497.3854444446417, arrayRealVector0.getLInfNorm(), 0.01D);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (double) doubleArray1[2]);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1126.634), (-1126.634)}, doubleArray0, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(11, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(11, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(11, arrayRealVector1.getDimension());
      assertEquals(2307.6695329861327, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1593.4337543348345, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(7958.167111114267, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(54.40153298613268, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(20.56184674599773, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(497.3854444446417, arrayRealVector0.getLInfNorm(), 0.01D);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 975.900446174;
      Double double1 = new Double(double0);
      assertEquals(975.900446174, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      double double2 = (-5.41132969020717);
      Double double3 = new Double(double2);
      assertEquals((-5.41132969020717), (double)double3, 0.01D);
      assertNotSame(double3, double1);
      assertFalse(double2 == double0);
      assertFalse(double3.equals((Object)double1));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double0));
      
      doubleArray0[1] = double3;
      doubleArray0[2] = double3;
      double double4 = (-1.0);
      Double double5 = new Double(double4);
      assertEquals((-1.0), (double)double5, 0.01D);
      assertNotSame(double5, double1);
      assertNotSame(double5, double3);
      assertFalse(double5.equals((Object)double1));
      assertTrue(double5.equals((Object)double4));
      assertFalse(double5.equals((Object)double0));
      assertFalse(double5.equals((Object)double3));
      assertFalse(double5.equals((Object)double2));
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      
      doubleArray0[3] = double5;
      double double6 = 556.272940323891;
      Double double7 = new Double(double6);
      assertEquals(556.272940323891, (double)double7, 0.01D);
      assertNotSame(double7, double1);
      assertNotSame(double7, double3);
      assertNotSame(double7, double5);
      assertFalse(double7.equals((Object)double1));
      assertTrue(double7.equals((Object)double6));
      assertFalse(double7.equals((Object)double0));
      assertFalse(double7.equals((Object)double2));
      assertFalse(double7.equals((Object)double4));
      assertFalse(double7.equals((Object)double3));
      assertFalse(double7.equals((Object)double5));
      assertFalse(double6 == double0);
      assertFalse(double6 == double2);
      assertFalse(double6 == double4);
      
      doubleArray0[4] = double7;
      doubleArray0[5] = double7;
      doubleArray0[6] = double1;
      doubleArray0[7] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapDivide((double) double3);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double1);
      assertNotSame(double3, double5);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(double2 == double6);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double3.equals((Object)double7));
      assertFalse(double3.equals((Object)double4));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double6));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double5));
      assertNotNull(openMapRealVector1);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double1);
      assertNotSame(double3, double5);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(double2 == double6);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double3.equals((Object)double7));
      assertFalse(double3.equals((Object)double4));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double6));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double5));
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, (double) double3);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double1);
      assertNotSame(double3, double5);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.2390146878207373E-80, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(double2 == double6);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double3.equals((Object)double7));
      assertFalse(double3.equals((Object)double4));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double6));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double5));
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-60.1075271);
      doubleArray0[3] = double0;
      double double1 = 2463.9;
      doubleArray0[6] = double1;
      double double2 = 395.90909195842994;
      doubleArray0[7] = double2;
      double double3 = 1007.7923;
      doubleArray0[8] = double3;
      double[] doubleArray1 = new double[8];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[4] = doubleArray0[3];
      doubleArray1[5] = double0;
      doubleArray1[6] = double3;
      doubleArray1[7] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[0]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-60.1075271), (-60.1075271), 1007.7923, (-60.1075271)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-60.1075271), 0.0, 0.0, 2463.9, 395.90909195842994, 1007.7923}, doubleArray0, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 975.900446174;
      double double1 = (-5.41132969020717);
      Double double2 = new Double(double1);
      assertEquals((-5.41132969020717), (double)double2, 0.01D);
      assertTrue(double2.equals((Object)double1));
      assertFalse(double2.equals((Object)double0));
      assertFalse(double1 == double0);
      
      double double3 = 100.0;
      doubleArray0[2] = double2;
      doubleArray0[0] = double2;
      Double double4 = new Double(double0);
      assertEquals(975.900446174, (double)double4, 0.01D);
      assertNotSame(double4, double2);
      assertFalse(double4.equals((Object)double2));
      assertTrue(double4.equals((Object)double0));
      assertFalse(double4.equals((Object)double3));
      assertFalse(double4.equals((Object)double1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      
      doubleArray0[1] = double4;
      doubleArray0[3] = (Double) double3;
      doubleArray0[4] = (Double) double1;
      doubleArray0[6] = double4;
      doubleArray0[7] = (Double) double0;
      double double5 = 794.479325;
      Double double6 = new Double(double5);
      assertEquals(794.479325, (double)double6, 0.01D);
      assertNotSame(double6, double2);
      assertNotSame(double6, double4);
      assertFalse(double5 == double0);
      assertFalse(double5 == double1);
      assertFalse(double5 == double3);
      assertFalse(double6.equals((Object)double0));
      assertFalse(double6.equals((Object)double2));
      assertFalse(double6.equals((Object)double4));
      assertFalse(double6.equals((Object)double1));
      assertFalse(double6.equals((Object)double3));
      assertTrue(double6.equals((Object)double5));
      
      doubleArray0[5] = double6;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapDivide((double) double2);
      assertNotSame(double2, double6);
      assertNotSame(double2, double4);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertFalse(double2.equals((Object)double6));
      assertFalse(double2.equals((Object)double4));
      assertTrue(double2.equals((Object)double1));
      assertFalse(double2.equals((Object)double5));
      assertFalse(double2.equals((Object)double0));
      assertFalse(double2.equals((Object)double3));
      assertFalse(double1 == double5);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      assertNotSame(double2, double6);
      assertNotSame(double2, double4);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertFalse(double2.equals((Object)double6));
      assertFalse(double2.equals((Object)double4));
      assertTrue(double2.equals((Object)double1));
      assertFalse(double2.equals((Object)double5));
      assertFalse(double2.equals((Object)double0));
      assertFalse(double2.equals((Object)double3));
      assertFalse(double1 == double5);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, double1);
      assertNotSame(double2, double6);
      assertNotSame(double2, double4);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals((-2.1566065122458532E-84), eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertFalse(double2.equals((Object)double6));
      assertFalse(double2.equals((Object)double4));
      assertTrue(double2.equals((Object)double1));
      assertFalse(double2.equals((Object)double5));
      assertFalse(double2.equals((Object)double0));
      assertFalse(double2.equals((Object)double3));
      assertFalse(double1 == double5);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 975.900446174;
      Double double1 = new Double(double0);
      assertEquals(975.900446174, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      double double2 = (-5.41132969020717);
      Double double3 = new Double(double2);
      assertEquals((-5.41132969020717), (double)double3, 0.01D);
      assertNotSame(double3, double1);
      assertFalse(double2 == double0);
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      assertTrue(double3.equals((Object)double2));
      
      doubleArray0[1] = double3;
      doubleArray0[2] = double3;
      doubleArray0[3] = double3;
      double double4 = 556.272940323891;
      Double double5 = new Double(double4);
      assertEquals(556.272940323891, (double)double5, 0.01D);
      assertNotSame(double5, double3);
      assertNotSame(double5, double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double5.equals((Object)double3));
      assertTrue(double5.equals((Object)double4));
      assertFalse(double5.equals((Object)double0));
      assertFalse(double5.equals((Object)double2));
      assertFalse(double5.equals((Object)double1));
      
      doubleArray0[4] = double5;
      Double double6 = new Double((double) doubleArray0[3]);
      assertEquals((-5.41132969020717), (double)double6, 0.01D);
      assertNotSame(double6, double5);
      assertNotSame(double6, double3);
      assertNotSame(double6, double1);
      assertTrue(double6.equals((Object)double2));
      assertFalse(double6.equals((Object)double5));
      assertTrue(double6.equals((Object)double3));
      assertFalse(double6.equals((Object)double4));
      assertFalse(double6.equals((Object)double0));
      assertFalse(double6.equals((Object)double1));
      
      doubleArray0[5] = double6;
      doubleArray0[6] = double6;
      doubleArray0[7] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, (double) doubleArray0[6]);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = -0.0;
      Double double1 = new Double(double0);
      assertEquals(-0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = (Double) double0;
      doubleArray0[6] = double1;
      double double2 = (-5.41132969020717);
      Double double3 = new Double(double2);
      assertEquals((-5.41132969020717), (double)double3, 0.01D);
      assertNotSame(double3, double1);
      assertFalse(double2 == double0);
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      
      double double4 = 100.0;
      Double double5 = new Double(double4);
      assertEquals(100.0, (double)double5, 0.01D);
      assertNotSame(double5, double3);
      assertNotSame(double5, double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertTrue(double5.equals((Object)double4));
      assertFalse(double5.equals((Object)double3));
      assertFalse(double5.equals((Object)double0));
      assertFalse(double5.equals((Object)double2));
      assertFalse(double5.equals((Object)double1));
      
      doubleArray0[2] = double5;
      double double6 = 0.5811390644248304;
      Double double7 = new Double(double6);
      assertEquals(0.5811390644248304, (double)double7, 0.01D);
      assertNotSame(double7, double3);
      assertNotSame(double7, double5);
      assertNotSame(double7, double1);
      assertFalse(double7.equals((Object)double0));
      assertFalse(double7.equals((Object)double3));
      assertFalse(double7.equals((Object)double2));
      assertTrue(double7.equals((Object)double6));
      assertFalse(double7.equals((Object)double5));
      assertFalse(double7.equals((Object)double1));
      assertFalse(double7.equals((Object)double4));
      assertFalse(double6 == double2);
      assertFalse(double6 == double0);
      assertFalse(double6 == double4);
      
      doubleArray0[3] = double7;
      double double8 = 556.272940323891;
      Double double9 = new Double(double8);
      assertEquals(556.272940323891, (double)double9, 0.01D);
      assertNotSame(double9, double7);
      assertNotSame(double9, double3);
      assertNotSame(double9, double5);
      assertNotSame(double9, double1);
      assertFalse(double8 == double4);
      assertFalse(double8 == double6);
      assertFalse(double8 == double2);
      assertFalse(double8 == double0);
      assertFalse(double9.equals((Object)double4));
      assertFalse(double9.equals((Object)double7));
      assertFalse(double9.equals((Object)double3));
      assertFalse(double9.equals((Object)double0));
      assertFalse(double9.equals((Object)double5));
      assertFalse(double9.equals((Object)double2));
      assertFalse(double9.equals((Object)double6));
      assertFalse(double9.equals((Object)double1));
      assertTrue(double9.equals((Object)double8));
      
      doubleArray0[4] = double9;
      double double10 = 794.479325;
      Double double11 = new Double(double10);
      assertEquals(794.479325, (double)double11, 0.01D);
      assertNotSame(double11, double5);
      assertNotSame(double11, double3);
      assertNotSame(double11, double9);
      assertNotSame(double11, double1);
      assertNotSame(double11, double7);
      assertFalse(double11.equals((Object)double5));
      assertFalse(double11.equals((Object)double3));
      assertTrue(double11.equals((Object)double10));
      assertFalse(double11.equals((Object)double9));
      assertFalse(double11.equals((Object)double1));
      assertFalse(double11.equals((Object)double4));
      assertFalse(double11.equals((Object)double0));
      assertFalse(double11.equals((Object)double2));
      assertFalse(double11.equals((Object)double8));
      assertFalse(double11.equals((Object)double6));
      assertFalse(double11.equals((Object)double7));
      assertFalse(double10 == double4);
      assertFalse(double10 == double6);
      assertFalse(double10 == double8);
      assertFalse(double10 == double0);
      assertFalse(double10 == double2);
      
      doubleArray0[5] = double11;
      doubleArray0[7] = double9;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.625, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapDivide((double) double3);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double1);
      assertNotSame(double3, double9);
      assertNotSame(double3, double5);
      assertNotSame(double3, double11);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.625, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.625, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(double2 == double4);
      assertFalse(double2 == double10);
      assertFalse(double2 == double0);
      assertFalse(double2 == double8);
      assertFalse(double2 == double6);
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double4));
      assertFalse(double3.equals((Object)double7));
      assertFalse(double3.equals((Object)double8));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double6));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double9));
      assertFalse(double3.equals((Object)double10));
      assertFalse(double3.equals((Object)double5));
      assertFalse(double3.equals((Object)double11));
      assertNotNull(openMapRealVector1);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double1);
      assertNotSame(double3, double9);
      assertNotSame(double3, double5);
      assertNotSame(double3, double11);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.625, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.625, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(double2 == double4);
      assertFalse(double2 == double10);
      assertFalse(double2 == double0);
      assertFalse(double2 == double8);
      assertFalse(double2 == double6);
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double4));
      assertFalse(double3.equals((Object)double7));
      assertFalse(double3.equals((Object)double8));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double6));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double9));
      assertFalse(double3.equals((Object)double10));
      assertFalse(double3.equals((Object)double5));
      assertFalse(double3.equals((Object)double11));
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = (OpenMapRealMatrix)openMapRealMatrix0.preMultiply((RealMatrix) openMapRealMatrix0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double1);
      assertNotSame(double3, double9);
      assertNotSame(double3, double5);
      assertNotSame(double3, double11);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.625, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.625, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(8, openMapRealMatrix1.getRowDimension());
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(double2 == double4);
      assertFalse(double2 == double10);
      assertFalse(double2 == double0);
      assertFalse(double2 == double8);
      assertFalse(double2 == double6);
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double4));
      assertFalse(double3.equals((Object)double7));
      assertFalse(double3.equals((Object)double8));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double6));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double9));
      assertFalse(double3.equals((Object)double10));
      assertFalse(double3.equals((Object)double5));
      assertFalse(double3.equals((Object)double11));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotNull(openMapRealMatrix1);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix1, (double) doubleArray0[6]);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double1);
      assertNotSame(double3, double9);
      assertNotSame(double3, double5);
      assertNotSame(double3, double11);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.625, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.625, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(8, openMapRealMatrix1.getRowDimension());
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(double2 == double4);
      assertFalse(double2 == double10);
      assertFalse(double2 == double0);
      assertFalse(double2 == double8);
      assertFalse(double2 == double6);
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double4));
      assertFalse(double3.equals((Object)double7));
      assertFalse(double3.equals((Object)double8));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double6));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double9));
      assertFalse(double3.equals((Object)double10));
      assertFalse(double3.equals((Object)double5));
      assertFalse(double3.equals((Object)double11));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 975.900446174;
      Double double1 = new Double(double0);
      assertEquals(975.900446174, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      double double2 = (-5.41132969020717);
      Double double3 = new Double(double2);
      assertEquals((-5.41132969020717), (double)double3, 0.01D);
      assertNotSame(double3, double1);
      assertFalse(double2 == double0);
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      assertTrue(double3.equals((Object)double2));
      
      doubleArray0[2] = double3;
      doubleArray0[0] = double3;
      Double double4 = new Double(double0);
      assertEquals(975.900446174, (double)double4, 0.01D);
      assertNotSame(double4, double3);
      assertNotSame(double4, double1);
      assertTrue(double4.equals((Object)double1));
      assertTrue(double4.equals((Object)double0));
      assertFalse(double4.equals((Object)double3));
      assertFalse(double4.equals((Object)double2));
      assertFalse(double0 == double2);
      
      doubleArray0[1] = double4;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[6] = double4;
      doubleArray0[4] = double4;
      doubleArray0[5] = doubleArray0[2];
      doubleArray0[7] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapDivide((double) double3);
      assertNotSame(double3, double1);
      assertNotSame(double3, double4);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertFalse(double2 == double0);
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      assertNotSame(double3, double1);
      assertNotSame(double3, double4);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertFalse(double2 == double0);
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, double2);
      assertNotSame(double3, double1);
      assertNotSame(double3, double4);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertFalse(double2 == double0);
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-60.1075271);
      doubleArray0[0] = double0;
      double double1 = (-3076.9316518689);
      doubleArray0[1] = double1;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = double0;
      doubleArray0[6] = double1;
      double double2 = 1007.7923;
      double[] doubleArray1 = new double[8];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = doubleArray0[1];
      doubleArray1[2] = doubleArray0[0];
      doubleArray1[4] = doubleArray0[3];
      doubleArray1[5] = double0;
      doubleArray1[6] = double2;
      doubleArray1[7] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[0]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-60.1075271), (-3076.9316518689), 0.0, (-60.1075271), (-60.1075271), 0.0, (-3076.9316518689), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-3076.9316518689), (-60.1075271), 0.0, (-60.1075271), (-60.1075271), 1007.7923, (-60.1075271)}, doubleArray1, 0.01);
      assertEquals(1.4280088540665644E21, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-60.1075271);
      double double1 = 9.0;
      doubleArray0[3] = double1;
      double double2 = 0.0;
      double double3 = 2463.9;
      doubleArray0[6] = double3;
      double double4 = 395.90909195842994;
      doubleArray0[7] = double4;
      doubleArray0[8] = double0;
      double[] doubleArray1 = new double[8];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = doubleArray0[8];
      doubleArray1[4] = doubleArray0[3];
      doubleArray1[5] = double0;
      doubleArray1[6] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-60.1075271), 9.0, (-60.1075271), (-60.1075271), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 9.0, 0.0, 0.0, 2463.9, 395.90909195842994, (-60.1075271)}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 4240.6138329506;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      double double1 = (-787.3506309023);
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = double1;
      doubleArray1[4] = double1;
      doubleArray1[5] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 4240.6138329506, 4240.6138329506, 4240.6138329506, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-787.3506309023), (-787.3506309023), (-787.3506309023)}, doubleArray1, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = -0.0;
      Double double1 = new Double(double0);
      assertEquals(-0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = (Double) double0;
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      double double2 = (-5.41132969020717);
      Double double3 = new Double(double2);
      assertEquals((-5.41132969020717), (double)double3, 0.01D);
      assertNotSame(double3, double1);
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double0));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double2 == double0);
      
      double double4 = 100.0;
      Double double5 = new Double(double4);
      assertEquals(100.0, (double)double5, 0.01D);
      assertNotSame(double5, double3);
      assertNotSame(double5, double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double5.equals((Object)double2));
      assertFalse(double5.equals((Object)double0));
      assertFalse(double5.equals((Object)double3));
      assertTrue(double5.equals((Object)double4));
      assertFalse(double5.equals((Object)double1));
      
      doubleArray0[2] = double5;
      double double6 = 0.5811390644248304;
      Double double7 = new Double(double6);
      assertEquals(0.5811390644248304, (double)double7, 0.01D);
      assertNotSame(double7, double5);
      assertNotSame(double7, double1);
      assertNotSame(double7, double3);
      assertFalse(double7.equals((Object)double4));
      assertFalse(double7.equals((Object)double5));
      assertFalse(double7.equals((Object)double1));
      assertFalse(double7.equals((Object)double2));
      assertFalse(double7.equals((Object)double0));
      assertFalse(double7.equals((Object)double3));
      assertTrue(double7.equals((Object)double6));
      assertFalse(double6 == double4);
      assertFalse(double6 == double0);
      assertFalse(double6 == double2);
      
      doubleArray0[3] = double7;
      double double8 = 556.272940323891;
      Double double9 = new Double(double8);
      assertEquals(556.272940323891, (double)double9, 0.01D);
      assertNotSame(double9, double1);
      assertNotSame(double9, double5);
      assertNotSame(double9, double7);
      assertNotSame(double9, double3);
      assertFalse(double8 == double2);
      assertFalse(double8 == double0);
      assertFalse(double8 == double4);
      assertFalse(double8 == double6);
      assertFalse(double9.equals((Object)double0));
      assertFalse(double9.equals((Object)double1));
      assertFalse(double9.equals((Object)double5));
      assertTrue(double9.equals((Object)double8));
      assertFalse(double9.equals((Object)double7));
      assertFalse(double9.equals((Object)double4));
      assertFalse(double9.equals((Object)double6));
      assertFalse(double9.equals((Object)double2));
      assertFalse(double9.equals((Object)double3));
      
      doubleArray0[4] = double9;
      doubleArray0[7] = doubleArray0[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapDivide((double) double3);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(double3, double5);
      assertNotSame(double3, double1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double9);
      assertEquals(0.5, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(double3.equals((Object)double5));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double8));
      assertFalse(double3.equals((Object)double4));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double6));
      assertFalse(double3.equals((Object)double7));
      assertFalse(double3.equals((Object)double9));
      assertFalse(double2 == double4);
      assertFalse(double2 == double6);
      assertFalse(double2 == double0);
      assertFalse(double2 == double8);
      assertNotNull(openMapRealVector1);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(double3, double5);
      assertNotSame(double3, double1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double9);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(0.5, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(double3.equals((Object)double5));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double8));
      assertFalse(double3.equals((Object)double4));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double6));
      assertFalse(double3.equals((Object)double7));
      assertFalse(double3.equals((Object)double9));
      assertFalse(double2 == double4);
      assertFalse(double2 == double6);
      assertFalse(double2 == double0);
      assertFalse(double2 == double8);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, double0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(double3, double5);
      assertNotSame(double3, double1);
      assertNotSame(double3, double7);
      assertNotSame(double3, double9);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(0.5, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(double3.equals((Object)double5));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double8));
      assertFalse(double3.equals((Object)double4));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double6));
      assertFalse(double3.equals((Object)double7));
      assertFalse(double3.equals((Object)double9));
      assertFalse(double0 == double8);
      assertFalse(double0 == double2);
      assertFalse(double0 == double6);
      assertFalse(double0 == double4);
      assertFalse(double2 == double4);
      assertFalse(double2 == double6);
      assertFalse(double2 == double0);
      assertFalse(double2 == double8);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 4240.6138329506;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      double double1 = (-787.3506309023);
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[4] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[4]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-60.1075271);
      double[] doubleArray1 = new double[8];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[5] = double0;
      doubleArray1[6] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-60.1075271), (-60.1075271), 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = -0.0;
      Double double1 = new Double(double0);
      assertEquals(-0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = (Double) double0;
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      doubleArray0[7] = (Double) double0;
      double double2 = (-5.41132969020717);
      double double3 = 100.0;
      Double double4 = new Double(double3);
      assertEquals(100.0, (double)double4, 0.01D);
      assertNotSame(double4, double1);
      assertTrue(double4.equals((Object)double3));
      assertFalse(double4.equals((Object)double1));
      assertFalse(double4.equals((Object)double0));
      assertFalse(double4.equals((Object)double2));
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      
      doubleArray0[2] = double4;
      Double double5 = new Double(double2);
      assertEquals((-5.41132969020717), (double)double5, 0.01D);
      assertNotSame(double5, double4);
      assertNotSame(double5, double1);
      assertFalse(double5.equals((Object)double3));
      assertFalse(double5.equals((Object)double0));
      assertFalse(double5.equals((Object)double4));
      assertTrue(double5.equals((Object)double2));
      assertFalse(double5.equals((Object)double1));
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      
      doubleArray0[3] = double5;
      doubleArray0[4] = doubleArray0[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.25, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.25, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, (double) double5);
      assertNotSame(double5, double4);
      assertNotSame(double5, double1);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.25, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(double5.equals((Object)double3));
      assertFalse(double5.equals((Object)double0));
      assertFalse(double5.equals((Object)double4));
      assertTrue(double5.equals((Object)double2));
      assertFalse(double5.equals((Object)double1));
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 975.900446174;
      Double double1 = new Double(double0);
      assertEquals(975.900446174, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[1];
      doubleArray0[4] = double1;
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = double1;
      doubleArray0[7] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, double0);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[4];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray1[3]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) double0;
      doubleArray1[1] = (Double) double0;
      doubleArray1[2] = (Double) doubleArray0[0];
      doubleArray1[3] = (Double) doubleArray0[1];
      doubleArray1[4] = (Double) double0;
      doubleArray1[5] = (Double) double0;
      doubleArray1[6] = (Double) doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, openMapRealMatrix0.getColumnDimension());
      assertEquals(7, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, (double) doubleArray1[2]);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, openMapRealMatrix0.getColumnDimension());
      assertEquals(7, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, openMapRealMatrix0.getColumnDimension());
      assertEquals(7, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(true, arrayRealVector0.isNaN());
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[0]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(array2DRowRealMatrix0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(9, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix1.getRowDimension());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotNull(array2DRowRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 0.0;
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) double0;
      doubleArray0[1] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, (double) doubleArray0[0]);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(array2DRowRealMatrix0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(2, array2DRowRealMatrix1.getRowDimension());
      assertEquals(2, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(array2DRowRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[0]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(array2DRowRealMatrix0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(9, array2DRowRealMatrix1.getRowDimension());
      assertEquals(9, array2DRowRealMatrix1.getColumnDimension());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(array2DRowRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1175.2769587;
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[9][7];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray1[6];
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray1);
      assertEquals(6, blockRealMatrix0.getColumnDimension());
      assertEquals(false, blockRealMatrix0.isSquare());
      assertEquals(9, blockRealMatrix0.getRowDimension());
      assertEquals(3525.8308761000003, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix0, doubleArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = 807;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(int0, int0);
      assertEquals(807, array2DRowRealMatrix0.getRowDimension());
      assertEquals(807, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(807, array2DRowRealMatrix0.getRowDimension());
      assertEquals(807, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      try {
        double double0 = eigenDecompositionImpl0.getRealEigenvalue(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 807
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[4];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray1[3]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 975.900446174;
      Double double1 = new Double(double0);
      assertEquals(975.900446174, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, (double) doubleArray0[0]);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertNotNull(eigenDecompositionImpl0);
      
      int int0 = (-123);
      try {
        double double2 = eigenDecompositionImpl0.getImagEigenvalue(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -123
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[4];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray1[3]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(doubleArray2);
  }
}
