/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:57:01 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class EigenDecompositionImplEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 100.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[3] = double0;
      double double1 = 3918.98950629;
      doubleArray0[4] = double1;
      double double2 = 1707.99098803383;
      doubleArray0[5] = double2;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {100.0, 100.0, 0.0, 100.0, 3918.98950629, 1707.99098803383}, doubleArray0, 0.01);
      assertEquals(9437.97901258, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4278.517496238144, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(5926.98049432383, arrayRealVector0.getL1Norm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {100.0, 100.0, 0.0, 100.0, 3918.98950629, 1707.99098803383}, doubleArray0, 0.01);
      assertEquals(9437.97901258, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4278.517496238144, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(5926.98049432383, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      
      double double3 = 1.0E-12;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double3);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {100.0, 100.0, 0.0, 100.0, 3918.98950629, 1707.99098803383}, doubleArray0, 0.01);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertEquals(9437.97901258, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4278.517496238144, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(5926.98049432383, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals((-5.346826711758013E-59), eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      double double1 = (-913.82816157501);
      doubleArray0[2] = double1;
      double double2 = (-1.0);
      double double3 = (-1679.8019);
      doubleArray0[3] = double3;
      doubleArray0[7] = double0;
      doubleArray0[5] = double2;
      double double4 = 1456.462661020396;
      doubleArray0[6] = double4;
      double double5 = (-2235.403002943717);
      doubleArray0[8] = doubleArray0[3];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[3] = doubleArray0[5];
      doubleArray1[4] = double4;
      doubleArray1[5] = doubleArray0[2];
      doubleArray1[6] = double5;
      doubleArray1[7] = double2;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 1456.462661020396, (-913.82816157501), (-2235.403002943717), (-1.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-913.82816157501), (-1679.8019), 0.0, (-1.0), 1456.462661020396, (-203.4218443438711), (-1679.8019), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double double1 = (-913.82816157501);
      doubleArray0[2] = double1;
      double double2 = (-1.0);
      doubleArray0[5] = double2;
      doubleArray0[7] = doubleArray0[1];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = doubleArray0[5];
      doubleArray1[2] = doubleArray0[0];
      doubleArray1[3] = doubleArray0[5];
      doubleArray1[4] = doubleArray0[2];
      doubleArray1[5] = doubleArray0[2];
      doubleArray1[6] = doubleArray0[1];
      doubleArray1[7] = double2;
      doubleArray1[8] = doubleArray0[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-203.4218443438711), (-203.4218443438711), (-913.82816157501), 0.0, 0.0, (-1.0), 0.0, (-203.4218443438711), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), (-203.4218443438711), (-1.0), (-913.82816157501), (-913.82816157501), (-203.4218443438711), (-1.0), (-203.4218443438711)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2.448288625034168E24, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443439);
      double double1 = (-913.82816157501);
      doubleArray0[1] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[3];
      double double2 = (-1.0);
      doubleArray0[5] = doubleArray0[1];
      double double3 = 1456.462661020396;
      doubleArray0[6] = double3;
      double double4 = (-2235.403002943717);
      doubleArray0[7] = double4;
      double double5 = 0.08325;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[4] = double0;
      doubleArray1[5] = double5;
      doubleArray1[7] = double2;
      doubleArray1[8] = double2;
      doubleArray1[6] = double4;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-203.4218443439), 0.08325, (-2235.403002943717), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-913.82816157501), 0.0, (-203.4218443439), (-203.4218443439), (-913.82816157501), 1456.462661020396, (-2235.403002943717), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      double double1 = (-2054.67969201);
      double double2 = (-913.82816157501);
      doubleArray0[2] = double2;
      double double3 = 1456.462661020396;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = double1;
      doubleArray1[3] = double0;
      doubleArray1[4] = double3;
      doubleArray1[5] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2054.67969201), (-203.4218443438711), 1456.462661020396, (-203.4218443438711), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-913.82816157501), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[7] = double0;
      double double1 = (-2054.67969201);
      doubleArray0[1] = double1;
      double double2 = (-913.82816157501);
      doubleArray0[2] = double2;
      doubleArray0[5] = doubleArray0[2];
      double double3 = 1456.462661020396;
      doubleArray0[6] = doubleArray0[1];
      double double4 = (-2235.403002943717);
      doubleArray0[8] = doubleArray0[5];
      doubleArray0[9] = double1;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = double1;
      doubleArray1[3] = double0;
      doubleArray1[4] = double3;
      doubleArray1[5] = double0;
      doubleArray1[6] = double4;
      doubleArray1[7] = doubleArray0[4];
      doubleArray1[8] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2054.67969201), (-203.4218443438711), 1456.462661020396, (-203.4218443438711), (-2235.403002943717), (-203.4218443438711), (-2054.67969201)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2054.67969201), (-913.82816157501), (-203.4218443438711), (-203.4218443438711), (-913.82816157501), (-2054.67969201), (-203.4218443438711), (-913.82816157501), (-2054.67969201)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      double double1 = (-2054.67969201);
      doubleArray0[1] = double1;
      double double2 = (-913.82816157501);
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[6] = doubleArray0[1];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[3] = double0;
      doubleArray1[4] = doubleArray0[2];
      doubleArray1[5] = double0;
      doubleArray1[6] = doubleArray0[6];
      doubleArray1[7] = double2;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, (-2054.67969201), (-913.82816157501), (-203.4218443438711), (-203.4218443438711), 0.0, (-2054.67969201), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-203.4218443438711), (-913.82816157501), (-203.4218443438711), (-2054.67969201), (-913.82816157501), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  //@Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443439);
      doubleArray0[0] = double0;
      double double1 = (-2054.6796920130123);
      doubleArray0[1] = double1;
      double double2 = (-913.82816157501);
      doubleArray0[2] = double2;
      double double3 = (-1.7672040238869404);
      double double4 = 1456.462661020396;
      doubleArray0[6] = double4;
      double double5 = (-2235.403002943717);
      doubleArray0[7] = double5;
      doubleArray0[8] = doubleArray0[0];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = doubleArray0[6];
      doubleArray1[2] = double1;
      doubleArray1[3] = double0;
      doubleArray1[4] = double4;
      double double6 = 0.9999999999999998;
      doubleArray1[5] = double3;
      doubleArray1[6] = double6;
      doubleArray1[8] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-203.4218443439), 1456.462661020396, (-2054.6796920130123), (-203.4218443439), 1456.462661020396, (-1.7672040238869404), 0.9999999999999998, 0.0, (-2054.6796920130123)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-203.4218443439), (-2054.6796920130123), (-913.82816157501), 0.0, 0.0, 0.0, 1456.462661020396, (-2235.403002943717), (-203.4218443439), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(4.6354835482072845E31, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      doubleArray0[0] = double0;
      double double1 = (-2054.67969201);
      doubleArray0[1] = double1;
      double double2 = (-913.82816157501);
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[3];
      double double3 = (-1.0);
      double double4 = 1456.462661020396;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = double1;
      doubleArray1[4] = double4;
      doubleArray1[5] = double0;
      doubleArray1[6] = doubleArray0[1];
      doubleArray1[7] = double3;
      doubleArray1[8] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2054.67969201), 0.0, 1456.462661020396, (-203.4218443438711), (-2054.67969201), (-1.0), (-2054.67969201)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-203.4218443438711), (-2054.67969201), (-913.82816157501), (-203.4218443438711), (-203.4218443438711), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(6.377468189142105E31, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      double double1 = (-913.82816157501);
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[3];
      double double2 = (-1.0);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = double2;
      doubleArray1[3] = double0;
      double double3 = 1.0E-11;
      doubleArray1[2] = double1;
      doubleArray1[4] = double3;
      doubleArray1[5] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-203.4218443438711), (-203.4218443438711), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-203.4218443438711), (-1.0), (-913.82816157501), (-203.4218443438711), 1.0E-11, (-203.4218443438711), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      double double1 = (-2054.6796920130123);
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      double double2 = (-1.0);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = double2;
      doubleArray1[2] = double1;
      doubleArray1[3] = double0;
      doubleArray1[4] = double0;
      doubleArray1[5] = doubleArray0[2];
      doubleArray1[6] = double1;
      doubleArray1[7] = double2;
      doubleArray1[8] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-2054.6796920130123), (-203.4218443438711), (-203.4218443438711), (-2054.6796920130123), (-2054.6796920130123), (-1.0), (-2054.6796920130123)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2054.6796920130123), (-2054.6796920130123), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  //@Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      double double1 = (-1625.6930135008758);
      doubleArray0[6] = double1;
      doubleArray0[2] = doubleArray0[6];
      doubleArray0[9] = doubleArray0[6];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = double1;
      doubleArray1[5] = double0;
      doubleArray1[6] = doubleArray0[2];
      doubleArray1[7] = doubleArray0[4];
      doubleArray1[8] = doubleArray0[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-203.4218443438711), (-203.4218443438711), (-1625.6930135008758), (-203.4218443438711), (-203.4218443438711), (-203.4218443438711), (-1625.6930135008758), 0.0, 0.0, (-1625.6930135008758)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1625.6930135008758), 0.0, 0.0, (-203.4218443438711), (-1625.6930135008758), (-203.4218443438711), (-203.4218443438711)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-7.192986586830463E26), eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  //@Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      doubleArray0[0] = double0;
      double double1 = (-2054.67969201);
      doubleArray0[1] = double1;
      double double2 = (-913.82816157501);
      doubleArray0[2] = double2;
      double double3 = (-1.0);
      doubleArray0[5] = double3;
      doubleArray0[6] = doubleArray0[1];
      doubleArray0[7] = doubleArray0[0];
      doubleArray0[9] = double2;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = double1;
      doubleArray1[3] = double0;
      doubleArray1[4] = doubleArray0[0];
      doubleArray1[6] = double1;
      doubleArray1[7] = double3;
      doubleArray1[8] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-203.4218443438711), (-2054.67969201), (-913.82816157501), 0.0, 0.0, (-1.0), (-2054.67969201), (-203.4218443438711), 0.0, (-913.82816157501)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2054.67969201), (-203.4218443438711), (-203.4218443438711), 0.0, (-2054.67969201), (-1.0), (-2054.67969201)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1.3272883481400094E31), eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[3];
      double double1 = (-1.0);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = double1;
      doubleArray1[3] = double0;
      double double2 = 1.0E-11;
      doubleArray1[2] = double2;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[4]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-203.4218443438711), (-203.4218443438711), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-203.4218443438711), (-1.0), 1.0E-11, (-203.4218443438711), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-528.689720110917);
      doubleArray0[2] = double0;
      doubleArray0[0] = double0;
      double double1 = 11.431371265491862;
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[1]);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {(-528.689720110917), 11.431371265491862, (-528.689720110917)}, doubleArray0, 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(11.431371265491862, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertNotNull(openMapRealMatrix0);
      assertArrayEquals(new double[] {(-528.689720110917), 11.431371265491862, (-528.689720110917)}, doubleArray0, 0.01);
      assertEquals(3, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(3, openMapRealMatrix0.getColumnDimension());
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(11.431371265491862, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, doubleArray0[0]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-528.689720110917), 11.431371265491862, (-528.689720110917)}, doubleArray0, 0.01);
      assertEquals((-8.525228810111856E-15), eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(3, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(3, openMapRealMatrix0.getColumnDimension());
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(11.431371265491862, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double double1 = (-913.82816157501);
      doubleArray0[2] = double1;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-203.4218443438711), (-203.4218443438711), (-913.82816157501), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double0 == double1);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[3];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[4]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-203.4218443438711), (-203.4218443438711), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 2;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) realMatrixImpl0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = (-151);
      try {
        RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -151
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 2;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) realMatrixImpl0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 2;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) realMatrixImpl0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(2, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(2, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 2;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) realMatrixImpl0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(2, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(2, array2DRowRealMatrix1.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 2;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertNotNull(realMatrixImpl0);
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) realMatrixImpl0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(2, array2DRowRealMatrix1.getRowDimension());
      assertEquals(2, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(10, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(10, array2DRowRealMatrix1.getRowDimension());
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      double double1 = 98.33658865884392;
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray0[0] = double1;
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-203.4218443438711);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = 0;
      double double1 = eigenDecompositionImpl0.getRealEigenvalue(int0);
      assertEquals(0.0, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double0 == double1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray1[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = (-151);
      try {
        double double0 = eigenDecompositionImpl0.getImagEigenvalue(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -151
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[4]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
  }
}
