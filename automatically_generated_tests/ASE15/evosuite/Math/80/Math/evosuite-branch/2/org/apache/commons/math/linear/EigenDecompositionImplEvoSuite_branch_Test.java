/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:45:43 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class EigenDecompositionImplEvoSuite_branch_Test   {

  //@Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 591.1156626329002;
      doubleArray0[0] = double0;
      double double1 = (-990.997807392421);
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 1173.531148;
      doubleArray0[4] = double4;
      double double5 = (-2561.0);
      int int0 = 63;
      int int1 = 2107;
      double double6 = 27.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int1, double6);
      assertEquals(63, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(27.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double6 == double5);
      assertFalse(double6 == double0);
      assertFalse(double6 == double1);
      assertFalse(double6 == double2);
      assertFalse(double6 == double4);
      assertFalse(double6 == double3);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapSubtractToSelf(doubleArray0[1]);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(63, openMapRealVector1.getDimension());
      assertEquals(27.0, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(63, openMapRealVector0.getDimension());
      assertEquals(27.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {591.1156626329002, (-990.997807392421), 0.0, 0.0, 1173.531148, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double6 == double5);
      assertFalse(double6 == double0);
      assertFalse(double6 == double1);
      assertFalse(double6 == double2);
      assertFalse(double6 == double4);
      assertFalse(double6 == double3);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapSinToSelf();
      assertSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(63, openMapRealVector1.getDimension());
      assertEquals(27.0, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(63, openMapRealVector0.getDimension());
      assertEquals(27.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(27.0, openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(63, openMapRealVector2.getDimension());
      assertNotNull(openMapRealVector2);
      assertArrayEquals(new double[] {591.1156626329002, (-990.997807392421), 0.0, 0.0, 1173.531148, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double6 == double5);
      assertFalse(double6 == double0);
      assertFalse(double6 == double1);
      assertFalse(double6 == double2);
      assertFalse(double6 == double4);
      assertFalse(double6 == double3);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector2.outerproduct(openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(63, openMapRealVector1.getDimension());
      assertEquals(27.0, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(63, openMapRealVector0.getDimension());
      assertEquals(27.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(63, openMapRealMatrix0.getRowDimension());
      assertEquals(63, openMapRealMatrix0.getColumnDimension());
      assertEquals(27.0, openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(63, openMapRealVector2.getDimension());
      assertNotNull(openMapRealMatrix0);
      assertArrayEquals(new double[] {591.1156626329002, (-990.997807392421), 0.0, 0.0, 1173.531148, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double6 == double5);
      assertFalse(double6 == double0);
      assertFalse(double6 == double1);
      assertFalse(double6 == double2);
      assertFalse(double6 == double4);
      assertFalse(double6 == double3);
      
      OpenMapRealMatrix openMapRealMatrix1 = (OpenMapRealMatrix)openMapRealMatrix0.transpose();
      assertSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(63, openMapRealVector1.getDimension());
      assertEquals(27.0, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(63, openMapRealVector0.getDimension());
      assertEquals(27.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(63, openMapRealMatrix0.getRowDimension());
      assertEquals(63, openMapRealMatrix0.getColumnDimension());
      assertEquals(63, openMapRealMatrix1.getColumnDimension());
      assertEquals(63, openMapRealMatrix1.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(27.0, openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(63, openMapRealVector2.getDimension());
      assertNotNull(openMapRealMatrix1);
      assertArrayEquals(new double[] {591.1156626329002, (-990.997807392421), 0.0, 0.0, 1173.531148, 0.0}, doubleArray0, 0.01);
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(int1 == int0);
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertFalse(int0 == int1);
      assertFalse(double6 == double5);
      assertFalse(double6 == double0);
      assertFalse(double6 == double1);
      assertFalse(double6 == double2);
      assertFalse(double6 == double4);
      assertFalse(double6 == double3);
      
      double double7 = (-1.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix1, double7);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(63, openMapRealVector1.getDimension());
      assertEquals(27.0, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(63, openMapRealVector0.getDimension());
      assertEquals(27.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(63, openMapRealMatrix0.getRowDimension());
      assertEquals(63, openMapRealMatrix0.getColumnDimension());
      assertEquals(63, openMapRealMatrix1.getColumnDimension());
      assertEquals(63, openMapRealMatrix1.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(27.0, openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(63, openMapRealVector2.getDimension());
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {591.1156626329002, (-990.997807392421), 0.0, 0.0, 1173.531148, 0.0}, doubleArray0, 0.01);
      assertFalse(double7 == double6);
      assertFalse(double7 == double3);
      assertFalse(double7 == double5);
      assertFalse(double7 == double0);
      assertFalse(double7 == double2);
      assertFalse(double7 == double4);
      assertFalse(double7 == double1);
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(int1 == int0);
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertFalse(int0 == int1);
      assertFalse(double6 == double5);
      assertFalse(double6 == double0);
      assertFalse(double6 == double7);
      assertFalse(double6 == double1);
      assertFalse(double6 == double2);
      assertFalse(double6 == double4);
      assertFalse(double6 == double3);
      
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      assertSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(63, openMapRealVector1.getDimension());
      assertEquals(27.0, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(63, openMapRealVector0.getDimension());
      assertEquals(27.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(63, openMapRealMatrix0.getRowDimension());
      assertEquals(63, openMapRealMatrix0.getColumnDimension());
      assertEquals(63, openMapRealMatrix1.getColumnDimension());
      assertEquals(63, openMapRealMatrix1.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(27.0, openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(63, openMapRealVector2.getDimension());
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {61.09725902179891, 7.329211303450205E-14, 2.3666370079845455E-16, 7.770279916426966E-29, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-5.9164567891575885E-31), (-9.385181489797173E-16)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {591.1156626329002, (-990.997807392421), 0.0, 0.0, 1173.531148, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double7 == double6);
      assertFalse(double7 == double3);
      assertFalse(double7 == double5);
      assertFalse(double7 == double0);
      assertFalse(double7 == double2);
      assertFalse(double7 == double4);
      assertFalse(double7 == double1);
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(int1 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertFalse(int0 == int1);
      assertFalse(double6 == double5);
      assertFalse(double6 == double0);
      assertFalse(double6 == double7);
      assertFalse(double6 == double1);
      assertFalse(double6 == double2);
      assertFalse(double6 == double4);
      assertFalse(double6 == double3);
      
      int int2 = 754;
      int int3 = 322562;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(int2, int3);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][10];
      double[] doubleArray1 = new double[7];
      double double0 = (-3879.955);
      doubleArray1[0] = double0;
      double double1 = 12.566370614359172;
      double double2 = 1.5;
      double[] doubleArray2 = new double[6];
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double0;
      doubleArray2[1] = double2;
      doubleArray2[2] = double0;
      doubleArray2[3] = double1;
      doubleArray2[4] = double2;
      doubleArray2[5] = double1;
      double double3 = 0.0;
      doubleArray2[1] = double0;
      doubleArray2[3] = double2;
      doubleArray2[4] = double1;
      doubleArray2[5] = double2;
      double double4 = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray2, double4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2.9569589863319305E11, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-3879.955), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3879.955), (-3879.955), (-3879.955), 1.5, 12.566370614359172, 1.5}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertTrue(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray1[2] = double2;
      double double5 = 0.0;
      doubleArray1[3] = double5;
      double double6 = 0.0;
      double double7 = 1542.166908749644;
      doubleArray1[5] = double7;
      double double8 = 0.0;
      doubleArray1[6] = double8;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      try {
        Array2DRowRealMatrix array2DRowRealMatrix1 = array2DRowRealMatrix0.add(array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-3879.955);
      doubleArray0[0] = double0;
      double double1 = 12.566370614359172;
      double double2 = (-1884.0148495819);
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double3 = 0.0;
      doubleArray1[4] = double3;
      doubleArray1[1] = double0;
      doubleArray1[2] = double1;
      doubleArray1[3] = double2;
      doubleArray1[4] = double1;
      doubleArray1[5] = double2;
      double double4 = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7.358975415270189E23, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, (-3879.955), 12.566370614359172, (-1884.0148495819), 12.566370614359172, (-1884.0148495819)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3879.955), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertTrue(double4 == double3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      doubleArray0[2] = double2;
      doubleArray0[3] = double2;
      double double5 = 0.0;
      double double6 = 1542.166908749644;
      doubleArray0[5] = double6;
      double double7 = 0.0;
      doubleArray0[6] = double7;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotNull(array2DRowRealMatrix0);
      
      try {
        Array2DRowRealMatrix array2DRowRealMatrix1 = array2DRowRealMatrix0.add(array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = Double.NaN;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double double1 = (-2309.456412);
      doubleArray0[0] = doubleArray0[0];
      double[] doubleArray1 = new double[3];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = doubleArray0[0];
      doubleArray1[1] = double1;
      doubleArray0[0] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, double1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-2309.456412), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-2309.456412), 0.0}, doubleArray1, 0.01);
      assertFalse(double1 == double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = 4.0;
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(true, decompositionSolver0.isNonSingular());
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(decompositionSolver0);
      assertArrayEquals(new double[] {(-2309.456412), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-2309.456412), 0.0}, doubleArray1, 0.01);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[0] = double2;
      doubleArray1[0] = double2;
      doubleArray1[1] = double2;
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {4.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 4.0, 0.0}, doubleArray1, 0.01);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = double2;
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(true, arrayRealVector0.isNaN());
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {4.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0}, doubleArray1, 0.01);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(3, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(3, array2DRowRealMatrix1.getRowDimension());
      assertNotNull(array2DRowRealMatrix1);
      assertArrayEquals(new double[] {4.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0}, doubleArray1, 0.01);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, array2DRowRealMatrix2.getRowDimension());
      assertEquals(3, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(array2DRowRealMatrix2);
      assertArrayEquals(new double[] {4.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0}, doubleArray1, 0.01);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {4.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {4.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0}, doubleArray1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      Array2DRowRealMatrix array2DRowRealMatrix3 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotSame(array2DRowRealMatrix3, array2DRowRealMatrix1);
      assertSame(array2DRowRealMatrix3, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix3, array2DRowRealMatrix2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(true, array2DRowRealMatrix3.isSquare());
      assertEquals(3, array2DRowRealMatrix3.getColumnDimension());
      assertEquals(3, array2DRowRealMatrix3.getRowDimension());
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(array2DRowRealMatrix3);
      assertArrayEquals(new double[] {4.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0}, doubleArray1, 0.01);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(array2DRowRealMatrix3.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix3.equals((Object)array2DRowRealMatrix2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      double double3 = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(doubleArray0, doubleArray0, doubleArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 2.2250738585072014E-308;
      doubleArray0[0] = double0;
      double double1 = 578.647351970232;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      double double3 = 88.602756547972;
      double double4 = 0.0;
      doubleArray0[5] = double3;
      double[] doubleArray1 = new double[5];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = double1;
      doubleArray1[2] = double3;
      double double5 = 0.0;
      doubleArray1[3] = double5;
      doubleArray1[4] = double4;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 578.647351970232, 88.602756547972, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.2250738585072014E-308, 578.647351970232, 0.0, 2.2250738585072014E-308, 0.0, 88.602756547972}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double5);
      assertFalse(double0 == double1);
      
      double double6 = 1549.3615841463;
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(doubleArray0, doubleArray0, double6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //@Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 2.2250738585072014E-308;
      doubleArray0[0] = double0;
      double double1 = 578.647351970232;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      double double3 = 88.602756547972;
      doubleArray0[4] = double3;
      double double4 = 0.0;
      doubleArray0[5] = double3;
      double[] doubleArray1 = new double[5];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double3;
      doubleArray1[1] = double1;
      doubleArray1[2] = double3;
      double double5 = 2507.9169;
      doubleArray1[3] = double5;
      doubleArray1[4] = double4;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1.4015557398666674E19, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {88.602756547972, 578.647351970232, 88.602756547972, 2507.9169, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.2250738585072014E-308, 578.647351970232, 0.0, 2.2250738585072014E-308, 88.602756547972, 88.602756547972}, doubleArray0, 0.01);
      assertFalse(double0 == double2);
      assertFalse(double0 == double5);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1.4015557398666674E19, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {88.602756547972, 578.647351970232, 88.602756547972, 2507.9169, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.2250738585072014E-308, 578.647351970232, 0.0, 2.2250738585072014E-308, 88.602756547972, 88.602756547972}, doubleArray0, 0.01);
      assertFalse(double0 == double2);
      assertFalse(double0 == double5);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double6 = 1549.3615841463;
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(doubleArray0, doubleArray0, double6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.3153194245284477;
      doubleArray0[0] = double0;
      double double1 = 578.647351970232;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      double double3 = 96.68132496025153;
      doubleArray0[2] = double3;
      double double4 = 0.0;
      doubleArray0[5] = double3;
      double[] doubleArray1 = new double[5];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double3;
      doubleArray1[1] = double1;
      doubleArray1[2] = double3;
      double double5 = 2507.9169;
      doubleArray1[3] = double5;
      doubleArray1[0] = double5;
      doubleArray1[2] = double5;
      doubleArray1[3] = double1;
      doubleArray1[4] = doubleArray0[4];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.968802770978588E16, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.3153194245284477, 578.647351970232, 96.68132496025153, 0.3153194245284477, 0.0, 96.68132496025153}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2507.9169, 578.647351970232, 2507.9169, 578.647351970232, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double5);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1.968802770978588E16, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.3153194245284477, 578.647351970232, 96.68132496025153, 0.3153194245284477, 0.0, 96.68132496025153}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2507.9169, 578.647351970232, 2507.9169, 578.647351970232, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double5);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double6 = 1549.3615841463;
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(doubleArray0, doubleArray0, double6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.3153194245284477;
      doubleArray0[0] = double0;
      double double1 = 578.647351970232;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      double double3 = 96.68132496025153;
      doubleArray0[4] = double3;
      double double4 = 0.0;
      doubleArray0[5] = double3;
      double[] doubleArray1 = new double[5];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double3;
      doubleArray1[1] = double1;
      doubleArray1[2] = double1;
      double double5 = 2507.9169;
      doubleArray1[3] = double5;
      doubleArray1[0] = double5;
      doubleArray1[1] = double5;
      doubleArray1[2] = double5;
      doubleArray1[3] = double1;
      doubleArray1[4] = doubleArray0[4];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6.420185004733449E13, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {2507.9169, 2507.9169, 2507.9169, 578.647351970232, 96.68132496025153}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.3153194245284477, 578.647351970232, 0.0, 0.3153194245284477, 96.68132496025153, 96.68132496025153}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertFalse(double0 == double5);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6.420185004733449E13, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {2507.9169, 2507.9169, 2507.9169, 578.647351970232, 96.68132496025153}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.3153194245284477, 578.647351970232, 0.0, 0.3153194245284477, 96.68132496025153, 96.68132496025153}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertFalse(double0 == double5);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double6 = 1549.3615841463;
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(doubleArray0, doubleArray0, double6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-2309.456412);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[0] = double0;
      int int0 = 403;
      int int1 = (-1287);
      double double1 = 1279.891326;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int1, double1);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(403, openMapRealVector0.getDimension());
      assertEquals(1279.891326, openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapFloorToSelf();
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(403, openMapRealVector0.getDimension());
      assertEquals(1279.891326, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1279.891326, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(403, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertEquals(0.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1279.891326, openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(403, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(403, openMapRealVector0.getDimension());
      assertEquals(1279.891326, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1279.891326, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(403, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector2.outerProduct((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertEquals(0.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1279.891326, openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(403, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(403, openMapRealVector0.getDimension());
      assertEquals(1279.891326, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(403, openMapRealMatrix0.getColumnDimension());
      assertEquals(403, openMapRealMatrix0.getRowDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1279.891326, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(403, openMapRealVector1.getDimension());
      assertNotNull(openMapRealMatrix0);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, (double) int0);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertEquals(0.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1279.891326, openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(403, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(403, openMapRealVector0.getDimension());
      assertEquals(1279.891326, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(403, openMapRealMatrix0.getColumnDimension());
      assertEquals(403, openMapRealMatrix0.getRowDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1279.891326, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(403, openMapRealVector1.getDimension());
      assertNotNull(eigenDecompositionImpl0);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertEquals(0.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1279.891326, openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(403, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(403, openMapRealVector0.getDimension());
      assertEquals(1279.891326, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(403, openMapRealMatrix0.getColumnDimension());
      assertEquals(403, openMapRealMatrix0.getRowDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1279.891326, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(403, openMapRealVector1.getDimension());
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(decompositionSolver1, decompositionSolver0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertEquals(0.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1279.891326, openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(403, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(403, openMapRealVector0.getDimension());
      assertEquals(1279.891326, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(false, decompositionSolver1.isNonSingular());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(403, openMapRealMatrix0.getColumnDimension());
      assertEquals(403, openMapRealMatrix0.getRowDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1279.891326, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(403, openMapRealVector1.getDimension());
      assertNotNull(decompositionSolver1);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(int1 == int0);
      assertFalse(decompositionSolver1.equals((Object)decompositionSolver0));
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      
      double[] doubleArray1 = new double[3];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = doubleArray0[0];
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(doubleArray1, doubleArray0, double0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.2317691127790228E10, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl1);
      assertArrayEquals(new double[] {(-2309.456412), (-2309.456412)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2309.456412), (-2309.456412), (-2309.456412)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double0 == double1);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getD();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.2317691127790228E10, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {(-2309.456412), (-2309.456412)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2309.456412), (-2309.456412), (-2309.456412)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double0 == double1);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getV();
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(3, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(1.2317691127790228E10, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotNull(array2DRowRealMatrix1);
      assertArrayEquals(new double[] {(-2309.456412), (-2309.456412)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2309.456412), (-2309.456412), (-2309.456412)}, doubleArray1, 0.01);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double0 == double1);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getD();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.2317691127790228E10, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(3, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(3, array2DRowRealMatrix2.getRowDimension());
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      assertNotNull(array2DRowRealMatrix2);
      assertArrayEquals(new double[] {(-2309.456412), (-2309.456412)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2309.456412), (-2309.456412), (-2309.456412)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double0 == double1);
      
      double double2 = 0.0;
      doubleArray0[1] = double2;
      EigenDecompositionImpl eigenDecompositionImpl2 = null;
      try {
        eigenDecompositionImpl2 = new EigenDecompositionImpl(doubleArray0, doubleArray0, doubleArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double double0 = 2.2250738585072014E-308;
      doubleArray0[0] = double0;
      double double1 = 578.647351970232;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double1;
      double double3 = (-2054.6);
      doubleArray0[3] = double3;
      double double4 = 100.0;
      doubleArray0[4] = double4;
      doubleArray0[5] = doubleArray0[2];
      double[] doubleArray1 = new double[5];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double4;
      doubleArray1[1] = double1;
      doubleArray1[2] = double3;
      double double5 = 2507.9169;
      doubleArray1[3] = double5;
      doubleArray1[4] = doubleArray0[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 2.2250738585072014E-308;
      double double1 = 578.647351970232;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = (-2069.7863515924946);
      doubleArray0[1] = double3;
      double double4 = 36.4210698;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double[] doubleArray1 = new double[5];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double4;
      doubleArray1[1] = double1;
      doubleArray1[2] = double3;
      double double6 = 2507.9169;
      doubleArray1[3] = double6;
      doubleArray1[4] = double5;
      double double7 = 959.7765570680494;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double7);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {36.4210698, 578.647351970232, (-2069.7863515924946), 2507.9169, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2069.7863515924946), 0.0, 0.0, 36.4210698, 0.0}, doubleArray0, 0.01);
      assertFalse(double7 == double5);
      assertFalse(double7 == double2);
      assertFalse(double7 == double6);
      assertFalse(double7 == double0);
      assertFalse(double7 == double3);
      assertFalse(double7 == double4);
      assertFalse(double7 == double1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {36.4210698, 578.647351970232, (-2069.7863515924946), 2507.9169, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2069.7863515924946), 0.0, 0.0, 36.4210698, 0.0}, doubleArray0, 0.01);
      assertFalse(double7 == double5);
      assertFalse(double7 == double2);
      assertFalse(double7 == double6);
      assertFalse(double7 == double0);
      assertFalse(double7 == double3);
      assertFalse(double7 == double4);
      assertFalse(double7 == double1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = new double[2];
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double8 = (-2309.456412);
      doubleArray2[0] = double8;
      double[] doubleArray3 = new double[3];
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = doubleArray2[0];
      doubleArray3[2] = double8;
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(doubleArray3, doubleArray2, double8);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(1.2317691127790218E10, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl1);
      assertArrayEquals(new double[] {(-2309.456412), 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2309.456412), 0.0, (-2309.456412)}, doubleArray3, 0.01);
      assertFalse(double8 == double5);
      assertFalse(double8 == double6);
      assertFalse(double8 == double2);
      assertFalse(double8 == double1);
      assertFalse(double8 == double7);
      assertFalse(double8 == double4);
      assertFalse(double8 == double0);
      assertFalse(double8 == double3);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getD();
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(1.2317691127790218E10, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(3, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(3, array2DRowRealMatrix1.getRowDimension());
      assertNotNull(array2DRowRealMatrix1);
      assertArrayEquals(new double[] {(-2309.456412), 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2309.456412), 0.0, (-2309.456412)}, doubleArray3, 0.01);
      assertFalse(double8 == double5);
      assertFalse(double8 == double6);
      assertFalse(double8 == double2);
      assertFalse(double8 == double1);
      assertFalse(double8 == double7);
      assertFalse(double8 == double4);
      assertFalse(double8 == double0);
      assertFalse(double8 == double3);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getV();
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(3, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      assertEquals(3, array2DRowRealMatrix2.getRowDimension());
      assertEquals(1.2317691127790218E10, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotNull(array2DRowRealMatrix2);
      assertArrayEquals(new double[] {(-2309.456412), 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2309.456412), 0.0, (-2309.456412)}, doubleArray3, 0.01);
      assertFalse(double8 == double5);
      assertFalse(double8 == double6);
      assertFalse(double8 == double2);
      assertFalse(double8 == double1);
      assertFalse(double8 == double7);
      assertFalse(double8 == double4);
      assertFalse(double8 == double0);
      assertFalse(double8 == double3);
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray2[1] = doubleArray1[0];
      double double9 = eigenDecompositionImpl1.getDeterminant();
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(1.2317691127790218E10, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(1.2317691127790218E10, double9, 0.01D);
      assertArrayEquals(new double[] {(-2309.456412), 36.4210698}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2309.456412), 0.0, (-2309.456412)}, doubleArray3, 0.01);
      assertFalse(double8 == double5);
      assertFalse(double8 == double6);
      assertFalse(double8 == double2);
      assertFalse(double8 == double1);
      assertFalse(double8 == double7);
      assertFalse(double8 == double9);
      assertFalse(double8 == double4);
      assertFalse(double8 == double0);
      assertFalse(double8 == double3);
      assertFalse(double9 == double5);
      assertFalse(double9 == double2);
      assertFalse(double9 == double1);
      assertFalse(double9 == double0);
      assertFalse(double9 == double8);
      assertFalse(double9 == double6);
      assertFalse(double9 == double7);
      assertFalse(double9 == double4);
      assertFalse(double9 == double3);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double[] doubleArray4 = new double[3];
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      double double10 = 0.0;
      assertFalse(double10 == double9);
      
      doubleArray4[0] = double10;
      double double11 = (-3426.73423532);
      assertFalse(double11 == double9);
      
      doubleArray4[1] = double11;
      double double12 = 1.0E-11;
      assertFalse(double12 == double9);
      
      doubleArray4[2] = double12;
      double double13 = 0.0;
      assertFalse(double13 == double9);
      
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(int0);
      assertNotSame(eigenDecompositionImpl0, eigenDecompositionImpl1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.7515398476582493, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(4.826680297324995, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {36.4210698, 578.647351970232, (-2069.7863515924946), 2507.9169, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2069.7863515924946), 0.0, 0.0, 36.4210698, 0.0}, doubleArray0, 0.01);
      assertFalse(eigenDecompositionImpl0.equals((Object)eigenDecompositionImpl1));
      assertFalse(double7 == double11);
      assertFalse(double7 == double13);
      assertFalse(double7 == double12);
      assertFalse(double7 == double6);
      assertFalse(double7 == double2);
      assertFalse(double7 == double0);
      assertFalse(double7 == double3);
      assertFalse(double7 == double1);
      assertFalse(double7 == double5);
      assertFalse(double7 == double9);
      assertFalse(double7 == double10);
      assertFalse(double7 == double4);
      assertFalse(double7 == double8);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 2.2250738585072014E-308;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      double double1 = 0.0;
      doubleArray0[2] = double1;
      double double2 = (-2069.7863515924946);
      doubleArray0[3] = double2;
      double double3 = 100.0;
      doubleArray0[4] = double3;
      double double4 = 0.0;
      doubleArray0[3] = double4;
      double[] doubleArray1 = new double[5];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = doubleArray0[1];
      double double5 = 2507.9169;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[3]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {2.2250738585072014E-308, 2.2250738585072014E-308, 0.0, 0.0, 100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.2250738585072014E-308, 2.2250738585072014E-308, 2.2250738585072014E-308, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(decompositionSolver0);
      assertArrayEquals(new double[] {2.2250738585072014E-308, 2.2250738585072014E-308, 0.0, 0.0, 100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.2250738585072014E-308, 2.2250738585072014E-308, 2.2250738585072014E-308, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {2.2250738585072014E-308, 2.2250738585072014E-308, 0.0, 0.0, 100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.2250738585072014E-308, 2.2250738585072014E-308, 2.2250738585072014E-308, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[2];
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double6 = (-2309.456412);
      doubleArray2[0] = double6;
      double[] doubleArray3 = new double[3];
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = doubleArray1[3];
      doubleArray3[2] = double6;
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(doubleArray3, doubleArray2, double6);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals(1.2317691127790218E10, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl1);
      assertArrayEquals(new double[] {0.0, 0.0, (-2309.456412)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-2309.456412), 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(double6 == double1);
      assertFalse(double6 == double4);
      assertFalse(double6 == double2);
      assertFalse(double6 == double5);
      assertFalse(double6 == double0);
      assertFalse(double6 == double3);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getD();
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(3, array2DRowRealMatrix1.getRowDimension());
      assertEquals(3, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(1.2317691127790218E10, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotNull(array2DRowRealMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, (-2309.456412)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-2309.456412), 0.0}, doubleArray2, 0.01);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(double6 == double1);
      assertFalse(double6 == double4);
      assertFalse(double6 == double2);
      assertFalse(double6 == double5);
      assertFalse(double6 == double0);
      assertFalse(double6 == double3);
      
      doubleArray2[1] = doubleArray0[5];
      double double7 = eigenDecompositionImpl1.getDeterminant();
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals(1.2317691127790218E10, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(1.2317691127790218E10, double7, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, (-2309.456412)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-2309.456412), 0.0}, doubleArray2, 0.01);
      assertFalse(double7 == double6);
      assertFalse(double7 == double3);
      assertFalse(double7 == double2);
      assertFalse(double7 == double0);
      assertFalse(double7 == double1);
      assertFalse(double7 == double4);
      assertFalse(double7 == double5);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(double6 == double1);
      assertFalse(double6 == double7);
      assertFalse(double6 == double4);
      assertFalse(double6 == double2);
      assertFalse(double6 == double5);
      assertFalse(double6 == double0);
      assertFalse(double6 == double3);
      
      double[] doubleArray4 = new double[3];
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      double double8 = 0.0;
      assertFalse(double8 == double7);
      
      doubleArray4[0] = double8;
      doubleArray4[1] = doubleArray2[0];
      double double9 = 1.0E-11;
      assertFalse(double9 == double7);
      
      doubleArray4[2] = double9;
      double double10 = 0.0;
      assertFalse(double10 == double7);
      
      EigenDecompositionImpl eigenDecompositionImpl2 = null;
      try {
        eigenDecompositionImpl2 = new EigenDecompositionImpl(doubleArray4, doubleArray4, double10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.25;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      double double1 = 0.563;
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      boolean boolean0 = false;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1, boolean0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      double[] doubleArray2 = realMatrixImpl0.preMultiply(doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.25, 0.25, 0.25, 0.25}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.25, 0.25, 0.25, 0.25}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      double double2 = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) realMatrixImpl0, double2);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(array2DRowRealMatrix0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) realMatrixImpl0, double1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertNotNull(eigenDecompositionImpl1);
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      int int0 = 0;
      double double4 = eigenDecompositionImpl1.getImagEigenvalue(int0);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, double4, 0.01D);
      assertFalse(double4 == double0);
      assertTrue(double4 == double3);
      assertFalse(double4 == double1);
      assertTrue(double4 == double2);
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double[] doubleArray3 = eigenDecompositionImpl1.getRealEigenvalues();
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.9999999999999999, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      doubleArray0[0] = double1;
      double[] doubleArray4 = eigenDecompositionImpl1.getImagEigenvalues();
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getVT();
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(4, array2DRowRealMatrix1.getRowDimension());
      assertEquals(4, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertNotNull(array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      doubleArray0[1] = (double) int0;
      double double5 = (-1131.55955);
      assertFalse(double5 == double3);
      assertFalse(double5 == double4);
      
      double double6 = 4942.390353113861;
      assertFalse(double6 == double4);
      assertFalse(double6 == double3);
      
      doubleArray0[3] = double6;
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getVT();
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      assertEquals(4, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix2.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertNotNull(array2DRowRealMatrix2);
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double3);
      assertFalse(double1 == double6);
      assertFalse(double1 == double5);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double7 = Double.POSITIVE_INFINITY;
      assertFalse(double7 == double3);
      assertFalse(double7 == double4);
      
      double[] doubleArray5 = new double[1];
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      double double8 = 0.0;
      assertTrue(double8 == double4);
      assertTrue(double8 == double3);
      
      doubleArray5[0] = double8;
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray5);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertNotNull(realMatrixImpl1);
      assertArrayEquals(new double[] {0.0}, doubleArray5, 0.01);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      
      double double9 = Double.POSITIVE_INFINITY;
      assertFalse(double9 == double4);
      assertFalse(double9 == double3);
      
      EigenDecompositionImpl eigenDecompositionImpl2 = new EigenDecompositionImpl((RealMatrix) realMatrixImpl1, double9);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(eigenDecompositionImpl2, eigenDecompositionImpl0);
      assertNotSame(eigenDecompositionImpl2, eigenDecompositionImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertEquals(0.0, eigenDecompositionImpl2.getDeterminant(), 0.01D);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertNotNull(eigenDecompositionImpl2);
      assertArrayEquals(new double[] {0.0}, doubleArray5, 0.01);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(eigenDecompositionImpl2.equals((Object)eigenDecompositionImpl0));
      assertFalse(eigenDecompositionImpl2.equals((Object)eigenDecompositionImpl1));
      assertFalse(double9 == double1);
      assertFalse(double9 == double5);
      assertFalse(double9 == double0);
      assertFalse(double9 == double6);
      assertTrue(double9 == double7);
      assertFalse(double9 == double4);
      assertFalse(double9 == double3);
      assertFalse(double9 == double8);
      assertFalse(double9 == double2);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      
      int int1 = (-27);
      try {
        double double10 = eigenDecompositionImpl2.getRealEigenvalue(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -27
         //
      }
  }
}
