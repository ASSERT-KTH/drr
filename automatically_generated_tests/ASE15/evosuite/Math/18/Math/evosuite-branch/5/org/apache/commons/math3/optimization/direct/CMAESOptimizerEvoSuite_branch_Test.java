/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:40:57 GMT 2014
 */

package org.apache.commons.math3.optimization.direct;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.TooManyEvaluationsException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CMAESOptimizerEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int int0 = (-423);
      double[] doubleArray0 = new double[3];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      doubleArray0[2] = (double) int0;
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      int int1 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, int0, int1, unitSphereRandomVectorGenerator0);
      assertArrayEquals(new double[] {0.0, 0.0, (-423.0)}, doubleArray0, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0], doubleArray1[0], doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-423);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) int0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-423.0), 0.0}, doubleArray0, 0.01);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      int int1 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, int0, int1, unitSphereRandomVectorGenerator0);
      assertArrayEquals(new double[] {0.0, (-423.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -423 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test2() {}
//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = (-423);
//       double[] doubleArray0 = new double[3];
//       CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
//       assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       assertNull(cMAESOptimizer0.getGoalType());
//       assertEquals(0, cMAESOptimizer0.getEvaluations());
//       assertNotNull(cMAESOptimizer0);
//       
//       double[][] doubleArray1 = new double[3][5];
//       doubleArray1[0] = doubleArray0;
//       assertNotNull(doubleArray1[0]);
//       
//       doubleArray1[1] = doubleArray0;
//       assertNotNull(doubleArray1[1]);
//       
//       doubleArray1[2] = doubleArray0;
//       assertNotNull(doubleArray1[2]);
//       
//       int int1 = 7;
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1);
//       assertNotNull(unitSphereRandomVectorGenerator0);
//       assertFalse(int1 == int0);
//       
//       MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, int0, int1, unitSphereRandomVectorGenerator0);
//       assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       assertNotNull(microsphereInterpolatingFunction0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       
//       GoalType goalType0 = GoalType.MINIMIZE;
//       PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray1[2], doubleArray1[0]);
//       assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       assertEquals(8, cMAESOptimizer0.getEvaluations());
//       assertEquals(7, cMAESOptimizer0.getMaxEvaluations());
//       assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
//       assertNotNull(pointValuePair0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//   }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-423);
      double[] doubleArray0 = new double[3];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(list0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 318;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = 706;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }
}
