/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:24:26 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigInteger;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.junit.runner.RunWith;

 
public class MathUtilsEvoSuite_branch_Test   {

  @Test
  public void test000() {}
//   @Test
//   public void test000()  throws Throwable  {
//       int[] intArray0 = new int[3];
//       int int0 = MathUtils.distanceInf(intArray0, intArray0);
//       assertEquals(0, int0);
//       assertArrayEquals(new int[] {0, 0, 0}, intArray0);
//   }

  @Test
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[2];
      double double0 = MathUtils.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      assertEquals(-7168, bigInteger1.shortValue());
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotNull(bigInteger1);
  }

  @Test
  public void test007()  throws Throwable  {
      int int0 = (-476);
      BigInteger bigInteger0 = BigInteger.valueOf((long) int0);
      assertEquals(36, bigInteger0.byteValue());
      assertEquals(-476, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-476^-476)
         //
      }
  }

  @Test
  public void test008()  throws Throwable  {
      int int0 = (-862);
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-862)
         //
      }
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = 11;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) int0);
      assertEquals(1, bigInteger1.shortValue());
      assertEquals(1, bigInteger1.byteValue());
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotNull(bigInteger1);
  }

  @Test
  public void test010()  throws Throwable  {
      int int0 = 683;
      int int1 = MathUtils.pow(int0, (long) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-33739341), int1);
      
      BigInteger bigInteger0 = null;
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-33,739,341)
         //
      }
  }

  @Test
  public void test011()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 1;
      int int1 = MathUtils.compareTo(double0, double0, (double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, int1);
      assertEquals(1, bigInteger1.byteValue());
      assertEquals(1, bigInteger1.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotNull(bigInteger1);
  }

  @Test
  public void test012()  throws Throwable  {
      int int0 = (-1);
      try {
        long long0 = MathUtils.pow((long) int0, (long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
      }
  }

  @Test
  public void test013()  throws Throwable  {
      int int0 = 6;
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(36, int1);
      
      long long0 = MathUtils.pow((long) int1, (long) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2176782336L, long0);
  }

  @Test
  public void test014()  throws Throwable  {
      int int0 = (-862);
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(743044, int1);
      
      long long0 = MathUtils.pow((long) int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = 6;
      int int1 = (-1);
      try {
        long long0 = MathUtils.pow((long) int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (6^-1)
         //
      }
  }

  @Test
  public void test016()  throws Throwable  {
      int int0 = (-1961);
      short short0 = (short)0;
      short short1 = MathUtils.indicator(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)1, short1);
      
      long long0 = MathUtils.pow((long) int0, (int) short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((-1961L), long0);
  }

  @Test
  public void test017()  throws Throwable  {
      byte byte0 = (byte) (-98);
      try {
        int int0 = MathUtils.pow((int) byte0, (long) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-98^-98)
         //
      }
  }

  @Test
  public void test018()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.compareTo(double0, double0, double0);
      assertEquals(0, int0);
      
      int int1 = (-51);
      assertFalse(int1 == int0);
      
      try {
        int int2 = MathUtils.pow(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-51)
         //
      }
  }

  @Test
  public void test019()  throws Throwable  {
      int int0 = (-23);
      int int1 = 94;
      int int2 = MathUtils.pow(int0, int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(748898801, int2);
  }

  @Test
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-747);
      int int1 = MathUtils.subAndCheck(intArray0[1], int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(747, int1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test
  public void test021()  throws Throwable  {
      short short0 = (short) (-458);
      short short1 = MathUtils.sign(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short) (-1), short1);
  }

  @Test
  public void test022()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short)0, short1);
  }

  @Test
  public void test023()  throws Throwable  {
      byte byte0 = (byte)71;
      short short0 = MathUtils.sign((short) byte0);
      assertEquals((short)1, short0);
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = 2;
      long long0 = MathUtils.sign((long) int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test025()  throws Throwable  {
      short short0 = (short)0;
      long long0 = MathUtils.sign((long) short0);
      assertEquals(0L, long0);
  }

  @Test
  public void test026()  throws Throwable  {
      byte byte0 = (byte) (-20);
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
      
      long long0 = MathUtils.sign((long) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((-1L), long0);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = (-1694);
      int int1 = MathUtils.sign(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test028()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = 6;
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(36, int1);
      
      float float0 = MathUtils.sign((float) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test030()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.sign((float) int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test031()  throws Throwable  {
      int int0 = (-23);
      float float0 = MathUtils.sign((float) int0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 5548;
      intArray0[0] = int0;
      double double0 = MathUtils.sign((double) intArray0[0]);
      assertEquals(1.0, double0, 0.01D);
      assertArrayEquals(new int[] {5548, 0, 0}, intArray0);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.sign((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test034()  throws Throwable  {
      double double0 = (-1664.76957352);
      double double1 = MathUtils.sign(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test035()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
  }

  @Test
  public void test036()  throws Throwable  {
      long long0 = 479001600L;
      int int0 = 2459;
      int int1 = 0;
      float float0 = MathUtils.round((float) long0, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      int int0 = 1422;
      double double0 = 0.0;
      double double1 = MathUtils.log((double) int0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = MathUtils.round(double1, int0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test038()  throws Throwable  {
      float float0 = 782.9F;
      float float1 = MathUtils.indicator(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = Double.NaN;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = double0;
      doubleArray0[0] = (double) float1;
      doubleArray0[3] = double0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (double) float1);
      assertFalse(float1 == float0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(float0 == float1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test
  public void test039()  throws Throwable  {
      float float0 = 782.9F;
      float float1 = MathUtils.indicator(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = Double.NaN;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = double0;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (double) float1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
      }
  }

  @Test
  public void test040()  throws Throwable  {
      long long0 = 479001600L;
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(229442532802560000L, long1);
      
      double[] doubleArray0 = new double[2];
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (double) long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      short short0 = (short)17;
      double double1 = MathUtils.scalb(double0, (int) short0);
      assertTrue(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = Double.NaN;
      byte byte0 = (byte) (-85);
      byte byte1 = MathUtils.indicator(byte0);
      //  // Unstable assertion: assertFalse(byte0 == byte1);
      //  // Unstable assertion: assertFalse(byte1 == byte0);
      //  // Unstable assertion: assertEquals((byte) (-1), byte1);
      
      double double1 = MathUtils.scalb(double0, (int) byte1);
      //  // Unstable assertion: assertFalse(byte0 == byte1);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(byte1 == byte0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      byte byte0 = (byte) (-20);
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
      
      double double0 = MathUtils.scalb((double) byte1, (int) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((-0.5), double0, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[2];
      short short0 = (short) (-1);
      double double0 = MathUtils.scalb((double) intArray0[1], (int) short0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test
  public void test045()  throws Throwable  {
      int int0 = 6;
      long long0 = (-878L);
      double double0 = MathUtils.nextAfter((double) long0, (double) int0);
      assertEquals((-877.9999999999999), double0, 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      int int0 = 6;
      int int1 = (-1);
      double double0 = MathUtils.nextAfter((double) int1, (double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-0.9999999999999999), double0, 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)1, short1);
      
      float float0 = MathUtils.round((float) short0, (int) short1, (int) short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((-0.1F), float0, 0.01F);
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = (-463);
      float float0 = MathUtils.round((float) int0, int0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test049()  throws Throwable  {
      int int0 = (-1961);
      int int1 = 2100;
      float float0 = MathUtils.round((float) int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test050()  throws Throwable  {
      long long0 = 479001600L;
      long long1 = 0L;
      long long2 = MathUtils.mulAndCheck(long0, long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, long2);
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = 16;
      long long0 = (-1L);
      long long1 = MathUtils.mulAndCheck(long0, (long) int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-16L), long1);
  }

  @Test
  public void test052()  throws Throwable  {
      int int0 = (-1961);
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(long0, (long) int0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0L, long1);
  }

  @Test
  public void test053()  throws Throwable  {
      int int0 = (-1961);
      long long0 = MathUtils.mulAndCheck((long) int0, (long) int0);
      assertEquals(3845521L, long0);
  }

  @Test
  public void test054()  throws Throwable  {
      int int0 = 10;
      int int1 = MathUtils.lcm(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(10, int1);
  }

  @Test
  public void test055()  throws Throwable  {
      int int0 = (-476);
      int int1 = MathUtils.indicator(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      int int3 = MathUtils.lcm(int1, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertEquals(0, int3);
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test057()  throws Throwable  {
      short short0 = (short) (-1);
      short short1 = MathUtils.indicator(short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short) (-1), short1);
  }

  @Test
  public void test058()  throws Throwable  {
      long long0 = 479001600L;
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(229442532802560000L, long1);
      
      long long2 = MathUtils.indicator(long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals(1L, long2);
  }

  @Test
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-747);
      intArray0[0] = int0;
      long long0 = MathUtils.indicator((long) intArray0[0]);
      assertEquals((-1L), long0);
      assertArrayEquals(new int[] {(-747), 0, 0}, intArray0);
  }

  @Test
  public void test060()  throws Throwable  {
      int int0 = 683;
      int int1 = MathUtils.indicator(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
  }

  @Test
  public void test061()  throws Throwable  {
      byte byte0 = (byte)71;
      float float0 = Float.NaN;
      float float1 = MathUtils.round(float0, (int) byte0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test062()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.indicator(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      double double0 = (-1664.76957352);
      double double1 = MathUtils.indicator(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test064()  throws Throwable  {
      byte byte0 = (byte)43;
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte)1, byte1);
  }

  @Test
  public void test065()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int1 = MathUtils.lcm(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-2,147,483,648, -2,147,483,648) is 2^31
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      int int0 = (-2691);
      int int1 = 0;
      int int2 = MathUtils.gcd(int0, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2691, int2);
  }

  @Test
  public void test067()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test068()  throws Throwable  {
      int int0 = 6;
      double double0 = MathUtils.factorialLog(int0);
      assertEquals(6.579251212010101, double0, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      int int0 = (-4598);
      int int1 = 905;
      int int2 = MathUtils.mulAndCheck(int0, int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-4161190), int2);
      
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialLog(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,161,190
         //
      }
  }

  @Test
  public void test070()  throws Throwable  {
      int int0 = 2011;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test071()  throws Throwable  {
      int int0 = (-2300);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialDouble(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,300
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      int int0 = 1422;
      int int1 = MathUtils.gcd(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(1422, int1);
      
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      int int0 = (-2379);
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,379
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      int int0 = 6;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(720.0, double0, 0.01D);
  }

  @Test
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test078()  throws Throwable  {
      int int0 = 6;
      double double0 = (-522.1261);
      boolean boolean0 = MathUtils.equals((double) int0, double0, int0);
      assertFalse(boolean0);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = (-950.320423646267);
      int int0 = 1;
      boolean boolean0 = MathUtils.equals(double0, double0, int0);
      assertTrue(boolean0);
  }

  @Test
  public void test080()  throws Throwable  {
      int int0 = (-2691);
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equals((double) int0, (double) int0, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      int int0 = 6;
      boolean boolean0 = MathUtils.equals((double) int0, (double) int0, int0);
      assertTrue(boolean0);
  }

  @Test
  public void test082()  throws Throwable  {
      int int0 = 1422;
      int int1 = MathUtils.gcd(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(1422, int1);
      
      int int2 = MathUtils.sign(int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertEquals(1, int2);
      
      boolean boolean0 = MathUtils.equals((double) int2, (double) int1, (double) int0);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertTrue(boolean0);
  }

  @Test
  public void test083()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(float0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      
      boolean boolean0 = MathUtils.equals((double) float1, (double) float0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = Double.NaN;
      int int0 = (-1692);
      double double1 = MathUtils.round(double0, int0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      doubleArray0[0] = double1;
      boolean boolean0 = MathUtils.equals(doubleArray0[0], (double) int0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[2];
      double[] doubleArray0 = new double[6];
      double double0 = 1689.2062;
      doubleArray0[5] = double0;
      short short0 = (short) (-1);
      int int0 = MathUtils.compareTo((double) intArray0[0], doubleArray0[5], (double) short0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1689.2062}, doubleArray0, 0.01);
  }

  @Test
  public void test086()  throws Throwable  {
      double double0 = (-1664.76957352);
      int int0 = 2459;
      int int1 = MathUtils.pow(int0, (long) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1513764675, int1);
      
      int int2 = MathUtils.compareTo((double) int1, (double) int0, double0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(1, int2);
  }

  @Test
  public void test087()  throws Throwable  {
      long long0 = 479001600L;
      int int0 = 2459;
      int int1 = MathUtils.pow(int0, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1796304895), int1);
      
      // Undeclared exception!
      try {
        long long1 = MathUtils.binomialCoefficient(int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,796,304,895
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      int int0 = (-1);
      int int1 = 0;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 0
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      int int0 = 2935;
      byte byte0 = (byte)32;
      double double0 = MathUtils.binomialCoefficientLog(int0, (int) byte0);
      assertEquals(173.77524524107307, double0, 0.01D);
  }

  @Test
  public void test090()  throws Throwable  {
      int int0 = 148;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      int int0 = 11;
      double double0 = MathUtils.binomialCoefficientLog(int0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      int int0 = 476;
      byte byte0 = (byte)32;
      double double0 = MathUtils.binomialCoefficientLog(int0, (int) byte0);
      assertEquals(114.669617466379, double0, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      int int0 = (-1);
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      int int0 = 19;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      int int0 = 6;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      int int0 = 3023;
      int int1 = (-1470);
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test097()  throws Throwable  {
      int int0 = 10;
      int int1 = 3023;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test098()  throws Throwable  {
      int int0 = 19;
      int int1 = 10;
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(92378L, long0);
  }

  @Test
  public void test099()  throws Throwable  {
      byte byte0 = (byte)1;
      byte byte1 = MathUtils.sign(byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      int int0 = 9;
      long long0 = MathUtils.binomialCoefficient(int0, (int) byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals(9L, long0);
  }

  @Test
  public void test100()  throws Throwable  {
      int int0 = 6;
      int int1 = (-1);
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      int int0 = 1422;
      long long0 = MathUtils.binomialCoefficient(int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test102()  throws Throwable  {
      int int0 = 6;
      int int1 = (-1);
      long long0 = MathUtils.subAndCheck((long) int1, (long) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-7L), long0);
  }

  @Test
  public void test103()  throws Throwable  {
      long long0 = 479001600L;
      long long1 = MathUtils.subAndCheck(long0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test104()  throws Throwable  {
      int int0 = (-23);
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-46), int1);
  }

  @Test
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(1742810335, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test106()  throws Throwable  {
      int int0 = 2;
      byte byte0 = (byte) (-20);
      float float0 = MathUtils.round((float) byte0, int0);
      assertEquals((-20.0F), float0, 0.01F);
  }

  @Test
  public void test107()  throws Throwable  {
      int int0 = 2;
      double double0 = MathUtils.cosh((double) int0);
      assertEquals(3.7621956910836314, double0, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      float float0 = Float.NaN;
      double double0 = MathUtils.sinh((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.hash((double) int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[3];
      double double0 = MathUtils.normalizeAngle((double) intArray0[1], (double) intArray0[0]);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test
  public void test111()  throws Throwable  {
      long long0 = 479001600L;
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(229442532802560000L, long1);
      
      int int0 = 2459;
      int int1 = MathUtils.pow(int0, long1);
      assertFalse(int1 == int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertEquals((-1782579199), int1);
      
      // Undeclared exception!
      try {
        float float0 = MathUtils.round((float) long1, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,782,579,199, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
      }
  }

  @Test
  public void test112()  throws Throwable  {
      int int0 = 2459;
      int int1 = MathUtils.pow(int0, (long) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1513764675, int1);
      
      long long0 = MathUtils.addAndCheck((long) int1, (long) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1513767134L, long0);
  }
}
