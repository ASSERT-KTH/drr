/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:58:08 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigInteger;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.junit.runner.RunWith;

 
public class MathUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[4];
      double double0 = MathUtils.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-118);
      byteArray0[0] = byte0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)0}, byteArray0);
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(-30208, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      try {
        BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-30,208)
         //
      }
  }

  @Test
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(-7168, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
  }

  @Test
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals(1, bigInteger0.shortValue());
      assertEquals(1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)125;
      byteArray0[0] = byte0;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) byteArray0[0]);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)125, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(1, bigInteger0.shortValue());
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger1.shortValue());
      assertEquals(1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
  }

  @Test
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      long long0 = (-400L);
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-400)
         //
      }
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = (-3438);
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-3,438)
         //
      }
  }

  @Test
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte byte0 = (byte)0;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) byte0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(1, bigInteger1.byteValue());
      assertEquals(1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
  }

  @Test
  public void test011()  throws Throwable  {
      long long0 = (-2237L);
      long long1 = MathUtils.addAndCheck(long0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-4474L), long1);
      
      try {
        long long2 = MathUtils.pow(long1, long1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-4,474^-4,474)
         //
      }
  }

  @Test
  public void test012()  throws Throwable  {
      long long0 = (-1263L);
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(1595169L, long1);
      
      byte[] byteArray0 = new byte[3];
      long long2 = MathUtils.pow((long) byteArray0[1], long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long2);
  }

  @Test
  public void test013()  throws Throwable  {
      byte byte0 = (byte) (-64);
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
      
      int int0 = 2819;
      long long0 = MathUtils.pow((long) byte1, int0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((-1L), long0);
  }

  @Test
  public void test014()  throws Throwable  {
      byte byte0 = (byte) (-52);
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      try {
        long long0 = MathUtils.pow((long) byte1, (int) byte1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
      }
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = (-275);
      try {
        int int1 = MathUtils.pow(int0, (long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-275^-275)
         //
      }
  }

  @Test
  public void test016()  throws Throwable  {
      byte byte0 = (byte) (-52);
      double double0 = 1.0;
      int int0 = MathUtils.hash(double0);
      assertEquals(1072693248, int0);
      
      int int1 = MathUtils.pow((int) byte0, (long) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test017()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      int int0 = (-1);
      try {
        int int1 = MathUtils.pow((int) byte1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1)
         //
      }
  }

  @Test
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[7];
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.subAndCheck((long) intArray0[1], long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
      }
  }

  @Test
  public void test019()  throws Throwable  {
      short short0 = (short)1022;
      short short1 = MathUtils.sign(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)1, short1);
  }

  @Test
  public void test020()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte) (-64);
      short short0 = MathUtils.sign((short) byte0);
      assertEquals((short) (-1), short0);
  }

  @Test
  public void test022()  throws Throwable  {
      int int0 = (-2483);
      long long0 = MathUtils.sign((long) int0);
      assertEquals((-1L), long0);
  }

  @Test
  public void test023()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.sign((long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.indicator((long) int0);
      assertEquals(1L, long0);
      
      long long1 = MathUtils.sign(long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(1L, long1);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = (-2801);
      int int1 = MathUtils.sign(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 196;
      int int1 = MathUtils.subAndCheck(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = MathUtils.sign(int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(0, int2);
  }

  @Test
  public void test027()  throws Throwable  {
      long long0 = 1392L;
      float float0 = MathUtils.sign((float) long0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test028()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.sign((float) int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte) (-52);
      float float0 = MathUtils.sign((float) byte0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-262.6013096012);
      doubleArray0[0] = double0;
      doubleArray0[5] = doubleArray0[0];
      double double1 = MathUtils.sign(doubleArray0[5]);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {(-262.6013096012), 0.0, 0.0, 0.0, 0.0, (-262.6013096012), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test031()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sign(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test032()  throws Throwable  {
      int int0 = 2339;
      double double0 = MathUtils.sign((double) int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = (-4824);
      int int1 = 3;
      float float0 = MathUtils.round((float) int0, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test
  public void test034()  throws Throwable  {
      float float0 = 800.1F;
      int int0 = (-1);
      // Undeclared exception!
      try {
        float float1 = MathUtils.round(float0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
      }
  }

  @Test
  public void test035()  throws Throwable  {
      byte byte0 = (byte)51;
      int int0 = 3;
      float float0 = MathUtils.round((float) byte0, (int) byte0, int0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = MathUtils.hash(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(31, int0);
      
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[0] = double0;
      double double1 = MathUtils.round(doubleArray0[0], int0, int0);
      assertTrue(double1 == double0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test037()  throws Throwable  {
      int int0 = 16;
      int int1 = (-2483);
      int int2 = 7;
      float float0 = MathUtils.round((float) int0, int1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) int2;
      doubleArray0[8] = (double) float0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, doubleArray0[4]);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = 16;
      int int1 = MathUtils.indicator(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      
      int int2 = (-2483);
      assertFalse(int2 == int1);
      
      int int3 = 7;
      assertFalse(int3 == int1);
      
      float float0 = MathUtils.round((float) int0, int2, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[8] = (double) float0;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (double) int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
      }
  }

  @Test
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[0] = double0;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, doubleArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
      }
  }

  @Test
  public void test040()  throws Throwable  {
      byte byte0 = (byte)9;
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      double double0 = 0.0;
      double double1 = MathUtils.log((double) byte0, double0);
      assertFalse(double1 == double0);
      assertFalse(byte0 == byte1);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = MathUtils.scalb(double1, (int) byte1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(byte0 == byte1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(byte1 == byte0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test041()  throws Throwable  {
      int int0 = 16;
      int int1 = MathUtils.indicator(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = (-2483);
      assertFalse(int2 == int1);
      
      int int3 = 7;
      assertFalse(int3 == int1);
      
      float float0 = MathUtils.round((float) int1, int2, int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double double0 = MathUtils.scalb((double) float0, int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = 206.0697537;
      int int0 = 0;
      double double1 = MathUtils.scalb(double0, int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(206.0697537, double1, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = MathUtils.hash(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(31, int0);
      
      double double0 = 0.0;
      double double1 = MathUtils.scalb(double0, int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      short short0 = (short) (-290);
      short short1 = MathUtils.indicator(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
      
      double double0 = MathUtils.nextAfter((double) short0, (double) short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((-289.99999999999994), double0, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      double double0 = 0.5;
      double double1 = (-1.0);
      double double2 = MathUtils.nextAfter(double0, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.49999999999999994, double2, 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      double double0 = 0.5;
      byte byte0 = (byte) (-64);
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
      
      int int0 = MathUtils.compareTo(double0, double0, (double) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals(0, int0);
      
      double double1 = MathUtils.nextAfter((double) int0, (double) byte0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((-4.9E-324), double1, 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      int int0 = 16;
      int int1 = MathUtils.indicator(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      
      int int2 = 1832;
      assertFalse(int2 == int1);
      
      float float0 = MathUtils.round((float) int1, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test048()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0L, long1);
  }

  @Test
  public void test049()  throws Throwable  {
      long long0 = 2432902008176640000L;
      long long1 = (-826L);
      // Undeclared exception!
      try {
        long long2 = MathUtils.mulAndCheck(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      short short0 = (short) (-290);
      int int0 = 0;
      long long0 = MathUtils.mulAndCheck((long) short0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = 1624;
      long long0 = (-2237L);
      long long1 = MathUtils.addAndCheck(long0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-4474L), long1);
      
      long long2 = MathUtils.mulAndCheck((long) int0, long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals((-7265776L), long2);
  }

  @Test
  public void test052()  throws Throwable  {
      byte byte0 = (byte)9;
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      int int0 = 0;
      int int1 = MathUtils.lcm((int) byte1, int0);
      assertTrue(int0 == int1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test053()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test054()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)1, short1);
  }

  @Test
  public void test055()  throws Throwable  {
      short short0 = (short) (-290);
      short short1 = MathUtils.indicator(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short) (-1), short1);
      
      long long0 = MathUtils.indicator((long) short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((-1L), long0);
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = (-2858);
      int int1 = MathUtils.indicator(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test057()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)0, byte1);
      
      byte byte2 = (byte) (-90);
      assertFalse(byte2 == byte1);
      
      float float0 = MathUtils.round((float) byte2, (int) byte1);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertTrue(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((-90.0F), float0, 0.01F);
  }

  @Test
  public void test058()  throws Throwable  {
      int int0 = 0;
      float float0 = Float.NaN;
      float float1 = MathUtils.round(float0, int0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test059()  throws Throwable  {
      int int0 = 1624;
      double double0 = MathUtils.indicator((double) int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test060()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = MathUtils.indicator(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test061()  throws Throwable  {
      byte byte0 = (byte) (-90);
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
      
      byte byte2 = MathUtils.indicator(byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte) (-1), byte2);
  }

  @Test
  public void test062()  throws Throwable  {
      int int0 = (-1974);
      int int1 = MathUtils.lcm(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1974, int1);
  }

  @Test
  public void test063()  throws Throwable  {
      int int0 = 2339;
      int[] intArray0 = new int[4];
      int int1 = MathUtils.distance1(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
      
      int int2 = MathUtils.gcd(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(2339, int2);
  }

  @Test
  public void test064()  throws Throwable  {
      byte byte0 = (byte)9;
      double double0 = MathUtils.factorialLog((int) byte0);
      assertEquals(12.801827480081469, double0, 0.01D);
  }

  @Test
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-345);
      intArray0[0] = int0;
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialLog(intArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -345
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      int int0 = 1624;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test067()  throws Throwable  {
      int int0 = 313;
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
      }
  }

  @Test
  public void test068()  throws Throwable  {
      byte byte0 = (byte)9;
      double double0 = MathUtils.factorialDouble((int) byte0);
      assertEquals(362880.0, double0, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test
  public void test070()  throws Throwable  {
      int int0 = 4504;
      float float0 = (-2551.0F);
      boolean boolean0 = MathUtils.equals((double) float0, (double) float0, int0);
      assertTrue(boolean0);
  }

  @Test
  public void test071()  throws Throwable  {
      int int0 = 0;
      int int1 = 2819;
      boolean boolean0 = MathUtils.equals((double) int0, (double) int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean0);
  }

  @Test
  public void test072()  throws Throwable  {
      byte byte0 = (byte) (-64);
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equals((double) byte1, (double) byte1, (int) byte1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      double double0 = 1.0727577175224394;
      double double1 = 0.0;
      boolean boolean0 = MathUtils.equals(double0, double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(boolean0);
  }

  @Test
  public void test074()  throws Throwable  {
      double double0 = Double.NaN;
      double double1 = 0.0;
      boolean boolean0 = MathUtils.equals(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(boolean0);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = Double.NaN;
      boolean boolean0 = MathUtils.equals(double0, double0);
      assertTrue(boolean0);
  }

  @Test
  public void test076()  throws Throwable  {
      double double0 = 1682.60614379;
      double double1 = 5058.4;
      byte byte0 = (byte)125;
      int int0 = MathUtils.compareTo(double0, double1, (double) byte0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1), int0);
  }

  @Test
  public void test077()  throws Throwable  {
      long long0 = 4503599627370495L;
      long long1 = MathUtils.addAndCheck(long0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(9007199254740990L, long1);
      
      int int0 = 2339;
      int int1 = MathUtils.compareTo((double) long1, (double) long0, (double) int0);
      assertFalse(long1 == long0);
      assertFalse(int1 == int0);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
  }

  @Test
  public void test078()  throws Throwable  {
      int int0 = (-1785);
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientLog(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,785
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      int int0 = 20;
      int int1 = MathUtils.pow(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 20
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      int int0 = 3607;
      int int1 = 2098;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(2447.568219850215, double0, 0.01D);
  }

  @Test
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)125;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      double double0 = MathUtils.binomialCoefficientLog((int) byteArray0[0], (int) byte1);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)125, (byte)0, (byte)0}, byteArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test082()  throws Throwable  {
      short short0 = (short)0;
      double double0 = MathUtils.binomialCoefficientLog((int) short0, (int) short0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test083()  throws Throwable  {
      int int0 = 4194304;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)51;
      byteArray0[0] = byte0;
      double double0 = MathUtils.binomialCoefficientDouble(int0, (int) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)51}, byteArray0);
      assertEquals(3.671791967661965E271, double0, 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      int int0 = 1;
      int int1 = (-2980);
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test085()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-262.6013096012);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      int int0 = 1;
      int int1 = MathUtils.hash(doubleArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-262.6013096012), (-262.6013096012), (-262.6013096012), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(278450353, int1);
      
      double double1 = MathUtils.binomialCoefficientDouble(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {(-262.6013096012), (-262.6013096012), (-262.6013096012), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2.78450353E8, double1, 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test088()  throws Throwable  {
      int int0 = 1982;
      int int1 = 2288;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      int int0 = (-2271);
      short short0 = (short)208;
      long long0 = MathUtils.binomialCoefficient((int) short0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test090()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test091()  throws Throwable  {
      int int0 = 1337;
      int int1 = 1;
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1337L, long0);
  }

  @Test
  public void test092()  throws Throwable  {
      int int0 = (-1564);
      int int1 = 0;
      int int2 = MathUtils.gcd(int0, int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(1564, int2);
      
      long long0 = MathUtils.binomialCoefficient(int2, int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(1L, long0);
  }

  @Test
  public void test093()  throws Throwable  {
      int int0 = 1;
      long long0 = MathUtils.binomialCoefficient(int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test094()  throws Throwable  {
      int int0 = 19;
      int int1 = MathUtils.sign(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      
      long long0 = MathUtils.subAndCheck((long) int0, (long) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(18L, long0);
  }

  @Test
  public void test095()  throws Throwable  {
      byte byte0 = (byte) (-64);
      int int0 = MathUtils.addAndCheck((int) byte0, (int) byte0);
      assertEquals((-128), int0);
  }

  @Test
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = 1;
      double double0 = MathUtils.round(doubleArray0[0], int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      byte byte0 = (byte)0;
      double double0 = MathUtils.cosh((double) byte0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      float float0 = 800.1F;
      double double0 = MathUtils.sinh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = (-1657.0);
      double double1 = MathUtils.normalizeAngle(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-1657.0), double1, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      float float0 = 800.1F;
      short short0 = (short)0;
      float float1 = MathUtils.round(float0, (int) short0, (int) short0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(801.0F, float1, 0.01F);
  }
}
