/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:49:45 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigInteger;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.junit.runner.RunWith;

 
public class MathUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[8];
      double double0 = MathUtils.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test06()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(-7168, bigInteger1.shortValue());
      assertEquals(0, bigInteger1.byteValue());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 3066;
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) int0);
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger1.shortValue());
      assertEquals(0, bigInteger1.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 1030;
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertEquals(2060, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int[] intArray0 = new int[3];
      int int2 = (-4634);
      assertFalse(int2 == int1);
      
      intArray0[2] = int2;
      try {
        long long0 = MathUtils.pow((long) int1, (long) intArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,060^-4,634)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 2152;
      long long0 = MathUtils.pow((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      int int1 = 1054;
      int int2 = MathUtils.pow(int0, (long) int1);
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1030;
      int int1 = MathUtils.subAndCheck(int0, int0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test12()  throws Throwable  {
      byte byte0 = (byte)21;
      short short0 = MathUtils.sign((short) byte0);
      assertEquals((short)1, short0);
  }

  @Test
  public void test13()  throws Throwable  {
      byte byte0 = (byte) (-90);
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      
      short short0 = MathUtils.sign((short) byte1);
      assertEquals((short) (-1), short0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(int0, int0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      long long0 = MathUtils.sign((long) int1);
      assertEquals(1L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test15()  throws Throwable  {
      byte byte0 = (byte) (-90);
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      
      long long0 = MathUtils.sign((long) byte1);
      assertEquals((-1L), long0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 2152;
      int int1 = MathUtils.sign(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test17()  throws Throwable  {
      float float0 = (-1877.0F);
      float float1 = MathUtils.sign(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 52;
      float float0 = MathUtils.sign((float) int0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 52;
      int int1 = MathUtils.pow(int0, int0);
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = MathUtils.sign((double) int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 989L;
      long long1 = MathUtils.indicator(long0);
      assertEquals(1L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      double double0 = MathUtils.sign((double) long1);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test21()  throws Throwable  {
      byte byte0 = (byte)21;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test22()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 3;
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(3, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = 4039;
      assertFalse(int2 == int1);
      
      float float0 = MathUtils.round((float) int1, int2);
      assertEquals(Float.NaN, float0, 0.01F);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 2457.97501754;
      doubleArray0[0] = double0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2457.97501754, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2457.97501754, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 2152;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = double0;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (double) int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, doubleArray0[0]);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 0;
      double double0 = 449.837;
      double double1 = MathUtils.scalb(double0, int0);
      assertEquals(449.837, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      float float0 = MathUtils.round((float) byteArray0[1], (int) byteArray0[1], (int) byteArray0[1]);
      assertEquals(1.0F, float0, 0.01F);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test29()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 1030;
      int int1 = MathUtils.indicator(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test31()  throws Throwable  {
      float float0 = (-981.9F);
      float float1 = MathUtils.indicator(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = 1.1102230246251565E-16;
      double double1 = MathUtils.indicator(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test33()  throws Throwable  {
      byte byte0 = (byte)45;
      byte byte1 = MathUtils.indicator(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test34()  throws Throwable  {
      byte byte0 = (byte) (-76);
      byte byte1 = MathUtils.indicator(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = (-1640);
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(1640, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 52;
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test39()  throws Throwable  {
      double double0 = (-674.934867640791);
      double double1 = MathUtils.nextAfter(double0, double0);
      assertEquals((-674.9348676407911), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 52;
      float float0 = (-1877.0F);
      boolean boolean0 = MathUtils.equals(double1, (double) float0, int0);
      assertFalse(boolean0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test40()  throws Throwable  {
      double double0 = 2306.662057608;
      int int0 = 0;
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equals(double0, double0, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 52;
      boolean boolean0 = MathUtils.equals((double) int0, (double) int0, int0);
      assertTrue(boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = (-1760);
      int int1 = MathUtils.indicator(int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      long long0 = (-996L);
      int int2 = 16;
      assertFalse(int2 == int1);
      
      long long1 = MathUtils.pow(long0, int2);
      assertEquals((-8018081338877804544L), long1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      
      int int3 = MathUtils.compareTo((double) int1, (double) long1, (double) long1);
      assertEquals(1, int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(long1 == long0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test43()  throws Throwable  {
      byte byte0 = (byte) (-42);
      int int0 = MathUtils.compareTo((double) byte0, (double) byte0, (double) byte0);
      assertEquals(0, int0);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = (-1760);
      int int1 = MathUtils.indicator(int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      long long0 = 0L;
      long long1 = MathUtils.sign(long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int2 = MathUtils.compareTo((double) int1, (double) long1, (double) int0);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(long1 == long0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(long0 == long1);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 52;
      int int1 = 67;
      double double0 = MathUtils.binomialCoefficientLog(int1, int0);
      assertEquals(33.47682642703455, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 3;
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(3, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = (-2429);
      assertFalse(int2 == int1);
      
      double double0 = MathUtils.binomialCoefficientDouble(int1, int2);
      assertEquals(1.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = 52;
      int int1 = 67;
      long long0 = MathUtils.binomialCoefficient(int1, int0);
      assertEquals(345780890878896L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test49()  throws Throwable  {
      int int0 = (-1760);
      int int1 = MathUtils.indicator(int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 16;
      assertFalse(int2 == int1);
      
      long long0 = MathUtils.subAndCheck((long) int1, (long) int2);
      assertEquals((-17L), long0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test
  public void test50()  throws Throwable  {
      int int0 = (-1760);
      int int1 = MathUtils.indicator(int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      long long0 = MathUtils.subAndCheck((long) int1, (long) int1);
      assertEquals(0L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(961, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test52()  throws Throwable  {
      long long0 = 2146L;
      int int0 = 3;
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(3, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = MathUtils.round((double) long0, int1);
      assertEquals(2146.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test53()  throws Throwable  {
      byte byte0 = (byte) (-90);
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      
      double double0 = MathUtils.cosh((double) byte1);
      assertEquals(1.5430806348152437, double0, 0.01D);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test54()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.log((double) int0, (double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = 1030;
      int int1 = MathUtils.hash((double) int0);
      assertEquals(1083185152, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test56()  throws Throwable  {
      double double0 = (-674.934867640791);
      double double1 = MathUtils.nextAfter(double0, double0);
      assertEquals((-674.9348676407911), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 52;
      double double2 = MathUtils.normalizeAngle((double) int0, double1);
      assertEquals((-676.849495632832), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = 3;
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(3, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float0 = MathUtils.round((float) int1, int0);
      assertEquals(3.0F, float0, 0.01F);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test58()  throws Throwable  {
      long long0 = 989L;
      long long1 = MathUtils.indicator(long0);
      assertEquals(1L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      
      int int0 = 52;
      long long2 = MathUtils.addAndCheck((long) int0, long1);
      assertEquals(53L, long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
  }
}
