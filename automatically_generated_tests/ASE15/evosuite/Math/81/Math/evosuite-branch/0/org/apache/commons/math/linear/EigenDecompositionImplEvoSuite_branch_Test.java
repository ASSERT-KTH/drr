/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 07:17:08 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class EigenDecompositionImplEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 7;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      //  // Unstable assertion: assertNotNull(blockRealMatrix0);
      //  // Unstable assertion: assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(7, blockRealMatrix0.getRowDimension());
      //  // Unstable assertion: assertEquals(true, blockRealMatrix0.isSquare());
      //  // Unstable assertion: assertEquals(7, blockRealMatrix0.getColumnDimension());
      
      BlockRealMatrix blockRealMatrix1 = blockRealMatrix0.scalarAdd((double) int0);
      //  // Unstable assertion: assertNotNull(blockRealMatrix1);
      //  // Unstable assertion: assertEquals(7, blockRealMatrix1.getRowDimension());
      //  // Unstable assertion: assertEquals(7, blockRealMatrix1.getColumnDimension());
      //  // Unstable assertion: assertEquals(49.0, blockRealMatrix1.getFrobeniusNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(true, blockRealMatrix1.isSquare());
      //  // Unstable assertion: assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(7, blockRealMatrix0.getRowDimension());
      //  // Unstable assertion: assertEquals(true, blockRealMatrix0.isSquare());
      //  // Unstable assertion: assertEquals(7, blockRealMatrix0.getColumnDimension());
      //  // Unstable assertion: assertFalse(blockRealMatrix1.equals((Object)blockRealMatrix0));
      //  // Unstable assertion: assertFalse(blockRealMatrix0.equals((Object)blockRealMatrix1));
      //  // Unstable assertion: assertNotSame(blockRealMatrix1, blockRealMatrix0);
      //  // Unstable assertion: assertNotSame(blockRealMatrix0, blockRealMatrix1);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix1, (double) int0);
      //  // Unstable assertion: assertNotNull(eigenDecompositionImpl0);
      //  // Unstable assertion: assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      //  // Unstable assertion: assertEquals(7, blockRealMatrix1.getRowDimension());
      //  // Unstable assertion: assertEquals(7, blockRealMatrix1.getColumnDimension());
      //  // Unstable assertion: assertEquals(49.0, blockRealMatrix1.getFrobeniusNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(true, blockRealMatrix1.isSquare());
      //  // Unstable assertion: assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(7, blockRealMatrix0.getRowDimension());
      //  // Unstable assertion: assertEquals(true, blockRealMatrix0.isSquare());
      //  // Unstable assertion: assertEquals(7, blockRealMatrix0.getColumnDimension());
      //  // Unstable assertion: assertFalse(blockRealMatrix1.equals((Object)blockRealMatrix0));
      //  // Unstable assertion: assertFalse(blockRealMatrix0.equals((Object)blockRealMatrix1));
      //  // Unstable assertion: assertNotSame(blockRealMatrix1, blockRealMatrix0);
      //  // Unstable assertion: assertNotSame(blockRealMatrix0, blockRealMatrix1);
      
      try {
        RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(int0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      double[] doubleArray1 = new double[2];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[1]);
      //  // Unstable assertion: assertNotNull(eigenDecompositionImpl0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      //  // Unstable assertion: assertNotNull(array2DRowRealMatrix0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      //  // Unstable assertion: assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      //  // Unstable assertion: assertEquals(true, array2DRowRealMatrix0.isSquare());
      //  // Unstable assertion: assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1.0E-12;
      double double1 = (-1618.0514344532419);
      doubleArray0[4] = double1;
      double double2 = (-2124.0052651);
      doubleArray0[6] = double2;
      double double3 = 1184.9001607;
      double double4 = 13.0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = double3;
      doubleArray1[2] = double3;
      doubleArray1[4] = double3;
      doubleArray1[8] = double0;
      doubleArray1[3] = double3;
      doubleArray1[5] = double4;
      double double5 = 292.851100374868;
      doubleArray1[6] = double5;
      doubleArray1[7] = double2;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[7]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1618.0514344532419), 0.0, (-2124.0052651), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1184.9001607, 1184.9001607, 1184.9001607, 1184.9001607, 13.0, 292.851100374868, (-2124.0052651), 1.0E-12}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1821.4343256;
      double double1 = 1.0E-12;
      double double2 = (-1618.0514344532419);
      doubleArray0[6] = double2;
      double double3 = (-13.806389596419507);
      doubleArray0[8] = double3;
      double double4 = (-1279.84913);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double double5 = (-800.48907862);
      doubleArray1[6] = double0;
      doubleArray1[7] = double5;
      doubleArray1[5] = double4;
      doubleArray1[8] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[7]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1279.84913), 1821.4343256, (-800.48907862), 1.0E-12}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1618.0514344532419), 0.0, (-13.806389596419507), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.8077795896854354;
      doubleArray0[0] = double0;
      doubleArray0[2] = doubleArray0[0];
      double double1 = (-1618.0514344532419);
      doubleArray0[4] = double1;
      double double2 = (-2124.0052651);
      doubleArray0[6] = double2;
      double double3 = 1184.9001607;
      double double4 = (-1279.84913);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = doubleArray0[4];
      doubleArray1[3] = double3;
      doubleArray1[1] = double3;
      doubleArray1[4] = double0;
      doubleArray1[5] = double4;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[7]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.8077795896854354, 0.0, 0.8077795896854354, 0.0, (-1618.0514344532419), 0.0, (-2124.0052651), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1184.9001607, (-1618.0514344532419), 1184.9001607, 0.8077795896854354, (-1279.84913), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-180.005879);
      doubleArray0[1] = double0;
      double double1 = 54.0;
      doubleArray0[2] = double1;
      double double2 = (-2739.980966829);
      doubleArray0[3] = double2;
      double double3 = 2329.0;
      doubleArray0[4] = double3;
      double double4 = 1.01;
      doubleArray0[6] = double4;
      double double5 = 1404.9481;
      doubleArray0[8] = double5;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(3865.350566100487, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(99199.767194528, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6708.944945829, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, (-180.005879), 54.0, (-2739.980966829), 2329.0, 0.0, 1.01, 0.0, 1404.9481}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(3865.350566100487, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(99199.767194528, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6708.944945829, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(18, arrayRealVector1.getDimension());
      assertEquals(5466.43119390583, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(13417.889891658, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(5.079028080359834E7, arrayRealVector1.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, (-180.005879), 54.0, (-2739.980966829), 2329.0, 0.0, 1.01, 0.0, 1404.9481}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector1.outerProduct((RealVector) arrayRealVector1);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(3865.350566100487, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(99199.767194528, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6708.944945829, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(18, array2DRowRealMatrix0.getRowDimension());
      assertEquals(18, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(18, arrayRealVector1.getDimension());
      assertEquals(5466.43119390583, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(13417.889891658, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(5.079028080359834E7, arrayRealVector1.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, (-180.005879), 54.0, (-2739.980966829), 2329.0, 0.0, 1.01, 0.0, 1404.9481}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[3]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(3865.350566100487, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(99199.767194528, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6708.944945829, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(18, array2DRowRealMatrix0.getRowDimension());
      assertEquals(18, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(18, arrayRealVector1.getDimension());
      assertEquals(5466.43119390583, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(13417.889891658, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(5.079028080359834E7, arrayRealVector1.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, (-180.005879), 54.0, (-2739.980966829), 2329.0, 0.0, 1.01, 0.0, 1404.9481}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-88.0093);
      doubleArray0[4] = double0;
      double double1 = (-3650.853906);
      doubleArray0[7] = double1;
      doubleArray0[8] = double1;
      double double2 = (-507.893);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = double1;
      doubleArray1[3] = double2;
      doubleArray1[4] = double0;
      doubleArray1[8] = doubleArray0[4];
      doubleArray1[5] = double2;
      doubleArray1[6] = doubleArray0[4];
      doubleArray1[7] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, (-3650.853906), (-507.893), (-88.0093), (-507.893), (-88.0093), (-3650.853906), (-88.0093)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-88.0093), 0.0, 0.0, (-3650.853906), (-3650.853906), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.8077795896854354;
      double double1 = 1821.4343256;
      doubleArray0[2] = double1;
      double double2 = 1.0E-12;
      doubleArray0[3] = double2;
      double double3 = (-1618.0514344532419);
      doubleArray0[4] = double3;
      doubleArray0[5] = double0;
      doubleArray0[6] = doubleArray0[2];
      doubleArray0[0] = doubleArray0[2];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double2;
      doubleArray1[1] = doubleArray0[5];
      doubleArray1[6] = double0;
      doubleArray1[7] = double3;
      doubleArray1[8] = doubleArray1[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[7]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(1.3216762765202043E23, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {1821.4343256, 0.0, 1821.4343256, 1.0E-12, (-1618.0514344532419), 0.8077795896854354, 1821.4343256, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0E-12, 0.8077795896854354, 0.0, 0.0, 0.0, 0.0, 0.8077795896854354, (-1618.0514344532419), 1.0E-12}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.8077795896854354;
      double double1 = 1821.4343256;
      doubleArray0[2] = double1;
      double double2 = 1.0E-12;
      double double3 = (-1618.0514344532419);
      doubleArray0[4] = double3;
      double double4 = (-2124.0052651);
      doubleArray0[6] = double4;
      doubleArray0[7] = doubleArray0[2];
      double double5 = (-1279.84913);
      doubleArray0[9] = double5;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[3] = doubleArray0[2];
      doubleArray1[6] = double1;
      doubleArray1[7] = double2;
      doubleArray1[8] = double5;
      doubleArray1[4] = double0;
      doubleArray1[5] = double5;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[3]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 1821.4343256, 0.0, (-1618.0514344532419), 0.0, (-2124.0052651), 1821.4343256, 0.0, (-1279.84913)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1821.4343256, 0.8077795896854354, (-1279.84913), 1821.4343256, 1.0E-12, (-1279.84913)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-3095.908640324528);
      doubleArray0[1] = double0;
      double double1 = (-88.0093);
      doubleArray0[2] = double1;
      double double2 = (-327.2122);
      double double3 = (-1.0);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = double2;
      doubleArray1[0] = double2;
      doubleArray1[2] = double3;
      double double4 = 1686.73641027927;
      doubleArray1[3] = double4;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double1);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, (-3095.908640324528), (-88.0093), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-327.2122), (-327.2122), (-1.0), 1686.73641027927, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-14.054215343637573);
      doubleArray0[0] = double0;
      double double1 = 0.563;
      doubleArray0[1] = double1;
      double double2 = 2171.8684743222;
      doubleArray0[2] = double2;
      double double3 = (-2175.98960969);
      doubleArray0[3] = double3;
      doubleArray0[4] = doubleArray0[2];
      double double4 = (-469.69831537);
      doubleArray0[5] = double4;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(7004.042089048038, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(70399.26096030322, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3793.3850933417584, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-14.054215343637573), 0.563, 2171.8684743222, (-2175.98960969), 2171.8684743222, (-469.69831537), 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(7004.042089048038, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(70399.26096030322, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3793.3850933417584, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-14.054215343637573), 0.563, 2171.8684743222, (-2175.98960969), 2171.8684743222, (-469.69831537), 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double3);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(7004.042089048038, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(70399.26096030322, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3793.3850933417584, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-14.054215343637573), 0.563, 2171.8684743222, (-2175.98960969), 2171.8684743222, (-469.69831537), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.8077795896854354;
      double double1 = 1821.4343256;
      doubleArray0[2] = double1;
      double double2 = 1.0E-12;
      doubleArray0[4] = doubleArray0[2];
      double double3 = (-2124.0052651);
      doubleArray0[6] = double3;
      doubleArray0[9] = doubleArray0[4];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[3] = double1;
      doubleArray1[6] = double1;
      doubleArray1[7] = double2;
      doubleArray1[8] = doubleArray0[2];
      doubleArray1[4] = double0;
      doubleArray1[5] = doubleArray0[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[9]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 1821.4343256, 0.0, 1821.4343256, 0.0, (-2124.0052651), 0.0, 0.0, 1821.4343256}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1821.4343256, 0.8077795896854354, 1821.4343256, 1821.4343256, 1.0E-12, 1821.4343256}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  //@Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.8077795896854354;
      doubleArray0[0] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double0;
      double double1 = (-2124.0052651);
      doubleArray0[6] = double1;
      double double2 = 1184.9001607;
      doubleArray0[0] = double2;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = double1;
      doubleArray1[3] = double2;
      doubleArray1[4] = doubleArray1[3];
      doubleArray1[5] = doubleArray0[0];
      double double3 = 292.851100374868;
      doubleArray1[6] = double3;
      doubleArray1[7] = double1;
      doubleArray1[8] = doubleArray0[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[7]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals((-1.1425179049086754E25), eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {1184.9001607, 0.0, 0.8077795896854354, 0.8077795896854354, 0.0, 0.0, (-2124.0052651), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.8077795896854354, (-2124.0052651), 0.0, 1184.9001607, 1184.9001607, 1184.9001607, 292.851100374868, (-2124.0052651), 0.8077795896854354}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-88.0093);
      doubleArray0[2] = double0;
      double double1 = (-327.2122);
      doubleArray0[4] = double1;
      doubleArray0[5] = doubleArray0[2];
      double double2 = (-3652.7540319133727);
      doubleArray0[7] = double2;
      doubleArray0[8] = double2;
      double double3 = (-507.893);
      doubleArray0[9] = double3;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[3] = double2;
      doubleArray1[5] = double3;
      doubleArray1[6] = doubleArray0[4];
      doubleArray1[7] = double2;
      doubleArray1[8] = double3;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, (-88.0093), 0.0, (-327.2122), (-88.0093), 0.0, (-3652.7540319133727), (-3652.7540319133727), (-507.893)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-3652.7540319133727), 0.0, (-507.893), (-327.2122), (-3652.7540319133727), (-507.893)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.8077795896854354;
      double double1 = 1821.4343256;
      double double2 = (-1618.0514344532419);
      doubleArray0[4] = double2;
      double double3 = (-2124.0052651);
      doubleArray0[6] = double3;
      doubleArray0[7] = double3;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[6] = double1;
      doubleArray1[4] = double0;
      doubleArray1[5] = double3;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double3);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.8077795896854354, (-2124.0052651), 1821.4343256, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1618.0514344532419), 0.0, (-2124.0052651), (-2124.0052651), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-180.005879);
      doubleArray0[1] = double0;
      double double1 = 54.0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      double double2 = 2329.0;
      doubleArray0[4] = double2;
      doubleArray0[6] = double0;
      doubleArray0[8] = doubleArray0[4];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5252.017637, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3308.8675327706437, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(48784.376256, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, (-180.005879), 54.0, (-180.005879), 2329.0, 0.0, (-180.005879), 0.0, 2329.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5252.017637, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3308.8675327706437, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(48784.376256, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, (-180.005879), 54.0, (-180.005879), 2329.0, 0.0, (-180.005879), 0.0, 2329.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5252.017637, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3308.8675327706437, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(48784.376256, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, (-180.005879), 54.0, (-180.005879), 2329.0, 0.0, (-180.005879), 0.0, 2329.0}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-2956.070350773113);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[4] = double0;
      doubleArray1[7] = double0;
      doubleArray1[5] = doubleArray1[4];
      doubleArray1[6] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[7]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2956.070350773113), (-2956.070350773113), (-2956.070350773113), (-2956.070350773113), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-3095.908640324528);
      doubleArray0[4] = double0;
      double double1 = (-1.0);
      doubleArray0[5] = double1;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = double1;
      doubleArray1[3] = double1;
      doubleArray1[5] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), (-1.0), 0.0, (-3095.908640324528), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-3095.908640324528), (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double0 == double1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-2956.070350773113);
      double double1 = 1.0E-12;
      doubleArray0[8] = double0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double1;
      doubleArray1[1] = double1;
      doubleArray1[2] = doubleArray0[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[7]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {1.0E-12, 1.0E-12, (-2956.070350773113), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-2956.070350773113), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  //@Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.8077795896854354;
      double double1 = 1821.4343256;
      doubleArray0[2] = double1;
      double double2 = 1.0E-12;
      doubleArray0[3] = double2;
      double double3 = (-1618.0514344532419);
      doubleArray0[4] = double3;
      doubleArray0[0] = doubleArray0[4];
      double double4 = 1.0E-12;
      doubleArray0[8] = double4;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = doubleArray0[2];
      doubleArray1[0] = double0;
      doubleArray1[4] = doubleArray0[8];
      doubleArray1[5] = doubleArray0[3];
      doubleArray1[6] = doubleArray1[0];
      doubleArray1[7] = doubleArray0[4];
      doubleArray1[8] = doubleArray0[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[7]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(3.782754508149652E32, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.8077795896854354, 1821.4343256, 0.0, 0.0, 1.0E-12, 1.0E-12, 0.8077795896854354, (-1618.0514344532419), 1821.4343256}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1618.0514344532419), 0.0, 1821.4343256, 1.0E-12, (-1618.0514344532419), 0.0, 0.0, 0.0, 1.0E-12, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.8077795896854354;
      doubleArray0[0] = double0;
      double double1 = 1821.4343256;
      doubleArray0[2] = double1;
      double double2 = (-1618.0514344532419);
      doubleArray0[4] = double2;
      double double3 = (-2124.0052651);
      doubleArray0[6] = double3;
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.8077795896854354, 0.0, 1821.4343256, 0.0, (-1618.0514344532419), 0.0, (-2124.0052651), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(233350.38525175946, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(3232.1993233231315, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(5564.298804742928, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.8077795896854354, 0.0, 1821.4343256, 0.0, (-1618.0514344532419), 0.0, (-2124.0052651), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector1.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(233350.38525175946, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(3232.1993233231315, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(5564.298804742928, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.8077795896854354, 0.0, 1821.4343256, 0.0, (-1618.0514344532419), 0.0, (-2124.0052651), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double2);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(233350.38525175946, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(3232.1993233231315, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(5564.298804742928, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.8077795896854354, 0.0, 1821.4343256, 0.0, (-1618.0514344532419), 0.0, (-2124.0052651), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.8077795896854354;
      double double1 = (-1618.0514344532419);
      doubleArray0[4] = double1;
      double double2 = (-2124.0052651);
      doubleArray0[6] = double2;
      doubleArray0[9] = doubleArray0[4];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[0]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1618.0514344532419), 0.0, (-2124.0052651), 0.0, 0.0, (-1618.0514344532419)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.8077795896854354, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1618.0514344532419), 0.0, (-2124.0052651), 0.0, 0.0, (-1618.0514344532419)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.8077795896854354, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[6]);
      assertNotNull(eigenDecompositionImpl1);
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1618.0514344532419), 0.0, (-2124.0052651), 0.0, 0.0, (-1618.0514344532419)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.8077795896854354, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(eigenDecompositionImpl0.equals((Object)eigenDecompositionImpl1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(eigenDecompositionImpl0, eigenDecompositionImpl1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 7;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertNotNull(blockRealMatrix0);
      assertEquals(7, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(7, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      
      BlockRealMatrix blockRealMatrix1 = blockRealMatrix0.scalarAdd((double) int0);
      assertNotNull(blockRealMatrix1);
      assertEquals(true, blockRealMatrix1.isSquare());
      assertEquals(7, blockRealMatrix1.getColumnDimension());
      assertEquals(7, blockRealMatrix1.getRowDimension());
      assertEquals(49.0, blockRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(7, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(7, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertFalse(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix0.equals((Object)blockRealMatrix1));
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertNotSame(blockRealMatrix0, blockRealMatrix1);
      
      double double0 = (-827.2223956033577);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix1, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, blockRealMatrix1.isSquare());
      assertEquals(7, blockRealMatrix1.getColumnDimension());
      assertEquals(7, blockRealMatrix1.getRowDimension());
      assertEquals(49.0, blockRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(7, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(7, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertFalse(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix0.equals((Object)blockRealMatrix1));
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertNotSame(blockRealMatrix0, blockRealMatrix1);
  }

  @Test
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.8077795896854354;
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[3] = doubleArray0[0];
      doubleArray1[4] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[7]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.8077795896854354, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.8077795896854354, 0.8077795896854354, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 17;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertNotNull(blockRealMatrix0);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(17, blockRealMatrix0.getRowDimension());
  }

  @Test
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector1.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(0.0, double0, 0.01D);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 17;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertNotNull(blockRealMatrix0);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      try {
        RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 17;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(17, array2DRowRealMatrix1.getRowDimension());
      assertEquals(17, array2DRowRealMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 17;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertNotNull(blockRealMatrix0);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(17, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(17, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 39;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(39, array2DRowRealMatrix0.getRowDimension());
      assertEquals(39, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(39, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(39, array2DRowRealMatrix1.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 39;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(39, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(39, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(39, blockRealMatrix0.getRowDimension());
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 17;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(17, array2DRowRealMatrix1.getRowDimension());
      assertEquals(17, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      double double0 = 6.319022187620532;
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[8][5];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray1[1];
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray1);
      assertNotNull(blockRealMatrix0);
      assertEquals(8, blockRealMatrix0.getRowDimension());
      assertEquals(23, blockRealMatrix0.getColumnDimension());
      assertEquals(17.87289375733892, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(false, blockRealMatrix0.isSquare());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix0, doubleArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-14.054215343637573);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      double double1 = eigenDecompositionImpl0.getRealEigenvalue(int0);
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 39;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      double[] doubleArray0 = eigenDecompositionImpl0.getRealEigenvalues();
      assertNotNull(doubleArray0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 12;
      try {
        double double1 = eigenDecompositionImpl0.getImagEigenvalue(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 39;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      
      double[] doubleArray0 = eigenDecompositionImpl0.getImagEigenvalues();
      assertNotNull(doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
