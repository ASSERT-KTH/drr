/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:42:55 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class EigenDecompositionImplEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = (-0.2879842594023356);
      doubleArray1[0] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[3]);
      assertArrayEquals(new double[] {(-0.2879842594023356), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertArrayEquals(new double[] {(-0.2879842594023356), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 595.9501009737387;
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = double0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 595.9501009737387}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 595.9501009737387}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(decompositionSolver0);
      assertEquals(true, decompositionSolver0.isNonSingular());
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = 0.3;
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = doubleArray1[1];
      double double1 = 2919.5077867126183;
      doubleArray0[1] = double1;
      doubleArray0[3] = double1;
      doubleArray0[5] = double1;
      doubleArray1[3] = double1;
      doubleArray1[4] = doubleArray0[3];
      doubleArray1[5] = doubleArray1[1];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double1);
      assertArrayEquals(new double[] {0.3, 0.3, 0.3, 2919.5077867126183, 2919.5077867126183, 0.3, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2919.5077867126183, 0.0, 2919.5077867126183, 0.0, 2919.5077867126183, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double1 == double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = 0.10568803650416428;
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      double double1 = (-2782.458270618253);
      doubleArray1[2] = double1;
      doubleArray1[3] = doubleArray1[0];
      double double2 = 1809.9851214730766;
      doubleArray1[4] = double2;
      doubleArray1[5] = doubleArray1[1];
      doubleArray1[6] = doubleArray1[1];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[6]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.10568803650416428, 0.10568803650416428, (-2782.458270618253), 0.10568803650416428, 1809.9851214730766, 0.10568803650416428, 0.10568803650416428}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(3.16454042288864E9, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = 0.10568803650416428;
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      double double1 = (-2782.458270618253);
      doubleArray1[2] = double1;
      doubleArray1[3] = doubleArray1[0];
      double double2 = 1809.9851214730766;
      doubleArray1[4] = double2;
      doubleArray1[5] = doubleArray1[1];
      doubleArray1[6] = doubleArray1[1];
      doubleArray0[1] = double0;
      doubleArray0[3] = doubleArray1[0];
      doubleArray0[6] = doubleArray1[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[1]);
      assertArrayEquals(new double[] {0.0, 0.10568803650416428, 0.0, 0.10568803650416428, 0.0, 0.0, 0.10568803650416428, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.10568803650416428, 0.10568803650416428, (-2782.458270618253), 0.10568803650416428, 1809.9851214730766, 0.10568803650416428, 0.10568803650416428}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(3.164540422925615E9, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[27];
      double double0 = (-0.9777778895057209);
      double double1 = (-2841.94937);
      double double2 = 0.6666804607435758;
      doubleArray0[6] = double1;
      doubleArray0[2] = double0;
      doubleArray0[4] = double1;
      doubleArray0[13] = double0;
      doubleArray0[17] = double0;
      doubleArray0[19] = double2;
      doubleArray0[22] = double0;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.9777778895057209), 0.0, (-2841.94937), 0.0, (-2841.94937), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-0.9777778895057209), 0.0, 0.0, 0.0, (-0.9777778895057209), 0.0, 0.6666804607435758, 0.0, 0.0, (-0.9777778895057209), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1.192820180581461E10, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5688.476532018767, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4019.12387367546, arrayRealVector0.getNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.9777778895057209), 0.0, (-2841.94937), 0.0, (-2841.94937), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-0.9777778895057209), 0.0, 0.0, 0.0, (-0.9777778895057209), 0.0, 0.6666804607435758, 0.0, 0.0, (-0.9777778895057209), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(27, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(27, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1.192820180581461E10, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5688.476532018767, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4019.12387367546, arrayRealVector0.getNorm(), 0.01D);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.9777778895057209), 0.0, (-2841.94937), 0.0, (-2841.94937), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-0.9777778895057209), 0.0, 0.0, 0.0, (-0.9777778895057209), 0.0, 0.6666804607435758, 0.0, 0.0, (-0.9777778895057209), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(27, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(27, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1.192820180581461E10, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5688.476532018767, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4019.12387367546, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[27];
      double double0 = (-0.9777778895057209);
      double double1 = (-2841.94937);
      double double2 = 0.6666804607435758;
      doubleArray0[2] = double0;
      doubleArray0[4] = double1;
      doubleArray0[7] = double2;
      doubleArray0[8] = double1;
      doubleArray0[10] = double1;
      doubleArray0[12] = double0;
      doubleArray0[13] = double0;
      doubleArray0[17] = double0;
      doubleArray0[20] = double2;
      doubleArray0[22] = double0;
      doubleArray0[23] = double1;
      doubleArray0[24] = double2;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.9777778895057209), 0.0, (-2841.94937), 0.0, 0.0, 0.6666804607435758, (-2841.94937), 0.0, (-2841.94937), 0.0, (-0.9777778895057209), (-0.9777778895057209), 0.0, 0.0, 0.0, (-0.9777778895057209), 0.0, 0.0, 0.6666804607435758, 0.0, (-0.9777778895057209), (-2841.94937), 0.6666804607435758, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5683.899277803056, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(11374.68641082976, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.192820180581461E10, arrayRealVector0.getLInfNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.9777778895057209), 0.0, (-2841.94937), 0.0, 0.0, 0.6666804607435758, (-2841.94937), 0.0, (-2841.94937), 0.0, (-0.9777778895057209), (-0.9777778895057209), 0.0, 0.0, 0.0, (-0.9777778895057209), 0.0, 0.0, 0.6666804607435758, 0.0, (-0.9777778895057209), (-2841.94937), 0.6666804607435758, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(27, array2DRowRealMatrix0.getRowDimension());
      assertEquals(27, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5683.899277803056, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(11374.68641082976, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.192820180581461E10, arrayRealVector0.getLInfNorm(), 0.01D);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.9777778895057209), 0.0, (-2841.94937), 0.0, 0.0, 0.6666804607435758, (-2841.94937), 0.0, (-2841.94937), 0.0, (-0.9777778895057209), (-0.9777778895057209), 0.0, 0.0, 0.0, (-0.9777778895057209), 0.0, 0.0, 0.6666804607435758, 0.0, (-0.9777778895057209), (-2841.94937), 0.6666804607435758, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(27, array2DRowRealMatrix0.getRowDimension());
      assertEquals(27, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5683.899277803056, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(11374.68641082976, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.192820180581461E10, arrayRealVector0.getLInfNorm(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[27];
      double double0 = (-0.9777778895057209);
      double double1 = (-2841.94937);
      double double2 = 0.6666804607435758;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[7] = double2;
      doubleArray0[8] = double1;
      doubleArray0[10] = double1;
      doubleArray0[12] = double0;
      doubleArray0[13] = double0;
      doubleArray0[19] = double2;
      doubleArray0[20] = double2;
      doubleArray0[22] = double0;
      doubleArray0[23] = double1;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.9777778895057209), (-0.9777778895057209), (-2841.94937), (-0.9777778895057209), 0.0, 0.6666804607435758, (-2841.94937), 0.0, (-2841.94937), 0.0, (-0.9777778895057209), (-0.9777778895057209), 0.0, 0.0, 0.0, 0.0, 0.0, 0.6666804607435758, 0.6666804607435758, 0.0, (-0.9777778895057209), (-2841.94937), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.192820180581461E10, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(11375.664188719264, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(5683.899361904616, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.9777778895057209), (-0.9777778895057209), (-2841.94937), (-0.9777778895057209), 0.0, 0.6666804607435758, (-2841.94937), 0.0, (-2841.94937), 0.0, (-0.9777778895057209), (-0.9777778895057209), 0.0, 0.0, 0.0, 0.0, 0.0, 0.6666804607435758, 0.6666804607435758, 0.0, (-0.9777778895057209), (-2841.94937), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.192820180581461E10, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(11375.664188719264, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(5683.899361904616, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(27, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(27, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.9777778895057209), (-0.9777778895057209), (-2841.94937), (-0.9777778895057209), 0.0, 0.6666804607435758, (-2841.94937), 0.0, (-2841.94937), 0.0, (-0.9777778895057209), (-0.9777778895057209), 0.0, 0.0, 0.0, 0.0, 0.0, 0.6666804607435758, 0.6666804607435758, 0.0, (-0.9777778895057209), (-2841.94937), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.192820180581461E10, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(11375.664188719264, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(5683.899361904616, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(27, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(27, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-3829.01698700148);
      double double1 = (-14.49322507795227);
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[3] = double1;
      doubleArray1[4] = double1;
      doubleArray1[5] = doubleArray0[3];
      doubleArray1[6] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double1);
      assertArrayEquals(new double[] {0.0, 0.0, (-14.49322507795227), (-14.49322507795227), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-14.49322507795227), (-14.49322507795227), (-14.49322507795227), (-3829.01698700148), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double1 == double0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-3819.1657399614182);
      double double1 = 2.0;
      double double2 = (-881.0417311067531);
      double double3 = 2089.7089760820218;
      double double4 = 249.787421;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double2;
      doubleArray1[1] = double3;
      doubleArray1[2] = double4;
      doubleArray1[3] = double2;
      doubleArray1[4] = double3;
      doubleArray1[5] = double4;
      doubleArray1[6] = double0;
      doubleArray0[0] = double0;
      doubleArray0[7] = double3;
      doubleArray1[7] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double2);
      assertArrayEquals(new double[] {(-881.0417311067531), 2089.7089760820218, 249.787421, (-881.0417311067531), 2089.7089760820218, 249.787421, (-3819.1657399614182), 2.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3819.1657399614182), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2089.7089760820218, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = (-0.1509452);
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      double double1 = (-2774.7901373164536);
      doubleArray1[2] = double1;
      doubleArray1[3] = doubleArray1[0];
      double double2 = (-823.5512284123383);
      doubleArray1[4] = double2;
      doubleArray1[5] = doubleArray1[1];
      doubleArray1[6] = doubleArray1[1];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1509452), (-0.1509452), (-2774.7901373164536), (-0.1509452), (-823.5512284123383), (-0.1509452), (-0.1509452)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(2.710932797007487E9, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = 0.3;
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = doubleArray1[1];
      double double1 = 2919.5077867126183;
      doubleArray0[1] = double1;
      doubleArray0[5] = double1;
      doubleArray1[3] = double1;
      double double2 = (-823.5512284123383);
      doubleArray1[4] = double2;
      doubleArray1[5] = doubleArray1[1];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[4]);
      assertArrayEquals(new double[] {0.3, 0.3, 0.3, 2919.5077867126183, (-823.5512284123383), 0.3, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2919.5077867126183, 0.0, 0.0, 0.0, 2919.5077867126183, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-3829.01698700148);
      doubleArray0[1] = double0;
      double double1 = (-14.49322507795227);
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      double double2 = (-881.0417311067531);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double2;
      doubleArray1[3] = double2;
      doubleArray1[4] = double1;
      doubleArray1[5] = double1;
      doubleArray1[6] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double2);
      assertArrayEquals(new double[] {(-881.0417311067531), 0.0, 0.0, (-881.0417311067531), (-14.49322507795227), (-14.49322507795227), (-3829.01698700148), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-3829.01698700148), (-14.49322507795227), (-14.49322507795227), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = 16.7;
      doubleArray1[0] = double0;
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[3] = doubleArray1[0];
      doubleArray1[4] = doubleArray1[1];
      doubleArray1[5] = doubleArray1[1];
      doubleArray1[6] = doubleArray1[1];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[6]);
      assertArrayEquals(new double[] {16.7, 16.7, 0.0, 16.7, 16.7, 16.7, 16.7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 2.0;
      doubleArray0[3] = double0;
      double double1 = (-881.0417311067531);
      doubleArray0[4] = double1;
      double double2 = 54.0;
      double double3 = 1544.748257371;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = double3;
      doubleArray1[4] = double2;
      doubleArray1[5] = doubleArray0[4];
      doubleArray0[2] = double2;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double1);
      assertArrayEquals(new double[] {0.0, 0.0, 54.0, 2.0, (-881.0417311067531), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1544.748257371, 0.0, 0.0, 54.0, (-881.0417311067531), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = (-0.04696986052202323);
      doubleArray0[7] = double0;
      double double1 = (-823.2717610941293);
      doubleArray1[3] = double1;
      doubleArray1[4] = double0;
      double double2 = 1.0E-12;
      doubleArray1[5] = double2;
      doubleArray1[6] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-0.04696986052202323)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-823.2717610941293), (-0.04696986052202323), 1.0E-12, (-823.2717610941293)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = 0.333;
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      double double1 = (-2749.874080822637);
      doubleArray1[2] = double1;
      doubleArray1[3] = double1;
      doubleArray1[4] = double0;
      doubleArray1[5] = doubleArray1[1];
      doubleArray1[6] = doubleArray1[1];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[4]);
      assertArrayEquals(new double[] {0.333, 0.333, (-2749.874080822637), (-2749.874080822637), 0.333, 0.333, 0.333}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(10310.768026879774, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-822.582285465);
      doubleArray0[1] = double0;
      doubleArray0[4] = double0;
      doubleArray0[7] = double0;
      double double1 = (-3829.01698700148);
      double double2 = (-14.49322507795227);
      doubleArray0[2] = double2;
      double double3 = 2.0;
      doubleArray0[3] = double3;
      double double4 = (-881.0417311067531);
      doubleArray0[5] = doubleArray0[4];
      doubleArray0[6] = doubleArray0[1];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double4;
      doubleArray1[1] = doubleArray0[4];
      doubleArray1[3] = double4;
      doubleArray1[4] = double2;
      doubleArray1[5] = doubleArray0[4];
      doubleArray1[6] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double4);
      assertArrayEquals(new double[] {0.0, (-822.582285465), (-14.49322507795227), 2.0, (-822.582285465), (-822.582285465), (-822.582285465), (-822.582285465), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-881.0417311067531), (-822.582285465), 0.0, (-881.0417311067531), (-14.49322507795227), (-822.582285465), (-3829.01698700148), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 2.0;
      doubleArray0[3] = double0;
      double double1 = (-881.0417311067531);
      doubleArray0[4] = double1;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray0[2] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      double double0 = 26.857825903026104;
      int int0 = 9;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
  }

  @Test
  public void test20()  throws Throwable  {
      double double0 = 26.857825903026104;
      int int0 = 9;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      double double1 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = 2168;
      try {
        RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2168
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(decompositionSolver0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = 17;
      try {
        RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[6]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(decompositionSolver0);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 9;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(9, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix1.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(3, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(3, array2DRowRealMatrix1.getRowDimension());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 9;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(9, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(9, array2DRowRealMatrix1.getRowDimension());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray1[0];
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray1[3];
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertNotNull(realMatrixImpl0);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) realMatrixImpl0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl0.getColumnDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(7, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(7, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(7, array2DRowRealMatrix1.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl0.getColumnDimension());
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1274.5383190685252;
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[9][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray1[0];
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray1[1];
      assertNotNull(doubleArray1[8]);
      
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray1);
      assertNotNull(blockRealMatrix0);
      assertEquals(false, blockRealMatrix0.isSquare());
      assertEquals(3823.614957205575, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(4, blockRealMatrix0.getColumnDimension());
      assertEquals(9, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix0, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-3829.01698700148);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = (-11);
      try {
        double double1 = eigenDecompositionImpl0.getRealEigenvalue(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -11
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[4]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[27];
      double double0 = (-0.9777778895057209);
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(27, array2DRowRealMatrix0.getRowDimension());
      assertEquals(27, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(27, array2DRowRealMatrix0.getRowDimension());
      assertEquals(27, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      
      int int0 = (-1523);
      try {
        double double1 = eigenDecompositionImpl0.getImagEigenvalue(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1523
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 9;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      
      double[] doubleArray0 = eigenDecompositionImpl0.getImagEigenvalues();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
  }
}
