/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:21:29 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class EigenDecompositionImplEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1233.7385117657261;
      doubleArray0[1] = double0;
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[4]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 1233.7385117657261, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 1233.7385117657261, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = 0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(eigenDecompositionImpl0, eigenDecompositionImpl1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(eigenDecompositionImpl0.equals((Object)eigenDecompositionImpl1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getV();
      assertNotNull(array2DRowRealMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(2, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(2, array2DRowRealMatrix1.getRowDimension());
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(eigenDecompositionImpl0, eigenDecompositionImpl1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(eigenDecompositionImpl0.equals((Object)eigenDecompositionImpl1));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 739.9497759218673;
      doubleArray0[0] = double0;
      double double1 = 2.2250738585072014E-308;
      doubleArray0[1] = double1;
      double double2 = (-3782.92291466);
      doubleArray0[2] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {739.9497759218673, 2.2250738585072014E-308, (-3782.92291466), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.7245216658239436E8, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(5451.244160583257, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(9045.745381163735, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCbrtToSelf();
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {739.9497759218673, 2.2250738585072014E-308, (-3782.92291466), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1185524.8833582383, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(49.25266693929454, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(25.479093695925208, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(18, arrayRealVector1.getDimension());
      assertEquals(25.479093695925208, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(49.25266693929454, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1185524.8833582383, arrayRealVector0.getLInfNorm(), 0.01D);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)arrayRealVector0.mapCeil();
      assertNotNull(arrayRealVector2);
      assertArrayEquals(new double[] {739.9497759218673, 2.2250738585072014E-308, (-3782.92291466), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(52.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(25.534290669607408, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(18, arrayRealVector2.getDimension());
      assertEquals(1310720.0, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(25.479093695925208, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(49.25266693929454, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1185524.8833582383, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      
      ArrayRealVector arrayRealVector3 = new ArrayRealVector((RealVector) arrayRealVector2);
      assertNotNull(arrayRealVector3);
      assertArrayEquals(new double[] {739.9497759218673, 2.2250738585072014E-308, (-3782.92291466), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(25.534290669607408, arrayRealVector3.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector3.isInfinite());
      assertEquals(18, arrayRealVector3.getDimension());
      assertEquals(52.0, arrayRealVector3.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector3.isNaN());
      assertEquals(1310720.0, arrayRealVector3.getLInfNorm(), 0.01D);
      assertEquals(52.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(25.534290669607408, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(18, arrayRealVector2.getDimension());
      assertEquals(1310720.0, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(25.479093695925208, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(49.25266693929454, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1185524.8833582383, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector3.outerProduct((RealVector) arrayRealVector2);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {739.9497759218673, 2.2250738585072014E-308, (-3782.92291466), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(25.534290669607408, arrayRealVector3.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector3.isInfinite());
      assertEquals(18, arrayRealVector3.getDimension());
      assertEquals(52.0, arrayRealVector3.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector3.isNaN());
      assertEquals(1310720.0, arrayRealVector3.getLInfNorm(), 0.01D);
      assertEquals(52.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(25.534290669607408, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(18, arrayRealVector2.getDimension());
      assertEquals(1310720.0, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(25.479093695925208, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(49.25266693929454, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1185524.8833582383, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(18, array2DRowRealMatrix0.getRowDimension());
      assertEquals(18, array2DRowRealMatrix0.getColumnDimension());
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {739.9497759218673, 2.2250738585072014E-308, (-3782.92291466), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(25.534290669607408, arrayRealVector3.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector3.isInfinite());
      assertEquals(18, arrayRealVector3.getDimension());
      assertEquals(52.0, arrayRealVector3.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector3.isNaN());
      assertEquals(1310720.0, arrayRealVector3.getLInfNorm(), 0.01D);
      assertEquals(52.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(25.534290669607408, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(18, arrayRealVector2.getDimension());
      assertEquals(1310720.0, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(25.479093695925208, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(49.25266693929454, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1185524.8833582383, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(18, array2DRowRealMatrix0.getRowDimension());
      assertEquals(18, array2DRowRealMatrix0.getColumnDimension());
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double double0 = (-1.0);
      double double1 = 1611.7;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double1;
      doubleArray0[8] = double1;
      double double2 = (-816.5621798722248);
      doubleArray0[9] = double2;
      doubleArray0[10] = doubleArray0[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 1611.7, (-1.0), (-1.0), (-1.0), 1611.7, 1611.7, (-816.5621798722248), (-1.0)}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4113.273991262357, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(11317.32435974445, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(4.235460608E8, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCeil();
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 1611.7, (-1.0), (-1.0), (-1.0), 1611.7, 1611.7, (-816.5621798722248), (-1.0)}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(22, arrayRealVector1.getDimension());
      assertEquals(11318.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(4.23624704E8, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(4113.7561911226585, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4113.273991262357, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(11317.32435974445, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(4.235460608E8, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1);
      assertNotNull(arrayRealVector2);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 1611.7, (-1.0), (-1.0), (-1.0), 1611.7, 1611.7, (-816.5621798722248), (-1.0)}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(22, arrayRealVector1.getDimension());
      assertEquals(11318.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(4.23624704E8, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(4113.7561911226585, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4113.273991262357, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(11317.32435974445, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(4.235460608E8, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(22, arrayRealVector2.getDimension());
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(4.23624704E8, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(4113.7561911226585, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(11318.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 1611.7, (-1.0), (-1.0), (-1.0), 1611.7, 1611.7, (-816.5621798722248), (-1.0)}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(22, arrayRealVector1.getDimension());
      assertEquals(11318.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(4.23624704E8, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(4113.7561911226585, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4113.273991262357, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(11317.32435974445, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(4.235460608E8, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(22, array2DRowRealMatrix0.getRowDimension());
      assertEquals(22, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(22, arrayRealVector2.getDimension());
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(4.23624704E8, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(4113.7561911226585, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(11318.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 1611.7, (-1.0), (-1.0), (-1.0), 1611.7, 1611.7, (-816.5621798722248), (-1.0)}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(22, arrayRealVector1.getDimension());
      assertEquals(11318.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(4.23624704E8, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(4113.7561911226585, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4113.273991262357, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(11317.32435974445, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(4.235460608E8, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(22, array2DRowRealMatrix0.getRowDimension());
      assertEquals(22, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(22, arrayRealVector2.getDimension());
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(4.23624704E8, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(4113.7561911226585, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(11318.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 2754.3;
      doubleArray0[0] = double0;
      double double1 = 1929.87633102022;
      doubleArray0[4] = double0;
      doubleArray0[3] = double1;
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[6];
      double double2 = 1611.7;
      doubleArray0[2] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {1929.87633102022, 1929.87633102022, 1611.7, 1929.87633102022, 2754.3, 1929.87633102022, 1929.87633102022}, doubleArray0, 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(7590.238289429434, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(28030.763310202197, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.5809546903717643E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {1929.87633102022, 1929.87633102022, 1611.7, 1929.87633102022, 2754.3, 1929.87633102022, 1929.87633102022}, doubleArray0, 0.01);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(7590.238289429434, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(28030.763310202197, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.5809546903717643E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      double double3 = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double3);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {1929.87633102022, 1929.87633102022, 1611.7, 1929.87633102022, 2754.3, 1929.87633102022, 1929.87633102022}, doubleArray0, 0.01);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(7590.238289429434, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(28030.763310202197, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.5809546903717643E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1233.7385117657261;
      doubleArray0[1] = double0;
      double double1 = 1491.985;
      doubleArray0[3] = double1;
      double double2 = 4936.34299404;
      double double3 = 4041.5120251;
      doubleArray0[9] = double0;
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = double3;
      doubleArray1[3] = doubleArray0[9];
      doubleArray1[4] = doubleArray0[1];
      doubleArray1[1] = double3;
      doubleArray1[5] = double2;
      doubleArray1[6] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[4]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 1233.7385117657261, 0.0, 1491.985, 0.0, 0.0, 0.0, 0.0, 0.0, 1233.7385117657261}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 4041.5120251, 4041.5120251, 1233.7385117657261, 1233.7385117657261, 4936.34299404, 1233.7385117657261, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1515.0);
      double double1 = 250.45739228885932;
      double double2 = (-10.43213776185181);
      doubleArray0[4] = double2;
      double[] doubleArray1 = new double[10];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double1;
      doubleArray0[0] = double2;
      doubleArray0[1] = double2;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray0[0]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {250.45739228885932, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-10.43213776185181), (-10.43213776185181), 250.45739228885932, (-1515.0), (-10.43213776185181), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1515.0);
      double double1 = (-10.349221290754612);
      doubleArray0[4] = double1;
      double[] doubleArray1 = new double[10];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray0[0]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-10.349221290754612), (-1515.0), (-1515.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      double double0 = 739.9497759218673;
      double double1 = (-11.711483056517833);
      double[] doubleArray1 = new double[8];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = double0;
      doubleArray1[6] = double1;
      double[] doubleArray2 = new double[7];
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[2] = double0;
      doubleArray2[3] = double0;
      doubleArray2[4] = double1;
      doubleArray2[5] = doubleArray2[4];
      doubleArray2[6] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray2, doubleArray0[17]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 739.9497759218673, 0.0, 0.0, (-11.711483056517833), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 739.9497759218673, 739.9497759218673, (-11.711483056517833), (-11.711483056517833), 739.9497759218673}, doubleArray2, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1233.7385117657261;
      doubleArray0[1] = double0;
      double double1 = 0.8236636295188773;
      double double2 = 1491.985;
      doubleArray0[3] = double2;
      doubleArray0[9] = double0;
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = double1;
      doubleArray1[3] = doubleArray0[9];
      doubleArray1[4] = doubleArray0[1];
      doubleArray1[1] = double0;
      doubleArray1[5] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 1233.7385117657261, 0.8236636295188773, 1233.7385117657261, 1233.7385117657261, 0.8236636295188773, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1233.7385117657261, 0.0, 1491.985, 0.0, 0.0, 0.0, 0.0, 0.0, 1233.7385117657261}, doubleArray0, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1515.0);
      double double1 = 250.45739228885932;
      double double2 = (-10.43213776185181);
      double[] doubleArray1 = new double[10];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[8] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double2;
      doubleArray0[8] = double1;
      doubleArray1[3] = doubleArray1[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray0[0]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1515.0), 0.0, 0.0, 0.0, 0.0, (-1515.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1515.0), (-1515.0), (-1515.0), (-1515.0), (-10.43213776185181), 250.45739228885932}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 2754.3;
      doubleArray0[0] = double0;
      double double1 = 1929.87633102022;
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      doubleArray0[5] = double1;
      doubleArray0[6] = double0;
      double double2 = 0.6109807271797717;
      doubleArray0[1] = double2;
      double double3 = 1611.7;
      doubleArray0[2] = double3;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {2754.3, 0.6109807271797717, 1611.7, 1929.87633102022, 2754.3, 1929.87633102022, 2754.3}, doubleArray0, 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8099.991115965694, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(27469.927285535236, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2.25632256E7, arrayRealVector0.getLInfNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {2754.3, 0.6109807271797717, 1611.7, 1929.87633102022, 2754.3, 1929.87633102022, 2754.3}, doubleArray0, 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8099.991115965694, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(27469.927285535236, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2.25632256E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {2754.3, 0.6109807271797717, 1611.7, 1929.87633102022, 2754.3, 1929.87633102022, 2754.3}, doubleArray0, 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8099.991115965694, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(27469.927285535236, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2.25632256E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1233.7385117657261;
      doubleArray0[1] = double0;
      double double1 = 0.8236636295188773;
      double double2 = 1491.985;
      doubleArray0[3] = double2;
      double double3 = 1.2963290827823188;
      doubleArray0[8] = double1;
      doubleArray0[9] = double0;
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = doubleArray0[3];
      doubleArray1[3] = doubleArray0[9];
      doubleArray1[4] = doubleArray0[1];
      doubleArray1[0] = double0;
      doubleArray1[1] = doubleArray0[1];
      doubleArray1[5] = double0;
      doubleArray1[7] = double3;
      doubleArray1[6] = doubleArray0[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 1233.7385117657261, 0.0, 1491.985, 0.0, 0.0, 0.0, 0.0, 0.8236636295188773, 1233.7385117657261}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1233.7385117657261, 1233.7385117657261, 1491.985, 1233.7385117657261, 1233.7385117657261, 1233.7385117657261, 0.8236636295188773, 1.2963290827823188, 0.0}, doubleArray1, 0.01);
      assertEquals(3.5554468429460233E21, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1515.0);
      double double1 = (-10.349221290754612);
      double[] doubleArray1 = new double[10];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = double0;
      doubleArray1[8] = double0;
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double1;
      doubleArray1[3] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray0[0]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1515.0), (-1515.0), 0.0, 0.0, 0.0, 0.0, (-1515.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-10.349221290754612), (-10.349221290754612), 0.0, (-1515.0), (-1515.0), (-1515.0), (-1515.0), (-10.349221290754612), 0.0}, doubleArray0, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1515.0);
      double double1 = (-10.349221290754612);
      doubleArray0[4] = double1;
      double[] doubleArray1 = new double[10];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = double0;
      doubleArray0[0] = double1;
      double double2 = 2270.932430384;
      doubleArray1[0] = double2;
      doubleArray1[1] = double2;
      double double3 = (-2106.1640542644736);
      doubleArray1[3] = double3;
      doubleArray0[3] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray0[0]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-10.349221290754612), 0.0, 0.0, (-1515.0), (-10.349221290754612), (-1515.0), (-1515.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2270.932430384, 2270.932430384, (-1515.0), (-2106.1640542644736), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-3968.846696);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      double[] doubleArray1 = new double[3];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = doubleArray0[1];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[0]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-3968.846696), (-3968.846696), (-3968.846696), (-3968.846696)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-3968.846696), 0.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1233.7385117657261;
      double double1 = 1491.985;
      doubleArray0[3] = double1;
      double double2 = 1.2963290827823188;
      double double3 = 4936.34299404;
      double double4 = 4041.5120251;
      doubleArray0[9] = double0;
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = double4;
      doubleArray1[3] = doubleArray0[9];
      doubleArray1[4] = double2;
      doubleArray1[5] = double3;
      doubleArray1[6] = double0;
      doubleArray1[7] = double2;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[4]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1491.985, 0.0, 0.0, 0.0, 0.0, 0.0, 1233.7385117657261}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4041.5120251, 1233.7385117657261, 1.2963290827823188, 4936.34299404, 1233.7385117657261, 1.2963290827823188, 0.0}, doubleArray1, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 739.9497759218673;
      doubleArray0[0] = double0;
      double double1 = 2.2250738585072014E-308;
      doubleArray0[1] = double1;
      double double2 = (-3782.92291466);
      doubleArray0[2] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {739.9497759218673, 2.2250738585072014E-308, (-3782.92291466)}, doubleArray0, 0.01);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(9045.745381163735, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5451.244160583257, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(42102.57973202987, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCeil();
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {739.9497759218673, 2.2250738585072014E-308, (-3782.92291466)}, doubleArray0, 0.01);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(9045.745381163735, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5451.244160583257, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(42102.57973202987, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(42096.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(9046.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(5449.9770641719215, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector1.getDimension());
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1);
      assertNotNull(arrayRealVector2);
      assertArrayEquals(new double[] {739.9497759218673, 2.2250738585072014E-308, (-3782.92291466)}, doubleArray0, 0.01);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(9045.745381163735, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5451.244160583257, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(42102.57973202987, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(42096.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(9046.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(5449.9770641719215, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector1.getDimension());
      assertEquals(42096.0, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(5449.9770641719215, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector2.getDimension());
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(9046.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {739.9497759218673, 2.2250738585072014E-308, (-3782.92291466)}, doubleArray0, 0.01);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(9045.745381163735, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5451.244160583257, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(42102.57973202987, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(42096.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(9046.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(5449.9770641719215, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector1.getDimension());
      assertEquals(42096.0, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(5449.9770641719215, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector2.getDimension());
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(9046.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {739.9497759218673, 2.2250738585072014E-308, (-3782.92291466)}, doubleArray0, 0.01);
      assertEquals((-1.3012127010789487E-62), eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(9045.745381163735, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5451.244160583257, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(42102.57973202987, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(42096.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(9046.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(5449.9770641719215, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector1.getDimension());
      assertEquals(42096.0, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(5449.9770641719215, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector2.getDimension());
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(9046.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      double double0 = 739.9497759218673;
      double double1 = (-11.711483056517833);
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      doubleArray0[5] = double1;
      double double2 = 3.0;
      doubleArray0[6] = double2;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      double double3 = (-1380.365528143);
      doubleArray0[9] = double3;
      double double4 = (-4977.7721901);
      doubleArray0[10] = double4;
      doubleArray0[11] = double0;
      doubleArray0[13] = double4;
      doubleArray0[15] = double1;
      doubleArray0[17] = double2;
      doubleArray0[20] = double1;
      doubleArray0[2] = doubleArray0[17];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.0, (-11.711483056517833), (-11.711483056517833), (-11.711483056517833), 3.0, 739.9497759218673, 739.9497759218673, (-1380.365528143), (-4977.7721901), 739.9497759218673, 0.0, (-4977.7721901), 0.0, (-11.711483056517833), 0.0, 3.0, 0.0, 0.0, (-11.711483056517833), 0.0}, doubleArray0, 0.01);
      assertEquals(13623.31665139119, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(7287.326721863703, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.722027776326869E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(22, arrayRealVector0.getDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.0, (-11.711483056517833), (-11.711483056517833), (-11.711483056517833), 3.0, 739.9497759218673, 739.9497759218673, (-1380.365528143), (-4977.7721901), 739.9497759218673, 0.0, (-4977.7721901), 0.0, (-11.711483056517833), 0.0, 3.0, 0.0, 0.0, (-11.711483056517833), 0.0}, doubleArray0, 0.01);
      assertEquals(13623.31665139119, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(7287.326721863703, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.722027776326869E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(22, array2DRowRealMatrix0.getRowDimension());
      assertEquals(22, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[19]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.0, (-11.711483056517833), (-11.711483056517833), (-11.711483056517833), 3.0, 739.9497759218673, 739.9497759218673, (-1380.365528143), (-4977.7721901), 739.9497759218673, 0.0, (-4977.7721901), 0.0, (-11.711483056517833), 0.0, 3.0, 0.0, 0.0, (-11.711483056517833), 0.0}, doubleArray0, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(13623.31665139119, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(7287.326721863703, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.722027776326869E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(22, array2DRowRealMatrix0.getRowDimension());
      assertEquals(22, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1515.0);
      doubleArray0[0] = double0;
      double double1 = (-10.349221290754612);
      double[] doubleArray1 = new double[10];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double1;
      doubleArray1[1] = double0;
      doubleArray1[2] = double1;
      doubleArray1[3] = double1;
      doubleArray1[4] = double1;
      doubleArray1[5] = doubleArray1[0];
      doubleArray1[8] = double0;
      doubleArray1[9] = double1;
      doubleArray0[6] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray0[0]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-10.349221290754612), (-1515.0), (-10.349221290754612), (-10.349221290754612), (-10.349221290754612), (-10.349221290754612), 0.0, 0.0, (-1515.0), (-10.349221290754612)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1515.0), 0.0, 0.0, 0.0, 0.0, 0.0, (-1515.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9.41075813958073E20, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {(-10.349221290754612), (-1515.0), (-10.349221290754612), (-10.349221290754612), (-10.349221290754612), (-10.349221290754612), 0.0, 0.0, (-1515.0), (-10.349221290754612)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1515.0), 0.0, 0.0, 0.0, 0.0, 0.0, (-1515.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9.41075813958073E20, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray1[1]);
      assertNotNull(eigenDecompositionImpl1);
      assertArrayEquals(new double[] {(-10.349221290754612), (-1515.0), (-10.349221290754612), (-10.349221290754612), (-10.349221290754612), (-10.349221290754612), 0.0, 0.0, (-1515.0), (-10.349221290754612)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1515.0), 0.0, 0.0, 0.0, 0.0, 0.0, (-1515.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9.410758139580522E20, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9.41075813958073E20, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(eigenDecompositionImpl0, eigenDecompositionImpl1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(eigenDecompositionImpl0.equals((Object)eigenDecompositionImpl1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 739.9497759218673;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      double double1 = (-3782.92291466);
      doubleArray0[2] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {739.9497759218673, 739.9497759218673, (-3782.92291466)}, doubleArray0, 0.01);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5262.822466503734, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5262.822466503734, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3924.991352860966, arrayRealVector0.getNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {739.9497759218673, 739.9497759218673, (-3782.92291466)}, doubleArray0, 0.01);
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5262.822466503734, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5262.822466503734, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3924.991352860966, arrayRealVector0.getNorm(), 0.01D);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double1);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {739.9497759218673, 739.9497759218673, (-3782.92291466)}, doubleArray0, 0.01);
      assertEquals((-1.6034628957974105E-10), eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5262.822466503734, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5262.822466503734, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3924.991352860966, arrayRealVector0.getNorm(), 0.01D);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 739.9497759218673;
      doubleArray0[0] = double0;
      double double1 = (-3782.92291466);
      doubleArray0[2] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {739.9497759218673, 0.0, (-3782.92291466)}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4522.872690581868, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(3854.6117118519905, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5262.822466503734, arrayRealVector0.getLInfNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {739.9497759218673, 0.0, (-3782.92291466)}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4522.872690581868, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(3854.6117118519905, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5262.822466503734, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {739.9497759218673, 0.0, (-3782.92291466)}, doubleArray0, 0.01);
      assertEquals((-53949.85213052378), eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4522.872690581868, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(3854.6117118519905, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5262.822466503734, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 739.9497759218673;
      doubleArray0[0] = double0;
      double double1 = 361.2470505654236;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {739.9497759218673, 361.2470505654236, 361.2470505654236}, doubleArray0, 0.01);
      assertEquals(2959.799103687469, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1462.4438770527145, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(899.1799230250067, arrayRealVector0.getNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {739.9497759218673, 361.2470505654236, 361.2470505654236}, doubleArray0, 0.01);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertEquals(2959.799103687469, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1462.4438770527145, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(899.1799230250067, arrayRealVector0.getNorm(), 0.01D);
      
      double double2 = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      double[] doubleArray1 = new double[8];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[7];
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray2, doubleArray0[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[4]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      int int0 = 0;
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(int0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int0 = 0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(int0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, arrayRealVector0.isNaN());
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, array2DRowRealMatrix1.getRowDimension());
      assertEquals(2, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(2, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(2, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotNull(array2DRowRealMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(2, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(2, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(2, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(2, array2DRowRealMatrix1.getRowDimension());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(2, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(2, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 739.9497759218673;
      doubleArray0[0] = double0;
      double double1 = 361.2470505654236;
      doubleArray0[1] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {739.9497759218673, 361.2470505654236, 0.0}, doubleArray0, 0.01);
      assertEquals(2959.799103687469, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1101.1968264872908, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(823.4227968844676, arrayRealVector0.getNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCeil();
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {739.9497759218673, 361.2470505654236, 0.0}, doubleArray0, 0.01);
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1102.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(823.7985190566926, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(2960.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(2959.799103687469, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1101.1968264872908, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(823.4227968844676, arrayRealVector0.getNorm(), 0.01D);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector1);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {739.9497759218673, 361.2470505654236, 0.0}, doubleArray0, 0.01);
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1102.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(823.7985190566926, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(2960.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(2959.799103687469, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1101.1968264872908, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(823.4227968844676, arrayRealVector0.getNorm(), 0.01D);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = 0;
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = 0;
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[4]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }
}
