/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:31:52 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.exception.MathInternalError;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class PolygonsSetEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double0, double0, double0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      // Undeclared exception!
      try {
        Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = (-12.348163);
      double double1 = 0.0;
      double double2 = 3193.794515591852;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double2);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = polygonsSet0.getSize();
      assertEquals(39589.972396508165, double3, 0.01D);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 3.4028234663852886E38;
      double double1 = 341.75124438789015;
      double double2 = 0.9769458214836615;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double1, double2);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(vector2DArray0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = (-8.0E298);
      double double1 = (-10.9665072405674);
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      // Undeclared exception!
      try {
        Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      double double0 = polygonsSet0.getSize();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertEquals(false, polygonsSet0.isEmpty());
      
      polygonsSet0.computeGeometricalProperties();
      assertEquals(false, polygonsSet0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 1596.648;
      double double1 = (-1.7976931348623157E308);
      double double2 = (-1113.0332517737895);
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double2);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(Double.NaN, vector0.getNormInf(), 0.01D);
      assertEquals(false, vector0.isInfinite());
      assertEquals(Double.NaN, vector0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector0.getNorm(), 0.01D);
      assertEquals(true, vector0.isNaN());
      assertNotNull(vector0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1.0E-10;
      double double2 = 1621.602;
      double double3 = 1956.4575905945105;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double2, double3);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      
      double double4 = polygonsSet0.getSize();
      assertEquals(0.0, double4, 0.01D);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double0 == double4);
      assertFalse(double0 == double3);
      assertTrue(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
  }

  @Test
  public void test7()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>((Object) boolean0);
      assertNotNull(bSPTree0);
      
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree0);
      assertEquals(true, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertEquals(0.0, vector0.getNorm(), 0.01D);
      assertEquals(0.0, vector0.getNorm1(), 0.01D);
      assertEquals(0.0, vector0.getNormSq(), 0.01D);
      assertEquals(false, vector0.isNaN());
      assertEquals(false, vector0.isInfinite());
      assertEquals(0.0, vector0.getNormInf(), 0.01D);
      assertEquals(true, polygonsSet0.isEmpty());
      assertNotNull(vector0);
  }

  @Test
  public void test8()  throws Throwable  {
      double double0 = 1596.648;
      double double1 = (-1.7976931348623157E308);
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      boolean boolean0 = polygonsSet0.contains((Region<Euclidean2D>) polygonsSet0);
      assertTrue(boolean0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test9()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      PolygonsSet polygonsSet0 = new PolygonsSet((Collection<SubHyperplane<Euclidean2D>>) linkedList0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(polygonsSet0);
  }
}
