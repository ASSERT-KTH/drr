/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:26:58 GMT 2014
 */

package org.apache.commons.math3.optimization;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.NoDataException;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.NonSquareMatrixException;
import org.apache.commons.math3.linear.OpenMapRealMatrix;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optimization.Weight;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class WeightEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((double) doubleArray0[0]);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector1.outerProduct((RealVector) openMapRealVector0);
      assertNotNull(openMapRealMatrix0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(3, openMapRealMatrix0.getRowDimension());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(false, openMapRealMatrix0.isSquare());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      Weight weight0 = null;
      try {
        weight0 = new Weight((RealMatrix) openMapRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (2x3) matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      
      Weight weight0 = null;
      try {
        weight0 = new Weight((RealMatrix) array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Weight weight0 = new Weight(doubleArray0);
      assertNotNull(weight0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      DiagonalMatrix diagonalMatrix0 = (DiagonalMatrix)weight0.getWeight();
      assertNotNull(diagonalMatrix0);
      assertEquals(true, diagonalMatrix0.isSquare());
      assertEquals(5, diagonalMatrix0.getColumnDimension());
      assertEquals(5, diagonalMatrix0.getRowDimension());
      assertEquals(false, diagonalMatrix0.isTransposable());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
