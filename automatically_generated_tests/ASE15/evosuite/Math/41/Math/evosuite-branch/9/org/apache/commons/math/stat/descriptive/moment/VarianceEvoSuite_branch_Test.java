/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:06:15 GMT 2014
 */

package org.apache.commons.math.stat.descriptive.moment;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.exception.MathIllegalArgumentException;
import org.apache.commons.math.exception.NullArgumentException;
import org.apache.commons.math.stat.descriptive.moment.SecondMoment;
import org.apache.commons.math.stat.descriptive.moment.Variance;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class VarianceEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      boolean boolean0 = false;
      Variance variance0 = new Variance(boolean0);
      assertNotNull(variance0);
      assertEquals(false, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      
      double[] doubleArray0 = new double[21];
      double double0 = 25.531390947893055;
      doubleArray0[19] = double0;
      double double1 = variance0.evaluate(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25.531390947893055, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(false, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(secondMoment0);
      assertNotNull(variance0);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      double[] doubleArray0 = new double[10];
      double double0 = 1.011;
      doubleArray0[1] = double0;
      int int0 = 1;
      double double1 = variance0.evaluate(doubleArray0, doubleArray0, double0, int0, int0);
      assertArrayEquals(new double[] {0.0, 1.011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      boolean boolean0 = false;
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      double[] doubleArray0 = new double[2];
      Variance variance0 = new Variance(boolean0, secondMoment0);
      assertNotNull(variance0);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(false, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      double double0 = variance0.evaluate(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(false, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      boolean boolean0 = false;
      Variance variance0 = new Variance(boolean0);
      assertNotNull(variance0);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(false, variance0.isBiasCorrected());
      
      double[] doubleArray0 = new double[8];
      int int0 = 0;
      double double0 = variance0.evaluate(doubleArray0, doubleArray0[3], int0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(false, variance0.isBiasCorrected());
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 3808.5696;
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(secondMoment0);
      assertNotNull(variance0);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = double0;
      double double1 = variance0.evaluate(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3808.5696}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(secondMoment0);
      assertNotNull(variance0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      
      double[] doubleArray0 = new double[1];
      double double0 = variance0.evaluate(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(secondMoment0);
      assertNotNull(variance0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      
      int int0 = 0;
      double double0 = variance0.evaluate(doubleArray0, int0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
  }

  @Test
  public void test07()  throws Throwable  {
      boolean boolean0 = false;
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(boolean0, secondMoment0);
      assertNotNull(variance0);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(false, variance0.isBiasCorrected());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      // Undeclared exception!
      try {
        double double0 = variance0.evaluate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Variance variance0 = new Variance();
      assertNotNull(variance0);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      
      double[] doubleArray0 = new double[6];
      double double0 = variance0.evaluate(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
  }

  @Test
  public void test09()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(secondMoment0);
      assertNotNull(variance0);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      double[] doubleArray0 = new double[10];
      double double0 = 1.011;
      doubleArray0[1] = double0;
      int int0 = 1;
      double double1 = variance0.evaluate(doubleArray0, doubleArray0, int0, int0);
      assertArrayEquals(new double[] {0.0, 1.011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = false;
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(secondMoment0);
      assertNotNull(variance0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(true, variance0.isBiasCorrected());
      
      variance0.setBiasCorrected(boolean0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(false, variance0.isBiasCorrected());
      
      long long0 = (-9223372036854775805L);
      secondMoment0.n = long0;
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      double double0 = variance0.getResult();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals((-9223372036854775805L), variance0.getN());
      assertEquals(false, variance0.isBiasCorrected());
  }

  @Test
  public void test11()  throws Throwable  {
      Variance variance0 = new Variance();
      assertNotNull(variance0);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      
      double double0 = 0.39;
      variance0.increment(double0);
      assertEquals(1L, variance0.getN());
      assertEquals(0.0, variance0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      
      double double1 = variance0.getResult();
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(1L, variance0.getN());
      assertEquals(0.0, variance0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
  }

  @Test
  public void test12()  throws Throwable  {
      Variance variance0 = new Variance();
      assertNotNull(variance0);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      
      double double0 = variance0.getResult();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
  }

  @Test
  public void test13()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(secondMoment0);
      assertNotNull(variance0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(true, variance0.isBiasCorrected());
      
      long long0 = (-9223372036854775805L);
      secondMoment0.n = long0;
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      double double0 = variance0.getResult();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals((-9223372036854775805L), variance0.getN());
      assertEquals(true, variance0.isBiasCorrected());
  }

  @Test
  public void test14()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(secondMoment0);
      assertNotNull(variance0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      
      double[] doubleArray0 = new double[1];
      variance0.incrementAll(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
  }

  @Test
  public void test15()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(secondMoment0);
      assertNotNull(variance0);
      assertEquals(0L, variance0.getN());
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance1 = new Variance(variance0);
      assertNotNull(variance1);
      assertTrue(variance1.equals((Object)variance0));
      assertTrue(variance0.equals((Object)variance1));
      assertNotSame(variance1, variance0);
      assertNotSame(variance0, variance1);
      assertEquals(true, variance1.isBiasCorrected());
      assertEquals(0L, variance1.getN());
      assertEquals(Double.NaN, variance1.getResult(), 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(secondMoment0);
      assertNotNull(variance0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(true, variance0.isBiasCorrected());
      
      long long0 = variance0.getN();
      assertEquals(0L, long0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(true, variance0.isBiasCorrected());
  }

  @Test
  public void test17()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(secondMoment0);
      assertNotNull(variance0);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance1 = variance0.copy();
      assertNotNull(variance1);
      assertTrue(variance1.equals((Object)variance0));
      assertTrue(variance0.equals((Object)variance1));
      assertNotSame(variance1, variance0);
      assertNotSame(variance0, variance1);
      assertEquals(true, variance1.isBiasCorrected());
      assertEquals(0L, variance1.getN());
      assertEquals(Double.NaN, variance1.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      boolean boolean0 = false;
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(boolean0, secondMoment0);
      assertNotNull(variance0);
      assertEquals(0L, variance0.getN());
      assertEquals(false, variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      boolean boolean1 = variance0.isBiasCorrected();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, variance0.getN());
      assertEquals(false, variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(secondMoment0);
      assertNotNull(variance0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      
      long long0 = (-9223372036854775805L);
      double[] doubleArray0 = new double[1];
      double double0 = variance0.evaluate(doubleArray0, (double) long0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      Variance variance0 = new Variance(secondMoment0);
      assertNotNull(variance0);
      assertEquals(Double.NaN, variance0.getResult(), 0.01D);
      assertEquals(0L, variance0.getN());
      assertEquals(true, variance0.isBiasCorrected());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01D);
      
      double[] doubleArray0 = new double[10];
      double double0 = 1.011;
      // Undeclared exception!
      try {
        double double1 = variance0.evaluate(doubleArray0, doubleArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weigth array must contain at least one non-zero value
         //
      }
  }
}
