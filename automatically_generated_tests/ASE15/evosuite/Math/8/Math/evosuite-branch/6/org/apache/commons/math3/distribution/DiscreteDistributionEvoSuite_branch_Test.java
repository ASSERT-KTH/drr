/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:09:31 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class DiscreteDistributionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      short short0 = (short) (-106);
      double double0 = 2125.83281934095;
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-106), (short)short1);
      
      Double double1 = Double.valueOf(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(2125.83281934095, (double)double1, 0.01D);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double1);
      assertTrue(double1.equals((Object)double0));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean0);
      
      Well44497a well44497a0 = new Well44497a((int) short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(well44497a0);
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>((RandomGenerator) well44497a0, (List<Pair<Short, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(short1.equals((Object)short0));
      assertNotNull(discreteDistribution0);
      
      try {
        Object[] objectArray0 = discreteDistribution0.sample((int) short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-106)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      short short0 = (short) (-69);
      double double0 = 2107.6435985350067;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(2107.6435985350067, (double)double1, 0.01D);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) short0, double1);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(pair0);
      
      short short1 = (short)2005;
      Short short2 = new Short(short1);
      assertFalse(short1 == short0);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)2005, (short)short2);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertFalse(short0 == short1);
      assertTrue(double1.equals((Object)double0));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(pair0);
      assertEquals(2, linkedList0.size());
      assertFalse(short0 == short1);
      assertTrue(boolean1 == boolean0);
      assertTrue(double1.equals((Object)double0));
      assertTrue(boolean1);
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>((List<Pair<Short, Double>>) linkedList0);
      assertEquals(2, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      Object[] objectArray0 = discreteDistribution0.sample((int) short2);
      assertEquals(2, linkedList0.size());
      assertFalse(short1 == short0);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      int int0 = (-1183);
      double double0 = 3747.846;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(3747.846, (double)double1, 0.01D);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) int0, double1);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      short short0 = (short) (-69);
      double double0 = 2107.6435985350067;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(2107.6435985350067, (double)double1, 0.01D);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) short0, double1);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(pair0);
      
      short short1 = (short)2005;
      Short short2 = new Short(short1);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short1 == short0);
      assertEquals((short)2005, (short)short2);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      assertFalse(short0 == short1);
      assertTrue(boolean0);
      
      Well44497a well44497a0 = new Well44497a((int) short1);
      assertFalse(short1 == short0);
      assertNotNull(well44497a0);
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>((RandomGenerator) well44497a0, (List<Pair<Short, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(short1 == short0);
      assertNotNull(discreteDistribution0);
      
      double double2 = discreteDistribution0.probability(short2);
      assertEquals(1, linkedList0.size());
      assertFalse(double2 == double0);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short1 == short0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      short short0 = (short) (-24);
      double double0 = 2137.189418113032;
      Short short1 = null;
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, (Double) double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Well44497a well44497a0 = new Well44497a((int) short0);
      assertNotNull(well44497a0);
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>((RandomGenerator) well44497a0, (List<Pair<Short, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      double double1 = discreteDistribution0.probability(short1);
      assertEquals(1, linkedList0.size());
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      short short0 = (short) (-106);
      double double0 = 2125.83281934095;
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-106), (short)short1);
      
      Double double1 = Double.valueOf(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(2125.83281934095, (double)double1, 0.01D);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double1);
      assertTrue(double1.equals((Object)double0));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean0);
      
      Well44497a well44497a0 = new Well44497a((int) short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(well44497a0);
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>((RandomGenerator) well44497a0, (List<Pair<Short, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(short1.equals((Object)short0));
      assertNotNull(discreteDistribution0);
      
      Short short2 = null;
      double double2 = discreteDistribution0.probability(short2);
      assertEquals(1, linkedList0.size());
      assertFalse(double2 == double0);
      assertTrue(short1.equals((Object)short0));
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      short short0 = (short) (-106);
      double double0 = 2125.83281934095;
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-106), (short)short1);
      
      Double double1 = Double.valueOf(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(2125.83281934095, (double)double1, 0.01D);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(double1.equals((Object)double0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(short1.equals((Object)short0));
      assertTrue(double1.equals((Object)double0));
      assertTrue(boolean0);
      
      Well44497a well44497a0 = new Well44497a((int) short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(well44497a0);
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>((RandomGenerator) well44497a0, (List<Pair<Short, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(short1.equals((Object)short0));
      assertNotNull(discreteDistribution0);
      
      double double2 = discreteDistribution0.probability(short1);
      assertEquals(1, linkedList0.size());
      assertTrue(short1.equals((Object)short0));
      assertFalse(double2 == double0);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      double double0 = (-1.3299451043551334);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-1.3299451043551334), (double)double1, 0.01D);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1.33 is smaller than the minimum (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = "u-V$|Gdn{PMQ";
      int int0 = (-1183);
      Integer integer0 = Integer.getInteger(string0, int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1183), (int)integer0);
      
      double double0 = 3747.846;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(3747.846, (double)double1, 0.01D);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) int0, double1);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      discreteDistribution0.reseedRandomGenerator((long) integer0);
      assertEquals(1, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
  }
}
