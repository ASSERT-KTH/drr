/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:45:44 GMT 2014
 */

package org.apache.commons.math.stat.descriptive;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.exception.MathIllegalStateException;
import org.apache.commons.math.stat.descriptive.StatisticalSummaryValues;
import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;
import org.apache.commons.math.stat.descriptive.SummaryStatistics;
import org.apache.commons.math.stat.descriptive.moment.Kurtosis;
import org.apache.commons.math.stat.descriptive.moment.Mean;
import org.apache.commons.math.stat.descriptive.rank.Max;
import org.apache.commons.math.stat.descriptive.rank.Min;
import org.apache.commons.math.stat.descriptive.summary.Product;
import org.apache.commons.math.stat.descriptive.summary.Sum;
import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;
import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class SummaryStatisticsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(summaryStatistics0);
      
      Min min0 = new Min();
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01D);
      assertNotNull(min0);
      
      summaryStatistics0.setSumsqImpl((StorelessUnivariateStatistic) min0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01D);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
  }

  @Test
  public void test01()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      double[] doubleArray0 = new double[6];
      SumOfLogs sumOfLogs0 = summaryStatistics0.sumLog;
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01D);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(sumOfLogs0);
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      
      sumOfLogs0.incrementAll(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6L, sumOfLogs0.getN());
      assertEquals(Double.NEGATIVE_INFINITY, sumOfLogs0.getResult(), 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
  }

  @Test
  public void test02()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      Max max0 = new Max();
      assertEquals(Double.NaN, max0.getResult(), 0.01D);
      assertEquals(0L, max0.getN());
      assertNotNull(max0);
      
      summaryStatistics0.setSumImpl((StorelessUnivariateStatistic) max0);
      assertEquals(Double.NaN, max0.getResult(), 0.01D);
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test
  public void test03()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(summaryStatistics0);
      
      SumOfLogs sumOfLogs0 = summaryStatistics0.sumLog;
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(sumOfLogs0);
      
      summaryStatistics0.setMinImpl((StorelessUnivariateStatistic) sumOfLogs0);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
  }

  @Test
  public void test04()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getSecondMoment();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      
      Min min0 = summaryStatistics0.min;
      assertEquals(Double.NaN, min0.getResult(), 0.01D);
      assertEquals(0L, min0.getN());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(min0);
      
      summaryStatistics0.setMeanImpl((StorelessUnivariateStatistic) min0);
      assertEquals(Double.NaN, min0.getResult(), 0.01D);
      assertEquals(0L, min0.getN());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      
      summaryStatistics0.addValue(double0);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01D);
      assertNotNull(product0);
      
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      summaryStatistics0.setMaxImpl((StorelessUnivariateStatistic) product0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01D);
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
  }

  @Test
  public void test06()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(summaryStatistics0);
      
      Min min0 = (Min)summaryStatistics0.getMinImpl();
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(min0);
      
      summaryStatistics0.setGeoMeanImpl((StorelessUnivariateStatistic) min0);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      
      int int0 = summaryStatistics0.hashCode();
      assertEquals((-1170640609), int0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      
      summaryStatistics0.addValue((double) int0);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01D);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
  }

  @Test
  public void test07()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(summaryStatistics0);
      
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01D);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotNull(sumOfSquares0);
      
      summaryStatistics0.setVarianceImpl((StorelessUnivariateStatistic) sumOfSquares0);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01D);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
  }

  @Test
  public void test08()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      
      long long0 = 2268L;
      summaryStatistics1.n = long0;
      assertEquals(2268L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      
      // Undeclared exception!
      try {
        summaryStatistics1.setMinImpl((StorelessUnivariateStatistic) summaryStatistics0.secondMoment);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2,268 values have been added before statistic is configured
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      
      SumOfSquares sumOfSquares0 = (SumOfSquares)summaryStatistics1.getSumsqImpl();
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01D);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(sumOfSquares0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      
      summaryStatistics0.setVarianceImpl((StorelessUnivariateStatistic) sumOfSquares0);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01D);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      
      boolean boolean0 = summaryStatistics1.equals((Object) summaryStatistics0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
  }

  @Test
  public void test10()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      
      Max max0 = (Max)summaryStatistics0.getMaxImpl();
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(max0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      
      summaryStatistics1.setSumsqImpl((StorelessUnivariateStatistic) max0);
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      
      boolean boolean0 = summaryStatistics0.equals((Object) summaryStatistics1);
      assertFalse(boolean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
  }

  @Test
  public void test11()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(summaryStatistics0);
      
      Kurtosis kurtosis0 = new Kurtosis();
      assertNotNull(kurtosis0);
      
      summaryStatistics0.setSumImpl((StorelessUnivariateStatistic) kurtosis0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(summaryStatistics1);
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      
      boolean boolean0 = summaryStatistics0.equals((Object) summaryStatistics1);
      assertFalse(boolean0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
  }

  @Test
  public void test12()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getSecondMoment();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      
      summaryStatistics1.addValue(double0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      
      boolean boolean0 = summaryStatistics1.equals((Object) summaryStatistics0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
  }

  @Test
  public void test13()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      
      SumOfLogs sumOfLogs0 = summaryStatistics1.sumLog;
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01D);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(sumOfLogs0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      
      summaryStatistics1.setMinImpl((StorelessUnivariateStatistic) sumOfLogs0);
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01D);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      
      boolean boolean0 = summaryStatistics1.equals((Object) summaryStatistics0);
      assertFalse(boolean0);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
  }

  @Test
  public void test14()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      
      SumOfLogs sumOfLogs0 = (SumOfLogs)summaryStatistics0.getSumLogImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01D);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(sumOfLogs0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      
      summaryStatistics0.setMeanImpl((StorelessUnivariateStatistic) sumOfLogs0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01D);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      
      boolean boolean0 = summaryStatistics1.equals((Object) summaryStatistics0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
  }

  @Test
  public void test15()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      double double0 = (-2233.82522);
      summaryStatistics0.addValue(double0);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01D);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(summaryStatistics1);
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      
      boolean boolean0 = summaryStatistics0.equals((Object) summaryStatistics1);
      assertFalse(boolean0);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
  }

  @Test
  public void test16()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      Min min0 = (Min)summaryStatistics0.getMinImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01D);
      assertEquals(0L, min0.getN());
      assertNotNull(min0);
      
      summaryStatistics0.setGeoMeanImpl((StorelessUnivariateStatistic) min0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01D);
      assertEquals(0L, min0.getN());
      
      int int0 = summaryStatistics0.hashCode();
      assertEquals((-1170640609), int0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      
      summaryStatistics0.addValue((double) int0);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      
      boolean boolean0 = summaryStatistics0.equals((Object) summaryStatistics1);
      assertFalse(boolean0);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
  }

  @Test
  public void test17()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      Min min0 = new Min();
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01D);
      assertNotNull(min0);
      
      boolean boolean0 = summaryStatistics0.equals((Object) min0);
      assertFalse(boolean0);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test
  public void test18()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01D);
      assertNotNull(sumOfSquares0);
      
      summaryStatistics0.setVarianceImpl((StorelessUnivariateStatistic) sumOfSquares0);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.clear();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test
  public void test19()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(summaryStatistics0);
      
      SumOfSquares sumOfSquares0 = (SumOfSquares)summaryStatistics0.getSumsqImpl();
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01D);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(sumOfSquares0);
      
      summaryStatistics0.setMeanImpl((StorelessUnivariateStatistic) sumOfSquares0);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01D);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      
      summaryStatistics0.clear();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      
      long long0 = 2268L;
      summaryStatistics1.n = long0;
      assertEquals(2268L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      
      String string0 = summaryStatistics1.toString();
      assertEquals("SummaryStatistics:\nn: 2268\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertEquals(2268L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(string0);
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
  }

  @Test
  public void test21()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(summaryStatistics0);
      
      int int0 = summaryStatistics0.hashCode();
      assertEquals((-1170640609), int0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      
      summaryStatistics0.addValue((double) int0);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(1L, summaryStatistics0.getN());
      
      String string0 = summaryStatistics0.toString();
      assertEquals("SummaryStatistics:\nn: 1\nmin: -1.170640609E9\nmax: -1.170640609E9\nmean: -1.170640609E9\ngeometric mean: NaN\nvariance: 0.0\nsum of squares: 1.37039943543989094E18\nstandard deviation: 0.0\nsum of logs: NaN\n", string0);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(1L, summaryStatistics0.getN());
      assertNotNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getGeometricMean();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.addValue(double0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(1L, summaryStatistics0.getN());
  }

  @Test
  public void test23()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      Sum sum0 = (Sum)summaryStatistics0.getSumImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, sum0.getResult(), 0.01D);
      assertEquals(0L, sum0.getN());
      assertNotNull(sum0);
  }

  @Test
  public void test24()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      Min min0 = summaryStatistics0.min;
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(min0);
      
      summaryStatistics0.setSumLogImpl((StorelessUnivariateStatistic) min0);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test
  public void test25()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(summaryStatistics0);
      
      Mean mean0 = (Mean)summaryStatistics0.getMeanImpl();
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertNotNull(mean0);
  }

  @Test
  public void test26()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getPopulationVariance();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test
  public void test27()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      StatisticalSummaryValues statisticalSummaryValues0 = (StatisticalSummaryValues)summaryStatistics0.getSummary();
      assertEquals(Double.NaN, statisticalSummaryValues0.getMin(), 0.01D);
      assertEquals(Double.NaN, statisticalSummaryValues0.getMean(), 0.01D);
      assertEquals(Double.NaN, statisticalSummaryValues0.getMax(), 0.01D);
      assertEquals(Double.NaN, statisticalSummaryValues0.getVariance(), 0.01D);
      assertEquals(Double.NaN, statisticalSummaryValues0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, statisticalSummaryValues0.getSum(), 0.01D);
      assertEquals(0L, statisticalSummaryValues0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(statisticalSummaryValues0);
  }

  @Test
  public void test28()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      String string0 = summaryStatistics0.toString();
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(string0);
  }

  @Test
  public void test29()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotNull(summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      
      boolean boolean0 = summaryStatistics1.equals((Object) summaryStatistics0);
      assertTrue(boolean0);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01D);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01D);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
  }
}
