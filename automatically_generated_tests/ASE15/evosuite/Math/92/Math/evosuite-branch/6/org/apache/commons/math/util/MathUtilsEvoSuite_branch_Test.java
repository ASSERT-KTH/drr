/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:11:36 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.junit.runner.RunWith;

 
public class MathUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      short short0 = (short)277;
      short short1 = MathUtils.indicator(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)1, short1);
      
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.subAndCheck((long) short1, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
      }
  }

  @Test
  public void test001()  throws Throwable  {
      short short0 = (short) (-1);
      short short1 = MathUtils.indicator(short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short) (-1), short1);
      
      long long0 = (-9223372036854775808L);
      long long1 = MathUtils.subAndCheck((long) short1, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals(9223372036854775807L, long1);
  }

  @Test
  public void test002()  throws Throwable  {
      int int0 = (-1466);
      int int1 = MathUtils.gcd(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1466, int1);
      
      long long0 = MathUtils.subAndCheck((long) int1, (long) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(2932L, long0);
  }

  @Test
  public void test003()  throws Throwable  {
      byte byte0 = (byte) (-1);
      short short0 = MathUtils.sign((short) byte0);
      assertEquals((short) (-1), short0);
  }

  @Test
  public void test004()  throws Throwable  {
      long long0 = (-2027L);
      long long1 = MathUtils.sign(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-1L), long1);
  }

  @Test
  public void test005()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0L, long1);
  }

  @Test
  public void test006()  throws Throwable  {
      int int0 = 1050;
      long long0 = MathUtils.sign((long) int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test007()  throws Throwable  {
      int int0 = (-810);
      int int1 = MathUtils.sign(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test008()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = 1878;
      int int1 = MathUtils.sign(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
  }

  @Test
  public void test010()  throws Throwable  {
      int int0 = (-162);
      float float0 = MathUtils.sign((float) int0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test011()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.sign(float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test012()  throws Throwable  {
      int int0 = (-1);
      int int1 = MathUtils.lcm(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      float float0 = MathUtils.sign((float) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test013()  throws Throwable  {
      short short0 = (short)3495;
      double double0 = MathUtils.sign((double) short0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test014()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = MathUtils.sign(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test015()  throws Throwable  {
      double double0 = Double.NaN;
      double double1 = MathUtils.sign(double0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test016()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = MathUtils.hash((double) byte0);
      assertEquals(0, int0);
      
      double double0 = MathUtils.sign((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test017()  throws Throwable  {
      byte byte0 = (byte)86;
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
  }

  @Test
  public void test018()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
  }

  @Test
  public void test019()  throws Throwable  {
      int int0 = 538;
      int int1 = (-21);
      int int2 = 7;
      // Undeclared exception!
      try {
        float float0 = MathUtils.round((float) int0, int1, int2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Inexact result from rounding
         //
      }
  }

  @Test
  public void test020()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
      
      int int0 = 1878;
      int int1 = 6;
      float float0 = MathUtils.round((float) short1, int0, int1);
      assertTrue(short0 == short1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(short1 == short0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test021()  throws Throwable  {
      int int0 = 0;
      int int1 = 5;
      float float0 = (-410.2339F);
      float float1 = MathUtils.round(float0, int0, int1);
      assertFalse(float1 == float0);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertFalse(int1 == int0);
      assertEquals((-410.0F), float1, 0.01F);
  }

  @Test
  public void test022()  throws Throwable  {
      int int0 = 0;
      int int1 = (-46);
      float float0 = MathUtils.round((float) int1, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-47.0F), float0, 0.01F);
      
      int int2 = 3;
      float float1 = MathUtils.round(float0, int0, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-48.0F), float1, 0.01F);
  }

  @Test
  public void test023()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-478);
      int int1 = 2;
      float float1 = MathUtils.round(float0, int0, int1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = 0;
      int int1 = 6;
      float float0 = MathUtils.round((float) int1, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6.0F, float0, 0.01F);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = 0;
      int int1 = 5;
      float float0 = MathUtils.round((float) int0, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round((float) int0, int0, int0);
      assertEquals(1.0F, float0, 0.01F);
      
      int int1 = 3;
      float float1 = MathUtils.round(float0, int0, int1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test027()  throws Throwable  {
      float float0 = 811.22534F;
      int int0 = 1;
      float float1 = MathUtils.round(float0, int0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(811.2F, float1, 0.01F);
  }

  @Test
  public void test028()  throws Throwable  {
      int int0 = (-1917);
      int int1 = MathUtils.indicator(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      float float0 = MathUtils.round((float) int1, int0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test
  public void test029()  throws Throwable  {
      short short0 = (short)3495;
      double double0 = MathUtils.cosh((double) short0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = MathUtils.round(double0, (int) short0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test030()  throws Throwable  {
      int int0 = (-1);
      int int1 = MathUtils.lcm(int0, int0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(1, int1);
      
      double double0 = MathUtils.log((double) int1, (double) int0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = MathUtils.round(double0, int0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test031()  throws Throwable  {
      int int0 = 792;
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = MathUtils.scalb(double0, int0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test032()  throws Throwable  {
      int int0 = (-3659);
      float float0 = MathUtils.round((float) int0, int0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      int int1 = MathUtils.indicator(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = MathUtils.scalb((double) float0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = 417;
      double double0 = MathUtils.scalb((double) int0, int0);
      assertEquals(1.4113809356059324E128, double0, 0.01D);
  }

  @Test
  public void test034()  throws Throwable  {
      float float0 = 0.0F;
      byte byte0 = (byte) (-26);
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      double double0 = MathUtils.scalb((double) float0, (int) byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test035()  throws Throwable  {
      byte byte0 = (byte) (-1);
      byte byte1 = MathUtils.indicator(byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
      
      long long0 = MathUtils.mulAndCheck((long) byte0, (long) byte0);
      assertTrue(byte0 == byte1);
      assertEquals(1L, long0);
      
      double double0 = MathUtils.nextAfter((double) byte1, (double) long0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((-0.9999999999999999), double0, 0.01D);
  }

  @Test
  public void test036()  throws Throwable  {
      float float0 = (-3104.8445F);
      int int0 = (-478);
      int int1 = 2;
      float float1 = MathUtils.round(float0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertFalse(int1 == int0);
      assertFalse(float1 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      int int0 = 792;
      float float0 = MathUtils.round((float) int0, int0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test039()  throws Throwable  {
      int int0 = (-10);
      long long0 = 2432902008176640000L;
      // Undeclared exception!
      try {
        long long1 = MathUtils.mulAndCheck((long) int0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test040()  throws Throwable  {
      int int0 = 0;
      short short0 = (short) (-396);
      short short1 = MathUtils.indicator(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
      
      long long0 = MathUtils.mulAndCheck((long) int0, (long) short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals(0L, long0);
  }

  @Test
  public void test041()  throws Throwable  {
      long long0 = (-9223372036854775800L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.mulAndCheck(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test042()  throws Throwable  {
      int int0 = (-1466);
      int int1 = MathUtils.gcd(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1466, int1);
      
      short short0 = (short) (-396);
      short short1 = MathUtils.indicator(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
      
      long long0 = MathUtils.mulAndCheck((long) int1, (long) short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1466L), long0);
  }

  @Test
  public void test043()  throws Throwable  {
      double double0 = (-2870.256);
      int int0 = MathUtils.hash(double0);
      assertEquals((-758580466), int0);
      
      // Undeclared exception!
      try {
        int int1 = MathUtils.mulAndCheck(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      int int0 = (-1);
      short short0 = (short)294;
      int int1 = MathUtils.hash((double) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1074790400), int1);
      
      // Undeclared exception!
      try {
        int int2 = MathUtils.lcm((int) short0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.indicator((long) int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test046()  throws Throwable  {
      short short0 = (short)3495;
      short short1 = MathUtils.sign(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)1, short1);
      
      int int0 = (-73);
      int int1 = MathUtils.mulAndCheck((int) short1, int0);
      assertTrue(int1 == int0);
      assertFalse(short1 == short0);
      assertTrue(int0 == int1);
      assertFalse(short0 == short1);
      assertEquals((-73), int1);
      
      long long0 = MathUtils.indicator((long) int1);
      assertTrue(int1 == int0);
      assertFalse(short1 == short0);
      assertTrue(int0 == int1);
      assertFalse(short0 == short1);
      assertEquals((-1L), long0);
  }

  @Test
  public void test047()  throws Throwable  {
      int int0 = (-577);
      int int1 = MathUtils.gcd(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(577, int1);
      
      int int2 = MathUtils.indicator(int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(1, int2);
  }

  @Test
  public void test048()  throws Throwable  {
      short short0 = (short)3495;
      short short1 = MathUtils.sign(short0);
      //  // Unstable assertion: assertFalse(short0 == short1);
      //  // Unstable assertion: assertFalse(short1 == short0);
      //  // Unstable assertion: assertEquals((short)1, short1);
      
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(float0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      
      float float2 = MathUtils.round(float1, (int) short1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float1 == float2);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(short0 == short1);
      //  // Unstable assertion: assertFalse(short1 == short0);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
  }

  @Test
  public void test049()  throws Throwable  {
      int int0 = (-2817);
      double double0 = MathUtils.indicator((double) int0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test050()  throws Throwable  {
      int int0 = 526;
      int int1 = 7;
      float float0 = MathUtils.round((float) int0, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double double0 = MathUtils.indicator((double) float0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test051()  throws Throwable  {
      float float0 = 811.22534F;
      double double0 = MathUtils.indicator((double) float0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test052()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
  }

  @Test
  public void test053()  throws Throwable  {
      int int0 = (-1466);
      int int1 = 0;
      int int2 = MathUtils.gcd(int0, int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(1466, int2);
  }

  @Test
  public void test054()  throws Throwable  {
      short short0 = (short)3495;
      int int0 = 0;
      int int1 = MathUtils.lcm(int0, (int) short0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test055()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialLog(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      int int0 = 2007;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test058()  throws Throwable  {
      int int0 = (-264);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialDouble(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      int int0 = (-686);
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1372), int1);
      
      int int2 = MathUtils.lcm(int0, int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(1372, int2);
      
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
      }
  }

  @Test
  public void test060()  throws Throwable  {
      int int0 = (-810);
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      int int0 = (-1);
      int int1 = MathUtils.lcm(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      double double0 = MathUtils.factorialDouble(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test062()  throws Throwable  {
      int int0 = (-2817);
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = (double) int0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2817.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test064()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test067()  throws Throwable  {
      float float0 = 2.0524101F;
      int int0 = (-577);
      float float1 = MathUtils.round(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.NaN, float1, 0.01F);
      
      double[] doubleArray0 = new double[11];
      doubleArray0[2] = (double) float1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test068()  throws Throwable  {
      int int0 = (-1917);
      double double0 = Double.NaN;
      boolean boolean0 = MathUtils.equals(double0, (double) int0);
      assertFalse(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      int int0 = 6;
      int int1 = 2007;
      double double0 = MathUtils.binomialCoefficientLog(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(39.03964620280967, double0, 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test071()  throws Throwable  {
      int int0 = (-1);
      int int1 = MathUtils.lcm(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      
      int int2 = 13;
      assertFalse(int2 == int1);
      
      double double0 = MathUtils.binomialCoefficientLog(int2, int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(2.5649493574615367, double0, 0.01D);
  }

  @Test
  public void test072()  throws Throwable  {
      int int0 = 1942;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test073()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientLog(int0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test074()  throws Throwable  {
      int int0 = (-3908);
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientLog(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      int int0 = 0;
      int int1 = 1419;
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientLog(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  //@Test
  public void test076()  throws Throwable  {
      int int0 = 0;
      int int1 = (-46);
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1.0, double0, 0.01D);
  }

  //@Test
  public void test077()  throws Throwable  {
      int int0 = 792;
      int int1 = 565;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(3.6404823546857576E204, double0, 0.01D);
  }

  @Test
  public void test078()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      int int0 = 339;
      int int1 = 1;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(339.0, double0, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      int int0 = 1942;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test081()  throws Throwable  {
      int int0 = 6;
      int int1 = MathUtils.gcd(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(6, int1);
      
      double double0 = MathUtils.binomialCoefficientDouble(int1, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test082()  throws Throwable  {
      int int0 = (-2817);
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      int int0 = 1900;
      int int1 = 5321;
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      int int0 = 417;
      int int1 = 7;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(33.655818771857454, double0, 0.01D);
  }

  //@Test
  public void test085()  throws Throwable  {
      int int0 = (-1);
      short short0 = (short)294;
      int int1 = MathUtils.hash((double) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1074790400), int1);
      
      long long0 = MathUtils.binomialCoefficient((int) short0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test086()  throws Throwable  {
      int int0 = 62;
      int int1 = 15;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(32.164187651722735, double0, 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = 6;
      int int1 = 2007;
      int int2 = MathUtils.gcd(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(3, int2);
      
      double double0 = MathUtils.binomialCoefficientLog(int0, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(2.995732273553991, double0, 0.01D);
  }

  @Test
  public void test088()  throws Throwable  {
      int int0 = 1063;
      int int1 = 1087;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      int int0 = 2;
      int int1 = 1;
      int int2 = MathUtils.subAndCheck(int1, int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals((-1), int2);
      
      int int3 = 0;
      assertFalse(int3 == int2);
      
      long long0 = MathUtils.binomialCoefficient(int3, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(0L, long0);
  }

  @Test
  public void test090()  throws Throwable  {
      int int0 = 1;
      int int1 = 1576;
      long long0 = MathUtils.binomialCoefficient(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1576L, long0);
  }

  @Test
  public void test091()  throws Throwable  {
      int int0 = 6;
      int int1 = 0;
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1L, long0);
  }

  @Test
  public void test092()  throws Throwable  {
      int int0 = 62;
      long long0 = MathUtils.binomialCoefficient(int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test093()  throws Throwable  {
      short short0 = (short) (-1);
      short short1 = MathUtils.indicator(short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short) (-1), short1);
      
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient((int) short1, (int) short1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test094()  throws Throwable  {
      int int0 = 1942;
      int int1 = 0;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test095()  throws Throwable  {
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try {
        long long1 = MathUtils.addAndCheck(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
      }
  }

  @Test
  public void test096()  throws Throwable  {
      short short0 = (short) (-396);
      short short1 = MathUtils.indicator(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short) (-1), short1);
      
      long long0 = MathUtils.addAndCheck((long) short1, (long) short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((-397L), long0);
  }

  @Test
  public void test097()  throws Throwable  {
      int int0 = (-1466);
      int int1 = MathUtils.gcd(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1466, int1);
      
      short short0 = (short) (-396);
      short short1 = MathUtils.indicator(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
      
      long long0 = MathUtils.addAndCheck((long) short1, (long) int1);
      assertFalse(int1 == int0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertFalse(int0 == int1);
      assertEquals(1465L, long0);
  }

  @Test
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(923521, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test099()  throws Throwable  {
      int int0 = (-3659);
      int int1 = MathUtils.indicator(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      double double0 = MathUtils.sinh((double) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1.1752011936438014), double0, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      int int0 = (-1);
      int int1 = MathUtils.lcm(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      double double0 = MathUtils.normalizeAngle((double) int0, (double) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      float float0 = (-3104.8445F);
      int int0 = (-478);
      // Undeclared exception!
      try {
        float float1 = MathUtils.round(float0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
      }
  }
}
