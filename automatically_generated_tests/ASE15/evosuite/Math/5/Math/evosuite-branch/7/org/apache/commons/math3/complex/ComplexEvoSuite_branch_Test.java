/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:48:49 GMT 2014
 */

package org.apache.commons.math3.complex;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.apache.commons.math3.exception.NotPositiveException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class ComplexEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 3527.43691;
      double double1 = Double.NaN;
      Complex complex0 = Complex.valueOf(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      
      Complex complex1 = Complex.valueOf(double0, double0);
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 6.283185307179586;
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(complex0);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      
      int int0 = 41;
      List<Complex> list0 = complex0.nthRoot(int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(list0);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      
      int int0 = 2604;
      List<Complex> list0 = complex0.nthRoot(int0);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = (-75.60703802419208);
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(106.92449858467074, complex0.abs(), 0.01D);
      assertEquals((-75.60703802419208), complex0.getReal(), 0.01D);
      assertEquals((-75.60703802419208), complex0.getImaginary(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      
      int int0 = (-1369);
      try {
        List<Complex> list0 = complex0.nthRoot(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,369
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 801.1064747611944;
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.subtract(double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals((-801.1064747611944), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(3.1403443807170732, complex1.getArgument(), 0.01D);
      assertEquals(801.1070988977118, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      Complex complex2 = complex1.tanh();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals((-801.1064747611944), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(3.1403443807170732, complex1.getArgument(), 0.01D);
      assertEquals(801.1070988977118, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals((-1.0), complex2.getReal(), 0.01D);
      assertEquals(1.0, complex2.abs(), 0.01D);
      assertEquals(3.141592653589793, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 2373.49955241956;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(2373.49955241956, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(2373.49955241956, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.tanh();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(2373.49955241956, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(2373.49955241956, complex0.getReal(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.conjugate();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      
      Complex complex2 = complex1.atan();
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      
      Complex complex3 = complex2.tanh();
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertNotNull(complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = complex0.tanh();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(0.7615941559557649, complex1.getReal(), 0.01D);
      assertEquals(0.7615941559557649, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.tan();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.557407724654902, complex1.getReal(), 0.01D);
      assertEquals(1.557407724654902, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      int int0 = complex0.hashCode();
      assertEquals(1034944512, int0);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = new Complex((double) int0, (double) int0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.034944512E9, complex1.getReal(), 0.01D);
      assertEquals(1.034944512E9, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.4636325651740046E9, complex1.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex2 = complex1.tan();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.034944512E9, complex1.getReal(), 0.01D);
      assertEquals(1.034944512E9, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.4636325651740046E9, complex1.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex2.getArgument(), 0.01D);
      assertEquals(1.0, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(1.0, complex2.abs(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = (-75.60703802419208);
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(106.92449858467074, complex0.abs(), 0.01D);
      assertEquals((-75.60703802419208), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals((-75.60703802419208), complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.tan();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(106.92449858467074, complex0.abs(), 0.01D);
      assertEquals((-75.60703802419208), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals((-75.60703802419208), complex0.getReal(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.tan();
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.sqrt();
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.sqrt();
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.acos();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      
      Complex complex2 = complex1.sinh();
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex2);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.atan();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex2 = complex1.sin();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotNull(complex2);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.cosh();
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      double double0 = 0.0;
      Complex complex1 = complex0.createComplex(double0, double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      Complex complex2 = complex1.cosh();
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex2.getReal(), 0.01D);
      assertEquals(1.0, complex2.abs(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      int int0 = 689;
      Complex complex1 = complex0.multiply(int0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex2 = complex1.sqrt1z();
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertEquals(689.0007256890227, complex2.abs(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(689.0007256890227, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex3 = complex2.sinh();
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertNotNull(complex3);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertEquals(689.0007256890227, complex2.abs(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(689.0007256890227, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(0.0, complex3.getArgument(), 0.01D);
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(8.475848754173866E298, complex3.getReal(), 0.01D);
      assertEquals(8.475848754173866E298, complex3.abs(), 0.01D);
      
      Complex complex4 = complex3.multiply((double) int0);
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertNotNull(complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertEquals(689.0007256890227, complex2.abs(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(689.0007256890227, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(0.0, complex3.getArgument(), 0.01D);
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(8.475848754173866E298, complex3.getReal(), 0.01D);
      assertEquals(8.475848754173866E298, complex3.abs(), 0.01D);
      assertEquals(5.839859791625794E301, complex4.getReal(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(false, complex4.isInfinite());
      assertEquals(5.839859791625794E301, complex4.abs(), 0.01D);
      assertEquals(0.0, complex4.getImaginary(), 0.01D);
      assertEquals(0.0, complex4.getArgument(), 0.01D);
      
      Complex complex5 = complex4.acos();
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertNotNull(complex5);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex5.getArgument(), 0.01D);
      assertEquals(false, complex5.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex5.abs(), 0.01D);
      assertEquals(true, complex5.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex5.getImaginary(), 0.01D);
      assertEquals(689.0007256890227, complex2.abs(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(689.0007256890227, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(0.0, complex3.getArgument(), 0.01D);
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(8.475848754173866E298, complex3.getReal(), 0.01D);
      assertEquals(8.475848754173866E298, complex3.abs(), 0.01D);
      assertEquals(5.839859791625794E301, complex4.getReal(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(false, complex4.isInfinite());
      assertEquals(5.839859791625794E301, complex4.abs(), 0.01D);
      assertEquals(0.0, complex4.getImaginary(), 0.01D);
      assertEquals(0.0, complex4.getArgument(), 0.01D);
      
      Complex complex6 = complex5.divide(complex0);
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertNotNull(complex6);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertEquals(Double.NaN, complex6.getArgument(), 0.01D);
      assertEquals(true, complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01D);
      assertEquals(false, complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex6.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex5.getArgument(), 0.01D);
      assertEquals(false, complex5.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex5.abs(), 0.01D);
      assertEquals(true, complex5.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex5.getImaginary(), 0.01D);
      assertEquals(689.0007256890227, complex2.abs(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(689.0007256890227, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(0.0, complex3.getArgument(), 0.01D);
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(8.475848754173866E298, complex3.getReal(), 0.01D);
      assertEquals(8.475848754173866E298, complex3.abs(), 0.01D);
      assertEquals(5.839859791625794E301, complex4.getReal(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(false, complex4.isInfinite());
      assertEquals(5.839859791625794E301, complex4.abs(), 0.01D);
      assertEquals(0.0, complex4.getImaginary(), 0.01D);
      assertEquals(0.0, complex4.getArgument(), 0.01D);
      
      Complex complex7 = complex6.cos();
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertTrue(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex5));
      assertNotNull(complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertEquals(Double.NaN, complex6.getArgument(), 0.01D);
      assertEquals(true, complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01D);
      assertEquals(false, complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex6.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex5.getArgument(), 0.01D);
      assertEquals(false, complex5.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex5.abs(), 0.01D);
      assertEquals(true, complex5.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex5.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex7.getReal(), 0.01D);
      assertEquals(true, complex7.isNaN());
      assertEquals(Double.NaN, complex7.abs(), 0.01D);
      assertEquals(Double.NaN, complex7.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01D);
      assertEquals(false, complex7.isInfinite());
      assertEquals(689.0007256890227, complex2.abs(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(689.0007256890227, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(0.0, complex3.getArgument(), 0.01D);
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(8.475848754173866E298, complex3.getReal(), 0.01D);
      assertEquals(8.475848754173866E298, complex3.abs(), 0.01D);
      assertEquals(5.839859791625794E301, complex4.getReal(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(false, complex4.isInfinite());
      assertEquals(5.839859791625794E301, complex4.abs(), 0.01D);
      assertEquals(0.0, complex4.getImaginary(), 0.01D);
      assertEquals(0.0, complex4.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.tan();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      
      Complex complex2 = complex1.atan();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 6.283185307179586;
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(complex0);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(6.283185307179586, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.multiply(double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(6.283185307179586, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex2 = complex1.sin();
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertNotNull(complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(6.283185307179586, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex3 = complex2.asin();
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(double0 == double1);
      assertNotNull(complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(6.283185307179586, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      
      int int0 = 689;
      Complex complex1 = complex0.multiply(int0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      
      Complex complex2 = complex1.sqrt1z();
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertEquals(689.0007256890227, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(689.0007256890227, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      
      Complex complex3 = complex2.sinh();
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertNotNull(complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertEquals(689.0007256890227, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(689.0007256890227, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(false, complex3.isInfinite());
      assertEquals(8.475848754173866E298, complex3.abs(), 0.01D);
      assertEquals(8.475848754173866E298, complex3.getReal(), 0.01D);
      assertEquals(0.0, complex3.getArgument(), 0.01D);
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
      
      Complex complex4 = complex3.multiply((double) int0);
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertNotNull(complex4);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertEquals(689.0007256890227, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(689.0007256890227, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex4.isInfinite());
      assertEquals(5.839859791625794E301, complex4.getReal(), 0.01D);
      assertEquals(0.0, complex4.getImaginary(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(5.839859791625794E301, complex4.abs(), 0.01D);
      assertEquals(0.0, complex4.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(false, complex3.isInfinite());
      assertEquals(8.475848754173866E298, complex3.abs(), 0.01D);
      assertEquals(8.475848754173866E298, complex3.getReal(), 0.01D);
      assertEquals(0.0, complex3.getArgument(), 0.01D);
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
      
      Complex complex5 = complex4.acos();
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertNotNull(complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertEquals(689.0007256890227, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(689.0007256890227, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex5.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex5.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex5.getArgument(), 0.01D);
      assertEquals(false, complex5.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01D);
      assertEquals(false, complex4.isInfinite());
      assertEquals(5.839859791625794E301, complex4.getReal(), 0.01D);
      assertEquals(0.0, complex4.getImaginary(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(5.839859791625794E301, complex4.abs(), 0.01D);
      assertEquals(0.0, complex4.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(false, complex3.isInfinite());
      assertEquals(8.475848754173866E298, complex3.abs(), 0.01D);
      assertEquals(8.475848754173866E298, complex3.getReal(), 0.01D);
      assertEquals(0.0, complex3.getArgument(), 0.01D);
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
      
      Complex complex6 = complex5.divide(complex0);
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertNotNull(complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertEquals(689.0007256890227, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(689.0007256890227, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex5.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex5.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex5.getArgument(), 0.01D);
      assertEquals(false, complex5.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01D);
      assertEquals(false, complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getReal(), 0.01D);
      assertEquals(Double.NaN, complex6.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex6.abs(), 0.01D);
      assertEquals(true, complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01D);
      assertEquals(false, complex4.isInfinite());
      assertEquals(5.839859791625794E301, complex4.getReal(), 0.01D);
      assertEquals(0.0, complex4.getImaginary(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(5.839859791625794E301, complex4.abs(), 0.01D);
      assertEquals(0.0, complex4.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(false, complex3.isInfinite());
      assertEquals(8.475848754173866E298, complex3.abs(), 0.01D);
      assertEquals(8.475848754173866E298, complex3.getReal(), 0.01D);
      assertEquals(0.0, complex3.getArgument(), 0.01D);
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
      
      Complex complex7 = complex6.acos();
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertTrue(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertTrue(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertNotNull(complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertEquals(689.0007256890227, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(689.0007256890227, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(689.0, complex1.abs(), 0.01D);
      assertEquals(689.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex5.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex5.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex5.getArgument(), 0.01D);
      assertEquals(false, complex5.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01D);
      assertEquals(false, complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getReal(), 0.01D);
      assertEquals(Double.NaN, complex6.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex6.abs(), 0.01D);
      assertEquals(true, complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01D);
      assertEquals(false, complex4.isInfinite());
      assertEquals(5.839859791625794E301, complex4.getReal(), 0.01D);
      assertEquals(0.0, complex4.getImaginary(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(5.839859791625794E301, complex4.abs(), 0.01D);
      assertEquals(0.0, complex4.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(true, complex7.isNaN());
      assertEquals(Double.NaN, complex7.abs(), 0.01D);
      assertEquals(false, complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex7.getReal(), 0.01D);
      assertEquals(Double.NaN, complex7.getArgument(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(false, complex3.isInfinite());
      assertEquals(8.475848754173866E298, complex3.abs(), 0.01D);
      assertEquals(8.475848754173866E298, complex3.getReal(), 0.01D);
      assertEquals(0.0, complex3.getArgument(), 0.01D);
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.tan();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      
      double double0 = complex1.getImaginary();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, double0, 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      
      Complex complex2 = complex0.subtract(double0);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex2);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 6.283185307179586;
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(complex0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      
      int int0 = 41;
      Complex complex1 = complex0.sqrt();
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      
      Complex complex2 = complex1.subtract((double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.acos();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      
      Complex complex2 = complex0.subtract(complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.cos();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      
      Complex complex2 = complex1.subtract(complex0);
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.negate();
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.multiply(double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      Complex complex1 = Complex.NaN;
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      
      double double0 = complex1.getArgument();
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, double0, 0.01D);
      assertNotSame(complex1, complex0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      
      Complex complex2 = complex0.multiply(double0);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      
      int int0 = (-667);
      Complex complex1 = complex0.multiply(int0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double1 == double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      
      int int0 = 2604;
      Complex complex1 = complex0.multiply(int0);
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = (-1677.9066241421492);
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex1 = new Complex(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals((-1677.9066241421492), complex1.getReal(), 0.01D);
      
      Complex complex2 = complex0.multiply(complex1);
      assertFalse(double0 == double1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(false, complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals((-1677.9066241421492), complex1.getReal(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = (-947.1813244475);
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals((-947.1813244475), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(947.1813244475, complex0.abs(), 0.01D);
      
      Complex complex1 = Complex.INF;
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      
      Complex complex2 = complex0.pow(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals((-947.1813244475), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(947.1813244475, complex0.abs(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.atan();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      
      Complex complex2 = complex0.multiply(complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex2);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      int int0 = complex0.hashCode();
      assertEquals(7, int0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.sin();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.1752011936438014, complex1.abs(), 0.01D);
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      
      boolean boolean0 = complex1.equals((Object) complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.1752011936438014, complex1.abs(), 0.01D);
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = (-75.60703802419208);
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals((-75.60703802419208), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-75.60703802419208), complex0.getReal(), 0.01D);
      assertEquals(106.92449858467074, complex0.abs(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      double double1 = Double.NaN;
      Complex complex1 = complex0.add(double1);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals((-75.60703802419208), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-75.60703802419208), complex0.getReal(), 0.01D);
      assertEquals(106.92449858467074, complex0.abs(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      
      boolean boolean0 = complex0.equals((Object) complex1);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertFalse(boolean0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals((-75.60703802419208), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-75.60703802419208), complex0.getReal(), 0.01D);
      assertEquals(106.92449858467074, complex0.abs(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(double0, double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.sqrt1z();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      
      Complex complex2 = complex0.exp();
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotNull(complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertEquals(1.0, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(1.0, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      
      boolean boolean0 = complex2.equals((Object) complex1);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(boolean0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertEquals(1.0, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(1.0, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = (-75.60703802419208);
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-75.60703802419208), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(106.92449858467074, complex0.abs(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals((-75.60703802419208), complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.add(double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-75.60703802419208), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(106.92449858467074, complex0.abs(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals((-75.60703802419208), complex0.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2.677945044588987), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(169.0624765995049, complex1.abs(), 0.01D);
      assertEquals((-75.60703802419208), complex1.getImaginary(), 0.01D);
      assertEquals((-151.21407604838416), complex1.getReal(), 0.01D);
      
      boolean boolean0 = complex0.equals((Object) complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-75.60703802419208), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(106.92449858467074, complex0.abs(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals((-75.60703802419208), complex0.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2.677945044588987), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(169.0624765995049, complex1.abs(), 0.01D);
      assertEquals((-75.60703802419208), complex1.getImaginary(), 0.01D);
      assertEquals((-151.21407604838416), complex1.getReal(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.exp();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      
      Complex complex2 = complex1.reciprocal();
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex2.isNaN());
      assertEquals(1.0, complex2.abs(), 0.01D);
      assertEquals(-0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01D);
      assertEquals(1.0, complex2.getReal(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.reciprocal();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex2 = complex1.atan();
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotNull(complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      int int0 = 633;
      Complex complex3 = complex2.multiply(int0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertNotNull(complex3);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex3.getArgument(), 0.01D);
      assertEquals(true, complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex4 = complex3.reciprocal();
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertNotNull(complex4);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex3.getArgument(), 0.01D);
      assertEquals(true, complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(false, complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01D);
      assertEquals(0.0, complex4.getArgument(), 0.01D);
      assertEquals(0.0, complex4.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.tan();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      Complex complex2 = complex1.reciprocal();
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.reciprocal();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.divide(double1);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = (-1677.9066241421492);
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.divide(double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-3.141592653589793), complex1.getArgument(), 0.01D);
      assertEquals(5.95980721222352E-4, complex1.abs(), 0.01D);
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-5.95980721222352E-4), complex1.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      double double0 = 0.0;
      Complex complex1 = complex0.divide(double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      
      double double0 = 0.0;
      Complex complex1 = complex0.createComplex(double0, double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      
      double double1 = Double.NaN;
      Complex complex2 = complex1.divide(double1);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex2);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 689;
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      
      Complex complex1 = complex0.divide((double) int0);
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.conjugate();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      
      Complex complex2 = complex1.atan();
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex2.isNaN());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      
      Complex complex3 = complex2.atan();
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertNotNull(complex3);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertEquals(false, complex2.isNaN());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex2 = complex1.atan();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      
      Complex complex3 = complex1.divide(complex2);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex3.getArgument(), 0.01D);
      assertEquals(0.0, complex3.abs(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(false, complex3.isInfinite());
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
      assertEquals(0.0, complex3.getReal(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      double double0 = 0.0;
      Complex complex1 = complex0.createComplex(double0, double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      
      Complex complex2 = complex1.divide(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertNotNull(complex2);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      
      Complex complex1 = Complex.NaN;
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      
      Complex complex2 = complex1.divide(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.tan();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      
      Complex complex2 = complex1.conjugate();
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.divide(double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      Complex complex2 = complex1.add(double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex2);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.asin();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      double double0 = 0.0;
      Complex complex1 = complex0.createComplex(double0, double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      
      Complex complex2 = complex1.pow(double0);
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.asin();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex1.abs(), 0.01D);
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      
      double double0 = 0.0;
      Complex complex1 = complex0.pow(double0);
      assertNotNull(complex1);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      Complex complex1 = (Complex)complex0.readResolve();
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01D);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01D);
      assertEquals(8.885765876316732, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01D);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01D);
      assertEquals(8.885765876316732, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      
      String string0 = complex0.toString();
      assertNotNull(string0);
      assertEquals("(Infinity, Infinity)", string0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      int int0 = 3979;
      List<Complex> list0 = complex0.nthRoot(int0);
      assertNotNull(list0);
      assertEquals(3979, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double double0 = (-75.60703802419208);
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(106.92449858467074, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-75.60703802419208), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-75.60703802419208), complex0.getReal(), 0.01D);
      
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(106.92449858467074, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-75.60703802419208), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-75.60703802419208), complex0.getReal(), 0.01D);
  }
}
