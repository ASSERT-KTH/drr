/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:44:14 GMT 2014
 */

package org.apache.commons.math3.complex;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.apache.commons.math3.exception.NotPositiveException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class ComplexEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      double double0 = complex0.getReal();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = Complex.valueOf(double0);
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      
      double double0 = (-1830.36160916);
      double double1 = complex0.getReal();
      assertEquals(Double.NaN, double1, 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertFalse(double1 == double0);
      
      Complex complex1 = Complex.valueOf(double0, double1);
      assertNotNull(complex1);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      
      double double0 = complex0.getImaginary();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      
      Complex complex1 = Complex.valueOf(double0, double0);
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
  }

  @Test
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      
      int int0 = 2795;
      List<Complex> list0 = complex0.nthRoot(int0);
      assertNotNull(list0);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      int int0 = 7;
      List<Complex> list0 = complex0.nthRoot(int0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      int int0 = 0;
      try {
        List<Complex> list0 = complex0.nthRoot(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = (-282.3);
      Complex complex0 = Complex.valueOf(double0, double0);
      assertNotNull(complex0);
      assertEquals(399.23248865792476, complex0.abs(), 0.01D);
      assertEquals((-282.3), complex0.getImaginary(), 0.01D);
      assertEquals((-282.3), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertEquals(399.23248865792476, complex0.abs(), 0.01D);
      assertEquals((-282.3), complex0.getImaginary(), 0.01D);
      assertEquals((-282.3), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals((-1.0), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 339.6796190009855;
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(339.6796190009855, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(339.6796190009855, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(339.6796190009855, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(339.6796190009855, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.reciprocal();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.tanh();
      assertNotNull(complex2);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
  }

  @Test
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.7615941559557649, complex1.getReal(), 0.01D);
      assertEquals(0.7615941559557649, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      double double0 = (-2751.351911);
      Complex complex1 = complex0.createComplex(double0, double0);
      assertNotNull(complex1);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex2 = complex1.tan();
      assertNotNull(complex2);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(1.0, complex2.abs(), 0.01D);
      assertEquals((-1.5707963267948966), complex2.getArgument(), 0.01D);
      assertEquals((-1.0), complex2.getImaginary(), 0.01D);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(double0, double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      double double1 = 1047.897400771;
      Complex complex1 = complex0.createComplex(double0, double1);
      assertNotNull(complex1);
      assertEquals(false, complex1.isNaN());
      assertEquals(1047.897400771, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1047.897400771, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      Complex complex2 = complex1.tan();
      assertNotNull(complex2);
      assertEquals(false, complex1.isNaN());
      assertEquals(1047.897400771, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1047.897400771, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex2.getArgument(), 0.01D);
      assertEquals(1.0, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(1.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.tan();
      assertNotNull(complex1);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.557407724654902, complex1.getReal(), 0.01D);
      assertEquals(1.557407724654902, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      double double0 = (-2751.351911);
      Complex complex1 = complex0.createComplex(double0, double0);
      assertNotNull(complex1);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.cos();
      assertNotNull(complex2);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex3 = complex2.exp();
      assertNotNull(complex3);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex4 = complex3.tan();
      assertNotNull(complex4);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(true, complex4.isNaN());
      assertEquals(false, complex4.isInfinite());
      assertEquals(Double.NaN, complex4.abs(), 0.01D);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex4.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex4.getReal(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
  }

  @Test
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = complex0.negate();
      assertNotNull(complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals((-1.0), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-3.141592653589793), complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      
      double double0 = 0.0;
      Complex complex2 = complex1.add(double0);
      assertNotNull(complex2);
      assertEquals(false, complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals((-1.0), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-3.141592653589793), complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals((-3.141592653589793), complex2.getArgument(), 0.01D);
      assertEquals(-0.0, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(1.0, complex2.abs(), 0.01D);
      assertEquals((-1.0), complex2.getReal(), 0.01D);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.pow(complex0);
      assertNotNull(complex3);
      assertEquals(false, complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals((-1.0), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-3.141592653589793), complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-3.141592653589793), complex3.getArgument(), 0.01D);
      assertEquals((-1.2246467991473532E-16), complex3.getImaginary(), 0.01D);
      assertEquals(1.0, complex3.abs(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(false, complex3.isNaN());
      assertEquals((-1.0), complex3.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals((-3.141592653589793), complex2.getArgument(), 0.01D);
      assertEquals(-0.0, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(1.0, complex2.abs(), 0.01D);
      assertEquals((-1.0), complex2.getReal(), 0.01D);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex1));
      
      Complex complex4 = complex3.asin();
      assertNotNull(complex4);
      assertEquals(false, complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals((-1.0), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-3.141592653589793), complex1.getArgument(), 0.01D);
      assertEquals((-1.5707963157285205), complex4.getReal(), 0.01D);
      assertEquals((-3.1415926465447193), complex4.getArgument(), 0.01D);
      assertEquals(1.5707963157285205, complex4.abs(), 0.01D);
      assertEquals(false, complex4.isInfinite());
      assertEquals((-1.1066375976528167E-8), complex4.getImaginary(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-3.141592653589793), complex3.getArgument(), 0.01D);
      assertEquals((-1.2246467991473532E-16), complex3.getImaginary(), 0.01D);
      assertEquals(1.0, complex3.abs(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(false, complex3.isNaN());
      assertEquals((-1.0), complex3.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals((-3.141592653589793), complex2.getArgument(), 0.01D);
      assertEquals(-0.0, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(1.0, complex2.abs(), 0.01D);
      assertEquals((-1.0), complex2.getReal(), 0.01D);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test
  public void test17()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(double0, double0);
      assertNotNull(complex0);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      
      Complex complex1 = complex0.acos();
      assertNotNull(complex1);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.sinh();
      assertNotNull(complex2);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(double0, double0);
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.sinh();
      assertNotNull(complex1);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex2 = complex1.sin();
      assertNotNull(complex2);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.sin();
      assertNotNull(complex1);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex0.equals((Object)complex1));
  }

  @Test
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.cosh();
      assertNotNull(complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
  }

  @Test
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.cosh();
      assertNotNull(complex1);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01D);
      assertEquals(0.5403023058681398, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.cos();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = complex0.atan();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
  }

  @Test
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      double double0 = (-2276.717194140263);
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex1 = new Complex(double0, double1);
      assertNotNull(complex1);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2276.717194140263), complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Complex complex2 = complex0.pow(complex1);
      assertNotNull(complex2);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2276.717194140263), complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex3 = complex2.asin();
      assertNotNull(complex3);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2276.717194140263), complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(double0 == double1);
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
  }

  @Test
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      double double0 = (-2751.351911);
      Complex complex1 = complex0.createComplex(double0, double0);
      assertNotNull(complex1);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex2 = complex1.cos();
      assertNotNull(complex2);
      assertEquals(true, complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      Complex complex3 = complex2.exp();
      assertNotNull(complex3);
      assertEquals(true, complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex3.acos();
      assertNotNull(complex4);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01D);
      assertEquals(true, complex4.isNaN());
      assertEquals(Double.NaN, complex4.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex4.abs(), 0.01D);
      assertEquals(false, complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex4));
  }

  @Test
  public void test26()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      double double1 = Double.NaN;
      Complex complex1 = complex0.subtract(double1);
      assertNotNull(complex1);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test
  public void test27()  throws Throwable  {
      double double0 = (-1283.65093);
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(1283.65093, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1283.65093), complex0.getReal(), 0.01D);
      
      int int0 = 0;
      Complex complex1 = complex0.subtract((double) int0);
      assertNotNull(complex1);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals((-1283.65093), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(1283.65093, complex1.abs(), 0.01D);
      assertEquals(1283.65093, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1283.65093), complex0.getReal(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex0.equals((Object)complex1));
  }

  @Test
  public void test28()  throws Throwable  {
      double double0 = (-2276.717194140263);
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      
      Complex complex1 = complex0.subtract(double0);
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.sqrt1z();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.subtract(complex0);
      assertNotNull(complex2);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.negate();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = 3460.7686566853595;
      Complex complex0 = new Complex(double1);
      assertNotNull(complex0);
      assertEquals(3460.7686566853595, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(3460.7686566853595, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertFalse(double1 == double0);
      
      Complex complex1 = complex0.pow(double0);
      assertNotNull(complex1);
      assertEquals(3460.7686566853595, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(3460.7686566853595, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = (-2584.667);
      Complex complex0 = Complex.valueOf(double1, double0);
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals((-2584.667), complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Complex complex1 = complex0.multiply(double0);
      assertNotNull(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals((-2584.667), complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
  }

  @Test
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      double double0 = Double.NaN;
      Complex complex1 = complex0.multiply(double0);
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      
      int int0 = 7;
      Complex complex1 = complex0.pow((double) int0);
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
  }

  @Test
  public void test36()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = (-2584.667);
      Complex complex0 = Complex.valueOf(double1, double0);
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals((-2584.667), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 331;
      Complex complex1 = complex0.multiply(int0);
      assertNotNull(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals((-2584.667), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      int int0 = (-826);
      Complex complex1 = complex0.multiply(int0);
      assertNotNull(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      int int0 = (-18);
      Complex complex1 = complex0.multiply(int0);
      assertNotNull(complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
  }

  @Test
  public void test39()  throws Throwable  {
      double double0 = (-1283.65093);
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1283.65093, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1283.65093), complex0.getReal(), 0.01D);
      
      int int0 = 0;
      Complex complex1 = complex0.multiply(int0);
      assertNotNull(complex1);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(-0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1283.65093, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1283.65093), complex0.getReal(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex2 = complex1.reciprocal();
      assertNotNull(complex2);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(-0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1283.65093, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1283.65093), complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.multiply(double0);
      assertNotNull(complex3);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(-0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex3.isNaN());
      assertEquals(true, complex3.isInfinite());
      assertEquals(0.7853981633974483, complex3.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1283.65093, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1283.65093), complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex3);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex4 = complex0.multiply(complex3);
      assertNotNull(complex4);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(-0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex3.isNaN());
      assertEquals(true, complex3.isInfinite());
      assertEquals(0.7853981633974483, complex3.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(true, complex4.isInfinite());
      assertEquals(0.7853981633974483, complex4.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex4.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1283.65093, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1283.65093), complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertSame(complex3, complex2);
      assertSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertSame(complex4, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex3);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test
  public void test40()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = (-2584.667);
      Complex complex0 = Complex.valueOf(double1, double0);
      assertNotNull(complex0);
      assertEquals((-2584.667), complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      Complex complex1 = complex0.acos();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2584.667), complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
  }

  @Test
  public void test41()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(double0, double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex2 = complex0.multiply(complex1);
      assertNotNull(complex2);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      
      int int0 = complex0.hashCode();
      assertEquals(7, int0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
  }

  @Test
  public void test43()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      int int0 = complex0.hashCode();
      assertEquals(2108686336, int0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      double double0 = (-2584.66739275);
      Complex complex1 = Complex.valueOf(double0, double0);
      assertNotNull(complex1);
      assertEquals((-2584.66739275), complex1.getImaginary(), 0.01D);
      assertEquals((-2584.66739275), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(3655.2716810505576, complex1.abs(), 0.01D);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.conjugate();
      assertNotNull(complex2);
      assertEquals((-2584.66739275), complex1.getImaginary(), 0.01D);
      assertEquals((-2584.66739275), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(3655.2716810505576, complex1.abs(), 0.01D);
      assertEquals(3655.2716810505576, complex2.abs(), 0.01D);
      assertEquals(2584.66739275, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(2.356194490192345, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-2584.66739275), complex2.getReal(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex1.add(complex2);
      assertNotNull(complex3);
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex3.getArgument(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals((-5169.3347855), complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(5169.3347855, complex3.abs(), 0.01D);
      assertEquals((-2584.66739275), complex1.getImaginary(), 0.01D);
      assertEquals((-2584.66739275), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(3655.2716810505576, complex1.abs(), 0.01D);
      assertEquals(3655.2716810505576, complex2.abs(), 0.01D);
      assertEquals(2584.66739275, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(2.356194490192345, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-2584.66739275), complex2.getReal(), 0.01D);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      
      Complex complex4 = complex3.sqrt1z();
      assertNotNull(complex4);
      assertEquals(0.0, complex4.getReal(), 0.01D);
      assertEquals(5169.334688775755, complex4.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex4.getArgument(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(false, complex4.isInfinite());
      assertEquals(5169.334688775755, complex4.abs(), 0.01D);
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex3.getArgument(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals((-5169.3347855), complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(5169.3347855, complex3.abs(), 0.01D);
      assertEquals((-2584.66739275), complex1.getImaginary(), 0.01D);
      assertEquals((-2584.66739275), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(3655.2716810505576, complex1.abs(), 0.01D);
      assertEquals(3655.2716810505576, complex2.abs(), 0.01D);
      assertEquals(2584.66739275, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(2.356194490192345, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-2584.66739275), complex2.getReal(), 0.01D);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      
      boolean boolean0 = complex4.equals((Object) complex0);
      assertFalse(boolean0);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex4.getReal(), 0.01D);
      assertEquals(5169.334688775755, complex4.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex4.getArgument(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(false, complex4.isInfinite());
      assertEquals(5169.334688775755, complex4.abs(), 0.01D);
      assertEquals(0.0, complex3.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex3.getArgument(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals((-5169.3347855), complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(5169.3347855, complex3.abs(), 0.01D);
      assertEquals((-2584.66739275), complex1.getImaginary(), 0.01D);
      assertEquals((-2584.66739275), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(3655.2716810505576, complex1.abs(), 0.01D);
      assertEquals(3655.2716810505576, complex2.abs(), 0.01D);
      assertEquals(2584.66739275, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(2.356194490192345, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-2584.66739275), complex2.getReal(), 0.01D);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
  }

  @Test
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.acos();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.sinh();
      assertNotNull(complex2);
      assertEquals(-0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01D);
      assertEquals(-0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      
      boolean boolean0 = complex2.equals((Object) complex1);
      assertTrue(boolean0);
      assertEquals(-0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01D);
      assertEquals(-0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
  }

  @Test
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      double double0 = (-2751.351911);
      Complex complex1 = complex0.createComplex(double0, double0);
      assertNotNull(complex1);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.cos();
      assertNotNull(complex2);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.exp();
      assertNotNull(complex3);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      
      boolean boolean0 = complex2.equals((Object) complex3);
      assertFalse(boolean0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
  }

  @Test
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.acos();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      boolean boolean0 = complex0.equals((Object) complex1);
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      
      double double0 = (-2276.717194140263);
      boolean boolean0 = complex0.equals((Object) double0);
      assertFalse(boolean0);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
  }

  @Test
  public void test49()  throws Throwable  {
      double double0 = (-1283.65093);
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(1283.65093, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals((-1283.65093), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.reciprocal();
      assertNotNull(complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-3.141592653589793), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals((-7.790279869933175E-4), complex1.getReal(), 0.01D);
      assertEquals(7.790279869933175E-4, complex1.abs(), 0.01D);
      assertEquals(1283.65093, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals((-1283.65093), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.reciprocal();
      assertNotNull(complex1);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      double double0 = (-2751.351911);
      Complex complex1 = complex0.createComplex(double0, double0);
      assertNotNull(complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex2 = complex1.cos();
      assertNotNull(complex2);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex3 = complex2.exp();
      assertNotNull(complex3);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex4 = complex3.reciprocal();
      assertNotNull(complex4);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex4.abs(), 0.01D);
      assertEquals(Double.NaN, complex4.getReal(), 0.01D);
      assertEquals(Double.NaN, complex4.getArgument(), 0.01D);
      assertEquals(false, complex4.isInfinite());
      assertEquals(true, complex4.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.reciprocal();
      assertNotNull(complex1);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test53()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test54()  throws Throwable  {
      double double0 = (-282.3);
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertEquals(0.0035423308537017354, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-0.0035423308537017354), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.5707963267948966), complex1.getArgument(), 0.01D);
      assertEquals(-0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
  }

  @Test
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      double double0 = complex0.getImaginary();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = Complex.ONE;
      assertNotNull(complex1);
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.divide(double0);
      assertNotNull(complex2);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      int int0 = 0;
      Complex complex1 = complex0.tan();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex2 = complex1.divide((double) int0);
      assertNotNull(complex2);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      
      Complex complex1 = Complex.I;
      assertNotNull(complex1);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.divide(complex0);
      assertNotNull(complex2);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex2.abs(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test
  public void test59()  throws Throwable  {
      double double0 = (-2584.66739275);
      Complex complex0 = Complex.valueOf(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3655.2716810505576, complex0.abs(), 0.01D);
      assertEquals((-2584.66739275), complex0.getReal(), 0.01D);
      assertEquals((-2584.66739275), complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.conjugate();
      assertNotNull(complex1);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3655.2716810505576, complex0.abs(), 0.01D);
      assertEquals((-2584.66739275), complex0.getReal(), 0.01D);
      assertEquals((-2584.66739275), complex0.getImaginary(), 0.01D);
      assertEquals(2584.66739275, complex1.getImaginary(), 0.01D);
      assertEquals((-2584.66739275), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(2.356194490192345, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3655.2716810505576, complex1.abs(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.add(complex1);
      assertNotNull(complex2);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3655.2716810505576, complex0.abs(), 0.01D);
      assertEquals((-2584.66739275), complex0.getReal(), 0.01D);
      assertEquals((-2584.66739275), complex0.getImaginary(), 0.01D);
      assertEquals(2584.66739275, complex1.getImaginary(), 0.01D);
      assertEquals((-2584.66739275), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(2.356194490192345, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3655.2716810505576, complex1.abs(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(5169.3347855, complex2.abs(), 0.01D);
      assertEquals((-5169.3347855), complex2.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.sqrt1z();
      assertNotNull(complex3);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3655.2716810505576, complex0.abs(), 0.01D);
      assertEquals((-2584.66739275), complex0.getReal(), 0.01D);
      assertEquals((-2584.66739275), complex0.getImaginary(), 0.01D);
      assertEquals(2584.66739275, complex1.getImaginary(), 0.01D);
      assertEquals((-2584.66739275), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(2.356194490192345, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3655.2716810505576, complex1.abs(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(5169.3347855, complex2.abs(), 0.01D);
      assertEquals((-5169.3347855), complex2.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(5169.334688775755, complex3.getImaginary(), 0.01D);
      assertEquals(5169.334688775755, complex3.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex3.getArgument(), 0.01D);
      assertEquals(0.0, complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(false, complex3.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex3.atan();
      assertNotNull(complex4);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3655.2716810505576, complex0.abs(), 0.01D);
      assertEquals((-2584.66739275), complex0.getReal(), 0.01D);
      assertEquals((-2584.66739275), complex0.getImaginary(), 0.01D);
      assertEquals(2584.66739275, complex1.getImaginary(), 0.01D);
      assertEquals((-2584.66739275), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(2.356194490192345, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3655.2716810505576, complex1.abs(), 0.01D);
      assertEquals(1.570796338706791, complex4.abs(), 0.01D);
      assertEquals(3.141469500453961, complex4.getArgument(), 0.01D);
      assertEquals(false, complex4.isInfinite());
      assertEquals(false, complex4.isNaN());
      assertEquals((-1.5707963267948966), complex4.getReal(), 0.01D);
      assertEquals(1.9344849437693507E-4, complex4.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(5169.3347855, complex2.abs(), 0.01D);
      assertEquals((-5169.3347855), complex2.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(5169.334688775755, complex3.getImaginary(), 0.01D);
      assertEquals(5169.334688775755, complex3.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex3.getArgument(), 0.01D);
      assertEquals(0.0, complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(false, complex3.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
  }

  @Test
  public void test60()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = Complex.I;
      assertNotNull(complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.atan();
      assertNotNull(complex2);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.divide(complex2);
      assertNotNull(complex3);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
  }

  @Test
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      
      Complex complex1 = complex0.divide(complex0);
      assertNotNull(complex1);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.divide(complex0);
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      
      double double0 = (-2751.351911);
      Complex complex1 = complex0.createComplex(double0, double0);
      assertNotNull(complex1);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex2 = complex1.cos();
      assertNotNull(complex2);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex3 = complex2.exp();
      assertNotNull(complex3);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(false, complex2.isNaN());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      
      Complex complex4 = complex3.conjugate();
      assertNotNull(complex4);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(3890.999187397333, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-2751.351911), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-2751.351911), complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex4.abs(), 0.01D);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex4.getReal(), 0.01D);
      assertEquals(true, complex4.isNaN());
      assertEquals(Double.NaN, complex4.getArgument(), 0.01D);
      assertEquals(false, complex4.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(false, complex2.isNaN());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
  }

  @Test
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      double double0 = Double.NaN;
      Complex complex1 = complex0.add(double0);
      assertNotNull(complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      double double0 = (-1830.36160916);
      Complex complex1 = complex0.add(double0);
      assertNotNull(complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
  }

  @Test
  public void test66()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(double0, double0);
      assertNotNull(complex0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.asin();
      assertNotNull(complex1);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
      
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.abs(), 0.01D);
  }

  @Test
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
  }

  @Test
  public void test69()  throws Throwable  {
      int int0 = 0;
      double double0 = 1.408559707497606E293;
      Complex complex0 = new Complex(double0, (double) int0);
      assertNotNull(complex0);
      assertEquals(1.408559707497606E293, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.408559707497606E293, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.pow(double0);
      assertNotNull(complex1);
      assertEquals(1.408559707497606E293, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.408559707497606E293, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex1 = (Complex)complex0.readResolve();
      assertNotNull(complex1);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      
      String string0 = complex0.toString();
      assertEquals("(NaN, NaN)", string0);
      assertNotNull(string0);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
  }

  @Test
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      int int0 = 1117;
      List<Complex> list0 = complex0.nthRoot(int0);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1117, list0.size());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
  }

  @Test
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
  }
}
