/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:26:06 GMT 2014
 */

package org.apache.commons.math3.optim.nonlinear.scalar.gradient;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class NonLinearConjugateGradientOptimizerEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      ConvergenceChecker<PointValuePair> convergenceChecker0 = null;
      NonLinearConjugateGradientOptimizer.Formula nonLinearConjugateGradientOptimizer_Formula0 = NonLinearConjugateGradientOptimizer.Formula.FLETCHER_REEVES;
      NonLinearConjugateGradientOptimizer nonLinearConjugateGradientOptimizer0 = new NonLinearConjugateGradientOptimizer(nonLinearConjugateGradientOptimizer_Formula0, convergenceChecker0);
      assertNotNull(nonLinearConjugateGradientOptimizer0);
      assertEquals(0, nonLinearConjugateGradientOptimizer0.getMaxEvaluations());
      assertEquals(2147483647, nonLinearConjugateGradientOptimizer0.getMaxIterations());
      assertEquals(0, nonLinearConjugateGradientOptimizer0.getIterations());
      assertNull(nonLinearConjugateGradientOptimizer0.getGoalType());
      assertEquals(0, nonLinearConjugateGradientOptimizer0.getEvaluations());
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      int int0 = 33;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(int0);
      assertNotNull(simpleBounds0);
      
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      assertNotNull(optimizationDataArray0[1]);
      
      // Undeclared exception!
      try {
        nonLinearConjugateGradientOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // constraint
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ConvergenceChecker<PointValuePair> convergenceChecker0 = null;
      NonLinearConjugateGradientOptimizer.Formula nonLinearConjugateGradientOptimizer_Formula0 = NonLinearConjugateGradientOptimizer.Formula.FLETCHER_REEVES;
      NonLinearConjugateGradientOptimizer nonLinearConjugateGradientOptimizer0 = new NonLinearConjugateGradientOptimizer(nonLinearConjugateGradientOptimizer_Formula0, convergenceChecker0);
      assertNotNull(nonLinearConjugateGradientOptimizer0);
      assertEquals(0, nonLinearConjugateGradientOptimizer0.getMaxEvaluations());
      assertEquals(0, nonLinearConjugateGradientOptimizer0.getIterations());
      assertNull(nonLinearConjugateGradientOptimizer0.getGoalType());
      assertEquals(0, nonLinearConjugateGradientOptimizer0.getEvaluations());
      assertEquals(2147483647, nonLinearConjugateGradientOptimizer0.getMaxIterations());
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      int int0 = 33;
      NonLinearConjugateGradientOptimizer.BracketingStep nonLinearConjugateGradientOptimizer_BracketingStep0 = new NonLinearConjugateGradientOptimizer.BracketingStep((double) int0);
      assertNotNull(nonLinearConjugateGradientOptimizer_BracketingStep0);
      
      optimizationDataArray0[2] = (OptimizationData) nonLinearConjugateGradientOptimizer_BracketingStep0;
      assertNotNull(optimizationDataArray0[2]);
      
      nonLinearConjugateGradientOptimizer0.parseOptimizationData(optimizationDataArray0);
      assertEquals(0, nonLinearConjugateGradientOptimizer0.getMaxEvaluations());
      assertEquals(0, nonLinearConjugateGradientOptimizer0.getIterations());
      assertNull(nonLinearConjugateGradientOptimizer0.getGoalType());
      assertEquals(0, nonLinearConjugateGradientOptimizer0.getEvaluations());
      assertEquals(2147483647, nonLinearConjugateGradientOptimizer0.getMaxIterations());
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      NonLinearConjugateGradientOptimizer.IdentityPreconditioner nonLinearConjugateGradientOptimizer_IdentityPreconditioner0 = new NonLinearConjugateGradientOptimizer.IdentityPreconditioner();
      assertNotNull(nonLinearConjugateGradientOptimizer_IdentityPreconditioner0);
      
      double[] doubleArray1 = nonLinearConjugateGradientOptimizer_IdentityPreconditioner0.precondition(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test3()  throws Throwable  {
      NonLinearConjugateGradientOptimizer.Formula nonLinearConjugateGradientOptimizer_Formula0 = NonLinearConjugateGradientOptimizer.Formula.FLETCHER_REEVES;
      ConvergenceChecker<PointValuePair> convergenceChecker0 = null;
      OptimizationData[] optimizationDataArray0 = new OptimizationData[14];
      BrentSolver brentSolver0 = new BrentSolver();
      assertNotNull(brentSolver0);
      assertEquals(0, brentSolver0.getEvaluations());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, brentSolver0.getMin(), 0.01D);
      assertEquals(0.0, brentSolver0.getMax(), 0.01D);
      assertEquals(0, brentSolver0.getMaxEvaluations());
      
      NonLinearConjugateGradientOptimizer nonLinearConjugateGradientOptimizer0 = new NonLinearConjugateGradientOptimizer(nonLinearConjugateGradientOptimizer_Formula0, convergenceChecker0, (UnivariateSolver) brentSolver0);
      assertNotNull(nonLinearConjugateGradientOptimizer0);
      assertEquals(0, brentSolver0.getEvaluations());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, brentSolver0.getMin(), 0.01D);
      assertEquals(0.0, brentSolver0.getMax(), 0.01D);
      assertEquals(0, brentSolver0.getMaxEvaluations());
      assertEquals(0, nonLinearConjugateGradientOptimizer0.getIterations());
      assertNull(nonLinearConjugateGradientOptimizer0.getGoalType());
      assertEquals(2147483647, nonLinearConjugateGradientOptimizer0.getMaxIterations());
      assertEquals(0, nonLinearConjugateGradientOptimizer0.getEvaluations());
      assertEquals(0, nonLinearConjugateGradientOptimizer0.getMaxEvaluations());
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = nonLinearConjugateGradientOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
