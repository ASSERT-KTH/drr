/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:30:14 GMT 2014
 */

package org.apache.commons.math3.optim;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.TooManyEvaluationsException;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.MaxIter;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseOptimizerEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      assertEquals(0, simplexSolver0.getEvaluations());
      assertEquals(0, simplexSolver0.getMaxEvaluations());
      assertEquals(0, simplexSolver0.getIterations());
      assertEquals(2147483647, simplexSolver0.getMaxIterations());
      assertNull(simplexSolver0.getGoalType());
      assertNotNull(simplexSolver0);
      
      int int0 = simplexSolver0.getMaxIterations();
      assertEquals(0, simplexSolver0.getEvaluations());
      assertEquals(0, simplexSolver0.getMaxEvaluations());
      assertEquals(0, simplexSolver0.getIterations());
      assertEquals(2147483647, simplexSolver0.getMaxIterations());
      assertNull(simplexSolver0.getGoalType());
      assertEquals(Integer.MAX_VALUE, int0);
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[14];
      MaxIter maxIter0 = new MaxIter(int0);
      assertEquals(0, simplexSolver0.getEvaluations());
      assertEquals(0, simplexSolver0.getMaxEvaluations());
      assertEquals(0, simplexSolver0.getIterations());
      assertEquals(2147483647, simplexSolver0.getMaxIterations());
      assertNull(simplexSolver0.getGoalType());
      assertEquals(2147483647, maxIter0.getMaxIter());
      assertNotNull(maxIter0);
      
      optimizationDataArray0[4] = (OptimizationData) maxIter0;
      assertEquals(0, simplexSolver0.getEvaluations());
      assertEquals(0, simplexSolver0.getMaxEvaluations());
      assertEquals(0, simplexSolver0.getIterations());
      assertEquals(2147483647, simplexSolver0.getMaxIterations());
      assertNull(simplexSolver0.getGoalType());
      assertEquals(2147483647, maxIter0.getMaxIter());
      assertNotNull(optimizationDataArray0[4]);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = simplexSolver0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      assertEquals(0, simplexSolver0.getIterations());
      assertEquals(2147483647, simplexSolver0.getMaxIterations());
      assertEquals(0, simplexSolver0.getMaxEvaluations());
      assertNull(simplexSolver0.getGoalType());
      assertEquals(0, simplexSolver0.getEvaluations());
      assertNotNull(simplexSolver0);
      
      MaxEval maxEval0 = MaxEval.unlimited();
      assertEquals(2147483647, maxEval0.getMaxEval());
      assertNotNull(maxEval0);
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[14];
      optimizationDataArray0[7] = (OptimizationData) maxEval0;
      assertEquals(2147483647, maxEval0.getMaxEval());
      assertNotNull(optimizationDataArray0[7]);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = simplexSolver0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = 132.0;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getIterations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(2147483647, brentOptimizer0.getMaxIterations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[16];
      try {
        UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = 132.0;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(2147483647, brentOptimizer0.getMaxIterations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNotNull(brentOptimizer0);
      
      int int0 = brentOptimizer0.getIterations();
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(2147483647, brentOptimizer0.getMaxIterations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      assertEquals(2147483647, simplexSolver0.getMaxIterations());
      assertNull(simplexSolver0.getGoalType());
      assertEquals(0, simplexSolver0.getEvaluations());
      assertEquals(0, simplexSolver0.getIterations());
      assertEquals(0, simplexSolver0.getMaxEvaluations());
      assertNotNull(simplexSolver0);
      
      int int0 = simplexSolver0.getEvaluations();
      assertEquals(2147483647, simplexSolver0.getMaxIterations());
      assertNull(simplexSolver0.getGoalType());
      assertEquals(0, simplexSolver0.getEvaluations());
      assertEquals(0, simplexSolver0.getIterations());
      assertEquals(0, simplexSolver0.getMaxEvaluations());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = 132.0;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(2147483647, brentOptimizer0.getMaxIterations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = brentOptimizer0.getMaxEvaluations();
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(2147483647, brentOptimizer0.getMaxIterations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, int0);
  }
}
