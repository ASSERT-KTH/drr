/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:20:04 GMT 2014
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CMAESOptimizerEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 1803;
      boolean boolean0 = true;
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((double) int0, (double) int0, int0);
      assertNotNull(simplePointChecker0);
      assertEquals(1803.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1803.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) well44497a0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotNull(cMAESOptimizer0);
      assertEquals(1803.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1803.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[21];
      double[] doubleArray0 = new double[19];
      doubleArray0[5] = (double) int0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      assertNotNull(simpleBounds0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1803.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      assertNotNull(optimizationDataArray0[1]);
      
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      assertNotNull(initialGuess0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1803.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      optimizationDataArray0[8] = (OptimizationData) initialGuess0;
      assertNotNull(optimizationDataArray0[8]);
      
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      assertNotNull(cMAESOptimizer_Sigma0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1803.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      optimizationDataArray0[4] = (OptimizationData) cMAESOptimizer_Sigma0;
      assertNotNull(optimizationDataArray0[4]);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,803 out of [0, 0] range
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      assertNotNull(cMAESOptimizer_Sigma0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 4729;
      boolean boolean0 = true;
      ISAACRandom iSAACRandom0 = new ISAACRandom((long) int0);
      assertNotNull(iSAACRandom0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(doubleArray0[1], (double) int0);
      assertNotNull(simplePointChecker0);
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(4729.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) iSAACRandom0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(4729.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      assertNotNull(simpleBounds0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      optimizationDataArray0[0] = (OptimizationData) simpleBounds0;
      assertNotNull(optimizationDataArray0[0]);
      
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      assertNotNull(optimizationDataArray0[3]);
      
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      assertNotNull(initialGuess0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      optimizationDataArray0[4] = (OptimizationData) initialGuess0;
      assertNotNull(optimizationDataArray0[4]);
      
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(4729.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      int int1 = 2437;
      Well44497a well44497a0 = new Well44497a((long) int0);
      assertNotNull(well44497a0);
      assertFalse(int0 == int1);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((double) int0, (double) int0, int1);
      assertNotNull(simplePointChecker0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int1, (RandomGenerator) well44497a0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotNull(cMAESOptimizer0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      double[] doubleArray0 = new double[5];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      assertNotNull(cMAESOptimizer_Sigma0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      assertNotNull(optimizationDataArray0[0]);
      
      double[] doubleArray1 = new double[7];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      InitialGuess initialGuess0 = new InitialGuess(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(initialGuess0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      assertNotNull(optimizationDataArray0[1]);
      
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 7
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-539);
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -539 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = (-3632.429287);
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = double0;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = null;
      try {
        cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,632.429 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1803;
      boolean boolean0 = true;
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((double) int0, (double) int0, int0);
      assertNotNull(simplePointChecker0);
      assertEquals(1803.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1803.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) well44497a0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotNull(cMAESOptimizer0);
      assertEquals(1803.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1803.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(1803.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1803.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1803;
      boolean boolean0 = true;
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((double) int0, (double) int0, int0);
      assertNotNull(simplePointChecker0);
      assertEquals(1803.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1803.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) well44497a0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotNull(cMAESOptimizer0);
      assertEquals(1803.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1803.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getIterations());
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(1803.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1803.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getIterations());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 178;
      boolean boolean0 = false;
      Well1024a well1024a0 = new Well1024a((long) int0);
      assertNotNull(well1024a0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) well1024a0);
      assertNotNull(synchronizedRandomGenerator0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((double) int0, (double) int0, int0);
      assertNotNull(simplePointChecker0);
      assertEquals(178.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(178.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) synchronizedRandomGenerator0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(178.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(178.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertNotNull(list0);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(178.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(178.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1803;
      boolean boolean0 = true;
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((double) int0, (double) int0, int0);
      assertNotNull(simplePointChecker0);
      assertEquals(1803.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(1803.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) well44497a0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(1803.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(1803.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(1803.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(1803.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 178;
      boolean boolean0 = false;
      Well1024a well1024a0 = new Well1024a((long) int0);
      assertNotNull(well1024a0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) well1024a0);
      assertNotNull(synchronizedRandomGenerator0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((double) int0, (double) int0, int0);
      assertNotNull(simplePointChecker0);
      assertEquals(178.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(178.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) synchronizedRandomGenerator0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotNull(cMAESOptimizer0);
      assertEquals(178.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(178.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[10];
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(int0);
      assertNotNull(cMAESOptimizer_PopulationSize0);
      
      optimizationDataArray0[5] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      assertNotNull(optimizationDataArray0[5]);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
