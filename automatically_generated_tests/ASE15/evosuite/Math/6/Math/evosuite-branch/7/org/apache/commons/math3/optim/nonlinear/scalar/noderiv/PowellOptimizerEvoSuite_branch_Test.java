/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 03:24:31 GMT 2014
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.exception.TooManyEvaluationsException;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class PowellOptimizerEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 10.6;
      PowellOptimizer powellOptimizer0 = new PowellOptimizer(double0, double0);
      assertEquals(0, powellOptimizer0.getIterations());
      assertEquals(2147483647, powellOptimizer0.getMaxIterations());
      assertEquals(0, powellOptimizer0.getMaxEvaluations());
      assertNull(powellOptimizer0.getGoalType());
      assertEquals(0, powellOptimizer0.getEvaluations());
      assertNotNull(powellOptimizer0);
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[12];
      double[] doubleArray0 = new double[1];
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(simpleBounds0);
      
      optimizationDataArray0[11] = (OptimizationData) simpleBounds0;
      assertNotNull(optimizationDataArray0[11]);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = powellOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // constraint
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = 1988.738361;
      PowellOptimizer powellOptimizer0 = new PowellOptimizer(double0, double0);
      assertEquals(2147483647, powellOptimizer0.getMaxIterations());
      assertEquals(0, powellOptimizer0.getEvaluations());
      assertEquals(0, powellOptimizer0.getMaxEvaluations());
      assertNull(powellOptimizer0.getGoalType());
      assertEquals(0, powellOptimizer0.getIterations());
      assertNotNull(powellOptimizer0);
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      double[] doubleArray0 = new double[6];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(initialGuess0);
      
      optimizationDataArray0[4] = (OptimizationData) initialGuess0;
      assertNotNull(optimizationDataArray0[4]);
      
      try {
        PointValuePair pointValuePair0 = powellOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = 1555.21054;
      double double1 = (-1353.3057891016974);
      PowellOptimizer powellOptimizer0 = null;
      try {
        powellOptimizer0 = new PowellOptimizer(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,353.306 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = 0.0;
      PowellOptimizer powellOptimizer0 = null;
      try {
        powellOptimizer0 = new PowellOptimizer(double0, double0, double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = 37.73927204109959;
      PowellOptimizer powellOptimizer0 = new PowellOptimizer(double0, double0, double0, double0);
      assertNull(powellOptimizer0.getGoalType());
      assertEquals(0, powellOptimizer0.getMaxEvaluations());
      assertEquals(0, powellOptimizer0.getEvaluations());
      assertEquals(0, powellOptimizer0.getIterations());
      assertEquals(2147483647, powellOptimizer0.getMaxIterations());
      assertNotNull(powellOptimizer0);
  }
}
