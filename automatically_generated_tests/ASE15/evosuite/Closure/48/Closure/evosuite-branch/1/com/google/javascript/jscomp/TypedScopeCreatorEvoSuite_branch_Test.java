/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:11:14 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class TypedScopeCreatorEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      compiler0.initCompilerOptionsIfTesting();
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertNotNull(typedScopeCreator0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      int int0 = 118;
      String string0 = "\"xyb9JTy";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(118, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotNull(node1);
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNot());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isInc());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isGetElem());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.hasOneChild());
      assertEquals(true, node1.isVar());
      assertEquals(118, node1.getType());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isGetProp());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(118, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      node1.addChildToBack(node0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isInc());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isGetElem());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isCatch());
      assertEquals(true, node1.isVar());
      assertEquals(118, node1.getType());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getLength());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isGetProp());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(118, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotNull(scope0);
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isInc());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isGetElem());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isCatch());
      assertEquals(true, node1.isVar());
      assertEquals(118, node1.getType());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getLength());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isGetProp());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isAssign());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, scope0.isLocal());
      assertEquals(32, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(118, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
  }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
//       assertNotNull(lightweightMessageFormatter0);
//       
//       Logger logger0 = Logger.getGlobal();
//       assertNotNull(logger0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) lightweightMessageFormatter0, logger0);
//       assertNotNull(loggerErrorManager0);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertNotNull(compiler0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       
//       String string0 = "java.lang.Object";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAdd());
//       assertEquals(true, node0.isScript());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVar());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isNumber());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isOr());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(" [testcode] ", node0.getSourceFileName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       
//       TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
//       assertNotNull(typedScopeCreator0);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       
//       Scope scope0 = new Scope(node0, compiler0);
//       assertNotNull(scope0);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAdd());
//       assertEquals(true, node0.isScript());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVar());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isNumber());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isOr());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(" [testcode] ", node0.getSourceFileName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       
//       typedScopeCreator0.patchGlobalScope(scope0, node0);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAdd());
//       assertEquals(true, node0.isScript());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVar());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isNumber());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isOr());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(" [testcode] ", node0.getSourceFileName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//   }
}
