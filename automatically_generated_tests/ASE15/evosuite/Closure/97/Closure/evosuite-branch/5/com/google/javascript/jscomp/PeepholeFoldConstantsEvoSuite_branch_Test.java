/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:34:52 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.DefinitionsRemover;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

 
public class PeepholeFoldConstantsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 37;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(37, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(37, node0.getCharno());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
      assertEquals(37, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(37, node0.getCharno());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(37, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(37, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(37, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
  }

  @Test
  public void test01()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 32;
      String string0 = "Jw2)";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(32, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(32, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(32, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
      assertEquals(32, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(32, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(32, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(32, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(32, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(32, node1.getLineno());
  }

  @Test
  public void test02()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = (-21);
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-21, node0.getType());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-21, node0.getType());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(-21, nodeArray0[0].getType());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(-21, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getCharno());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(-21, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(-21, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(-1, nodeArray0[1].getCharno());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(-1, nodeArray0[1].getLineno());
      assertEquals(0, nodeArray0[1].getChildCount());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(39, node2.getType());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(39, node2.getType());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(3, node3.getChildCount());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.hasOneChild());
      assertEquals(-21, node3.getType());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isVarArgs());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isOptionalArg());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node4, node1);
      assertNotSame(node4, node0);
      assertSame(node4, node3);
      assertNotSame(node4, node2);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertSame(node3, node4);
      assertNotSame(node3, node1);
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node4);
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(false, node4.isQuotedString());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(true, node4.hasChildren());
      assertEquals(-21, node4.getType());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(-1, node4.getCharno());
      assertEquals(3, node4.getChildCount());
      assertEquals(-1, node4.getLineno());
      assertEquals(false, node4.isVarArgs());
      assertEquals(false, node4.hasOneChild());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(3, node3.getChildCount());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.hasOneChild());
      assertEquals(-21, node3.getType());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isVarArgs());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isOptionalArg());
  }

  @Test
  public void test03()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 90;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(90, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(90, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(90, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(90, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(90, node1.getLineno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(90, node1.getType());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(90, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(90, node1.getLineno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(90, node1.getType());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(90, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(90, nodeArray0[1].getCharno());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(90, nodeArray0[1].getLineno());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(false, node2.isQuotedString());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.hasOneChild());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(false, node2.isQuotedString());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].isQuotedString());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(90, node3.getType());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isQuotedString());
      assertEquals(90, node3.getCharno());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(90, node3.getLineno());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isVarArgs());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertSame(node3, node4);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertNotSame(node4, node1);
      assertSame(node4, node3);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertNotNull(node4);
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(90, node3.getType());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isQuotedString());
      assertEquals(90, node3.getCharno());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(90, node3.getLineno());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node4.isQuotedString());
      assertEquals(false, node4.isVarArgs());
      assertEquals(false, node4.hasOneChild());
      assertEquals(90, node4.getCharno());
      assertEquals(90, node4.getLineno());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(true, node4.hasChildren());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(90, node4.getType());
      assertEquals(3, node4.getChildCount());
  }

  @Test
  public void test04()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 72;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(72, node0.getType());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(72, nodeArray0[0].getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(72, node0.getType());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(72, node1.getLineno());
      assertEquals(72, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(72, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(72, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(72, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(72, nodeArray0[1].getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(72, node1.getLineno());
      assertEquals(72, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(72, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(false, node2.isQualifiedName());
      assertEquals(0, node2.getChildCount());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(0, node2.getChildCount());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertEquals(72, node3.getLineno());
      assertEquals(3, node3.getChildCount());
      assertEquals(72, node3.getCharno());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(72, node3.getType());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.hasOneChild());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node4, node2);
      assertSame(node4, node3);
      assertNotSame(node4, node1);
      assertNotSame(node4, node0);
      assertSame(node3, node4);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node4);
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(72, node4.getLineno());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(false, node4.isQuotedString());
      assertEquals(72, node4.getType());
      assertEquals(true, node4.hasChildren());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(72, node4.getCharno());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(3, node4.getChildCount());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(false, node4.hasOneChild());
      assertEquals(false, node4.isVarArgs());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(72, node3.getLineno());
      assertEquals(3, node3.getChildCount());
      assertEquals(72, node3.getCharno());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(72, node3.getType());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.hasOneChild());
  }

  @Test
  public void test05()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 62;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(62, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(62, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(62, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(62, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(62, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(62, node1.getType());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(62, nodeArray0[1].getCharno());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(62, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(62, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(62, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(62, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(62, node1.getType());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isUnscopedQualifiedName());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(-1, nodeArray0[2].getCharno());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node2);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(62, node3.getCharno());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(62, node3.getType());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isVarArgs());
      assertEquals(3, node3.getChildCount());
      assertEquals(62, node3.getLineno());
      assertEquals(true, node3.hasChildren());
      assertEquals(true, node3.hasMoreThanOneChild());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertSame(node4, node3);
      assertNotSame(node4, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertSame(node3, node4);
      assertNotSame(node3, node2);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node4);
      assertEquals(62, node4.getCharno());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(false, node4.hasOneChild());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(62, node4.getType());
      assertEquals(3, node4.getChildCount());
      assertEquals(false, node4.isQuotedString());
      assertEquals(false, node4.isVarArgs());
      assertEquals(62, node4.getLineno());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(true, node4.hasChildren());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(62, node3.getCharno());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(62, node3.getType());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isVarArgs());
      assertEquals(3, node3.getChildCount());
      assertEquals(62, node3.getLineno());
      assertEquals(true, node3.hasChildren());
      assertEquals(true, node3.hasMoreThanOneChild());
  }

  @Test
  public void test06()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 56;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(56, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(56, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(56, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(56, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(56, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(56, node1.getType());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(56, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(56, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(56, node1.getType());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(56, nodeArray0[1].getCharno());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(56, nodeArray0[1].getType());
      assertEquals(56, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].isQuotedString());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(0, node2.getChildCount());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(0, node2.getChildCount());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertEquals(false, node3.isOptionalArg());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQuotedString());
      assertEquals(56, node3.getCharno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(56, node3.getLineno());
      assertEquals(56, node3.getType());
      assertEquals(3, node3.getChildCount());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isQualifiedName());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertSame(node3, node4);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node4, node2);
      assertSame(node4, node3);
      assertNotSame(node4, node1);
      assertNotSame(node4, node0);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertNotNull(node4);
      assertEquals(false, node3.isOptionalArg());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQuotedString());
      assertEquals(56, node3.getCharno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(56, node3.getLineno());
      assertEquals(56, node3.getType());
      assertEquals(3, node3.getChildCount());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(56, node4.getCharno());
      assertEquals(3, node4.getChildCount());
      assertEquals(false, node4.hasOneChild());
      assertEquals(56, node4.getLineno());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(true, node4.hasChildren());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(56, node4.getType());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(false, node4.isQuotedString());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(false, node4.isVarArgs());
      assertEquals(false, node4.isUnscopedQualifiedName());
  }

  @Test
  public void test07()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 53;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(53, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(53, nodeArray0[0].getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(53, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(53, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(53, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(53, node1.getLineno());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(53, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(53, nodeArray0[1].getCharno());
      assertEquals(53, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(53, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(53, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(53, node1.getLineno());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(39, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(39, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertEquals(53, node3.getLineno());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.hasOneChild());
      assertEquals(53, node3.getCharno());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(53, node3.getType());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node4, node2);
      assertSame(node4, node3);
      assertNotSame(node4, node1);
      assertNotSame(node4, node0);
      assertSame(node3, node4);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node4);
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(53, node4.getCharno());
      assertEquals(false, node4.isQuotedString());
      assertEquals(true, node4.hasChildren());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(false, node4.isVarArgs());
      assertEquals(53, node4.getType());
      assertEquals(3, node4.getChildCount());
      assertEquals(false, node4.hasOneChild());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(53, node4.getLineno());
      assertEquals(53, node3.getLineno());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.hasOneChild());
      assertEquals(53, node3.getCharno());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(53, node3.getType());
  }

  @Test
  public void test08()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 45;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(45, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(45, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(45, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(45, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(45, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(45, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(45, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(45, nodeArray0[1].getCharno());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(45, nodeArray0[1].getLineno());
      assertEquals(45, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(45, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(45, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getCharno());
      assertEquals(0, node2.getChildCount());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getCharno());
      assertEquals(0, node2.getChildCount());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node2);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertEquals(45, node3.getType());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(45, node3.getLineno());
      assertEquals(45, node3.getCharno());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isSyntheticBlock());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node4, node2);
      assertNotSame(node4, node1);
      assertNotSame(node4, node0);
      assertSame(node4, node3);
      assertNotSame(node3, node0);
      assertSame(node3, node4);
      assertNotSame(node3, node1);
      assertNotSame(node3, node2);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node4);
      assertEquals(45, node4.getCharno());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(3, node4.getChildCount());
      assertEquals(false, node4.isQuotedString());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(45, node4.getLineno());
      assertEquals(45, node4.getType());
      assertEquals(false, node4.hasOneChild());
      assertEquals(false, node4.isVarArgs());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(true, node4.hasChildren());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(45, node3.getType());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(45, node3.getLineno());
      assertEquals(45, node3.getCharno());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isSyntheticBlock());
  }

  @Test
  public void test09()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 44;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(44, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(44, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(44, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(44, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(44, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(44, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(44, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(44, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(44, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(44, nodeArray0[1].getCharno());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      
      nodeArray0[0] = node2;
      assertNotNull(nodeArray0[0]);
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(39, nodeArray0[0].getType());
      
      nodeArray0[2] = node0;
      assertNotNull(nodeArray0[2]);
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(44, nodeArray0[2].getType());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(44, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertEquals(44, node3.getCharno());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(44, node3.getLineno());
      assertEquals(44, node3.getType());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isOptionalArg());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node4);
      assertNotSame(node3, node2);
      assertNotSame(node4, node0);
      assertNotSame(node4, node2);
      assertNotSame(node4, node1);
      assertSame(node4, node3);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertNotNull(node4);
      assertEquals(44, node3.getCharno());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(44, node3.getLineno());
      assertEquals(44, node3.getType());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node4.isQuotedString());
      assertEquals(false, node4.hasOneChild());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(44, node4.getCharno());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(3, node4.getChildCount());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(false, node4.isVarArgs());
      assertEquals(44, node4.getType());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(true, node4.hasChildren());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(44, node4.getLineno());
  }

  @Test
  public void test10()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 38;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(38, nodeArray0[0].getType());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(true, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(true, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(true, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(38, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(38, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(38, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(38, nodeArray0[1].getCharno());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(38, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(38, nodeArray0[1].getType());
      assertEquals(true, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(true, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(38, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(38, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(38, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.hasChildren());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.hasChildren());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(38, node3.getType());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(38, node3.getCharno());
      assertEquals(true, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(true, node3.hasChildren());
      assertEquals(38, node3.getLineno());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.hasOneChild());
      assertEquals(true, node3.isQualifiedName());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertSame(node3, node4);
      assertNotSame(node3, node1);
      assertSame(node4, node3);
      assertNotSame(node4, node2);
      assertNotSame(node4, node1);
      assertNotSame(node4, node0);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertNotNull(node4);
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(38, node3.getType());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(38, node3.getCharno());
      assertEquals(true, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(true, node3.hasChildren());
      assertEquals(38, node3.getLineno());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.hasOneChild());
      assertEquals(true, node3.isQualifiedName());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(true, node4.isUnscopedQualifiedName());
      assertEquals(false, node4.isVarArgs());
      assertEquals(true, node4.hasChildren());
      assertEquals(38, node4.getType());
      assertEquals(true, node4.isQualifiedName());
      assertEquals(false, node4.isQuotedString());
      assertEquals(false, node4.hasOneChild());
      assertEquals(38, node4.getLineno());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(3, node4.getChildCount());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(38, node4.getCharno());
  }

  @Test
  public void test11()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 35;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(35, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(35, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(35, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(35, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(35, node1.getType());
      assertEquals(35, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(35, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(35, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(35, nodeArray0[1].getCharno());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(35, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(35, node1.getType());
      assertEquals(35, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.hasChildren());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, nodeArray0[2].hasChildren());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(35, node3.getCharno());
      assertEquals(35, node3.getType());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(35, node3.getLineno());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isVarArgs());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(3, node3.getChildCount());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertSame(node3, node4);
      assertNotSame(node3, node1);
      assertSame(node4, node3);
      assertNotSame(node4, node1);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertNotNull(node4);
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(35, node3.getCharno());
      assertEquals(35, node3.getType());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(35, node3.getLineno());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isVarArgs());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(35, node4.getCharno());
      assertEquals(false, node4.isQuotedString());
      assertEquals(false, node4.hasOneChild());
      assertEquals(35, node4.getLineno());
      assertEquals(true, node4.hasChildren());
      assertEquals(35, node4.getType());
      assertEquals(false, node4.isVarArgs());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(3, node4.getChildCount());
  }

  @Test
  public void test12()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 28;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(28, node0.getType());
      assertEquals(false, node0.isVarArgs());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(28, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(28, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(-1, nodeArray0[0].getCharno());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(28, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(28, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(28, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(28, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(28, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(28, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(28, nodeArray0[1].getLineno());
      assertEquals(28, nodeArray0[1].getCharno());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(28, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(0, nodeArray0[1].getChildCount());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.hasChildren());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQuotedString());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.hasChildren());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(28, node3.getType());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(28, node3.getCharno());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(true, node3.hasChildren());
      assertEquals(28, node3.getLineno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node4, node2);
      assertNotSame(node4, node1);
      assertNotSame(node4, node0);
      assertSame(node4, node3);
      assertSame(node3, node4);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node4);
      assertEquals(28, node4.getCharno());
      assertEquals(28, node4.getLineno());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(true, node4.hasChildren());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(false, node4.isVarArgs());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(28, node4.getType());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(false, node4.isQuotedString());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(3, node4.getChildCount());
      assertEquals(false, node4.hasOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(28, node3.getType());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(28, node3.getCharno());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(true, node3.hasChildren());
      assertEquals(28, node3.getLineno());
      assertEquals(false, node3.isUnscopedQualifiedName());
  }

  @Test
  public void test13()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 25;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(25, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(25, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(25, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(25, node1.getType());
      assertEquals(25, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(25, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasChildren());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(25, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(25, nodeArray0[1].getCharno());
      assertEquals(25, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(25, node1.getType());
      assertEquals(25, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(25, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasChildren());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(39, node2.getType());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(39, node2.getType());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(25, node3.getLineno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(25, node3.getCharno());
      assertEquals(25, node3.getType());
      assertEquals(false, node3.isVarArgs());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node4, node0);
      assertNotSame(node4, node1);
      assertSame(node4, node3);
      assertNotSame(node4, node2);
      assertSame(node3, node4);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node4);
      assertEquals(25, node4.getLineno());
      assertEquals(25, node4.getType());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(false, node4.hasOneChild());
      assertEquals(3, node4.getChildCount());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(true, node4.hasChildren());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(false, node4.isQuotedString());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(25, node4.getCharno());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(false, node4.isVarArgs());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(25, node3.getLineno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(25, node3.getCharno());
      assertEquals(25, node3.getType());
      assertEquals(false, node3.isVarArgs());
  }

  @Test
  public void test14()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 24;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(24, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(24, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(24, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(24, node1.getType());
      assertEquals(24, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasChildren());
      assertEquals(24, node1.getCharno());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(24, nodeArray0[1].getLineno());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(24, nodeArray0[1].getCharno());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(24, nodeArray0[1].getType());
      assertEquals(24, node1.getType());
      assertEquals(24, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasChildren());
      assertEquals(24, node1.getCharno());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.hasOneChild());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.hasOneChild());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(24, node3.getCharno());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(24, node3.getType());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.hasOneChild());
      assertEquals(24, node3.getLineno());
      assertEquals(true, node3.hasChildren());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(3, node3.getChildCount());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertSame(node3, node4);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertSame(node4, node3);
      assertNotSame(node4, node2);
      assertNotSame(node4, node1);
      assertNotSame(node4, node0);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertNotNull(node4);
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(24, node3.getCharno());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(24, node3.getType());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.hasOneChild());
      assertEquals(24, node3.getLineno());
      assertEquals(true, node3.hasChildren());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(3, node3.getChildCount());
      assertEquals(true, node4.hasChildren());
      assertEquals(false, node4.isVarArgs());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(3, node4.getChildCount());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(24, node4.getLineno());
      assertEquals(24, node4.getCharno());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(24, node4.getType());
      assertEquals(false, node4.isQuotedString());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(false, node4.hasOneChild());
  }

  @Test
  public void test15()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 21;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(21, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(21, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(21, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(21, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(21, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(21, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(21, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(21, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(21, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(21, nodeArray0[1].getCharno());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(21, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(21, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].isVarArgs());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(0, node2.getChildCount());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getLineno());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(0, node2.getChildCount());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(-1, nodeArray0[2].getCharno());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(3, node3.getChildCount());
      assertEquals(21, node3.getCharno());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(21, node3.getLineno());
      assertEquals(21, node3.getType());
      assertEquals(true, node3.hasMoreThanOneChild());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node4, node0);
      assertNotSame(node4, node2);
      assertSame(node4, node3);
      assertNotSame(node4, node1);
      assertNotSame(node3, node1);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertSame(node3, node4);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node4);
      assertEquals(3, node4.getChildCount());
      assertEquals(21, node4.getType());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(false, node4.hasOneChild());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(21, node4.getLineno());
      assertEquals(false, node4.isQuotedString());
      assertEquals(true, node4.hasChildren());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(21, node4.getCharno());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(false, node4.isVarArgs());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(3, node3.getChildCount());
      assertEquals(21, node3.getCharno());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(21, node3.getLineno());
      assertEquals(21, node3.getType());
      assertEquals(true, node3.hasMoreThanOneChild());
  }

  @Test
  public void test16()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 19;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(19, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(19, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(19, nodeArray0[0].getType());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(19, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(19, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(19, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(19, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(19, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(19, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(19, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(19, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(19, nodeArray0[1].getCharno());
      assertEquals(false, nodeArray0[1].hasOneChild());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(19, node3.getType());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(19, node3.getLineno());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(19, node3.getCharno());
      assertEquals(false, node3.wasEmptyNode());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertSame(node4, node3);
      assertNotSame(node4, node1);
      assertSame(node3, node4);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node4);
      assertEquals(false, node4.isQuotedString());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(3, node4.getChildCount());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(19, node4.getLineno());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(19, node4.getType());
      assertEquals(19, node4.getCharno());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(false, node4.isVarArgs());
      assertEquals(true, node4.hasChildren());
      assertEquals(false, node4.hasOneChild());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(19, node3.getType());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(19, node3.getLineno());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(19, node3.getCharno());
      assertEquals(false, node3.wasEmptyNode());
  }

  @Test
  public void test17()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 14;
      String string0 = "JSC_INVALID_ARGUMENT_ERROR";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(14, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      
      DefinitionsRemover.ObjectLiteralPropertyDefinition definitionsRemover_ObjectLiteralPropertyDefinition0 = new DefinitionsRemover.ObjectLiteralPropertyDefinition(node0, node0, node0);
      assertNotNull(definitionsRemover_ObjectLiteralPropertyDefinition0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(14, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      
      Node node1 = definitionsRemover_ObjectLiteralPropertyDefinition0.getLValue();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(14, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(33, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(2, node1.getChildCount());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getCharno());
      
      Node[] nodeArray0 = new Node[3];
      Node node2 = new Node(int0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(14, node2.getType());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      
      nodeArray0[0] = node1;
      assertNotNull(nodeArray0[0]);
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(33, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(true, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(2, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(true, nodeArray0[0].hasChildren());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(14, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(33, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(2, node1.getChildCount());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getCharno());
      
      nodeArray0[1] = node0;
      assertNotNull(nodeArray0[1]);
      assertEquals(14, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(-1, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(-1, nodeArray0[1].getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(14, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(14, node2.getType());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(14, nodeArray0[2].getType());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.hasOneChild());
      assertEquals(14, node3.getCharno());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(14, node3.getType());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(true, node3.hasChildren());
      assertEquals(14, node3.getLineno());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node4, node0);
      assertNotSame(node4, node2);
      assertSame(node4, node3);
      assertNotSame(node4, node1);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertSame(node3, node4);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node4);
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(true, node4.hasChildren());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(false, node4.isQuotedString());
      assertEquals(false, node4.hasOneChild());
      assertEquals(14, node4.getCharno());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(false, node4.isVarArgs());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(14, node4.getType());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(3, node4.getChildCount());
      assertEquals(14, node4.getLineno());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(3, node3.getChildCount());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.hasOneChild());
      assertEquals(14, node3.getCharno());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(14, node3.getType());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(true, node3.hasChildren());
      assertEquals(14, node3.getLineno());
  }

  @Test
  public void test18()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 11;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(11, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(11, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(11, node1.getType());
      assertEquals(11, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(11, nodeArray0[1].getType());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(11, nodeArray0[1].getCharno());
      assertEquals(11, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(11, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(11, node1.getType());
      assertEquals(11, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isOptionalArg());
      
      nodeArray0[0] = node2;
      assertNotNull(nodeArray0[0]);
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(39, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isOptionalArg());
      
      nodeArray0[2] = node0;
      assertNotNull(nodeArray0[2]);
      assertEquals(11, nodeArray0[2].getType());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(11, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(11, node3.getLineno());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(3, node3.getChildCount());
      assertEquals(11, node3.getType());
      assertEquals(11, node3.getCharno());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQuotedString());
      assertEquals(true, node3.hasMoreThanOneChild());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotSame(node4, node2);
      assertNotSame(node4, node1);
      assertNotSame(node4, node0);
      assertSame(node4, node3);
      assertNotSame(node3, node1);
      assertSame(node3, node4);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node4);
      assertEquals(3, node4.getChildCount());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(11, node4.getType());
      assertEquals(false, node4.isQuotedString());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(11, node4.getCharno());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(true, node4.hasChildren());
      assertEquals(11, node4.getLineno());
      assertEquals(false, node4.hasOneChild());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(false, node4.isVarArgs());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(11, node3.getLineno());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(3, node3.getChildCount());
      assertEquals(11, node3.getType());
      assertEquals(11, node3.getCharno());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQuotedString());
      assertEquals(true, node3.hasMoreThanOneChild());
  }

  @Test
  public void test19()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 9;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(9, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(9, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(9, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(-1, nodeArray0[0].getCharno());
      
      Node node1 = new Node(int0, int0, int0);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(0, node1.getChildCount());
      assertEquals(9, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(9, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(9, node1.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(0, node1.getChildCount());
      assertEquals(9, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(9, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(9, node1.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(9, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(9, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(9, nodeArray0[1].getCharno());
      assertEquals(0, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(false, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      
      Node node2 = Node.newNumber((double) int0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(39, node2.getType());
      
      nodeArray0[2] = node2;
      assertNotNull(nodeArray0[2]);
      assertEquals(false, nodeArray0[2].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[2].hasOneChild());
      assertEquals(0, nodeArray0[2].getChildCount());
      assertEquals(false, nodeArray0[2].isVarArgs());
      assertEquals(39, nodeArray0[2].getType());
      assertEquals(-1, nodeArray0[2].getCharno());
      assertEquals(-1, nodeArray0[2].getLineno());
      assertEquals(false, nodeArray0[2].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[2].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[2].hasChildren());
      assertEquals(false, nodeArray0[2].isQuotedString());
      assertEquals(false, nodeArray0[2].isOptionalArg());
      assertEquals(false, nodeArray0[2].isSyntheticBlock());
      assertEquals(false, nodeArray0[2].wasEmptyNode());
      assertEquals(false, nodeArray0[2].isQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(39, node2.getType());
      
      Node node3 = new Node(int0, nodeArray0, int0, int0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(3, node3.getChildCount());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.hasOneChild());
      assertEquals(9, node3.getCharno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(9, node3.getLineno());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isQuotedString());
      assertEquals(9, node3.getType());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertSame(node4, node3);
      assertNotSame(node4, node0);
      assertNotSame(node4, node2);
      assertNotSame(node4, node1);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node4);
      assertNotSame(node3, node2);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node4);
      assertEquals(false, node4.isVarArgs());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(9, node4.getCharno());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(3, node4.getChildCount());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(false, node4.isQuotedString());
      assertEquals(9, node4.getType());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(false, node4.hasOneChild());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(true, node4.hasChildren());
      assertEquals(9, node4.getLineno());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(3, node3.getChildCount());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.hasOneChild());
      assertEquals(9, node3.getCharno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(9, node3.getLineno());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isQuotedString());
      assertEquals(9, node3.getType());
  }

  @Test
  public void test20()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 37;
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      Node node1 = new Node(int0, node0);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotNull(node1);
      assertEquals(1, node1.getChildCount());
      assertEquals(37, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(1, node1.getChildCount());
      assertEquals(37, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(37, node2.getType());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasChildren());
  }

  @Test
  public void test21()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 35;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(35, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(35, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(35, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(nodeArray0[0]);
      assertSame(node1, node0);
      assertNotNull(node1);
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(35, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
  }

  @Test
  public void test22()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 34;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(34, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(34, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(34, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
      assertEquals(34, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(34, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(34, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(34, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(34, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(34, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
  }

  @Test
  public void test23()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      DefinitionsRemover.ObjectLiteralPropertyDefinition definitionsRemover_ObjectLiteralPropertyDefinition0 = new DefinitionsRemover.ObjectLiteralPropertyDefinition(node0, node0, node0);
      assertNotNull(definitionsRemover_ObjectLiteralPropertyDefinition0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node1 = definitionsRemover_ObjectLiteralPropertyDefinition0.getLValue();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2, node1.getChildCount());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(33, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node2.isQuotedString());
      assertEquals(33, node2.getType());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(2, node1.getChildCount());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(33, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
  }

  @Test
  public void test24()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 32;
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      
      Node node1 = new Node(int0, node0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(32, node1.getType());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 30;
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      
      Node node1 = new Node(int0, node0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(30, node1.getType());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasOneChild());
      assertEquals(1, node2.getChildCount());
      assertEquals(30, node2.getType());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(30, node1.getType());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
  }

  @Test
  public void test26()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 29;
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      
      Node node1 = new Node(int0, node0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getCharno());
      assertEquals(29, node1.getType());
      assertEquals(true, node1.hasChildren());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 27;
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      
      Node node1 = new Node(int0, node0);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotNull(node1);
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertEquals(27, node1.getType());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //@Test
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = null;
      JSType[] jSTypeArray0 = new JSType[5];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, boolean0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(5, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = functionType0.getParametersNode();
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(5, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(5, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(83, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getCharno());
      assertEquals(5, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(5, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(5, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }
}
